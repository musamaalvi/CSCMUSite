10001#Our First Program|MainHeading
100011#To start, let's draw a rectangle. Press the run button to run this Python code:|Paragraph
110031#|InlineContainer
100011#You just ran a Python program! Now, let's edit the program. In the code below, change some of the numbers and run the code a few times. See how the rectangle changes. If the code stops working, no problem! Just press the reset button to start over and try again!|Paragraph
110032#|InlineContainer
end
10001#The Canvas|MainHeading
100011#To understand what is going on, we first have to talk about the canvas. In this course, all drawing is done on a canvas. The canvas is made up of tiny colored points, or pixels. We use (x,y) coordinates to talk about pixels on the canvas, like so:|Paragraph
100011#- (0, 0) is the left-top corner of the canvas (not the middle!).|Paragraph
100011#- As x increases, you head right.|Paragraph
100011#- As y increases, you head down, not up!|Paragraph
100011#- Our canvas is a 400x400 square, so (200, 200) is the middle of the canvas, and (400, 400) is the right-bottom corner.|Paragraph
100131# |CheckPoint
end
10001#Drawing Rectangles|MainHeading
100011#Ok, let's get to the details. Here is the Python code from above:|Paragraph
100011#Rect(10, 20, 30, 40)|Box
100011#We use Rect to draw a rectangle. We provide 4 values after that: left, top, width, and height. So this draws a rectangle with its left-top corner at (10, 20), a width of 30, and a height of 40.|Paragraph
100011# where is the right-bottom corner of the rectangle?|the left is at 10, and the width is 30, so the right is at (10+30), or 40. Similarly, the top is at 20, and the height is 40, so the bottom is at (20+40), or 60. Thus, the right-bottom is at (40, 60). |Alert
100132# |CheckPoint
100133# |CheckPoint
end
10001#The Autograder|MainHeading
100011#An important part of this course is the autograder. It tells you when you have successfully completed an exercise. Let's try it out with our first exercise! Read the instructions below. Then, edit the code, and run it. When you think you are done, click on the autograde button (the white check in the gray circle) to see if you are right. If you are not right, edit the code, and try again.|Paragraph
100134# |CheckPoint
end
10001#Errors|MainHeading
100011#Python is very picky. Here are some rules to follow:|Paragraph
100011#1. Case matters, so Rect is not the same as rect.|Paragraph
100011#2. A command must have the right number of values after it. For Rect, that's left, top, width, and height. These values are called arguments. Here are some rules about arguments:|Paragraph
100011#- They must be in the right order.|Paragraph
100011#- They must be inside parenthesis.|Paragraph
100011#- They must be separated by commas.|Paragraph
100011#If any of these rules are not right, you have an error, and your code will not run correctly until you fix the error.|Paragraph
100135# |CheckPoint
100136# |CheckPoint
end
10001#Comments|MainHeading
100011#Did you notice some of the code examples above included # signs followed by English text? These are called comments. You can add comments to any line of your code. Anything from the # sign to the end of that line is a comment. Python ignores comments. They are only for people, not Python. So why use comments? To make your code easier for you and for others to understand!|Paragraph
end
10001#Practice|MainHeading
100011#Ok, that's it! Now let's do some exercises to practice what we just learned.|Paragraph
end