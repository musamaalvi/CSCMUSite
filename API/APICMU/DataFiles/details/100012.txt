10001#Fill|MainHeading
100011#To change a shape's color, use the optional fill argument, like so::|Paragraph
100012# Rect(50, 50, 100, 100, fill='green')|InlineContainer
100011#Run the code, and you should see a green rectangle. Great! Now edit the code to try to make the rectangle orange. Did it work? When using fill, here are some rules to follow: Include fill after the required arguments -- left, top, width, and height. Always place an equals sign (=) before the color name. Put quotes around the color name. You can use either single quotes, like 'blue', or double quotes, like "blue". As we saw before, if any of these rules are not right, you have a syntax error and the code will not run until you fix the error|Paragraph
12312# |CheckPoint
12312# |CheckPoint
end
10001#Drawing Order|MainHeading
100011#We can now see that the order in which we draw shapes matters. Each new shape is drawn on top of all the previous shapes. For example:|Paragraph
100011# Rect(0, 0, 100, 100, fill='orange') |InlineContainer
123123# Look carefully at the canvas. See how the lime rectangle is in front of, or on top of, the orange rectangle. Ok, now let's try it the other way: |Paragraph
12312# |CheckPoint
end
10001#Borders|MainHeading
100011#Rectangles may have an optional border, like so::|Paragraph
100011# Rect(50, 50, 100, 100, fill='yellow', border='blue') |InlineContainer
123123# Run the code to see a yellow rectangle with a thin blue border around it. Then, edit the code to get a blue rectangle with a yellow frame around it. Success? By default, borders are 2 pixels wide. You can change that with borderWidth: |Paragraph
100011# Rect(50, 50, 100, 100, fill='yellow', border='blue', borderWidth=12) |InlineContainer
100011#Run the code to see a yellow rectangle with a 12-pixel-thick blue border around it.|Paragraph
12312# |CheckPoint
end
10001#Empty Fills|MainHeading
100011#We can draw a rectangle with only a border color, and without any fill color. To do this, set the fill to None, like so:|Paragraph
100011# Rect(50, 50, 100, 100, fill=None, border='blue', borderWidth=6) |InlineContainer
100011#This can become clearer if we include another rectangle:|Paragraph
100011# Rect(50, 50, 100, 100, fill=None, border='blue', borderWidth=6)|InlineContainer
100011#Run this code. See how the blue-bordered rectangle has no fill. Here is one more example, to make it clear that a fill of None is not the same as a white fill:|Paragraph
end
10001#Default values|MainHeading
100011#We just learned that fill, border, and borderWidth are optional arguments. If we do not supply an optional argument, the shape uses the default value for that argument. The default fill is 'black'. The default border is None. And the default borderWidth is 2.|Paragraph
100011# When does the Inspector include the borderWidth in its feedback? You may have to run some code from above a few times to answer this question.| When the borderWidth is any value except the default value of 2.  |Alert
end
10001#The Inspector|MainHeading
100011#The Inspector is a great way to get useful info about shapes, but it only gives as much info as you need. For example, it tells you the colors of a shape, but it does not say whether the colors are for the fill or for the border. This is left for you to figure out! So the Inspector is super helpful, but it definitely leaves some important problem-solving for you.|Paragraph
end
10001#Practice|MainHeading
100011#That's it for fills and borders! So now let's try some exercises to practice.|Paragraph
end