// brython.js brython.info
// version [3, 7, 0, 'final', 0]
// implementation [3, 7, 1, 'dev', 0]
// version compiled from commented, indented source files at
// github.com/brython-dev/brython
!function(r,n){"use strict";function t(r,n,t,e){for(t=void 0!==t?t:0,e=void 0!==e?e:r.length;e>t;){var c=e+t>>1;r[c]>n?e=c:t=c+1}return t}function e(r){if(35>r)return r;var n=t(K,r);return L[n]}function c(r){var n=t(M,r);return N[n]}function u(r){switch(r.charCodeAt(0)){case 9:case 10:case 11:case 12:case 13:case 28:case 29:case 30:case 31:case 32:case 133:case 160:case 5760:case 8192:case 8193:case 8194:case 8195:case 8196:case 8197:case 8198:case 8199:case 8200:case 8201:case 8202:case 8232:case 8233:case 8239:case 8287:case 12288:return!0}return!1}function a(r){var n;return r>=1114112?n=0:(n=e(r>>J),n=c((n<<J)+(r&(1<<J)-1))),y[n]}function i(r,n){for(var t="",e=0;n>e;e++)t+=String.fromCharCode(I[r+e]);return t}function o(r){var n=r.charCodeAt(0),t=a(n);return 0!=(t[H]&T)}function f(r){var n=r.charCodeAt(0),t=a(n);return 0!=(t[H]&V)}function h(r){var n=r.charCodeAt(0),t=a(n);return 0!=(t[H]&W)}function v(r){var n=r.charCodeAt(0),t=a(n);return t[H]&P?t[F]:-1}function s(r){return v(r)<0?0:1}function d(r){var n=r.charCodeAt(0),t=a(n);return t[H]&Q?t[G]:-1}function A(r){return d(r)<0?0:1}function l(r){var n=r.charCodeAt(0),t=a(n);return 0!=(t[H]&Y)}function C(r){var n=r.charCodeAt(0),t=a(n);return 0!=(t[H]&X)}function g(r){var n=r.charCodeAt(0),t=a(n);return 0!=(t[H]&R)}function p(r){var n=r.charCodeAt(0),t=a(n);return 0!=(t[H]&U)}function m(r){var n=r.charCodeAt(0),t=a(n);return t[H]&rn?i(65535&t[D],t[D]>>24):String.fromCharCode(n+t[D])}function S(r){var n=r.charCodeAt(0),t=a(n);return t[H]&rn?i(65535&t[E],t[E]>>24):String.fromCharCode(n+t[E])}function w(r){var n=r.charCodeAt(0),t=a(n);return t[H]&rn?i(65535&t[B],t[B]>>24):String.fromCharCode(n+t[B])}function b(r){var n=r.charCodeAt(0),t=a(n);if(t[H]&rn&&t[D]>>20&7){var e=(65535&t[D])+(t[D]>>24),c=t[D]>>20&7;return i(e,c)}return m(r)}function z(r){var n=r.charCodeAt(0),t=a(n);return 0!=(t[H]&$)}function _(r){var n=r.charCodeAt(0),t=a(n);return 0!=(t[H]&Z)}function j(r){var n=r.charCodeAt(0),t=a(n);return 0!=(t[H]&O)}function k(r){return j(r)||s(r)||A(r)||l(r)}function q(r,n){var t,e;for(t=n-1;t>=0&&(e=r.charAt(t),_(e));t--);var c=t>=0&&z(e);if(c){for(t=n+1;r.length>t&&(e=r.charAt(t),_(e));t++);c=t==r.length||!z(e)}return String.fromCharCode(c?962:963)}function x(r,n,t){return 931==r.charCodeAt(0)?q(n,t):m(r)}n.unicode=r;var y=[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,32],[0,0,0,0,0,48],[0,0,0,0,0,1056],[0,0,0,0,0,1024],[0,0,0,0,0,5120],[0,0,0,0,0,3590],[0,0,0,1,1,3590],[0,0,0,2,2,3590],[0,0,0,3,3,3590],[0,0,0,4,4,3590],[0,0,0,5,5,3590],[0,0,0,6,6,3590],[0,0,0,7,7,3590],[0,0,0,8,8,3590],[0,0,0,9,9,3590],[0,32,0,0,0,10113],[0,0,0,0,0,1536],[-32,0,-32,0,0,9993],[0,0,0,0,0,9993],[0,0,0,0,0,4096],[0,0,0,0,2,3076],[0,0,0,0,3,3076],[16777218,17825792,16777218,0,0,26377],[0,0,0,0,0,5632],[0,0,0,0,1,3076],[0,0,0,0,0,3072],[33554438,18874371,33554440,0,0,26377],[121,0,121,0,0,9993],[0,1,0,0,0,10113],[-1,0,-1,0,0,9993],[16777228,33554442,16777228,0,0,26497],[-232,0,-232,0,0,9993],[33554448,18874381,33554448,0,0,26377],[0,-121,0,0,0,10113],[16777236,17825810,16777236,0,0,26377],[195,0,195,0,0,9993],[0,210,0,0,0,10113],[0,206,0,0,0,10113],[0,205,0,0,0,10113],[0,79,0,0,0,10113],[0,202,0,0,0,10113],[0,203,0,0,0,10113],[0,207,0,0,0,10113],[97,0,97,0,0,9993],[0,211,0,0,0,10113],[0,209,0,0,0,10113],[163,0,163,0,0,9993],[0,213,0,0,0,10113],[130,0,130,0,0,9993],[0,214,0,0,0,10113],[0,218,0,0,0,10113],[0,217,0,0,0,10113],[0,219,0,0,0,10113],[0,0,0,0,0,1793],[56,0,56,0,0,9993],[0,2,1,0,0,10113],[-1,1,0,0,0,10049],[-2,0,-1,0,0,9993],[-79,0,-79,0,0,9993],[33554456,18874389,33554456,0,0,26377],[0,-97,0,0,0,10113],[0,-56,0,0,0,10113],[0,-130,0,0,0,10113],[0,10795,0,0,0,10113],[0,-163,0,0,0,10113],[0,10792,0,0,0,10113],[10815,0,10815,0,0,9993],[0,-195,0,0,0,10113],[0,69,0,0,0,10113],[0,71,0,0,0,10113],[10783,0,10783,0,0,9993],[10780,0,10780,0,0,9993],[10782,0,10782,0,0,9993],[-210,0,-210,0,0,9993],[-206,0,-206,0,0,9993],[-205,0,-205,0,0,9993],[-202,0,-202,0,0,9993],[-203,0,-203,0,0,9993],[42319,0,42319,0,0,9993],[42315,0,42315,0,0,9993],[-207,0,-207,0,0,9993],[42280,0,42280,0,0,9993],[42308,0,42308,0,0,9993],[-209,0,-209,0,0,9993],[-211,0,-211,0,0,9993],[10743,0,10743,0,0,9993],[42305,0,42305,0,0,9993],[10749,0,10749,0,0,9993],[-213,0,-213,0,0,9993],[-214,0,-214,0,0,9993],[10727,0,10727,0,0,9993],[-218,0,-218,0,0,9993],[42282,0,42282,0,0,9993],[-69,0,-69,0,0,9993],[-217,0,-217,0,0,9993],[-71,0,-71,0,0,9993],[-219,0,-219,0,0,9993],[42261,0,42261,0,0,9993],[42258,0,42258,0,0,9993],[0,0,0,0,0,14089],[0,0,0,0,0,5889],[16777244,17825818,16777244,0,0,30216],[0,0,0,0,0,13321],[0,116,0,0,0,10113],[0,38,0,0,0,10113],[0,37,0,0,0,10113],[0,64,0,0,0,10113],[0,63,0,0,0,10113],[50331681,19922973,50331681,0,0,26377],[-38,0,-38,0,0,9993],[-37,0,-37,0,0,9993],[50331688,19922980,50331688,0,0,26377],[16777261,17825835,16777261,0,0,26377],[-64,0,-64,0,0,9993],[-63,0,-63,0,0,9993],[0,8,0,0,0,10113],[16777264,17825838,16777264,0,0,26377],[16777267,17825841,16777267,0,0,26377],[0,0,0,0,0,10113],[16777270,17825844,16777270,0,0,26377],[16777273,17825847,16777273,0,0,26377],[-8,0,-8,0,0,9993],[16777276,17825850,16777276,0,0,26377],[16777279,17825853,16777279,0,0,26377],[7,0,7,0,0,9993],[-116,0,-116,0,0,9993],[0,-60,0,0,0,10113],[16777282,17825856,16777282,0,0,26377],[0,-7,0,0,0,10113],[0,80,0,0,0,10113],[-80,0,-80,0,0,9993],[0,15,0,0,0,10113],[-15,0,-15,0,0,9993],[0,48,0,0,0,10113],[-48,0,-48,0,0,9993],[33554502,18874435,33554504,0,0,26377],[0,0,0,0,0,1537],[0,7264,0,0,0,10113],[0,0,0,0,1,3588],[0,0,0,0,2,3588],[0,0,0,0,3,3588],[0,0,0,0,4,3588],[0,0,0,0,5,3588],[0,0,0,0,6,3588],[0,0,0,0,7,3588],[0,0,0,0,8,3588],[0,0,0,0,9,3588],[16777292,17825866,16777292,0,0,26497],[16777295,17825869,16777295,0,0,26497],[16777298,17825872,16777298,0,0,26497],[16777301,17825875,16777301,0,0,26497],[16777304,17825878,16777304,0,0,26497],[16777307,17825881,16777307,0,0,26497],[16777310,17825884,16777310,0,0,26497],[16777313,17825887,16777313,0,0,26497],[16777316,17825890,16777316,0,0,26497],[16777319,17825893,16777319,0,0,26497],[16777322,17825896,16777322,0,0,26497],[16777325,17825899,16777325,0,0,26497],[16777328,17825902,16777328,0,0,26497],[16777331,17825905,16777331,0,0,26497],[16777334,17825908,16777334,0,0,26497],[16777337,17825911,16777337,0,0,26497],[16777340,17825914,16777340,0,0,26497],[16777343,17825917,16777343,0,0,26497],[16777346,17825920,16777346,0,0,26497],[16777349,17825923,16777349,0,0,26497],[16777352,17825926,16777352,0,0,26497],[16777355,17825929,16777355,0,0,26497],[16777358,17825932,16777358,0,0,26497],[16777361,17825935,16777361,0,0,26497],[16777364,17825938,16777364,0,0,26497],[16777367,17825941,16777367,0,0,26497],[16777370,17825944,16777370,0,0,26497],[16777373,17825947,16777373,0,0,26497],[16777376,17825950,16777376,0,0,26497],[16777379,17825953,16777379,0,0,26497],[16777382,17825956,16777382,0,0,26497],[16777385,17825959,16777385,0,0,26497],[16777388,17825962,16777388,0,0,26497],[16777391,17825965,16777391,0,0,26497],[16777394,17825968,16777394,0,0,26497],[16777397,17825971,16777397,0,0,26497],[16777400,17825974,16777400,0,0,26497],[16777403,17825977,16777403,0,0,26497],[16777406,17825980,16777406,0,0,26497],[16777409,17825983,16777409,0,0,26497],[16777412,17825986,16777412,0,0,26497],[16777415,17825989,16777415,0,0,26497],[16777418,17825992,16777418,0,0,26497],[16777421,17825995,16777421,0,0,26497],[16777424,17825998,16777424,0,0,26497],[16777427,17826001,16777427,0,0,26497],[16777430,17826004,16777430,0,0,26497],[16777433,17826007,16777433,0,0,26497],[16777436,17826010,16777436,0,0,26497],[16777439,17826013,16777439,0,0,26497],[16777442,17826016,16777442,0,0,26497],[16777445,17826019,16777445,0,0,26497],[16777448,17826022,16777448,0,0,26497],[16777451,17826025,16777451,0,0,26497],[16777454,17826028,16777454,0,0,26497],[16777457,17826031,16777457,0,0,26497],[16777460,17826034,16777460,0,0,26497],[16777463,17826037,16777463,0,0,26497],[16777466,17826040,16777466,0,0,26497],[16777469,17826043,16777469,0,0,26497],[16777472,17826046,16777472,0,0,26497],[16777475,17826049,16777475,0,0,26497],[16777478,17826052,16777478,0,0,26497],[16777481,17826055,16777481,0,0,26497],[16777484,17826058,16777484,0,0,26497],[16777487,17826061,16777487,0,0,26497],[16777490,17826064,16777490,0,0,26497],[16777493,17826067,16777493,0,0,26497],[16777496,17826070,16777496,0,0,26497],[16777499,17826073,16777499,0,0,26497],[16777502,17826076,16777502,0,0,26497],[16777505,17826079,16777505,0,0,26497],[16777508,17826082,16777508,0,0,26497],[16777511,17826085,16777511,0,0,26497],[16777514,17826088,16777514,0,0,26497],[16777517,17826091,16777517,0,0,26497],[16777520,17826094,16777520,0,0,26497],[16777523,17826097,16777523,0,0,26497],[16777526,17826100,16777526,0,0,26497],[16777529,17826103,16777529,0,0,26497],[16777532,17826106,16777532,0,0,26497],[16777535,17826109,16777535,0,0,26497],[16777538,17826112,16777538,0,0,26497],[16777541,17826115,16777541,0,0,26497],[16777544,17826118,16777544,0,0,26497],[16777547,17826121,16777547,0,0,26497],[16777550,17826124,16777550,0,0,26377],[16777553,17826127,16777553,0,0,26377],[16777556,17826130,16777556,0,0,26377],[16777559,17826133,16777559,0,0,26377],[16777562,17826136,16777562,0,0,26377],[16777565,17826139,16777565,0,0,26377],[0,0,0,0,0,3840],[35332,0,35332,0,0,9993],[3814,0,3814,0,0,9993],[33554785,18874718,33554785,0,0,26377],[33554790,18874723,33554790,0,0,26377],[33554795,18874728,33554795,0,0,26377],[33554800,18874733,33554800,0,0,26377],[33554805,18874738,33554805,0,0,26377],[16777593,17826167,16777593,0,0,26377],[16777597,18874746,16777597,0,0,26497],[8,0,8,0,0,9993],[0,-8,0,0,0,10113],[33554817,18874750,33554817,0,0,26377],[50332039,19923331,50332039,0,0,26377],[50332046,19923338,50332046,0,0,26377],[50332053,19923345,50332053,0,0,26377],[74,0,74,0,0,9993],[86,0,86,0,0,9993],[100,0,100,0,0,9993],[128,0,128,0,0,9993],[112,0,112,0,0,9993],[126,0,126,0,0,9993],[33554843,18874776,16777629,0,0,26377],[33554849,18874782,16777635,0,0,26377],[33554855,18874788,16777641,0,0,26377],[33554861,18874794,16777647,0,0,26377],[33554867,18874800,16777653,0,0,26377],[33554873,18874806,16777659,0,0,26377],[33554879,18874812,16777665,0,0,26377],[33554885,18874818,16777671,0,0,26377],[33554891,18874824,16777677,0,0,26433],[33554897,18874830,16777683,0,0,26433],[33554903,18874836,16777689,0,0,26433],[33554909,18874842,16777695,0,0,26433],[33554915,18874848,16777701,0,0,26433],[33554921,18874854,16777707,0,0,26433],[33554927,18874860,16777713,0,0,26433],[33554933,18874866,16777719,0,0,26433],[33554939,18874872,16777725,0,0,26377],[33554945,18874878,16777731,0,0,26377],[33554951,18874884,16777737,0,0,26377],[33554957,18874890,16777743,0,0,26377],[33554963,18874896,16777749,0,0,26377],[33554969,18874902,16777755,0,0,26377],[33554975,18874908,16777761,0,0,26377],[33554981,18874914,16777767,0,0,26377],[33554987,18874920,16777773,0,0,26433],[33554993,18874926,16777779,0,0,26433],[33554999,18874932,16777785,0,0,26433],[33555005,18874938,16777791,0,0,26433],[33555011,18874944,16777797,0,0,26433],[33555017,18874950,16777803,0,0,26433],[33555023,18874956,16777809,0,0,26433],[33555029,18874962,16777815,0,0,26433],[33555035,18874968,16777821,0,0,26377],[33555041,18874974,16777827,0,0,26377],[33555047,18874980,16777833,0,0,26377],[33555053,18874986,16777839,0,0,26377],[33555059,18874992,16777845,0,0,26377],[33555065,18874998,16777851,0,0,26377],[33555071,18875004,16777857,0,0,26377],[33555077,18875010,16777863,0,0,26377],[33555083,18875016,16777869,0,0,26433],[33555089,18875022,16777875,0,0,26433],[33555095,18875028,16777881,0,0,26433],[33555101,18875034,16777887,0,0,26433],[33555107,18875040,16777893,0,0,26433],[33555113,18875046,16777899,0,0,26433],[33555119,18875052,16777905,0,0,26433],[33555125,18875058,16777911,0,0,26433],[33555131,18875064,33555133,0,0,26377],[33555138,18875071,16777924,0,0,26377],[33555144,18875077,33555146,0,0,26377],[33555151,18875084,33555151,0,0,26377],[50332373,19923665,50332376,0,0,26377],[0,-74,0,0,0,10113],[33555166,18875099,16777952,0,0,26433],[16777955,17826529,16777955,0,0,26377],[33555175,18875108,33555177,0,0,26377],[33555182,18875115,16777968,0,0,26377],[33555188,18875121,33555190,0,0,26377],[33555195,18875128,33555195,0,0,26377],[50332417,19923709,50332420,0,0,26377],[0,-86,0,0,0,10113],[33555210,18875143,16777996,0,0,26433],[50332433,19923725,50332433,0,0,26377],[50332440,19923732,50332440,0,0,26377],[33555230,18875163,33555230,0,0,26377],[50332452,19923744,50332452,0,0,26377],[0,-100,0,0,0,10113],[50332459,19923751,50332459,0,0,26377],[50332466,19923758,50332466,0,0,26377],[33555256,18875189,33555256,0,0,26377],[33555261,18875194,33555261,0,0,26377],[50332483,19923775,50332483,0,0,26377],[0,-112,0,0,0,10113],[33555273,18875206,33555275,0,0,26377],[33555280,18875213,16778066,0,0,26377],[33555286,18875219,33555288,0,0,26377],[33555293,18875226,33555293,0,0,26377],[50332515,19923807,50332518,0,0,26377],[0,-128,0,0,0,10113],[0,-126,0,0,0,10113],[33555308,18875241,16778094,0,0,26433],[0,0,0,0,0,3076],[0,0,0,0,4,3076],[0,0,0,0,5,3076],[0,0,0,0,6,3076],[0,0,0,0,7,3076],[0,0,0,0,8,3076],[0,0,0,0,9,3076],[0,0,0,0,0,1792],[0,-7517,0,0,0,10113],[0,-8383,0,0,0,10113],[0,-8262,0,0,0,10113],[0,28,0,0,0,10113],[-28,0,-28,0,0,9993],[0,16,0,0,0,12160],[-16,0,-16,0,0,12040],[0,26,0,0,0,9344],[-26,0,-26,0,0,9224],[0,-10743,0,0,0,10113],[0,-3814,0,0,0,10113],[0,-10727,0,0,0,10113],[-10795,0,-10795,0,0,9993],[-10792,0,-10792,0,0,9993],[0,-10780,0,0,0,10113],[0,-10749,0,0,0,10113],[0,-10783,0,0,0,10113],[0,-10782,0,0,0,10113],[0,-10815,0,0,0,10113],[-7264,0,-7264,0,0,9993],[0,0,0,0,0,5121],[0,0,0,0,0,3841],[0,-35332,0,0,0,10113],[0,-42280,0,0,0,10113],[0,-42308,0,0,0,10113],[0,-42319,0,0,0,10113],[0,-42315,0,0,0,10113],[0,-42305,0,0,0,10113],[0,-42258,0,0,0,10113],[0,-42282,0,0,0,10113],[0,-42261,0,0,0,10113],[0,928,0,0,0,10113],[-928,0,-928,0,0,9993],[16778097,17826671,16778097,0,0,26377],[16778100,17826674,16778100,0,0,26377],[16778103,17826677,16778103,0,0,26377],[16778106,17826680,16778106,0,0,26377],[16778109,17826683,16778109,0,0,26377],[16778112,17826686,16778112,0,0,26377],[16778115,17826689,16778115,0,0,26377],[16778118,17826692,16778118,0,0,26377],[16778121,17826695,16778121,0,0,26377],[16778124,17826698,16778124,0,0,26377],[16778127,17826701,16778127,0,0,26377],[16778130,17826704,16778130,0,0,26377],[16778133,17826707,16778133,0,0,26377],[16778136,17826710,16778136,0,0,26377],[16778139,17826713,16778139,0,0,26377],[16778142,17826716,16778142,0,0,26377],[16778145,17826719,16778145,0,0,26377],[16778148,17826722,16778148,0,0,26377],[16778151,17826725,16778151,0,0,26377],[16778154,17826728,16778154,0,0,26377],[16778157,17826731,16778157,0,0,26377],[16778160,17826734,16778160,0,0,26377],[16778163,17826737,16778163,0,0,26377],[16778166,17826740,16778166,0,0,26377],[16778169,17826743,16778169,0,0,26377],[16778172,17826746,16778172,0,0,26377],[16778175,17826749,16778175,0,0,26377],[16778178,17826752,16778178,0,0,26377],[16778181,17826755,16778181,0,0,26377],[16778184,17826758,16778184,0,0,26377],[16778187,17826761,16778187,0,0,26377],[16778190,17826764,16778190,0,0,26377],[16778193,17826767,16778193,0,0,26377],[16778196,17826770,16778196,0,0,26377],[16778199,17826773,16778199,0,0,26377],[16778202,17826776,16778202,0,0,26377],[16778205,17826779,16778205,0,0,26377],[16778208,17826782,16778208,0,0,26377],[16778211,17826785,16778211,0,0,26377],[16778214,17826788,16778214,0,0,26377],[16778217,17826791,16778217,0,0,26377],[16778220,17826794,16778220,0,0,26377],[16778223,17826797,16778223,0,0,26377],[16778226,17826800,16778226,0,0,26377],[16778229,17826803,16778229,0,0,26377],[16778232,17826806,16778232,0,0,26377],[16778235,17826809,16778235,0,0,26377],[16778238,17826812,16778238,0,0,26377],[16778241,17826815,16778241,0,0,26377],[16778244,17826818,16778244,0,0,26377],[16778247,17826821,16778247,0,0,26377],[16778250,17826824,16778250,0,0,26377],[16778253,17826827,16778253,0,0,26377],[16778256,17826830,16778256,0,0,26377],[16778259,17826833,16778259,0,0,26377],[16778262,17826836,16778262,0,0,26377],[16778265,17826839,16778265,0,0,26377],[16778268,17826842,16778268,0,0,26377],[16778271,17826845,16778271,0,0,26377],[16778274,17826848,16778274,0,0,26377],[16778277,17826851,16778277,0,0,26377],[16778280,17826854,16778280,0,0,26377],[16778283,17826857,16778283,0,0,26377],[16778286,17826860,16778286,0,0,26377],[16778289,17826863,16778289,0,0,26377],[16778292,17826866,16778292,0,0,26377],[16778295,17826869,16778295,0,0,26377],[16778298,17826872,16778298,0,0,26377],[16778301,17826875,16778301,0,0,26377],[16778304,17826878,16778304,0,0,26377],[16778307,17826881,16778307,0,0,26377],[16778310,17826884,16778310,0,0,26377],[16778313,17826887,16778313,0,0,26377],[16778316,17826890,16778316,0,0,26377],[16778319,17826893,16778319,0,0,26377],[16778322,17826896,16778322,0,0,26377],[16778325,17826899,16778325,0,0,26377],[16778328,17826902,16778328,0,0,26377],[16778331,17826905,16778331,0,0,26377],[16778334,17826908,16778334,0,0,26377],[33555554,18875487,33555556,0,0,26377],[33555561,18875494,33555563,0,0,26377],[33555568,18875501,33555570,0,0,26377],[50332792,19924084,50332795,0,0,26377],[50332802,19924094,50332805,0,0,26377],[33555595,18875528,33555597,0,0,26377],[33555602,18875535,33555604,0,0,26377],[33555609,18875542,33555611,0,0,26377],[33555616,18875549,33555618,0,0,26377],[33555623,18875556,33555625,0,0,26377],[33555630,18875563,33555632,0,0,26377],[33555637,18875570,33555639,0,0,26377],[0,0,0,0,0,1025],[0,0,0,0,0,5633],[0,40,0,0,0,10113],[-40,0,-40,0,0,9993],[0,0,0,0,0,9344]],B=0,D=1,E=2,F=3,G=4,H=5,I=[181,956,924,223,115,115,83,83,83,115,105,775,304,329,700,110,700,78,383,115,83,496,106,780,74,780,837,953,921,912,953,776,769,921,776,769,944,965,776,769,933,776,769,962,963,931,976,946,914,977,952,920,981,966,934,982,960,928,1008,954,922,1009,961,929,1013,949,917,1415,1381,1410,1333,1362,1333,1410,43888,5024,5024,43889,5025,5025,43890,5026,5026,43891,5027,5027,43892,5028,5028,43893,5029,5029,43894,5030,5030,43895,5031,5031,43896,5032,5032,43897,5033,5033,43898,5034,5034,43899,5035,5035,43900,5036,5036,43901,5037,5037,43902,5038,5038,43903,5039,5039,43904,5040,5040,43905,5041,5041,43906,5042,5042,43907,5043,5043,43908,5044,5044,43909,5045,5045,43910,5046,5046,43911,5047,5047,43912,5048,5048,43913,5049,5049,43914,5050,5050,43915,5051,5051,43916,5052,5052,43917,5053,5053,43918,5054,5054,43919,5055,5055,43920,5056,5056,43921,5057,5057,43922,5058,5058,43923,5059,5059,43924,5060,5060,43925,5061,5061,43926,5062,5062,43927,5063,5063,43928,5064,5064,43929,5065,5065,43930,5066,5066,43931,5067,5067,43932,5068,5068,43933,5069,5069,43934,5070,5070,43935,5071,5071,43936,5072,5072,43937,5073,5073,43938,5074,5074,43939,5075,5075,43940,5076,5076,43941,5077,5077,43942,5078,5078,43943,5079,5079,43944,5080,5080,43945,5081,5081,43946,5082,5082,43947,5083,5083,43948,5084,5084,43949,5085,5085,43950,5086,5086,43951,5087,5087,43952,5088,5088,43953,5089,5089,43954,5090,5090,43955,5091,5091,43956,5092,5092,43957,5093,5093,43958,5094,5094,43959,5095,5095,43960,5096,5096,43961,5097,5097,43962,5098,5098,43963,5099,5099,43964,5100,5100,43965,5101,5101,43966,5102,5102,43967,5103,5103,5112,5104,5104,5113,5105,5105,5114,5106,5106,5115,5107,5107,5116,5108,5108,5117,5109,5109,5112,5104,5104,5113,5105,5105,5114,5106,5106,5115,5107,5107,5116,5108,5108,5117,5109,5109,7830,104,817,72,817,7831,116,776,84,776,7832,119,778,87,778,7833,121,778,89,778,7834,97,702,65,702,7835,7777,7776,223,115,115,7838,8016,965,787,933,787,8018,965,787,768,933,787,768,8020,965,787,769,933,787,769,8022,965,787,834,933,787,834,8064,7936,953,7944,921,8072,8065,7937,953,7945,921,8073,8066,7938,953,7946,921,8074,8067,7939,953,7947,921,8075,8068,7940,953,7948,921,8076,8069,7941,953,7949,921,8077,8070,7942,953,7950,921,8078,8071,7943,953,7951,921,8079,8064,7936,953,7944,921,8072,8065,7937,953,7945,921,8073,8066,7938,953,7946,921,8074,8067,7939,953,7947,921,8075,8068,7940,953,7948,921,8076,8069,7941,953,7949,921,8077,8070,7942,953,7950,921,8078,8071,7943,953,7951,921,8079,8080,7968,953,7976,921,8088,8081,7969,953,7977,921,8089,8082,7970,953,7978,921,8090,8083,7971,953,7979,921,8091,8084,7972,953,7980,921,8092,8085,7973,953,7981,921,8093,8086,7974,953,7982,921,8094,8087,7975,953,7983,921,8095,8080,7968,953,7976,921,8088,8081,7969,953,7977,921,8089,8082,7970,953,7978,921,8090,8083,7971,953,7979,921,8091,8084,7972,953,7980,921,8092,8085,7973,953,7981,921,8093,8086,7974,953,7982,921,8094,8087,7975,953,7983,921,8095,8096,8032,953,8040,921,8104,8097,8033,953,8041,921,8105,8098,8034,953,8042,921,8106,8099,8035,953,8043,921,8107,8100,8036,953,8044,921,8108,8101,8037,953,8045,921,8109,8102,8038,953,8046,921,8110,8103,8039,953,8047,921,8111,8096,8032,953,8040,921,8104,8097,8033,953,8041,921,8105,8098,8034,953,8042,921,8106,8099,8035,953,8043,921,8107,8100,8036,953,8044,921,8108,8101,8037,953,8045,921,8109,8102,8038,953,8046,921,8110,8103,8039,953,8047,921,8111,8114,8048,953,8122,921,8122,837,8115,945,953,913,921,8124,8116,940,953,902,921,902,837,8118,945,834,913,834,8119,945,834,953,913,834,921,913,834,837,8115,945,953,913,921,8124,8126,953,921,8130,8052,953,8138,921,8138,837,8131,951,953,919,921,8140,8132,942,953,905,921,905,837,8134,951,834,919,834,8135,951,834,953,919,834,921,919,834,837,8131,951,953,919,921,8140,8146,953,776,768,921,776,768,8147,953,776,769,921,776,769,8150,953,834,921,834,8151,953,776,834,921,776,834,8162,965,776,768,933,776,768,8163,965,776,769,933,776,769,8164,961,787,929,787,8166,965,834,933,834,8167,965,776,834,933,776,834,8178,8060,953,8186,921,8186,837,8179,969,953,937,921,8188,8180,974,953,911,921,911,837,8182,969,834,937,834,8183,969,834,953,937,834,921,937,834,837,8179,969,953,937,921,8188,43888,5024,5024,43889,5025,5025,43890,5026,5026,43891,5027,5027,43892,5028,5028,43893,5029,5029,43894,5030,5030,43895,5031,5031,43896,5032,5032,43897,5033,5033,43898,5034,5034,43899,5035,5035,43900,5036,5036,43901,5037,5037,43902,5038,5038,43903,5039,5039,43904,5040,5040,43905,5041,5041,43906,5042,5042,43907,5043,5043,43908,5044,5044,43909,5045,5045,43910,5046,5046,43911,5047,5047,43912,5048,5048,43913,5049,5049,43914,5050,5050,43915,5051,5051,43916,5052,5052,43917,5053,5053,43918,5054,5054,43919,5055,5055,43920,5056,5056,43921,5057,5057,43922,5058,5058,43923,5059,5059,43924,5060,5060,43925,5061,5061,43926,5062,5062,43927,5063,5063,43928,5064,5064,43929,5065,5065,43930,5066,5066,43931,5067,5067,43932,5068,5068,43933,5069,5069,43934,5070,5070,43935,5071,5071,43936,5072,5072,43937,5073,5073,43938,5074,5074,43939,5075,5075,43940,5076,5076,43941,5077,5077,43942,5078,5078,43943,5079,5079,43944,5080,5080,43945,5081,5081,43946,5082,5082,43947,5083,5083,43948,5084,5084,43949,5085,5085,43950,5086,5086,43951,5087,5087,43952,5088,5088,43953,5089,5089,43954,5090,5090,43955,5091,5091,43956,5092,5092,43957,5093,5093,43958,5094,5094,43959,5095,5095,43960,5096,5096,43961,5097,5097,43962,5098,5098,43963,5099,5099,43964,5100,5100,43965,5101,5101,43966,5102,5102,43967,5103,5103,64256,102,102,70,70,70,102,64257,102,105,70,73,70,105,64258,102,108,70,76,70,108,64259,102,102,105,70,70,73,70,102,105,64260,102,102,108,70,70,76,70,102,108,64261,115,116,83,84,83,116,64262,115,116,83,84,83,116,64275,1396,1398,1348,1350,1348,1398,64276,1396,1381,1348,1333,1348,1381,64277,1396,1387,1348,1339,1348,1387,64278,1406,1398,1358,1350,1358,1398,64279,1396,1389,1348,1341,1348,1389],J=7,K=[36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,112,113,118,119,155,156,157,158,159,162,163,166,167,168,173,174,177,178,188,189,190,191,197,198,199,207,208,222,223,231,232,236,237,257,258,264,265,281,282,283,300,301,302,319,320,321,329,330,332,333,334,335,336,337,338,339,340,341,342,343,344,431,432,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,526,527,528,529,530,531,532,533,534,535,536,537,538,540,541,544,545,546,547,548,549,550,551,553,554,555,556,557,558,559,561,562,565,566,576,583,584,585,586,587,608,616,617,648,652,653,720,724,725,726,727,728,734,735,736,864,865,888,889,890,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,948,949,950,976,977,978,988,989,990,992,993,994,995,996,997,998,999,1e3,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1024,1025,1026,1027,1042,1043,1044,1045,1046,1047,1095,1096,1107,1108,1142,1143,1220,1221,1357,1358,1390,1391,1392,1393,1437,1438,1520,1521,1522,1524,1525,7168,7169,7170,7171,7172,7680,8191,8192,8703,8704],L=[34,35,36,37,38,39,34,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,64,68,69,64,70,71,72,73,74,75,76,77,64,78,79,80,81,82,83,84,64,85,86,34,87,34,88,34,89,90,91,92,34,93,34,94,95,34,96,34,97,34,98,99,100,34,101,102,34,103,34,104,34,105,34,101,34,104,34,106,34,107,108,34,109,110,34,111,112,34,113,34,114,115,116,117,118,119,120,121,122,123,124,125,34,126,127,128,129,130,131,132,133,134,34,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,145,34,152,145,153,154,155,156,157,158,159,160,161,162,145,163,145,164,165,166,167,168,169,170,145,171,145,172,173,174,175,145,176,145,177,145,34,178,179,34,180,145,34,181,145,34,182,145,34,183,184,185,186,145,187,188,145,189,145,190,191,145,64,192,193,194,195,145,196,145,197,198,199,200,201,202,203,204,64,205,206,145,34,207,145,208,209,145,210,211,212,213,214,145,64,215,64,216,217,64,218,219,220,221,222,223,224,145,225,226,227,34,87,228,34,229,230,34,231,34,232,34,233,34,234,34,235,34,236,34,237,34,238,145,34,231,34,239,145,240,145,241,242,145,127,243,127,243],M=[9,10,14,28,31,32,33,39,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,91,94,95,96,97,123,127,133,134,160,161,168,169,170,171,173,174,175,176,178,179,180,181,182,183,184,185,186,187,188,191,192,215,216,223,224,247,248,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,428,429,430,431,432,433,435,436,437,438,439,440,441,442,443,444,445,446,447,448,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,570,571,572,573,574,575,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,600,601,602,603,604,605,608,609,610,611,612,613,614,615,616,617,618,619,620,621,623,624,625,626,627,629,630,637,638,640,641,643,644,647,648,649,650,652,653,658,659,660,661,669,670,671,688,697,704,706,710,722,736,741,748,749,750,751,768,837,838,880,881,882,883,884,885,886,887,888,890,891,894,895,896,900,902,903,904,907,908,909,910,912,913,930,931,940,941,944,945,962,963,972,973,975,976,977,978,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1ee3,6005,6016,6060,6064,6090,6096,6097,6098,6099,6100,6101,6102,6103,6104,6105,6106,6107,6110,6144,6167,6169,6171,6172,6174,6176,6229,6230,6231,6232,6239,6240,6241,6242,6243,6245,6253,6259,6269,6271,6272,6273,6274,6275,6276,6277,6278,6279,6280,6281,6282,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6304,6311,6312,6318,6320,6334,6335,6400,6404,6405,6452,6453,6454,6459,6460,6461,6466,6467,6469,6476,6480,6481,6482,6483,6484,6485,6486,6487,6488,6489,6490,6507,6516,6525,6528,6530,6531,6561,6562,6566,6568,6570,6571,6574,6576,6577,6578,6579,6580,6581,6582,6583,6584,6585,6586,6630,6631,6632,6634,6637,6638,6639,6642,6644,6652,6656,6692,6700,6708,6710,6712,6715,6720,6721,6722,6723,6724,6725,6726,6727,6728,6729,6730,6733,6736,6737,6738,6739,6740,6741,6742,6743,6744,6745,6746,6776,6782,6784,6848,6856,6864,6867,6868,6881,6882,6889,6893,6894,6898,6900,6901,6903,6904,6906,6912,6956,7019,7032,7033,7034,7037,7038,7067,7104,7158,7164,7168,7169,7170,7171,7172,7173,7174,7175,7176,7177,7178,7179,7180,7181,7182,7183,7184,7185,7186,7187,7188,7189,7190,7191,7192,7193,7194,7195,7196,7197,7198,7199,7200,7201,7202,7203,7204,7205,7206,7207,7208,7209,7210,7211,7212,7213,7214,7215,7216,7217,7218,7219,7220,7221,7222,7223,7224,7225,7226,7227,7228,7229,7230,7231,7232,7233,7234,7235,7236,7237,7238,7239,7240,7241,7242,7243,7244,7245,7246,7247,7248,7249,7250,7251,7252,7253,7254,7255,7256,7257,7258,7259,7260,7261,7262,7263,7264,7265,7266,7267,7268,7269,7270,7271,7272,7273,7274,7275,7276,7277,7278,7279,7280,7281,7282,7283,7284,7285,7286,7287,7288,7289,7290,7291,7292,7293,7294,7295,7296,7297,7298,7299,7300,7301,7302,7303,7304,7305,7306,7307,7308,7309,7310,7311,7312,7313,7314,7315,7316,7317,7318,7319,7320,7321,7322,7323,7324,7326,7327,7328,7329,7330,7331,7332,7333,7334,7335,7336,7337,7338,7339,7340,7341,7342,7343,7344,7345,7346,7347,7348,7349,7350,7351,7352,7353,7354,7355,7356,7357,7358,7359,7360,7361,7362,7363,7364,7365,7366,7367,7368,7369,7370,7371,7372,7373,7374,7375,7376,7377,7378,7379,7380,7381,7382,7383,7384,7385,7386,7387,7388,7389,7390,7391,7392,7393,7394,7395,7396,7397,7398,7399,7400,7401,7402,7403,7404,7405,7406,7407,7408,7409,7410,7411,7412,7413,7414,7415,7416,7417,7418,7419,7420,7421,7422,7423,7424,7432,7440,7446,7448,7454,7456,7464,7472,7480,7488,7494,7496,7502,7504,7505,7506,7507,7508,7509,7510,7511,7512,7513,7514,7515,7516,7517,7518,7519,7520,7528,7536,7538,7542,7544,7546,7548,7550,7552,7553,7554,7555,7556,7557,7558,7559,7560,7561,7562,7563,7564,7565,7566,7567,7568,7569,7570,7571,7572,7573,7574,7575,7576,7577,7578,7579,7580,7581,7582,7583,7584,7585,7586,7587,7588,7589,7590,7591,7592,7593,7594,7595,7596,7597,7598,7599,7600,7602,7603,7604,7605,7606,7607,7608,7610,7612,7613,7614,7615,7618,7619,7620,7621,7622,7623,7624,7628,7629,7632,7634,7635,7636,7638,7639,7640,7642,7644,7645,7648,7650,7651,7652,7653,7654,7655,7656,7658,7660,7661,7664,7666,7667,7668,7669,7670,7671,7672,7674,7676,7677,7679,7680,7691,7696,7704,7706,7716,7717,7719,7720,7722,7727,7728,7743,7745,7764,7765,7775,7776,7781,7782,7792,7793,7794,7796,7797,7798,7799,7800,7801,7802,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7823,7824,7837,7840,7871,7888,7901,7905,7906,7909,7921,7936,7938,7939,7943,7944,7946,7947,7950,7952,7955,7956,7957,7958,7960,7961,7966,7972,7973,7974,7975,7976,7977,7978,7979,7980,7982,7983,7984,7986,7987,7988,7989,7993,7994,7996,7998,8e3,8005,8006,8010,8014,8015,8016,8032,8048,8064,8067,8068,8069,8073,8074,8076,8080,8443,8448,8487,8512,8523,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8564,8565,8566,8567,8568,8569,8570,8571,8572,8573,8584,8585,8586,8587,8588,8589,8590,8591,8592,8593,8604,8630,8656,8682,8683,8693,8694,8695,8696,8697,8698,8699,8700,8701,8702,8703,8704,8822,8823,8824,8825,8826,8827,8828,8829,8830,8831,8832,8833,8834,8835,8836,8837,8838,8839,8840,8841,8842,8843,8844,8845,8846,8847,8848,8849,8850,8851,8852,9076,9078,9110,9112,9146,9149,9161,9162,9170,9196,9200,9216,9263,9264,9311,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,9332,9333,9334,9335,9340,9342,9344,9345,9346,9347,9348,9349,9350,9351,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9398,9399,9400,9401,9402,9403,9404,9405,9406,9407,9408,9409,9410,9411,9412,9413,9414,9415,9416,9417,9418,9419,9420,9421,9422,9423,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9451,9452,9453,9454,9455,9458,9459,9460,9465,9469,9470,9472,9510,9511,9512,9517,9518,9520,9576,9583,9584,9585,9599,9600,9623,9632,9639,9640,9647,9648,9655,9656,9663,9664,9671,9672,9679,9680,9687,9688,9695,9696,9728,9775,9776,9795,9856,9882,9883,9972,9984,10070,10096,10108,10112,10113,10117,10118,10119,10120,10145,10154,10158,10160,10161,10166,10168,10171,10172,10173,10176,10177,10263,10265,10267,10269,10271,10272,10273,10363,10364,10367,10368,10373,10414,10417,10511,10512,10514,10518,10528,10555,10560,10596,10608,10624,10655,10656,10666,10696,10704,10705,10720,10752,10762,10801,10816,10879,10880,10885,10886,11011,11012,11178,11179,11341,11342,11446,11456,11520,11521,11523,11524,11527,11528,11529,11530,11613,11614,11660,11661,11668,11669,11670,11671,11711,11713,11743,11744,11752,11753,11789,11790,11888,11889,11908,11909,11974,11975,12009,12010,12011,12012,12013,12014,12097,12098,12099,12102,12108,12109,12225,12229,12379,12380,12529,12530,12537,12538,12666,12667,12798,12800,12812,12815,12816,12817,13054,13055,13132,13133,13266,13267,13318,13319,13462,13463,13612,13613,13742,13743,13747,13748,13872,13873,13985,13986,14022,14023,14028,14029,14072,14073,14198,14199,14294,14336,14357,14358,14477,14480,14535,14544,14584,14590,14592,14604,14605,14608,14624,14625,14626,14627,14628,14629,14630,14631,14632,14633,14634,14636,14656,14657,14658,14659,14660,14661,14662,14663,14664,14665,14666,14667,14668,14669,14670,14671,14672,14673,14674,14675,14676,14677,14678,14679,14680,14681,14682,14683,14684,14685,14686,14687,14688,14689,14690,14691,14692,14693,14694,14695,14696,14697,14698,14699,14700,14701,14702,14703,14704,14707,14708,14718,14719,14720,14721,14722,14723,14724,14725,14726,14727,14728,14729,14730,14731,14732,14733,14734,14735,14736,14737,14738,14739,14740,14741,14742,14743,14744,14745,14746,14747,14748,14750,14752,14822,14832,14834,14840,14848,14871,14880,14882,14883,14884,14885,14886,14887,14888,14889,14890,14891,14892,14893,14894,14895,14896,14898,14899,14900,14901,14902,14903,14904,14905,14906,14907,14908,14909,14910,14911,14912,14913,14914,14915,14916,14917,14918,14919,14920,14921,14922,14923,14924,14925,14926,14927,14928,14929,14930,14931,14932,14933,14934,14935,14936,14937,14938,14939,14940,14941,14942,14943,14944,14945,14946,14947,14948,14949,14950,14951,14952,14953,14954,14955,14956,14957,14958,14959,14960,14961,14969,14970,14971,14972,14973,14974,14975,14976,14977,14978,14979,14980,14981,14982,14983,14984,14985,14987,14988,14989,14990,14991,14992,14993,14994,14995,14996,14998,14999,15e3,15001,15002,15003,15004,15005,15006,15007,15008,15009,15010,15011,15012,15013,15014,15015,15016,15017,15018,15019,15020,15021,15022,15024,15025,15026,15027,15028,15029,15030,15031,15032,15095,15096,15098,15099,15106,15107,15110,15111,15115,15116,15139,15141,15143,15144,15148,15152,15158,15162,15168,15220,15224,15232,15234,15284,15300,15301,15310,15312,15313,15314,15315,15316,15317,15318,15319,15320,15321,15322,15328,15346,15352,15355,15356,15357,15358,15360,15361,15362,15363,15364,15365,15366,15367,15368,15369,15370,15398,15406,15408,15431,15442,15444,15455,15456,15485,15488,15491,15492,15539,15540,15542,15546,15548,15549,15553,15566,15567,15568,15569,15570,15571,15572,15573,15574,15575,15576,15577,15578,15582,15584,15589,15590,15591,15600,15601,15602,15603,15604,15605,15606,15607,15608,15609,15610,15615,15616,15657,15663,15665,15667,15669,15671,15680,15683,15684,15692,15693,15694,15696,15697,15698,15699,15700,15701,15702,15703,15704,15705,15706,15708,15712,15728,15729,15735,15738,15739,15740,15741,15742,15792,15793,15794,15797,15799,15801,15806,15808,15809,15810,15811,15835,15837,15838,15840,15851,15852,15854,15856,15858,15859,15861,15862,15863,15873,15879,15881,15887,15889,15895,15904,15911,15912,15919,15920,15955,15956,15963,15964,15968,15974,15984,15985,15986,15987,15988,15989,15990,15991,15992,15993,15994,15995,15996,15997,15998,15999,16e3,16001,16002,16003,16004,16005,16006,16007,16008,16009,16010,16011,16012,16013,16014,16015,16016,16017,16018,16019,16020,16021,16022,16023,16024,16025,16026,16027,16028,16029,16030,16031,16032,16033,16034,16035,16036,16037,16038,16039,16040,16041,16042,16043,16044,16045,16046,16047,16048,16049,16050,16051,16052,16053,16054,16055,16056,16057,16058,16059,16060,16061,16062,16063,16064,16099,16101,16102,16104,16105,16107,16108,16109,16110,16112,16113,16114,16115,16116,16117,16118,16119,16120,16121,16122,16128,16164,16176,16199,16203,16252,16256,16384,16491,16492,16499,16500,16504,16505,16562,16563,16593,16594,16595,16596,16637,16638,16750,16752,16858,16896,16897,16898,16899,16900,16901,16902,16903,16915,16916,16917,16918,16919,16920,16925,16926,16927,16937,16938,16951,16952,16957,16958,16959,16960,16962,16963,16965,16966,17074,17090,17107,17246,17252,17342,17344,17360,17424,17426,17480,17520,17530,17532,17534,17536,17552,17555,17556,17562,17568,17584,17587,17589,17613,17616,17618,17619,17620,17621,17622,17639,17640,17644,17648,17649,17650,17651,17652,17653,17654,17655,17656,17657,17658,17659,17660,17661,17662,17663,17789,17791,17792,17793,17799,17800,17806,17807,17808,17809,17810,17811,17812,17813,17814,17815,17816,17817,17818,17819,17825,17851,17854,17855,17856,17857,17883,17894,17904,17905,17950,17952,17983,17986,17992,17994,18e3,18002,18008,18010,18013,18016,18019,18020,18023,18024,18031,18041,18044,18046,18048,18060,18061,18087,18088,18107,18108,18110,18111,18126,18128,18142,18176,18299,18304,18307,18311,18356,18359,18368,18421,18425,18442,18444,18445,18448,18460,18464,18465,18512,18557,18558,18688,18717,18720,18769,18784,18785,18812,18816,18848,18852,18864,18881,18882,18890,18891,18896,18934,18939,18944,18974,18975,18976,19012,19016,19024,19025,19030,19072,19112,19152,19230,19232,19233,19234,19235,19236,19237,19238,19239,19240,19241,19242,19328,19368,19376,19428,19439,19440,19456,19511,19520,19542,19552,19560,19584,19590,19592,19593,19594,19638,19639,19641,19644,19645,19647,19670,19671,19672,19680,19703,19705,19712,19743,19751,19760,19808,19827,19828,19830,19835,19840,19862,19868,19871,19872,19898,19903,19904,19968,20024,20028,20030,20032,20048,20050,20096,20097,20100,20101,20103,20108,20112,20116,20117,20120,20121,20148,20152,20155,20159,20160,20161,20162,20163,20164,20168,20176,20185,20192,20221,20223,20224,20253,20256,20288,20296,20297,20325,20327,20331,20336,20343,20352,20406,20409,20416,20438,20440,20448,20467,20472,20480,20498,20505,20509,20521,20528,20608,20681,20736,20787,20800,20851,20858,20864,20960,20961,20962,20963,20964,20965,20966,20967,20968,20969,20991,20992,20993,20994,20995,21048,21063,21070,21074,21075,21076,21077,21078,21079,21080,21081,21082,21083,21094,21095,21096,21097,21098,21099,21100,21101,21102,21103,21104,21119,21122,21123,21168,21171,21175,21177,21179,21181,21182,21186,21200,21225,21232,21233,21234,21235,21236,21237,21238,21239,21240,21241,21242,21248,21251,21287,21292,21293,21301,21302,21303,21304,21305,21306,21307,21308,21309,21310,21311,21312,21316,21328,21363,21364,21366,21367,21376,21378,21379,21427,21430,21439,21441,21445,21450,21453,21454,21456,21457,21458,21459,21460,21461,21462,21463,21464,21465,21466,21467,21468,21469,21472,21473,21493,21504,21522,21523,21548,21551,21554,21556,21557,21558,21560,21566,21632,21639,21640,21641,21642,21646,21647,21662,21663,21673,21674,21680,21727,21728,21731,21739,21744,21745,21746,21747,21748,21749,21750,21751,21752,21753,21754,21760,21762,21764,21765,21773,21775,21777,21779,21801,21802,21809,21810,21812,21813,21818,21820,21821,21822,21824,21825,21829,21831,21833,21835,21838,21840,21841,21847,21848,21853,21858,21860,21862,21869,21872,21877,21888,21936,21939,21945,21946,21947,21951,21953,21954,21956,21958,21959,21960,21968,21969,21970,21971,21972,21973,21974,21975,21976,21977,21978,22016,22063,22066,22070,22072,22076,22078,22079,22081,22104,22108,22110,22144,22192,22195,22203,22205,22206,22207,22209,22212,22213,22224,22225,22226,22227,22228,22229,22230,22231,22232,22233,22234,22272,22315,22316,22317,22318,22320,22326,22327,22328,22336,22337,22338,22339,22340,22341,22342,22343,22344,22345,22346,22400,22426,22429,22432,22434,22438,22439,22444,22448,22449,22450,22451,22452,22453,22454,22455,22456,22457,22458,22460,22464,22560,22592,22624,22625,22626,22627,22628,22629,22630,22631,22632,22633,22634,22643,22655,22656,22720,22777,22784,22810,22912,23023,23024,23029,23040,23108,23168,23215,23296,23367,23424,23481,23488,23519,23520,23521,23522,23523,23524,23525,23526,23527,23528,23529,23530,23534,23536,23632,23662,23664,23669,23670,23680,23728,23735,23744,23748,23750,23760,23761,23762,23763,23764,23765,23766,23767,23768,23769,23770,23771,23778,23779,23800,23805,23824,23936,24005,24016,24017,24063,24079,24083,24096,24192,24194,24320,24427,24432,24445,24448,24457,24464,24474,24476,24477,24479,24480,24484,24576,24694,24704,24743,24745,24805,24807,24810,24813,24819,24827,24835,24837,24844,24874,24878,24937,24960,25026,25029,25030,25088,25175,25184,25202,25216,25242,25268,25294,25301,25302,25320,25346,25372,25373,25374,25376,25378,25379,25381,25383,25385,25389,25390,25398,25402,25403,25404,25405,25412,25413,25424,25450,25476,25478,25479,25483,25485,25493,25494,25501,25502,25528,25530,25531,25535,25536,25541,25542,25543,25546,25553,25554,25580,25606,25632,25658,25684,25710,25736,25762,25788,25814,25840,25866,25894,25896,25921,25922,25947,25948,25954,25979,25980,26005,26006,26012,26037,26038,26063,26064,26070,26095,26096,26121,26122,26128,26153,26154,26179,26180,26186,26187,26188,26190,26191,26192,26193,26194,26195,26196,26197,26198,26199,26200,26201,26202,26203,26204,26205,26206,26207,26208,26209,26210,26211,26212,26213,26214,26215,26216,26217,26218,26219,26220,26221,26222,26223,26224,26225,26226,26227,26228,26229,26230,26231,26232,26233,26234,26235,26236,26237,26238,26239,26240,26295,26299,26349,26357,26358,26372,26373,26380,26395,26400,26401,26416,26496,26565,26567,26576,26583,26624,26628,26629,26656,26657,26659,26660,26661,26663,26664,26665,26675,26676,26680,26681,26682,26683,26684,26690,26691,26695,26696,26697,26698,26699,26700,26701,26704,26705,26707,26708,26709,26711,26712,26713,26714,26715,26716,26717,26718,26719,26720,26721,26723,26724,26725,26727,26731,26732,26739,26740,26744,26745,26749,26750,26751,26752,26762,26763,26780,26785,26788,26789,26794,26795,26812,26864,26866,26880,26924,26928,27028,27040,27055,27057,27072,27073,27088,27089,27126,27136,27138,27139,27140,27141,27142,27143,27144,27145,27146,27147,27149,27152,27183,27184,27210,27216,27242,27244,27248,27274,27291,27366,27395,27408,27451,27456,27465,27472,27474,27520,27643,27648,27770,27771,27812,27813,27985,28e3,28013,28016,28020,28032,28148,28160,28245,28288,28300,28304,28360,28368,28378,28384,28424,28432,28462,28560,28569,28672,28677,28736,28737,28800,28801,28802,28900,28901,29026,29027,29089,29090,29187,29188,29196,29197,29212,29213,29418,29419,29437,29438,29465,29466,29584,29585,29720,29721,29851,29852,30061,30062,30167,30208,30261,30272,30366,30368,30498,30592,30622,30721,30722,30752,30848,31088,31104,31230,31232],N=[1,2,3,1,3,2,4,5,6,5,6,5,7,8,9,10,11,12,13,14,15,16,6,5,17,5,6,18,6,19,5,1,3,1,2,5,6,5,20,5,21,5,6,5,22,23,6,24,5,25,6,26,20,5,27,5,17,5,17,28,19,5,19,29,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,32,33,30,31,30,31,30,31,20,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,34,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,35,30,31,30,31,30,31,36,37,38,30,31,30,31,39,30,31,40,30,31,20,41,42,43,30,31,40,44,45,46,47,30,31,48,20,46,49,50,51,30,31,30,31,30,31,52,30,31,52,20,30,31,52,30,31,53,30,31,30,31,54,30,31,20,55,30,31,20,56,55,57,58,59,57,58,59,57,58,59,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,60,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,61,57,58,59,30,31,62,63,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,64,20,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,20,65,30,31,66,67,68,30,31,69,70,71,30,31,30,31,30,31,30,31,30,31,72,73,74,75,76,20,77,20,78,20,79,80,20,77,81,20,82,20,83,84,20,85,86,20,87,88,20,86,20,89,90,20,91,20,92,20,93,20,93,20,94,93,95,96,97,20,98,20,55,20,99,100,20,101,102,101,6,102,6,101,6,102,6,102,6,25,103,25,30,31,30,31,102,6,30,31,0,104,50,5,105,0,6,106,25,107,0,108,0,109,110,17,0,17,111,112,113,19,114,19,115,116,117,118,119,120,121,122,123,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,124,125,126,127,128,129,5,30,31,130,30,31,20,64,131,17,19,132,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,5,25,6,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,133,30,31,30,31,30,31,30,31,30,31,30,31,30,31,134,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,0,135,0,102,5,0,136,137,0,5,0,5,0,25,5,25,5,25,5,25,5,25,0,55,0,55,5,6,0,21,5,25,5,21,0,5,55,102,55,25,7,8,9,10,11,12,13,14,15,16,5,55,25,55,5,55,25,21,5,25,102,25,5,25,55,7,8,9,10,11,12,13,14,15,16,55,5,55,5,0,21,55,25,55,25,0,55,25,55,0,7,8,9,10,11,12,13,14,15,16,55,25,102,5,102,0,55,25,102,25,102,25,102,25,0,5,0,55,25,0,5,0,55,0,25,18,55,25,18,25,55,18,25,18,25,18,55,25,55,25,5,7,8,9,10,11,12,13,14,15,16,5,102,55,25,18,0,55,0,55,0,55,0,55,0,55,0,55,0,25,55,18,25,0,18,0,18,25,55,0,18,0,55,0,55,25,0,7,8,9,10,11,12,13,14,15,16,55,5,27,5,0,25,18,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,25,0,18,25,0,25,0,25,0,25,0,55,0,55,0,7,8,9,10,11,12,13,14,15,16,25,55,25,0,25,18,0,55,0,55,0,55,0,55,0,55,0,55,0,25,55,18,25,0,25,18,0,18,25,0,55,0,55,25,0,7,8,9,10,11,12,13,14,15,16,5,0,55,0,25,18,0,55,0,55,0,55,0,55,0,55,0,55,0,25,55,18,25,18,25,0,18,0,18,25,0,25,18,0,55,0,55,25,0,7,8,9,10,11,12,13,14,15,16,5,55,27,0,25,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,18,25,18,0,18,0,18,25,0,55,0,18,0,7,8,9,10,11,12,13,14,15,16,27,5,0,25,18,0,55,0,55,0,55,0,55,0,55,25,18,0,25,0,25,0,25,0,55,0,55,25,0,7,8,9,10,11,12,13,14,15,16,0,27,5,0,25,18,0,55,0,55,0,55,0,55,0,55,0,25,55,18,25,18,0,25,18,0,18,25,0,18,0,55,0,55,25,0,7,8,9,10,11,12,13,14,15,16,0,55,0,25,18,0,55,0,55,0,55,0,55,18,25,0,18,0,18,25,55,0,18,0,55,25,0,7,8,9,10,11,12,13,14,15,16,27,0,5,55,0,18,0,55,0,55,0,55,0,55,0,55,0,25,0,18,25,0,25,0,18,0,7,8,9,10,11,12,13,14,15,16,0,18,5,0,55,25,55,138,25,0,5,55,102,25,5,7,8,9,10,11,12,13,14,15,16,5,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,25,55,138,25,0,25,55,0,55,0,102,0,25,0,7,8,9,10,11,12,13,14,15,16,0,55,0,55,5,25,5,7,8,9,10,11,12,13,14,15,16,27,5,25,5,25,5,25,5,18,55,0,55,0,25,18,25,5,25,55,25,0,25,0,5,25,5,0,5,0,55,18,25,18,25,18,25,18,25,55,7,8,9,10,11,12,13,14,15,16,5,55,18,25,55,25,55,18,55,18,55,25,55,25,18,25,18,25,55,18,7,8,9,10,11,12,13,14,15,16,18,25,5,139,0,139,0,139,0,55,5,102,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,25,5,140,141,142,143,144,145,146,147,148,27,0,55,5,0,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,0,235,236,237,238,239,240,0,5,55,5,55,2,55,5,0,55,5,241,55,0,55,0,55,25,0,55,25,5,0,55,25,0,55,0,55,0,25,0,55,25,18,25,18,25,18,25,5,102,5,55,25,0,7,8,9,10,11,12,13,14,15,16,0,27,0,5,25,21,0,7,8,9,10,11,12,13,14,15,16,0,55,102,55,0,55,25,55,0,55,0,55,0,25,18,25,18,0,18,25,18,25,0,5,0,5,7,8,9,10,11,12,13,14,15,16,55,0,55,0,55,0,55,0,7,8,9,10,11,12,13,14,15,16,140,0,5,55,25,18,25,0,5,55,18,25,18,25,0,25,18,25,18,25,18,25,0,25,7,8,9,10,11,12,13,14,15,16,0,7,8,9,10,11,12,13,14,15,16,0,5,102,5,0,25,6,0,25,18,55,25,18,25,18,25,18,25,18,55,0,7,8,9,10,11,12,13,14,15,16,5,25,5,0,25,18,55,18,25,18,25,18,25,55,7,8,9,10,11,12,13,14,15,16,55,25,18,25,18,25,18,25,18,0,5,55,18,25,18,25,0,5,7,8,9,10,11,12,13,14,15,16,0,55,7,8,9,10,11,12,13,14,15,16,55,102,5,0,5,0,25,5,25,18,25,55,25,55,18,25,55,0,25,0,20,101,20,101,242,20,243,20,101,25,0,25,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,244,245,246,247,248,249,20,250,20,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,251,252,251,0,252,0,251,252,251,252,251,0,252,0,253,251,254,251,255,251,256,251,0,252,0,252,0,252,0,252,251,252,257,258,259,260,261,262,0,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,251,311,312,313,0,314,315,252,316,317,6,318,6,319,320,321,0,322,323,324,325,6,251,326,327,0,328,329,252,330,0,6,251,331,332,333,126,334,335,252,336,130,6,0,337,338,339,0,340,341,342,343,344,6,0,2,21,5,6,5,6,5,6,3,21,2,5,18,5,18,5,2,21,0,21,345,101,0,346,347,348,349,350,351,5,101,345,26,22,23,346,347,348,349,350,351,5,0,101,0,5,0,25,6,25,6,25,0,5,120,5,120,5,20,120,20,120,20,5,120,5,352,120,5,120,5,353,5,120,5,354,355,120,352,20,120,356,120,20,55,20,5,20,120,5,120,20,5,357,5,27,358,359,241,30,31,241,27,5,0,5,0,5,0,5,0,26,22,23,346,347,348,349,350,351,27,26,22,23,346,347,348,349,350,351,27,26,22,23,346,347,348,349,350,351,27,5,360,361,345,27,26,22,23,346,347,348,349,350,351,27,345,5,26,22,23,346,347,348,349,350,351,27,26,22,23,346,347,348,349,350,351,27,26,22,23,346,347,348,349,350,351,27,5,0,5,0,5,0,5,0,5,0,5,0,135,0,136,0,30,31,362,363,364,365,366,30,31,30,31,30,31,367,368,369,370,20,30,31,20,30,31,20,101,371,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,20,5,30,31,30,31,25,30,31,0,5,27,5,372,0,372,0,372,0,55,0,102,5,0,25,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,25,5,373,5,0,5,0,5,0,5,0,5,0,2,5,102,55,241,5,241,25,18,5,102,5,241,102,55,5,0,55,0,25,6,102,55,5,55,5,102,55,0,55,0,55,0,5,27,5,55,0,5,0,55,5,0,27,5,27,5,27,5,27,5,27,5,0,55,374,55,374,55,374,55,374,55,0,5,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,0,55,102,55,0,5,0,55,102,5,55,102,5,55,7,8,9,10,11,12,13,14,15,16,55,0,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,55,25,6,5,25,5,102,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,101,25,55,241,25,5,0,6,102,6,30,31,30,31,30,31,30,31,30,31,30,31,30,31,20,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,101,20,30,31,30,31,375,30,31,30,31,30,31,30,31,30,31,102,6,30,31,376,20,55,30,31,30,31,20,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,377,378,379,380,0,381,382,383,384,30,31,30,31,0,55,101,20,55,25,55,25,55,25,55,18,25,18,5,0,27,5,0,55,5,0,18,55,18,25,0,5,7,8,9,10,11,12,13,14,15,16,0,25,55,5,55,5,55,0,7,8,9,10,11,12,13,14,15,16,55,25,5,55,25,18,0,5,55,0,25,18,55,25,18,25,18,25,18,5,0,102,7,8,9,10,11,12,13,14,15,16,0,5,55,25,102,55,7,8,9,10,11,12,13,14,15,16,55,0,55,25,18,25,18,25,0,55,25,55,25,18,0,7,8,9,10,11,12,13,14,15,16,0,5,55,102,55,5,55,18,25,18,55,25,55,25,55,25,55,25,55,25,55,0,55,102,5,55,18,25,18,5,55,102,18,25,0,55,0,55,0,55,0,55,0,55,0,20,385,20,6,101,20,0,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,55,18,25,18,25,18,5,18,25,0,7,8,9,10,11,12,13,14,15,16,0,55,0,55,0,55,0,1,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,0,55,0,466,467,468,469,470,471,472,0,473,474,475,476,477,0,55,25,55,5,55,0,55,0,55,0,55,0,55,0,55,6,0,55,478,55,5,0,55,0,55,0,55,478,5,0,25,5,6,5,0,25,5,18,5,18,5,6,0,5,6,5,0,5,0,478,55,478,55,478,0,478,55,478,55,478,55,478,55,478,55,0,21,0,5,6,5,6,5,7,8,9,10,11,12,13,14,15,16,6,5,17,5,6,18,6,19,5,55,102,55,479,55,0,55,0,55,0,55,0,55,0,5,6,5,0,5,0,21,5,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,5,0,27,0,5,241,27,5,27,5,0,5,0,5,0,5,25,0,55,0,55,0,25,27,0,55,27,0,55,241,55,241,0,55,25,0,55,0,5,55,0,55,5,241,0,480,481,55,0,7,8,9,10,11,12,13,14,15,16,0,55,0,55,0,5,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,5,27,55,5,27,55,0,27,0,55,0,55,0,27,55,27,0,5,55,0,5,0,55,0,27,55,27,0,27,55,25,0,25,0,25,55,0,55,0,55,0,25,0,25,26,22,23,346,27,0,5,0,55,27,5,55,27,0,55,5,55,25,0,27,5,0,55,0,5,55,0,27,55,0,27,55,0,5,0,27,0,55,0,108,0,115,0,27,0,26,22,23,346,347,348,349,350,351,27,0,18,25,18,55,25,5,0,26,22,23,346,347,348,349,350,351,27,7,8,9,10,11,12,13,14,15,16,0,25,18,55,18,25,18,25,5,21,5,0,55,0,7,8,9,10,11,12,13,14,15,16,0,25,55,25,18,25,0,7,8,9,10,11,12,13,14,15,16,5,0,55,25,5,55,0,25,18,55,18,25,18,55,5,25,5,0,7,8,9,10,11,12,13,14,15,16,55,5,55,5,0,27,0,55,0,55,18,25,18,25,18,25,5,0,55,0,55,0,55,0,55,0,55,5,0,55,25,18,25,0,7,8,9,10,11,12,13,14,15,16,0,25,18,0,55,0,55,0,55,0,55,0,55,0,55,0,25,55,18,25,18,0,18,0,18,0,55,0,18,0,55,18,0,25,0,25,0,55,18,25,18,25,18,25,18,25,55,5,55,0,7,8,9,10,11,12,13,14,15,16,0,55,18,25,0,18,25,18,25,5,55,25,0,55,18,25,18,25,18,25,5,55,0,7,8,9,10,11,12,13,14,15,16,0,55,25,18,25,18,25,18,25,0,7,8,9,10,11,12,13,14,15,16,0,55,0,25,18,25,18,25,0,7,8,9,10,11,12,13,14,15,16,27,5,0,17,19,7,8,9,10,11,12,13,14,15,16,27,0,55,0,55,0,55,0,241,0,5,0,55,0,55,0,55,0,55,0,55,0,7,8,9,10,11,12,13,14,15,16,0,5,0,55,0,25,5,0,55,25,5,102,5,0,7,8,9,10,11,12,13,14,15,16,0,27,0,55,0,55,0,55,0,55,18,0,25,102,0,55,0,55,0,55,0,55,0,55,0,5,25,5,21,0,5,0,5,0,5,18,25,5,18,21,25,5,25,5,25,5,0,5,25,5,0,5,0,27,0,120,20,120,20,0,20,120,20,120,0,120,0,120,0,120,0,120,0,120,20,0,20,0,20,0,20,120,20,120,0,120,0,120,0,120,0,20,120,0,120,0,120,0,120,0,120,0,20,120,20,120,20,120,20,120,20,120,20,120,20,0,120,5,20,5,20,120,5,20,5,20,120,5,20,5,20,120,5,20,5,20,120,5,20,5,20,120,20,0,7,8,9,10,11,12,13,14,15,16,7,8,9,10,11,12,13,14,15,16,7,8,9,10,11,12,13,14,15,16,7,8,9,10,11,12,13,14,15,16,7,8,9,10,11,12,13,14,15,16,25,5,25,5,25,5,25,5,0,25,0,25,0,55,0,27,25,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,345,26,22,23,346,347,348,349,350,351,27,0,5,0,482,5,482,5,0,482,5,0,5,0,5,0,5,0,5,0,5,6,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,374,55,0,55,0,55,0,55,0,55,0,21,0,21,25,0,1,0],O=1,P=2,Q=4,R=8,T=64,U=128,V=256,W=512,X=1024,Y=2048,Z=4096,$=8192,rn=16384;
unicode=unicode||{},unicode.title=function(r){for(var n="",t=!1,e=0;r.length>e;e++){var c=r.charAt(e);n+=t?x(c,r,e):S(c),t=z(c)}return n},unicode.capitalize=function(r){if(r.length==0){return r};var n="";n+=w(r.charAt(0));for(var t=1;r.length>t;t++)n+=x(r.charAt(t),r,t);return n},unicode.casefold=function(r){for(var n="",t=0;r.length>t;t++)n+=b(r.charAt(t));return n},unicode.islower=function(r){if(""==r)return!1;for(var n=!1,t=0;r.length>t;t++){var e=r.charAt(t);if(p(e)||o(e))return!1;n||(n=g(e))}return n},unicode.isupper=function(r){if(""==r)return!1;for(var n=!1,t=0;r.length>t;t++){var e=r.charAt(t);if(g(e)||o(e))return!1;n||(n=p(e))}return n},unicode.istitle=function(r){if(""==r)return!1;for(var n=!1,t=!1,e=0;r.length>e;e++){var c=r.charAt(e);if(p(c)||o(c)){if(t)return!1;t=!0,n=!0}else if(g(c)){if(!t)return!1;t=!0,n=!0}else t=!1}return n},unicode.isspace=function(r){if(""==r)return!1;for(var n=0;r.length>n;n++){var t=r.charAt(n);if(!u(t))return!1}return!0},unicode.isalpha=function(r){if(""==r)return!1;for(var n=0;r.length>n;n++){var t=r.charAt(n);if(!j(t))return!1}return!0},unicode.isalnum=function(r){if(""==r)return!1;for(var n=0;r.length>n;n++){var t=r.charAt(n);if(!k(t))return!1}return!0},unicode.isdecimal=function(r){if(""==r)return!1;for(var n=0;r.length>n;n++){var t=r.charAt(n);if(!s(t))return!1}return!0},unicode.isdigit=function(r){if(""==r)return!1;for(var n=0;r.length>n;n++){var t=r.charAt(n);if(!A(t))return!1}return!0},unicode.isnumeric=function(r){if(""==r)return!1;for(var n=0;r.length>n;n++){var t=r.charAt(n);if(!l(t))return!1}return!0},unicode.isidentifier=function(r){if(""==r)return!1;if("_"!=r.charAt(0)&&!f(r.charAt(0)))return!1;for(var n=1;r.length>n;n++)if(!h(r.charAt(n)))return!1;return!0},unicode.isprintable=function(r){for(var n=0;r.length>n;n++)if(!C(r.charAt(n)))return!1;return!0},unicode.lower=function(r){for(var n="",t=0;r.length>t;t++){var e=r.charAt(t);n+=x(e,r,t)}return n},unicode.swapcase=function(r){for(var n="",t=0;r.length>t;t++){var e=r.charAt(t);n+=p(e)?x(e,r,t):g(e)?w(e):e}return n},unicode.upper=function(r){for(var n="",t=0;r.length>t;t++){var e=r.charAt(t);n+=w(e)}return n}}({},function(){return this}());
;
var __BRYTHON__=__BRYTHON__ ||{}
;(function($B){
var isWebWorker=('undefined' !==typeof WorkerGlobalScope)&&("function"===typeof importScripts)&&(navigator instanceof WorkerNavigator)
var _window=self;
var $path
if($B.brython_path===undefined){
var this_url;
if(isWebWorker){this_url=_window.location.href;}else{var scripts=document.getElementsByTagName('script')
this_url=scripts[scripts.length-1].src}
var elts=this_url.split('/')
elts.pop()
$path=$B.brython_path=elts.join('/')+'/'}else{$path=$B.brython_path}
var path=_window.location.origin+_window.location.pathname,path_elts=path.split("/")
path_elts.pop()
var $script_dir=$B.script_dir=path_elts.join("/")
$B.__ARGV=[]
$B.$py_module_path={}
$B.file_cache={}
$B.$py_src={}
$B.path=[$path+'Lib',$path+'libs',$script_dir,$path+'Lib/site-packages']
$B.async_enabled=false
if($B.async_enabled){$B.block={}}
$B.imported={}
$B.precompiled={}
$B._globals={}
$B.frames_stack=[]
$B.builtins={__repr__:function(){return "<module 'builtins>'"},__str__:function(){return "<module 'builtins'>"},}
$B.builtins_scope={id:'__builtins__',module:'__builtins__',binding:{}}
$B.builtin_funcs={}
$B.builtin_classes=[]
$B.__getattr__=function(attr){return this[attr]}
$B.__setattr__=function(attr,value){
if(['debug','stdout','stderr'].indexOf(attr)>-1){$B[attr]=value}
else{throw $B.builtins.AttributeError.$factory(
'__BRYTHON__ object has no attribute '+attr)}}
$B.language=_window.navigator.userLanguage ||_window.navigator.language ||'en';
$B.locale="C"
if(isWebWorker){$B.charset="utf-8"}else{
$B.charset=document.characterSet ||document.inputEncoding ||"utf-8"}
$B.max_int=Math.pow(2,53)-1
$B.min_int=-$B.max_int
$B.$py_next_hash=Math.pow(2,53)-1
$B.$py_UUID=0
$B.lambda_magic=Math.random().toString(36).substr(2,8)
$B.set_func_names=function(klass,module){if(klass.$infos){var name=klass.$infos.__name__
klass.$infos.__module__=module
klass.$infos.__qualname__=name}else{var name=klass.__name__
console.log("bizarre",klass)
klass.$infos={__name__:name,__module__:module,__qualname__:name}}
klass.__module__=module
for(var attr in klass){if(typeof klass[attr]=='function'){klass[attr].$infos={__doc__:klass[attr].__doc__ ||"",__module__:module,__qualname__ :name+'.'+attr,__name__:attr}
if(klass[attr].$type=="classmethod"){klass[attr].__class__=$B.method}}}}
var has_storage=typeof(Storage)!=="undefined"
if(has_storage){$B.has_local_storage=false
try{if(localStorage){$B.local_storage=localStorage
$B.has_local_storage=true}}catch(err){}
$B.has_session_storage=false
try{if(sessionStorage){$B.session_storage=sessionStorage
$B.has_session_storage=true}}catch(err){}}else{$B.has_local_storage=false
$B.has_session_storage=false}
$B.globals=function(){
return $B.frames_stack[$B.frames_stack.length-1][3]}
$B.$options={}
$B.python_to_js=function(src,script_id){$B.meta_path=$B.$meta_path.slice()
if(!$B.use_VFS){$B.meta_path.shift()}
if(script_id===undefined){script_id="__main__"}
var root=__BRYTHON__.py2js(src,script_id,script_id),js=root.to_js()
js="(function() {\n var $locals_"+script_id+" = {}\n"+js+"\n}())"
return js}
$B.regexIdentifier=/^(?:[\$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D])(?:[\$0-9A-Z_a-z\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF])*$/})(__BRYTHON__)
;
__BRYTHON__.implementation=[3,7,1,'dev',0]
__BRYTHON__.__MAGIC__="3.7.1"
__BRYTHON__.version_info=[3,7,0,'final',0]
__BRYTHON__.compiled_date="2019-02-20 11:49:16.429256"
__BRYTHON__.timestamp=1550681356429
__BRYTHON__.builtin_module_names=["_aio","_ajax","_base64","_binascii","_jsre","_locale","_multiprocessing","_posixsubprocess","_profile","_sre_utils","_string","_strptime","_svg","_sys","_warnings","array","builtins","dis","hashlib","json","long_int","marshal","math","modulefinder","posix","random","zlib"]
;

;(function($B){Number.isInteger=Number.isInteger ||function(value){return typeof value==='number' &&
isFinite(value)&&
Math.floor(value)===value};
Number.isSafeInteger=Number.isSafeInteger ||function(value){return Number.isInteger(value)&& Math.abs(value)<=Number.MAX_SAFE_INTEGER;};
var js,$pos,res,$op
var _b_=$B.builtins
var _window=self;
var isWebWorker=$B.isa_web_worker=
('undefined' !==typeof WorkerGlobalScope)&&
("function"===typeof importScripts)&&
(navigator instanceof WorkerNavigator)
$B.parser={}
var keys=$B.keys=function(obj){var res=[]
for(var attr in obj){res.push(attr)}
res.sort()
return res}
var clone=$B.clone=function(obj){var res={}
for(var attr in obj){res[attr]=obj[attr]}
return res}
$B.last=function(table){return table[table.length-1]}
$B.list2obj=function(list,value){var res={},i=list.length
if(value===undefined){value=true}
while(i--> 0){res[list[i]]=value}
return res}
var $operators={"//=":"ifloordiv",">>=":"irshift","<<=":"ilshift","**=":"ipow","**":"pow","//":"floordiv","<<":"lshift",">>":"rshift","+=":"iadd","-=":"isub","*=":"imul","/=":"itruediv","%=":"imod","&=":"iand","|=":"ior","^=":"ixor","+":"add","-":"sub","*":"mul","/":"truediv","%":"mod","&":"and","|":"or","~":"invert","^":"xor","<":"lt",">":"gt","<=":"le",">=":"ge","==":"eq","!=":"ne","or":"or","and":"and","in":"in","not":"not","is":"is","not_in":"not_in","is_not":"is_not",
"@":"matmul","@=":"imatmul" }
var $augmented_assigns=$B.augmented_assigns={"//=":"ifloordiv",">>=":"irshift","<<=":"ilshift","**=":"ipow","+=":"iadd","-=":"isub","*=":"imul","/=":"itruediv","%=":"imod","&=":"iand","|=":"ior","^=":"ixor","@=":"imatmul"}
var noassign=$B.list2obj(['True','False','None','__debug__'])
var $op_order=[['or'],['and'],['not'],['in','not_in'],['<','<=','>','>=','!=','==','is','is_not'],['|'],['^'],['&'],['>>','<<'],['+'],['-'],['*','@','/','//','%'],['unary_neg','unary_inv','unary_pos'],['**']
]
var $op_weight={},$weight=1
$op_order.forEach(function(_tmp){_tmp.forEach(function(item){$op_weight[item]=$weight})
$weight++})
var $loop_num=0
var create_temp_name=$B.parser.create_temp_name=function(prefix){var _prefix=prefix ||'$temp'
return _prefix+$loop_num++;}
var replace_node=$B.parser.replace_node=function(replace_what,replace_with){var parent=replace_what.parent
var pos=get_rank_in_parent(replace_what)
parent.children[pos]=replace_with
replace_with.parent=parent
replace_with.bindings=replace_what.bindings}
var get_rank_in_parent=$B.parser.get_rank_in_parent=function(node){return node.parent.children.indexOf(node)}
var add_identnode=$B.parser.add_identnode=function(parent,insert_at,name,val){var new_node=new $Node()
new_node.parent=parent
new_node.locals=parent.locals
new_node.module=parent.module
var new_ctx=new $NodeCtx(new_node)
var expr_ctx=new $ExprCtx(new_ctx,'id',true)
var idctx=new $IdCtx(expr_ctx,name)
var assign=new $AssignCtx(expr_ctx)
if(insert_at===-1)
parent.add(new_node)
else
parent.insert(insert_at,new_node)
assign.tree[1]=val
return new_node}
var $add_yield_from_code=$B.parser.$add_yield_from_code=function(yield_ctx){var pnode=$get_node(yield_ctx)
var generator=$get_scope(yield_ctx).C.tree[0]
pnode.yield_atoms.splice(pnode.yield_atoms.indexOf(this),1)
generator.yields.splice(generator.yields.indexOf(this),1)
var INDENT=" ".repeat(pnode.indent)
var replace_with=
INDENT+"import sys"+"\n"+
INDENT+"try:"+"\n"+
INDENT+"    _y = next(_i)"+"\n"+
INDENT+"except StopIteration as _e:"+"\n"+
INDENT+"    _r = _e.value"+"\n"+
INDENT+"else:"+"\n"+
INDENT+"    while 1:"+"\n"+
INDENT+"        try:"+"\n"+
INDENT+"            _s = yield _y"+"\n"+
INDENT+"        except GeneratorExit as _e:"+"\n"+
INDENT+"            try:"+"\n"+
INDENT+"                _m = _i.close"+"\n"+
INDENT+"            except AttributeError:"+"\n"+
INDENT+"                pass"+"\n"+
INDENT+"            else:"+"\n"+
INDENT+"                _m()"+"\n"+
INDENT+"            raise _e"+"\n"+
INDENT+"        except BaseException as _e:"+"\n"+
INDENT+"            _x = sys.exc_info()"+"\n"+
INDENT+"            try:"+"\n"+
INDENT+"                _m = _i.throw"+"\n"+
INDENT+"            except AttributeError:"+"\n"+
INDENT+"                raise _e"+"\n"+
INDENT+"            else:"+"\n"+
INDENT+"                try:"+"\n"+
INDENT+"                    _y = _m(*_x)"+"\n"+
INDENT+"                except StopIteration as _e:"+"\n"+
INDENT+"                    _r = _e.value"+"\n"+
INDENT+"                    break"+"\n"+
INDENT+"        else:"+"\n"+
INDENT+"            try:"+"\n"+
INDENT+"                if _s is None:"+"\n"+
INDENT+"                    _y = next(_i)"+"\n"+
INDENT+"                else:"+"\n"+
INDENT+"                    _y = _i.send(_s)"+"\n"+
INDENT+"            except StopIteration as _e:"+"\n"+
INDENT+"                _r = _e.value"+"\n"+
INDENT+"                break"+"\n";
var repl={_i :create_temp_name('__i'),_y :create_temp_name('__y'),_r :create_temp_name('__r'),_e :create_temp_name('__e'),_s :create_temp_name('__s'),_m :create_temp_name('__m'),}
pnode.bindings=pnode.bindings ||{}
for(attr in repl){replace_with=replace_with.replace(new RegExp("\\b"+attr+"\\b",'g'),repl[attr])
pnode.bindings[repl[attr]]=true}
$tokenize(pnode,replace_with)
var params={iter_name:repl._i,result_var_name:repl._r,yield_expr:yield_ctx,}
if(yield_ctx.parent.type==='assign'){params.save_result=true
params.assign_ctx=yield_ctx.parent
params.save_result_rank=pnode.parent.children.length-
pnode.parent.children.indexOf(pnode)}
var new_node=new $YieldFromMarkerNode(params)
replace_node(pnode,new_node)}
var chained_comp_num=0
var $_SyntaxError=$B.parser.$_SyntaxError=function(C,msg,indent){
var ctx_node=C
while(ctx_node.type !=='node'){ctx_node=ctx_node.parent}
var tree_node=ctx_node.node,root=tree_node
while(root.parent !==undefined){root=root.parent}
var module=tree_node.module,src=root.src,line_num=tree_node.line_num
if(src){line_num=src.substr(0,$pos).split("\n").length}
if(root.line_info){line_num=root.line_info}
if(indent !==undefined){line_num++}
if(indent===undefined){if(Array.isArray(msg)){$B.$SyntaxError(module,msg[0],src,$pos,line_num)}
if(msg==="Triple string end not found"){
$B.$SyntaxError(module,'invalid syntax : triple string end not found',src,$pos,line_num,root)}
$B.$SyntaxError(module,'invalid syntax',src,$pos,line_num,root)}else{throw $B.$IndentationError(module,msg,src,$pos,line_num,root)}}
var $Node=$B.parser.$Node=function(type){this.type=type
this.children=[]
this.yield_atoms=[]
this.add=function(child){
this.children[this.children.length]=child
child.parent=this
child.module=this.module}
this.insert=function(pos,child){
this.children.splice(pos,0,child)
child.parent=this
child.module=this.module}
this.toString=function(){return "<object 'Node'>"}
this.show=function(indent){
var res=''
if(this.type==='module'){this.children.forEach(function(child){res+=child.show(indent)})
return res}
indent=indent ||0
res+=' '.repeat(indent)
res+=this.C
if(this.children.length > 0){res+='{'}
res+='\n'
this.children.forEach(function(child){res+='['+i+'] '+child.show(indent+4)})
if(this.children.length > 0){res+=' '.repeat(indent)
res+='}\n'}
return res}
this.to_js=function(indent){
if(this.js !==undefined){return this.js}
this.res=[]
this.unbound=[]
if(this.type==='module'){this.children.forEach(function(child){this.res.push(child.to_js())},this)
this.js=this.res.join('')
return this.js}
indent=indent ||0
var ctx_js=this.C.to_js()
if(ctx_js){
this.res.push(' '.repeat(indent))
this.res.push(ctx_js)
if(this.children.length > 0){this.res.push('{')}
this.res.push('\n')
this.children.forEach(function(child){this.res.push(child.to_js(indent+4))},this)
if(this.children.length > 0){this.res.push(' '.repeat(indent))
this.res.push('}\n')}}
this.js=this.res.join('')
return this.js}
this.transform=function(rank){
if(this.yield_atoms.length > 0){
this.parent.children.splice(rank,1)
var offset=0
this.yield_atoms.forEach(function(atom){
var temp_node=new $Node()
var js='var $yield_value'+$loop_num
js+=' = '+(atom.to_js()||'None')
new $NodeJSCtx(temp_node,js)
this.parent.insert(rank+offset,temp_node)
var yield_node=new $Node()
this.parent.insert(rank+offset+1,yield_node)
var yield_expr=new $YieldCtx(new $NodeCtx(yield_node))
new $StringCtx(yield_expr,'$yield_value'+$loop_num)
var set_yield=new $Node()
set_yield.is_set_yield_value=true
js=$loop_num
new $NodeJSCtx(set_yield,js)
this.parent.insert(rank+offset+2,set_yield)
atom.to_js=(function(x){return function(){return '$yield_value'+x}})($loop_num)
$loop_num++
offset+=3},this)
this.parent.insert(rank+offset,this)
this.yield_atoms=[]
return offset+1}
if(this.type==='module'){
this.__doc__=$get_docstring(this)
var i=0
while(i < this.children.length){var offset=this.children[i].transform(i)
if(offset===undefined){offset=1}
i+=offset}}else{var elt=this.C.tree[0],ctx_offset
if(elt===undefined){console.log(this)}
if(elt.transform !==undefined){ctx_offset=elt.transform(this,rank)}
var i=0
while(i < this.children.length){var offset=this.children[i].transform(i)
if(offset===undefined){offset=1}
i+=offset}
if(ctx_offset===undefined){ctx_offset=1}
if(this.C && this.C.tree !==undefined &&
this.C.tree[0].type=="generator"){var def_node=this,def_ctx=def_node.C.tree[0]
var blocks=[],node=def_node.parent_block,is_comp=node.is_comp
while(true){var node_id=node.id.replace(/\./g,'_'),block='"$locals_'+node_id+'": '
if(is_comp){block+='$B.clone($locals_'+node_id+')'}else{block+='$locals_'+node_id}
blocks.push(block)
node=node.parent_block
if(node===undefined ||node.id=='__builtins__'){break}}
blocks='{'+blocks+'}'
var parent=this.parent
while(parent !==undefined && parent.id===undefined){parent=parent.parent}
var g=$B.$BRgenerator(def_ctx.name,blocks,def_ctx.id,def_node),block_id=parent.id.replace(/\./g,'_'),name=def_ctx.decorated ? def_ctx.alias :
def_ctx.name+def_ctx.num,res='var '+def_ctx.name+def_ctx.num+' = '+
'$locals_'+block_id+'["'+def_ctx.name+
'"] = $B.genfunc("'+
def_ctx.name+'", '+blocks+',['+g+'],'+
def_ctx.default_str+')'
var new_node=$NodeJS(res)
new_node.bindings=this.bindings
this.parent.children.splice(rank,1)
this.parent.insert(rank+offset-1,new_node)}
return ctx_offset}}
this.clone=function(){var res=new $Node(this.type)
for(var attr in this){res[attr]=this[attr]}
return res}}
var $YieldFromMarkerNode=$B.parser.$YieldFromMarkerNode=function(params){$Node.apply(this,['marker'])
new $NodeCtx(this)
this.params=params
this.tree
this.transform=function(rank){add_identnode(this.parent,rank,params.iter_name,new $JSCode('$B.$iter('+params.yield_expr.tree[0].to_js()+')')
)
if(params.save_result){var assign_ctx=params.assign_ctx
assign_ctx.tree.pop()
var expr_ctx=new $ExprCtx(assign_ctx,'id',true)
var idctx=new $IdCtx(expr_ctx,params.result_var_name)
assign_ctx.tree[1]=expr_ctx
var new_node=this.parent.insert(params.save_result_rank+rank+1,$NodeJS(assign_ctx.to_js())
)}
return 2}}
var $MarkerNode=$B.parser.$MarkerNode=function(name){$Node.apply(this,['marker'])
new $NodeCtx(this)
this._name=name
this.transform=function(rank){return 1}
this.to_js=function(){return ''}}
var $AbstractExprCtx=$B.parser.$AbstractExprCtx=function(C,with_commas){this.type='abstract_expr'
this.with_commas=with_commas
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return '(abstract_expr '+with_commas+') '+this.tree}
this.to_js=function(){this.js_processed=true
if(this.type==='list')return '['+$to_js(this.tree)+']'
return $to_js(this.tree)}}
var $AliasCtx=$B.parser.$AliasCtx=function(C){
this.type='ctx_manager_alias'
this.parent=C
this.tree=[]
C.tree[C.tree.length-1].alias=this}
var $AnnotationCtx=$B.parser.$AnnotationCtx=function(C){
this.type='annotation'
this.parent=C
this.tree=[]
C.annotation=this
this.toString=function(){return '(annotation) '+this.tree}
this.to_js=function(){return $to_js(this.tree)}}
var $AssertCtx=$B.parser.$AssertCtx=function(C){
this.type='assert'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return '(assert) '+this.tree}
this.transform=function(node,rank){if(this.tree[0].type=='list_or_tuple'){
var condition=this.tree[0].tree[0]
var message=this.tree[0].tree[1]}else{var condition=this.tree[0]
var message=null}
var new_ctx=new $ConditionCtx(node.C,'if')
var not_ctx=new $NotCtx(new_ctx)
not_ctx.tree=[condition]
node.C=new_ctx
var new_node=new $Node()
var js='throw AssertionError.$factory("AssertionError")'
if(message !==null){js='throw AssertionError.$factory(str.$factory('+
message.to_js()+'))'}
new $NodeJSCtx(new_node,js)
node.add(new_node)}}
var $AssignCtx=$B.parser.$AssignCtx=function(C){
var ctx=C
while(ctx){if(ctx.type=='assert'){$_SyntaxError(C,'invalid syntax - assign')}
ctx=ctx.parent}
this.type='assign'
C.parent.tree.pop()
C.parent.tree[C.parent.tree.length]=this
this.parent=C.parent
this.tree=[C]
var scope=$get_scope(this)
if(C.type=='expr' && C.tree[0].type=='call'){$_SyntaxError(C,["can't assign to function call "])}else if(C.type=='list_or_tuple' ||
(C.type=='expr' && C.tree[0].type=='list_or_tuple')){if(C.type=='expr'){C=C.tree[0]}
C.bind_ids(scope)}else if(C.type=='assign'){C.tree.forEach(function(elt){var assigned=elt.tree[0]
if(assigned.type=='id'){$bind(assigned.value,scope,this)}},this)}else{var assigned=C.tree[0]
if(assigned && assigned.type=='id'){if(noassign[assigned.value]===true){$_SyntaxError(C,["can't assign to keyword"])}
assigned.bound=true
if(!$B._globals[scope.id]||
$B._globals[scope.id][assigned.value]===undefined){
var node=$get_node(this)
node.bound_before=$B.keys(scope.binding)
$bind(assigned.value,scope,this)}else{
var module=$get_module(C)
$bind(assigned.value,module,this)}}else if(["str","int","float","complex"].indexOf(assigned.type)>-1){$_SyntaxError(C,["can't assign to literal"])}else if(assigned.type=="unary"){$_SyntaxError(C,["can't assign to operator"])}}
this.guess_type=function(){return}
this.toString=function(){return '(assign) '+this.tree[0]+'='+this.tree[1]}
this.transform=function(node,rank){
var scope=$get_scope(this)
var left=this.tree[0],right=this.tree[1],assigned=[]
while(left.type=='assign'){assigned.push(left.tree[1])
left=left.tree[0]}
if(assigned.length > 0){assigned.push(left)
var ctx=node.C
ctx.tree=[]
var nleft=new $RawJSCtx(ctx,'var $temp'+$loop_num)
nleft.tree=ctx.tree
var nassign=new $AssignCtx(nleft)
nassign.tree[1]=right
assigned.forEach(function(elt){var new_node=new $Node(),node_ctx=new $NodeCtx(new_node)
new_node.locals=node.locals
new_node.line_num=node.line_num
node.parent.insert(rank+1,new_node)
elt.parent=node_ctx
var assign=new $AssignCtx(elt)
new $RawJSCtx(assign,'$temp'+$loop_num)})
$loop_num++
return assigned.length-1}
var left_items=null
switch(left.type){case 'expr':
if(left.tree.length > 1){left_items=left.tree}else if(left.tree[0].type=='list_or_tuple' ||
left.tree[0].type=='target_list'){left_items=left.tree[0].tree}else if(left.tree[0].type=='id'){
var name=left.tree[0].value
if($B._globals && $B._globals[scope.id]
&& $B._globals[scope.id][name]){}else{left.tree[0].bound=true}}
break
case 'target_list':
case 'list_or_tuple':
left_items=left.tree}
var right=this.tree[1]
if(left_items===null){if(left.tree[0].bound){if(right.type=="expr" && right.name=="int"){node.bindings=node.bindings ||{}
node.bindings[left.tree[0].value]="int"}}
return}
var right_items=null
if(right.type=='list' ||right.type=='tuple'||
(right.type=='expr' && right.tree.length > 1)){right_items=right.tree}
if(right_items !==null){
if(right_items.length > left_items.length){throw Error('ValueError : too many values to unpack (expected '+
left_items.length+')')}else if(right_items.length < left_items.length){throw Error('ValueError : need more than '+
right_items.length+' to unpack')}
var new_nodes=[],pos=0
var new_node=new $Node()
new_node.line_num=node.line_num
new $NodeJSCtx(new_node,'void(0)')
new_nodes[pos++]=new_node
var $var='$temp'+$loop_num
var new_node=new $Node()
new_node.line_num=node.line_num
new $NodeJSCtx(new_node,'var '+$var+' = [], $pos = 0')
new_nodes[pos++]=new_node
right_items.forEach(function(right_item){var js=$var+'[$pos++] = '+right_item.to_js()
var new_node=new $Node()
new_node.line_num=node.line_num
new $NodeJSCtx(new_node,js)
new_nodes[pos++]=new_node})
var this_node=$get_node(this)
left_items.forEach(function(left_item){var new_node=new $Node()
new_node.id=this_node.module
new_node.locals=this_node.locals
new_node.line_num=node.line_num
var C=new $NodeCtx(new_node)
left_item.parent=C
var assign=new $AssignCtx(left_item,false)
assign.tree[1]=new $JSCode($var+'['+i+']')
new_nodes[pos++]=new_node},this)
node.parent.children.splice(rank,1)
for(var i=new_nodes.length-1;i >=0;i--){node.parent.insert(rank,new_nodes[i])}
$loop_num++}else{
node.parent.children.splice(rank,1)
var rname=create_temp_name('$right')
var rlname=create_temp_name('$rlist');
var new_node=$NodeJS('var '+rname+' = '+
'$B.$getattr($B.$iter('+right.to_js()+
'), "__next__");')
new_node.line_num=node.line_num
node.parent.insert(rank++,new_node)
node.parent.insert(rank++,$NodeJS('var '+rlname+'=[], $pos=0;'+
'while(1){'+
'try{'+
rlname+'[$pos++] = '+rname+'()'+
'}catch(err){'+
'break'+
'}'+
'}')
)
var packed=null
var min_length=left_items.length
for(var i=0;i < left_items.length;i++){var expr=left_items[i]
if(expr.type=='packed' ||
(expr.type=='expr' && expr.tree[0].type=='packed')){packed=i
min_length--
break}}
node.parent.insert(rank++,$NodeJS('if('+rlname+'.length<'+min_length+'){'+
'throw ValueError.$factory('+
'"need more than " +'+rlname+
'.length + " value" + ('+rlname+
'.length > 1 ?'+' "s" : "") + " to unpack")}'
)
)
if(packed==null){node.parent.insert(rank++,$NodeJS('if('+rlname+'.length>'+min_length+'){'+
'throw ValueError.$factory('+
'"too many values to unpack '+
'(expected '+left_items.length+')"'+
')'+
'}')
)}
left_items.forEach(function(left_item,i){var new_node=new $Node()
new_node.id=scope.id
new_node.line_num=node.line_num
node.parent.insert(rank++,new_node)
var C=new $NodeCtx(new_node)
left_item.parent=C
var assign=new $AssignCtx(left_item,false)
var js=rlname
if(packed==null ||i < packed){js+='['+i+']'}else if(i==packed){js+='.slice('+i+','+rlname+'.length-'+
(left_items.length-i-1)+')'}else{js+='['+rlname+'.length-'+(left_items.length-i)+']'}
assign.tree[1]=new $JSCode(js)})
$loop_num++}}
this.to_js=function(){this.js_processed=true
if(this.parent.type=='call'){
return '{$nat:"kw",name:'+this.tree[0].to_js()+
',value:'+this.tree[1].to_js()+'}'}
var left=this.tree[0]
if(left.type=='expr'){left=left.tree[0]}
var right=this.tree[1]
if(left.type=='attribute' ||left.type=='sub'){
var right_js=right.to_js()
var res='',rvar='',$var='$temp'+$loop_num
if(right.type=='expr' && right.tree[0]!==undefined &&
right.tree[0].type=='call' &&
('eval'==right.tree[0].func.value ||
'exec'==right.tree[0].func.value)){res+='var '+$var+' = '+right_js+';\n'
rvar=$var}else if(right.type=='expr' && right.tree[0]!==undefined &&
right.tree[0].type=='sub'){res+='var '+$var+' = '+right_js+';\n'
rvar=$var}else{rvar=right_js}
if(left.type=='attribute'){
$loop_num++
left.func='setattr'
var left_to_js=left.to_js()
left.func='getattr'
if(left.assign_self){return res+left_to_js[0]+rvar+left_to_js[1]+rvar+')'}
res+=left_to_js
res=res.substr(0,res.length-1)
return res+','+rvar+');None;'}
if(left.type=='sub'){
var seq=left.value.to_js(),temp='$temp'+$loop_num,type
if(left.value.type=='id'){type=$get_node(this).locals[left.value.value]}
$loop_num++
var res='var '+temp+' = '+seq+'\n'
if(type !=='list'){res+='if(Array.isArray('+temp+') && !'+
temp+'.__class__){'}
if(left.tree.length==1){res+='$B.set_list_key('+temp+','+
(left.tree[0].to_js()+'' ||'null')+','+
right.to_js()+')'}else if(left.tree.length==2){res+='$B.set_list_slice('+temp+','+
(left.tree[0].to_js()+'' ||'null')+','+
(left.tree[1].to_js()+'' ||'null')+','+
right.to_js()+')'}else if(left.tree.length==3){res+='$B.set_list_slice_step('+temp+','+
(left.tree[0].to_js()+'' ||'null')+','+
(left.tree[1].to_js()+'' ||'null')+','+
(left.tree[2].to_js()+'' ||'null')+','+
right.to_js()+')'}
if(type=='list'){return res}
res+='\n}else{'
if(left.tree.length==1){res+='$B.$setitem('+left.value.to_js()+
','+left.tree[0].to_js()+','+right_js+')};None;'}else{left.func='setitem'
res+=left.to_js()
res=res.substr(0,res.length-1)
left.func='getitem'
res+=','+right_js+')};None;'}
return res}}
return left.to_js()+' = '+right.to_js()}}
var $AsyncCtx=$B.parser.$AsyncCtx=function(C){
this.type='async'
this.parent=C
C.async=true
this.toString=function(){return '(async)'}}
var $AttrCtx=$B.parser.$AttrCtx=function(C){
this.type='attribute'
this.value=C.tree[0]
this.parent=C
C.tree.pop()
C.tree[C.tree.length]=this
this.tree=[]
this.func='getattr'
this.toString=function(){return '(attr) '+this.value+'.'+this.name}
this.to_js=function(){this.js_processed=true
var js=this.value.to_js()
if(this.func=="setattr" && this.value.type=="id"){var scope=$get_scope(this),parent=scope.parent
if(scope.ntype=="def"){if(parent.ntype=="class"){var params=scope.C.tree[0].positional_list
if(this.value.value==params[0]&& parent.C &&
parent.C.tree[0].args===undefined){
this.assign_self=true
return[js+".__class__ && !"+
js+".__class__.$has_setattr && ! "+js+
".$is_class ? "+js+
".__dict__.$string_dict['"+this.name+
"'] = "," : $B.$setattr("+js+
', "'+this.name+'", ']}}}}
if(this.func=='setattr'){
return '$B.$setattr('+js+',"'+this.name+'")'}else{return '$B.$getattr('+js+',"'+this.name+'")'}}}
var $AugmentedAssignCtx=$B.parser.$AugmentedAssignCtx=function(C,op){
this.type='augm_assign'
this.parent=C.parent
C.parent.tree.pop()
C.parent.tree[C.parent.tree.length]=this
this.op=op
this.tree=[C]
var scope=this.scope=$get_scope(this)
if(C.type=='expr'){var assigned=C.tree[0]
if(assigned.type=='id'){var name=assigned.value
if(noassign[name]===true){$_SyntaxError(C,["can't assign to keyword"])}else if((scope.ntype=='def' ||scope.ntype=='generator')&&
(scope.binding[name]===undefined)){if(scope.globals===undefined ||
scope.globals.indexOf(name)==-1){
assigned.unbound=true}}}else if(['str','int','float','complex'].indexOf(assigned.type)>-1){$_SyntaxError(C,["can't assign to literal"])}}
$get_node(this).bound_before=$B.keys(scope.binding)
this.module=scope.module
this.toString=function(){return '(augm assign) '+this.tree}
this.transform=function(node,rank){var func='__'+$operators[op]+'__',offset=0,parent=node.parent,line_num=node.line_num,lnum_set=false
parent.children.splice(rank,1)
var left_is_id=(this.tree[0].type=='expr' &&
this.tree[0].tree[0].type=='id')
if(left_is_id){var left_bound_to_int=
this.tree[0].tree[0].bindingType(this.scope)=="int"
this.tree[0].tree[0].augm_assign=true
if($B.debug > 0){var check_node=$NodeJS('if('+this.tree[0].to_js()+
' === undefined){throw NameError.$factory("name \'' +
                    this.tree[0].tree[0].value + '\' is not defined")}')
check_node.forced_line_num=node.line_num
node.parent.insert(rank,check_node)
offset++}
var left_id=this.tree[0].tree[0].value,was_bound=this.scope.binding[left_id]!==undefined,left_id_unbound=this.tree[0].tree[0].unbound}
var right_is_int=(this.tree[1].type=='expr' &&
this.tree[1].tree[0].type=='int')
var right=right_is_int ? this.tree[1].tree[0].to_js():'$temp'
if(!right_is_int){
var new_node=new $Node()
new_node.line_num=line_num
lnum_set=true
new $NodeJSCtx(new_node,'var $temp,$left;')
parent.insert(rank,new_node)
offset++
var new_node=new $Node()
new_node.id=this.scope.id
var new_ctx=new $NodeCtx(new_node)
var new_expr=new $ExprCtx(new_ctx,'js',false)
var _id=new $RawJSCtx(new_expr,'$temp')
var assign=new $AssignCtx(new_expr)
assign.tree[1]=this.tree[1]
_id.parent=assign
parent.insert(rank+offset,new_node)
offset++}
var prefix='',in_class=false
switch(op){case '+=':
case '-=':
case '*=':
case '/=':
if(left_is_id){var scope=this.scope,global_ns='$local_'+scope.module.replace(/\./g,'_')
switch(scope.ntype){case 'module':
prefix=global_ns
break
case 'def':
case 'generator':
if(scope.globals &&
scope.globals.indexOf(C.tree[0].value)>-1){prefix=global_ns}else{prefix='$locals'}
break
case 'class':
var new_node=new $Node()
if(!lnum_set){new_node.line_num=line_num
lnum_set=true}
new $NodeJSCtx(new_node,'var $left = '+
C.to_js())
parent.insert(rank+offset,new_node)
in_class=true
offset++}}}
var left=C.tree[0].to_js()
if(left_bound_to_int && right_is_int){parent.insert(rank+offset,$NodeJS(left+" "+op+" "+right))
return offset++}
prefix=prefix && !C.tree[0].unknown_binding && !left_id_unbound
var op1=op.charAt(0)
if(prefix){var left1=in_class ? '$left' :left
var new_node=new $Node()
if(!lnum_set){new_node.line_num=line_num;lnum_set=true}
js=right_is_int ? 'if(' :'if(typeof $temp.valueOf() == "number" && '
js+=left1+'.constructor === Number'
js+=' && Number.isSafeInteger('+left+op1+right+')){'+
(right_is_int ? '(' :'(typeof $temp == "number" && ')+
'typeof '+left1+' == "number") ? '
js+=left+op+right
js+=' : '+left+' = new Number('+left+op1+
(right_is_int ? right :right+'.valueOf()')+')}'
new $NodeJSCtx(new_node,js)
parent.insert(rank+offset,new_node)
offset++}
var aaops={'+=':'add','-=':'sub','*=':'mul'}
if(C.tree[0].type=='sub' &&
('+='==op ||'-='==op ||'*='==op)&&
C.tree[0].tree.length==1){var js1='$B.augm_item_'+aaops[op]+'('+
C.tree[0].value.to_js()+','+
C.tree[0].tree[0].to_js()+','+right+');None;'
var new_node=new $Node()
if(!lnum_set){new_node.line_num=line_num;lnum_set=true}
new $NodeJSCtx(new_node,js1)
parent.insert(rank+offset,new_node)
offset++
return}
var new_node=new $Node()
if(!lnum_set){new_node.line_num=line_num;lnum_set=true}
var js=''
if(prefix){js+='else '}
js+='if(!hasattr('+C.to_js()+',"'+func+'"))'
new $NodeJSCtx(new_node,js)
parent.insert(rank+offset,new_node)
offset++
var aa1=new $Node()
aa1.id=this.scope.id
aa1.line_num=node.line_num
new_node.add(aa1)
var ctx1=new $NodeCtx(aa1)
var expr1=new $ExprCtx(ctx1,'clone',false)
if(left_id_unbound){new $RawJSCtx(expr1,'$locals["'+left_id+'"]')}else{expr1.tree=C.tree
expr1.tree.forEach(function(elt){elt.parent=expr1})}
var assign1=new $AssignCtx(expr1)
var new_op=new $OpCtx(expr1,op.substr(0,op.length-1))
new_op.parent=assign1
new $RawJSCtx(new_op,right)
assign1.tree.push(new_op)
expr1.parent.tree.pop()
expr1.parent.tree.push(assign1)
var else_node=$NodeJS("else")
parent.insert(rank+offset,else_node)
var aa2=new $Node()
aa2.line_num=node.line_num
else_node.add(aa2)
var ctx2=new $NodeCtx(aa2)
var expr2=new $ExprCtx(ctx2,'clone',false)
if(left_id_unbound){new $RawJSCtx(expr2,'$locals["'+left_id+'"]')}else{expr2.tree=C.tree
expr2.tree.forEach(function(elt){elt.parent=expr2})}
var assign2=new $AssignCtx(expr2)
assign2.tree.push($NodeJS('$B.$getattr('+C.to_js()+',"'+
func+'")('+right+')'))
expr2.parent.tree.pop()
expr2.parent.tree.push(assign2)
if(left_is_id && !was_bound && !this.scope.blurred){this.scope.binding[left_id]=undefined}
return offset}
this.to_js=function(){return ''}}
var $AwaitCtx=$B.parser.$AwaitCtx=function(C){
this.type='await'
this.parent=C
this.tree=[]
C.tree.push(this)
this.to_js=function(){return '$B.awaitable(await $B.promise('+$to_js(this.tree)+'))'}}
var $BodyCtx=$B.parser.$BodyCtx=function(C){
var ctx_node=C.parent
while(ctx_node.type !=='node'){ctx_node=ctx_node.parent}
var tree_node=ctx_node.node
var body_node=new $Node()
body_node.is_body_node=true
body_node.line_num=tree_node.line_num
tree_node.insert(0,body_node)
return new $NodeCtx(body_node)}
var set_loop_context=$B.parser.set_loop_context=function(C,kw){
var ctx_node=C
while(ctx_node.type !=='node'){ctx_node=ctx_node.parent}
var tree_node=ctx_node.node
var loop_node=tree_node.parent
var break_flag=false
while(1){if(loop_node.type=='module'){
$_SyntaxError(C,kw+' outside of a loop')}else{var ctx=loop_node.C.tree[0]
if(ctx.type=='condition' && ctx.token=='while'){this.loop_ctx=ctx
ctx['has_'+kw]=true
break}
switch(ctx.type){case 'for':
this.loop_ctx=ctx
ctx['has_'+kw]=true
break_flag=true
break
case 'def':
case 'generator':
case 'class':
$_SyntaxError(C,kw+' outside of a loop')
default:
loop_node=loop_node.parent}
if(break_flag){break}}}}
var $BreakCtx=$B.parser.$BreakCtx=function(C){
this.type='break'
this.parent=C
C.tree[C.tree.length]=this
set_loop_context.apply(this,[C,'break'])
this.toString=function(){return 'break '}
this.to_js=function(){this.js_processed=true
var scope=$get_scope(this)
var res=';$locals_'+scope.id.replace(/\./g,'_')+
'["$no_break'+this.loop_ctx.loop_num+'"] = false'
if(this.loop_ctx.type !='asyncfor'){res+=';break'}else{res+=';throw StopIteration.$factory('+
this.loop_ctx.loop_num+')'}
return res}}
var $CallArgCtx=$B.parser.$CallArgCtx=function(C){
this.type='call_arg'
this.parent=C
this.start=$pos
this.tree=[]
C.tree[C.tree.length]=this
this.expect='id'
this.toString=function(){return 'call_arg '+this.tree}
this.to_js=function(){this.js_processed=true
return $to_js(this.tree)}}
var $CallCtx=$B.parser.$CallCtx=function(C){
this.type='call'
this.func=C.tree[0]
if(this.func !==undefined){
this.func.parent=this}
this.parent=C
if(C.type !='class'){C.tree.pop()
C.tree[C.tree.length]=this}else{
C.args=this}
this.expect='id'
this.tree=[]
this.start=$pos
this.toString=function(){return '(call) '+this.func+'('+this.tree+')'}
if(this.func && this.func.type=="attribute" && this.func.name=="wait"
&& this.func.value.type=="id" && this.func.value.value=="time"){console.log('call',this.func)
$get_node(this).blocking={'type':'wait','call':this}}
if(this.func && this.func.value=='input'){$get_node(this).blocking={'type':'input'}}
this.to_js=function(){this.js_processed=true
if(this.tree.length > 0){if(this.tree[this.tree.length-1].tree.length==0){
this.tree.pop()}}
var func_js=this.func.to_js()
if(this.func !==undefined){switch(this.func.value){case 'classmethod':
return 'classmethod.$factory('+$to_js(this.tree)+')'
case '$$super':
if(this.tree.length==0){
var scope=$get_scope(this)
if(scope.ntype=='def' ||scope.ntype=='generator'){var def_scope=$get_scope(scope.C.tree[0])
if(def_scope.ntype=='class'){new $IdCtx(this,def_scope.C.tree[0].name)}}}
if(this.tree.length==1){
var scope=$get_scope(this)
if(scope.ntype=='def' ||scope.ntype=='generator'){var args=scope.C.tree[0].args
if(args.length > 0){var missing_id=new $IdCtx(this,args[0])
missing_id.to_js=function(){return "[$locals['"+args[0]+"']]"}}}}
break
default:
if(this.func.type=='unary'){
var res='$B.$getattr('+$to_js(this.tree)
switch(this.func.op){case '+':
return res+',"__pos__")()'
case '-':
return res+',"__neg__")()'
case '~':
return res+',"__invert__")()'}}}
var _block=false
var positional=[],kw_args=[],star_args=false,dstar_args=[]
this.tree.forEach(function(arg){var type
switch(arg.type){case 'star_arg':
star_args=true
positional.push([arg.tree[0].tree[0].to_js(),'*'])
break
case 'double_star_arg':
dstar_args.push(arg.tree[0].tree[0].to_js())
break
case 'id':
positional.push([arg.to_js(),'s'])
break
default:
type=arg.tree[0].type
switch(type){case 'expr':
positional.push([arg.to_js(),'s'])
break
case 'kwarg':
kw_args.push(arg.tree[0].tree[0].value+
':'+arg.tree[0].tree[1].to_js())
break
case 'list_or_tuple':
case 'op':
positional.push([arg.to_js(),'s'])
break
case 'star_arg':
star_args=true
positional.push([arg.tree[0].tree[0].to_js(),'*'])
break
case 'double_star_arg':
dstar_args.push(arg.tree[0].tree[0].to_js())
break
default:
positional.push([arg.to_js(),'s'])
break}
break}})
var args_str
if(star_args){
var p=[]
for(var i=0,len=positional.length;i < len;i++){arg=positional[i]
if(arg[1]=='*'){
p.push('_b_.list.$factory('+arg[0]+')')}else{var elt=[positional[i][0]]
i++
while(i < len && positional[i][1]=='s'){elt.push(positional[i][0])
i++}
i--
p.push('['+elt.join(',')+']')}}
args_str=p[0]
for(var i=1;i < p.length;i++){args_str+='.concat('+p[i]+')'}}else{for(var i=0,len=positional.length;i < len;i++){positional[i]=positional[i][0]}
args_str=positional.join(', ')}
var kw_args_str='{'+kw_args.join(', ')+'}'
if(dstar_args.length){kw_args_str='{$nat:"kw",kw:['+kw_args_str+','+
dstar_args.join(', ')+']}'}else if(kw_args_str !='{}'){kw_args_str='{$nat:"kw",kw:'+kw_args_str+'}'}else{kw_args_str=''}
if(star_args && kw_args_str){args_str+='.concat(['+kw_args_str+'])'}else{if(args_str && kw_args_str){args_str+=','+kw_args_str}
else if(!args_str){args_str=kw_args_str}}
if(star_args){
args_str='.apply(null,'+args_str+')'}else{args_str='('+args_str+')'}
var default_res="$B.$call("+func_js+")"+args_str
if(this.tree.length >-1){if(this.func.type=='id'){if(this.func.is_builtin){
var classes=["complex","bytes","bytearray","object","memoryview","int","float","str","list","tuple","dict","set","frozenset","range","slice","zip","bool","type","classmethod","staticmethod","enumerate","reversed","property","$$super","zip","map","filter"]
if($B.builtin_funcs[this.func.value]!==undefined){if(classes.indexOf(this.func.value)==-1){return func_js+args_str}else{return func_js+".$factory"+args_str}}}
var res=default_res}else{var res=default_res}
return res}
return default_res}}}
var $ClassCtx=$B.parser.$ClassCtx=function(C){
this.type='class'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.expect='id'
var scope=this.scope=$get_scope(this)
this.parent.node.parent_block=scope
this.parent.node.bound={}
this.parent.node.binding={__annotations__:true}
this.toString=function(){return '(class) '+this.name+' '+this.tree+' args '+this.args}
this.set_name=function(name){this.random=$B.UUID()
this.name=name
this.id=C.node.module+'_'+name+'_'+this.random
this.binding={}
this.parent.node.id=this.id
var parent_block=scope
while(parent_block.C &&
parent_block.C.tree[0].type=='class'){parent_block=parent_block.parent}
while(parent_block.C &&
'def' !=parent_block.C.tree[0].type &&
'generator' !=parent_block.C.tree[0].type){parent_block=parent_block.parent}
this.parent.node.parent_block=parent_block
$bind(name,this.scope,this)
if(scope.is_function){if(scope.C.tree[0].locals.indexOf(name)==-1){scope.C.tree[0].locals.push(name)}}}
this.transform=function(node,rank){
this.doc_string=$get_docstring(node)
var instance_decl=new $Node(),local_ns='$locals_'+this.id.replace(/\./g,'_'),js=';var '+local_ns+' = {$type: "class", '+
'__annotations__: _b_.dict.$factory()}, $locals = '+
local_ns+', $local_name = "'+local_ns+'";'
new $NodeJSCtx(instance_decl,js)
node.insert(0,instance_decl)
var global_scope=this.scope
while(global_scope.parent_block.id !=='__builtins__'){global_scope=global_scope.parent_block}
var global_ns='$locals_'+global_scope.id.replace(/\./g,'_')
var js=';var $top_frame = [$local_name, $locals,'+'"'+
global_scope.id+'", '+global_ns+
']; $B.frames_stack.push($top_frame);'
node.insert(1,$NodeJS(js))
node.add($NodeJS('$B.leave_frame()'))
var ret_obj=new $Node()
new $NodeJSCtx(ret_obj,'return '+local_ns+';')
node.insert(node.children.length,ret_obj)
var run_func=new $Node()
new $NodeJSCtx(run_func,')();')
node.parent.insert(rank+1,run_func)
var module_name='$locals_'+
$get_module(this).module.replace(/\./g,'_')+'.__name__'
rank++
node.parent.insert(rank+1,$NodeJS('$'+this.name+'_'+this.random+".__module__ = "+
module_name))
var scope=$get_scope(this)
var name_ref=';$locals_'+scope.id.replace(/\./g,'_')
name_ref+='["'+this.name+'"]'
var js=[name_ref+' = $B.$class_constructor("'+this.name],pos=1
js[pos++]='", $'+this.name+'_'+this.random
if(this.args !==undefined){
var arg_tree=this.args.tree,args=[],kw=[]
arg_tree.forEach(function(_tmp){if(_tmp.tree[0].type=='kwarg'){kw.push(_tmp.tree[0])}
else{args.push(_tmp.to_js())}})
js[pos++]=',tuple.$factory(['+args.join(',')+']),['
var _re=new RegExp('"','g'),_r=[],rpos=0
args.forEach(function(arg){_r[rpos++]='"'+arg.replace(_re,'\\"')+'"'})
js[pos++]=_r.join(',')+']'
_r=[]
rpos=0
kw.forEach(function(_tmp){_r[rpos++]='["'+_tmp.tree[0].value+'",'+
_tmp.tree[1].to_js()+']'})
js[pos++]=',['+_r.join(',')+']'}else{
js[pos++]=',tuple.$factory([]),[],[]'}
js[pos++]=')'
var cl_cons=new $Node()
new $NodeJSCtx(cl_cons,js.join(''))
rank++
node.parent.insert(rank+1,cl_cons)
rank++
var ds_node=new $Node()
js=name_ref+'.__doc__ = '+(this.doc_string ||'None')+';'
new $NodeJSCtx(ds_node,js)
node.parent.insert(rank+1,ds_node)
if(scope.ntype=='module'){var w_decl=new $Node()
new $NodeJSCtx(w_decl,'$locals["'+this.name+'"] = '+
this.name)}
node.parent.insert(rank+2,$NodeJS("None;"))
this.transformed=true}
this.to_js=function(){this.js_processed=true
return 'var $'+this.name+'_'+this.random+' = (function()'}}
var $CompIfCtx=$B.parser.$CompIfCtx=function(C){
this.type='comp_if'
C.parent.intervals.push($pos)
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return '(comp if) '+this.tree}
this.to_js=function(){this.js_processed=true
return $to_js(this.tree)}}
var $ComprehensionCtx=$B.parser.$ComprehensionCtx=function(C){
this.type='comprehension'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return '(comprehension) '+this.tree}
this.to_js=function(){this.js_processed=true
var intervals=[]
this.tree.forEach(function(elt){intervals.push(elt.start)})
return intervals}}
var $CompForCtx=$B.parser.$CompForCtx=function(C){
this.type='comp_for'
C.parent.intervals.push($pos)
this.parent=C
this.tree=[]
this.expect='in'
C.tree[C.tree.length]=this
this.toString=function(){return '(comp for) '+this.tree}
this.to_js=function(){this.js_processed=true
return $to_js(this.tree)}}
var $CompIterableCtx=$B.parser.$CompIterableCtx=function(C){
this.type='comp_iterable'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return '(comp iter) '+this.tree}
this.to_js=function(){this.js_processed=true
return $to_js(this.tree)}}
var $ConditionCtx=$B.parser.$ConditionCtx=function(C,token){
this.type='condition'
this.token=token
this.parent=C
this.tree=[]
if(token=='while'){this.loop_num=$loop_num++}
C.tree[C.tree.length]=this
this.toString=function(){return this.token+' '+this.tree}
this.transform=function(node,rank){var scope=$get_scope(this)
if(this.token=="while"){if(scope.ntype=="generator"){this.parent.node.loop_start=this.loop_num}
node.parent.insert(rank,$NodeJS('$locals["$no_break'+this.loop_num+'"] = true'))
return 2}}
this.to_js=function(){this.js_processed=true
var tok=this.token
if(tok=='elif'){tok='else if'}
var res=[tok+'($B.$bool(']
if(tok=='while'){res.push('$locals["$no_break'+this.loop_num+'"] && ')}else if(tok=='else if'){var line_info=$get_node(this).line_num+','+
$get_scope(this).id
res.push('($locals.$line_info = "'+line_info+'") && ')}
if(this.tree.length==1){res.push($to_js(this.tree)+'))')}else{
res.push(this.tree[0].to_js()+'))')
if(this.tree[1].tree.length > 0){res.push('{'+this.tree[1].to_js()+'}')}}
return res.join('')}}
var $ContinueCtx=$B.parser.$ContinueCtx=function(C){
this.type='continue'
this.parent=C
$get_node(this).is_continue=true
C.tree[C.tree.length]=this
set_loop_context.apply(this,[C,'continue'])
this.toString=function(){return '(continue)'}
this.to_js=function(){this.js_processed=true
return 'continue'}}
var $DebuggerCtx=$B.parser.$DebuggerCtx=function(C){
this.type='continue'
this.parent=C
C.tree[C.tree.length]=this
this.toString=function(){return '(debugger)'}
this.to_js=function(){this.js_processed=true
return 'debugger'}}
var $DecoratorCtx=$B.parser.$DecoratorCtx=function(C){
this.type='decorator'
this.parent=C
C.tree[C.tree.length]=this
this.tree=[]
this.toString=function(){return '(decorator) '+this.tree}
this.transform=function(node,rank){var func_rank=rank+1,children=node.parent.children,decorators=[this.tree]
while(1){if(func_rank >=children.length){$_SyntaxError(C,['decorator expects function'])}
else if(children[func_rank].C.type=='node_js'){func_rank++}else if(children[func_rank].C.tree[0].type==
'decorator'){decorators.push(children[func_rank].C.tree[0].tree)
children.splice(func_rank,1)}else{break}}
this.dec_ids=[]
var pos=0
decorators.forEach(function(){this.dec_ids.push('$id'+$B.UUID())},this)
var obj=children[func_rank].C.tree[0]
if(obj.type=='def'){obj.decorated=true
obj.alias='$dec'+$B.UUID()}
var tail='',scope=$get_scope(this),ref='$locals["'
if($B._globals[scope.id]&& $B._globals[scope.id][obj.name]){var module=$get_module(this)
ref='$locals_'+module.id+'["'}
ref+=obj.name+'"]'
var res=ref+' = '
decorators.forEach(function(elt,i){res+='$B.$call('+this.dec_ids[i]+')('
tail+=')'},this)
res+=(obj.decorated ? obj.alias :ref)+tail+';'
$bind(obj.name,scope,this)
node.parent.insert(func_rank+1,$NodeJS(res))
this.decorators=decorators}
this.to_js=function(){this.js_processed=true
var res=[]
this.decorators.forEach(function(decorator,i){res.push('var '+this.dec_ids[i]+' = '+
$to_js(decorator)+';')},this)
return res.join('')}}
var $DecoratorExprCtx=$B.parser.$DecoratorExprCtx=function(C){
this.type='decorator_expression'
this.parent=C
C.tree[C.tree.length]=this
this.names=[]
this.tree=[]
this.is_call=false
this.toString=function(){return '(decorator expression)'}
this.to_js=function(){this.js_processed=true
var func=new $IdCtx(this,this.names[0])
var obj=func.to_js()
this.names.slice(1).forEach(function(name){obj="_b_.getattr("+obj+", '"+name+"')"})
if(this.tree.length > 1){
this.tree[0].func={to_js:function(){return obj}}
return this.tree[0].to_js()}
return obj }}
var $DefCtx=$B.parser.$DefCtx=function(C){this.type='def'
this.name=null
this.parent=C
this.tree=[]
this.async=C.async
this.locals=[]
this.yields=[]
C.tree[C.tree.length]=this
this.enclosing=[]
var scope=this.scope=$get_scope(this)
if(scope.C && scope.C.tree[0].type=="class"){this.class_name=scope.C.tree[0].name}
C.node.binding={}
var parent_block=scope
while(parent_block.C &&
parent_block.C.tree[0].type=='class'){parent_block=parent_block.parent}
while(parent_block.C &&
'def' !=parent_block.C.tree[0].type &&
'generator' !=parent_block.C.tree[0].type){parent_block=parent_block.parent}
this.parent.node.parent_block=parent_block
var pb=parent_block
while(pb && pb.C){if(pb.C.tree[0].type=='def'){this.inside_function=true
break}
pb=pb.parent_block}
this.module=scope.module
this.root=$get_module(this)
this.num=$loop_num
$loop_num++
this.positional_list=[]
this.default_list=[]
this.other_args=null
this.other_kw=null
this.after_star=[]
this.set_name=function(name){try{name=$mangle(name,this.parent.tree[0])}catch(err){console.log(err)
console.log('parent',this.parent)
throw err}
var id_ctx=new $IdCtx(this,name)
this.name=name
this.id=this.scope.id+'_'+name
this.id=this.id.replace(/\./g,'_')
this.id+='_'+$B.UUID()
this.parent.node.id=this.id
this.parent.node.module=this.module
this.binding={}
if($B._globals[this.scope.id]!==undefined &&
$B._globals[this.scope.id][name]!==undefined){
$bind(name,this.root,this)}else{$bind(name,this.scope,this)}
id_ctx.bound=true
if(scope.is_function){if(scope.C.tree[0].locals.indexOf(name)==-1){scope.C.tree[0].locals.push(name)}}}
this.toString=function(){return 'def '+this.name+'('+this.tree+')'}
this.transform=function(node,rank){
if(this.transformed !==undefined){return}
var scope=this.scope
this.doc_string=$get_docstring(node)
this.rank=rank
var indent=node.indent+16
if(this.name.substr(0,15)=='lambda_'+$B.lambda_magic){var pblock=scope.parent_block
if(pblock.C && pblock.C.tree[0].type=="def"){this.enclosing.push(pblock)}}
var pnode=this.parent.node
while(pnode.parent && pnode.parent.is_def_func){this.enclosing.push(pnode.parent.parent)
pnode=pnode.parent.parent}
var defaults=[],defs1=[]
this.argcount=0
this.kwonlyargcount=0
this.kwonlyargsdefaults=[]
this.otherdefaults=[]
this.varnames={}
this.args=[]
this.__defaults__=[]
this.slots=[]
var slot_list=[]
var annotations=[]
if(this.annotation){annotations.push('"return":'+this.annotation.to_js())}
var func_args=this.tree[1].tree
func_args.forEach(function(arg){this.args.push(arg.name)
this.varnames[arg.name]=true
if(arg.type=='func_arg_id'){if(this.star_arg){this.kwonlyargcount++
if(arg.has_default){this.kwonlyargsdefaults.push(arg.name)}}
else{this.argcount++
if(arg.has_default){this.otherdefaults.push(arg.name)}}
this.slots.push(arg.name+':null')
slot_list.push('"'+arg.name+'"')
if(arg.tree.length > 0){defaults.push('"'+arg.name+'"')
defs1.push(arg.name+':'+$to_js(arg.tree))
this.__defaults__.push($to_js(arg.tree))}}else if(arg.type=='func_star_arg'){if(arg.op=='*'){this.star_arg=arg.name}
else if(arg.op=='**'){this.kw_arg=arg.name}}
if(arg.annotation){annotations.push(arg.name+': '+arg.annotation.to_js())}},this)
var flags=67
if(this.star_arg){flags |=4}
if(this.kw_arg){flags |=8}
if(this.type=='generator'){flags |=32}
if(this.async){flags |=128}
var positional_str=[],positional_obj=[],pos=0
this.positional_list.forEach(function(elt){positional_str.push('"'+elt+'"')
positional_obj.push(elt+':null')},this)
positional_str=positional_str.join(',')
positional_obj='{'+positional_obj.join(',')+'}'
var dobj=[]
this.default_list.forEach(function(_default){dobj.push(_default+':null')})
dobj='{'+dobj.join(',')+'}'
var nodes=[],js
var global_scope=scope
while(global_scope.parent_block &&
global_scope.parent_block.id !=='__builtins__'){global_scope=global_scope.parent_block}
var global_ns='$locals_'+global_scope.id.replace(/\./g,'_')
var prefix=this.tree[0].to_js()
if(this.decorated){prefix=this.alias}
var name=this.name+this.num
var local_ns='$locals_'+this.id
js='var '+local_ns+' = {$name: "'+this.name+'"}, '+
'$local_name = "'+this.id+'",$locals = '+local_ns+';'
var new_node=new $Node()
new_node.locals_def=true
new_node.func_node=node
new $NodeJSCtx(new_node,js)
nodes.push(new_node)
var enter_frame_nodes=[$NodeJS('var $top_frame = [$local_name, $locals,'+
'"'+global_scope.id+'", '+global_ns+', '+name+']'),$NodeJS('$B.frames_stack.push($top_frame)'),$NodeJS('var $stack_length = $B.frames_stack.length')
]
if($B.profile > 1){if(this.scope.ntype=='class'){fname=this.scope.C.tree[0].name+'.'+this.name}
else{fname=this.name}
if(pnode && pnode.id){fmod=pnode.id.slice(0,pnode.id.indexOf('_'))}else{fmod=''}
js=";var _parent_line_info = {}; "+
"if($B.frames_stack[$B.frames_stack.length - 1]){"+
" _parent_line_info = $B.frames_stack["+
"$B.frames_stack.length-1][1].$line_info}else{"+
"_parent_line_info = "+global_ns+".$line_info};"+
";$B.$profile.call('"+fmod+"','"+fname+"',"+
node.line_num+",_parent_line_info);"
enter_frame_nodes.splice(0,0,$NodeJS(js))}
enter_frame_nodes.forEach(function(node){node.enter_frame=true})
nodes=nodes.concat(enter_frame_nodes)
this.env=[]
var make_args_nodes=[]
var js=this.type=='def' ? local_ns+' = $locals' :'var $ns'
js+=' = $B.args("'+this.name+'", '+
this.argcount+', {'+this.slots.join(', ')+'}, '+
'['+slot_list.join(', ')+'], arguments, '
if(defs1.length){js+='$defaults, '}
else{js+='{}, '}
js+=this.other_args+', '+this.other_kw+');'
var new_node=new $Node()
new $NodeJSCtx(new_node,js)
make_args_nodes.push(new_node)
if(this.type=='generator'){
js='for(var $var in $ns){$locals[$var] = $ns[$var]};'
make_args_nodes.push($NodeJS(js))}
var only_positional=false
if(this.other_args===null && this.other_kw===null &&
this.after_star.length==0 && defaults.length==0){
only_positional=true
if($B.debug > 0 ||this.positional_list.length > 0){
nodes.push($NodeJS('var $len = arguments.length;'))
var new_node=new $Node()
var js='if($len > 0 && arguments[$len - 1].$nat !== undefined)'
new $NodeJSCtx(new_node,js)
nodes.push(new_node)
new_node.add(make_args_nodes[0])
if(make_args_nodes.length > 1){new_node.add(make_args_nodes[1])}
var else_node=new $Node()
new $NodeJSCtx(else_node,'else')
nodes.push(else_node)}
var pos_len=this.positional_list.length
if($B.debug > 0){
js='if($len !='+pos_len+'){$B.wrong_nb_args("'+
this.name+'", $len, '+pos_len
if(positional_str.length > 0){js+=', ['+positional_str+']'}
js+=')}'
else_node.add($NodeJS(js))}
if(this.positional_list.length > 0){if(this.type=='generator'){this.positional_list.forEach(function(arg){else_node.add($NodeJS('$locals["'+arg+'"] = '+
arg))})}else{var pargs=[]
this.positional_list.forEach(function(arg){pargs.push(arg+':'+arg)})
if($B.debug < 1){js='if($len !='+pos_len+'){$B.wrong_nb_args("'+
this.name+'", $len, '+pos_len
if(positional_str.length > 0){js+=', ['+positional_str+']'}
js+=')}'
else_node.add($NodeJS(js))}
else_node.add($NodeJS(local_ns+
' = $locals = {'+pargs.join(', ')+'}'))}}}else{nodes.push(make_args_nodes[0])
if(make_args_nodes.length > 1){nodes.push(make_args_nodes[1])}}
nodes.push(
$NodeJS('$top_frame[1] = $locals;'))
nodes.push($NodeJS('$B.js_this = this;'))
for(var i=nodes.length-1;i >=0;i--){node.children.splice(0,0,nodes[i])}
var def_func_node=new $Node()
this.params=''
if(only_positional){this.params=Object.keys(this.varnames).join(', ')}
new $NodeJSCtx(def_func_node,'')
def_func_node.is_def_func=true
def_func_node.module=this.module
var last_instr=node.children[node.children.length-1].C.tree[0]
if(last_instr.type !='return' && this.type !='generator'){
var js='$B.leave_frame'
if(this.id.substr(0,5)=='$exec'){js+='_exec'}
node.add($NodeJS(js+'();return None'))}
node.add(def_func_node)
var offset=1,indent=node.indent
node.parent.insert(rank+offset++,$NodeJS(name+'.$is_func = true'))
node.parent.insert(rank+offset++,$NodeJS(name+'.$infos = {'))
var __name__=this.name
if(this.name.substr(0,2)=="$$"){__name__=__name__.substr(2)}
if(__name__.substr(0,15)=='lambda_'+$B.lambda_magic){__name__="<lambda>"}
js='    __name__:"'+__name__+'",'
node.parent.insert(rank+offset++,$NodeJS(js))
var __qualname__=__name__
if(this.class_name){__qualname__=this.class_name+'.'+__name__}
js='    __qualname__:"'+__qualname__+'",'
node.parent.insert(rank+offset++,$NodeJS(js))
if(this.type !="generator"){
if(this.otherdefaults.length > 0){var def_names=[]
this.otherdefaults.forEach(function(_default){def_names.push('$defaults.'+_default)})
node.parent.insert(rank+offset++,$NodeJS('    __defaults__ : '+
'$B.fast_tuple(['+def_names.join(', ')+']),'))}else{node.parent.insert(rank+offset++,$NodeJS('    __defaults__ : '+
'_b_.None,'))}
if(this.kwonlyargsdefaults.lengh > 0){var def_names=[]
this.kwonlyargsdefaults.forEach(function(_default){def_names.push('$defaults.'+_default)})
node.parent.insert(rank+offset++,$NodeJS('    __kwdefaults__ : '+
'$B.fast_tuple(['+def_names.join(', ')+']),'))}else{node.parent.insert(rank+offset++,$NodeJS('    __kwdefaults__ : '+
'_b_.None,'))}}
node.parent.insert(rank+offset++,$NodeJS('    __annotations__: {'+annotations.join(',')+'},'))
node.parent.insert(rank+offset++,$NodeJS('    __dict__: {__class__: _b_.dict, $string_dict: {},'+
'$str_hash: {}, $numeric_dict: {}, $object_dict:{}},'))
node.parent.insert(rank+offset++,$NodeJS('    __doc__: '+(this.doc_string ||'None')+','))
var root=$get_module(this)
node.parent.insert(rank+offset++,$NodeJS('    __module__ : "'+root.module+'",'))
for(var attr in this.binding){this.varnames[attr]=true}
var co_varnames=[]
for(var attr in this.varnames){co_varnames.push('"'+attr+'"')}
var free_vars=[]
if(this.parent.node.referenced){for(var attr in this.parent.node.referenced){if(! this.parent.node.binding[attr]){free_vars.push('"'+attr+'"')}}}
var CODE_MARKER='___%%%-CODE-%%%___'+this.name+this.num;
var h='\n'+' '.repeat(indent+8)
js='    __code__:{'+h+'    co_argcount:'+this.argcount
var h1=','+h+' '.repeat(4)
var module=$get_module(this).module
js+=h1+'co_filename:$locals_'+module.replace(/\./g,'_')+
'["__file__"]'+
h1+'co_firstlineno:'+node.line_num+
h1+'co_flags:'+flags+
h1+'co_freevars: ['+free_vars+']'+
h1+'co_kwonlyargcount:'+this.kwonlyargcount+
h1+'co_name: "'+this.name+'"'+
h1+'co_nlocals: '+co_varnames.length+
h1+'co_varnames: ['+co_varnames.join(', ')+']'+
h+'}\n'+' '.repeat(indent+4)+'};'
js+='None;'
node.parent.insert(rank+offset++,$NodeJS(js))
this.default_str='{'+defs1.join(', ')+'}'
if(this.type=="def"){
node.parent.insert(rank+offset++,new $MarkerNode('func_end:'+CODE_MARKER))
var res='return '+name
if(this.async){res='return $B.make_async('+name+')'}
node.parent.insert(rank+offset++,$NodeJS(res+'})('+this.default_str+')'))}
if(this.type=='def'){var parent=node
for(var pos=0;pos < parent.children.length &&
parent.children[pos]!==$B.last(enter_frame_nodes);pos++){}
var try_node=$NodeJS('try'),children=parent.children.slice(pos+1)
parent.insert(pos+1,try_node)
children.forEach(function(child){if(child.is_def_func){child.children.forEach(function(grand_child){try_node.add(grand_child)})}else{try_node.add(child)}})
parent.children.splice(pos+2,parent.children.length)
var except_node=$NodeJS('catch(err)')
except_node.add($NodeJS('$B.leave_frame();throw err'))
parent.add(except_node)}
this.transformed=true
return offset}
this.to_js=function(func_name){this.js_processed=true
func_name=func_name ||this.tree[0].to_js()
if(this.decorated){func_name='var '+this.alias}
return func_name+' = (function ($defaults){'+
(this.async ? 'async ' :'')+'function '+
this.name+this.num+'('+this.params+')'}}
var $DelCtx=$B.parser.$DelCtx=function(C){
this.type='del'
this.parent=C
C.tree[C.tree.length]=this
this.tree=[]
this.toString=function(){return 'del '+this.tree}
this.to_js=function(){this.js_processed=true
if(this.tree[0].type=='list_or_tuple'){
var res=[]
this.tree[0].tree.forEach(function(elt){var subdel=new $DelCtx(C)
subdel.tree=[elt]
res.push(subdel.to_js())
C.tree.pop()})
this.tree=[]
return res.join(';')}else{var expr=this.tree[0].tree[0]
switch(expr.type){case 'id':
var res='delete '+expr.to_js()+';'
delete $get_scope(this).binding[expr.value]
return res
case 'list_or_tuple':
var res=[]
expr.tree.forEach(function(elt){res.push('delete '+elt.to_js())})
return res.join(';')
case 'sub':
expr.func='delitem'
js=expr.to_js()
expr.func='getitem'
return js
case 'op':
$_SyntaxError(this,["can't delete operator"])
case 'call':
$_SyntaxError(this,["can't delete function call"])
case 'attribute':
return 'delattr('+expr.value.to_js()+',"'+
expr.name+'")'
default:
$_SyntaxError(this,["can't delete "+expr.type])}}}}
var $DictOrSetCtx=$B.parser.$DictOrSetCtx=function(C){
this.type='dict_or_set'
this.real='dict_or_set'
this.expect='id'
this.closed=false
this.start=$pos
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){switch(this.real){case 'dict':
return '(dict) {'+this.items+'}'
case 'set':
return '(set) {'+this.tree+'}'}
return '(dict_or_set) {'+this.tree+'}'}
this.nb_dict_items=function(){var nb=0
this.tree.forEach(function(item){if(item.packed){nb+=2}
else{nb++}})
return nb}
this.packed_indices=function(){var ixs=[]
this.items.forEach(function(t,i){if(t.type=="expr" && t.packed){ixs.push(i)}})
return ixs}
this.unpack_dict=function(packed){var js="",res,first,i=0,item,elts=[]
while(i < this.items.length){item=this.items[i]
first=i==0
if(item.type=="expr" && item.packed){res="_b_.list.$factory(_b_.dict.items("+item.to_js()+"))"
i++}else{res="[["+item.to_js()+","+
this.items[i+1].to_js()+"]]"
i+=2}
if(! first){res=".concat("+res+")"}
js+=res}
return js}
this.unpack_set=function(packed){var js="",res
this.items.forEach(function(t,i){if(packed.indexOf(i)>-1){res="_b_.list.$factory("+t.to_js()+")"}else{res="["+t.to_js()+"]"}
if(i > 0){res=".concat("+res+")"}
js+=res})
return js}
this.to_js=function(){this.js_processed=true
switch(this.real){case 'dict':
var packed=this.packed_indices()
if(packed.length > 0){return 'dict.$factory('+this.unpack_dict(packed)+
')'+$to_js(this.tree)}
var res=[]
for(var i=0;i < this.items.length;i+=2){res.push('['+this.items[i].to_js()+','+
this.items[i+1].to_js()+']')}
return 'dict.$factory(['+res.join(',')+'])'+
$to_js(this.tree)
case 'set_comp':
return 'set.$factory('+$to_js(this.items)+')'+
$to_js(this.tree)
case 'dict_comp':
return 'dict.$factory('+$to_js(this.items)+')'+
$to_js(this.tree)}
var packed=this.packed_indices()
if(packed.length > 0){return 'set.$factory('+this.unpack_set(packed)+')'}
return 'set.$factory(['+$to_js(this.items)+'])'+$to_js(this.tree)}}
var $DoubleStarArgCtx=$B.parser.$DoubleStarArgCtx=function(C){
this.type='double_star_arg'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return '**'+this.tree}
this.to_js=function(){this.js_processed=true
return '{$nat:"pdict",arg:'+$to_js(this.tree)+'}'}}
var $EllipsisCtx=$B.parser.$EllipsisCtx=function(C){
this.type='ellipsis'
this.parent=C
this.nbdots=1
C.tree[C.tree.length]=this
this.toString=function(){return 'ellipsis'}
this.to_js=function(){this.js_processed=true
return '$B.builtins["Ellipsis"]'}}
var $ExceptCtx=$B.parser.$ExceptCtx=function(C){
this.type='except'
this.parent=C
C.tree[C.tree.length]=this
this.tree=[]
this.expect='id'
this.scope=$get_scope(this)
this.toString=function(){return '(except) '}
this.set_alias=function(alias){this.tree[0].alias=$mangle(alias,this)
$bind(alias,this.scope,this)}
this.transform=function(node,rank){
var last_child=$B.last(node.children)
if(last_child.C.tree && last_child.C.tree[0]&&
last_child.C.tree[0].type=="return"){}
else{node.add($NodeJS("$B.del_exc()"))}}
this.to_js=function(){
this.js_processed=true
switch(this.tree.length){case 0:
return 'else'
case 1:
if(this.tree[0].name=='Exception'){return 'else if(1)'}}
var res=[]
this.tree.forEach(function(elt){res.push(elt.to_js())})
var lnum=''
if($B.debug > 0){var module=$get_module(this)
lnum='($locals.$line_info = "'+$get_node(this).line_num+
','+module.id+'") && '}
return 'else if('+lnum+'$B.is_exc('+this.error_name+
',['+res.join(',')+']))'}}
var $ExprCtx=$B.parser.$ExprCtx=function(C,name,with_commas){
this.type='expr'
this.name=name
this.with_commas=with_commas
this.expect=','
this.parent=C
this.packed=C.packed
this.is_await=C.is_await
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return '(expr '+with_commas+') '+this.tree}
this.to_js=function(arg){var res
this.js_processed=true
if(this.type=='list'){res='['+$to_js(this.tree)+']'}
else if(this.tree.length==1){res=this.tree[0].to_js(arg)}
else{res='tuple.$factory(['+$to_js(this.tree)+'])'}
if(this.is_await){res="$B.awaitable(await $B.promise("+res+"))"}
return res}}
var $ExprNot=$B.parser.$ExprNot=function(C){
this.type='expr_not'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return '(expr_not)'}}
var $FloatCtx=$B.parser.$FloatCtx=function(C,value){
this.type='float'
this.value=value
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return 'float '+this.value}
this.to_js=function(){this.js_processed=true
if(/^\d+$/.exec(this.value)||
/^\d+\.\d*$/.exec(this.value)){return '(new Number('+this.value+'))'}
return 'float.$factory('+this.value+')'}}
var $ForExpr=$B.parser.$ForExpr=function(C){
this.type='for'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.loop_num=$loop_num
this.module=$get_scope(this).module
$loop_num++
this.toString=function(){return '(for) '+this.tree}
this.transform=function(node,rank){var scope=$get_scope(this),target=this.tree[0],target_is_1_tuple=target.tree.length==1 && target.expect=='id',iterable=this.tree[1],num=this.loop_num,local_ns='$locals_'+scope.id.replace(/\./g,'_'),h='\n'+' '.repeat(node.indent+4)
var $range=false
if(target.tree.length==1 &&
! scope.blurred &&
target.expct !='id' &&
iterable.type=='expr' &&
iterable.tree[0].type=='expr' &&
iterable.tree[0].tree[0].type=='call'){var call=iterable.tree[0].tree[0]
if(call.func.type=='id'){var func_name=call.func.value
if(func_name=='range' && call.tree.length < 3){$range=call}}}
var new_nodes=[],pos=0
var children=node.children
var offset=1
if($range && scope.ntype !='generator'){if(this.has_break){
new_node=new $Node()
new $NodeJSCtx(new_node,local_ns+'["$no_break'+num+'"] = true')
new_nodes[pos++]=new_node}
var range_is_builtin=false,_scope=$get_scope(this),found=[]
while(1){if(_scope.binding["range"]){found.push(_scope.id)}
if(_scope.parent_block){_scope=_scope.parent_block}
else{break}}
range_is_builtin=found.length==1 &&
found[0]=="__builtins__"
var test_range_node=new $Node()
if(range_is_builtin){new $NodeJSCtx(test_range_node,'if(1)')}else{new $NodeJSCtx(test_range_node,'if('+call.func.to_js()+' === $B.builtins.range)')}
new_nodes[pos++]=test_range_node
var idt=target.to_js(),shortcut=false
if($range.tree.length==1){var stop=$range.tree[0].tree[0]
if(stop.tree[0].type=="int"){stop=parseInt(stop.to_js())
if(0 < stop < $B.max_int){shortcut=true
var varname="$i"+$B.UUID()
var for_node=$NodeJS("for (var "+varname+" = 0; "+
varname+" < "+stop+"; "+varname+"++)")
for_node.add($NodeJS(idt+" = "+varname))}}
var start=0,stop=$range.tree[0].to_js()}else{var start=$range.tree[0].to_js(),stop=$range.tree[1].to_js()}
if(!shortcut){var js='var $stop_'+num+' = $B.int_or_bool('+stop+');'+
h+idt+' = '+start+';'+
h+'    var $next'+num+' = '+idt+','+
h+'    $safe'+num+' = typeof $next'+num+
' == "number" && typeof '+'$stop_'+num+' == "number";'+
h+'while(true)'
var for_node=new $Node()
new $NodeJSCtx(for_node,js)
for_node.add($NodeJS('if($safe'+num+' && $next'+num+
'>= $stop_'+num+'){break}'))
for_node.add($NodeJS('else if(!$safe'+num+' && $B.ge($next'+
num+', $stop_'+num+')){break}'))
for_node.add($NodeJS(idt+' = $next'+num))
for_node.add($NodeJS('if($safe'+num+'){$next'+num+
' += 1}'))
for_node.add($NodeJS('else{$next'+num+' = $B.add($next'+
num+',1)}'))}
children.forEach(function(child){for_node.add(child)})
for_node.add($NodeJS('$locals.$line_info = "'+node.line_num+
','+scope.id+'"; None;'))
var in_loop=false
if(scope.ntype=='module'){var pnode=node.parent
while(pnode){if(pnode.for_wrapper){in_loop=true;break}
pnode=pnode.parent}}
if(scope.ntype=='module' && !in_loop){var func_node=new $Node()
func_node.for_wrapper=true
js='function $f'+num+'('
if(this.has_break){js+='$no_break'+num}
js+=')'
new $NodeJSCtx(func_node,js)
test_range_node.add(func_node)
func_node.add(for_node)
if(this.has_break){func_node.add($NodeJS('return $no_break'+num))}
test_range_node.add($NodeJS('var $res'+num+' = $f'+num+
'();'))
if(this.has_break){test_range_node.add($NodeJS('var $no_break'+num+
' = $res'+num))}}else{
test_range_node.add(for_node)}
if(range_is_builtin){node.parent.children.splice(rank,1)
var k=0
if(this.has_break){node.parent.insert(rank,new_nodes[0])
k++}
new_nodes[k].children.forEach(function(child){node.parent.insert(rank+k,child)})
node.parent.children[rank].line_num=node.line_num
node.parent.children[rank].bindings=node.bindings
node.children=[]
return 0}
var else_node=$NodeJS("else")
new_nodes[pos++]=else_node
for(var i=new_nodes.length-1;i >=0;i--){node.parent.insert(rank+1,new_nodes[i])}
this.test_range=true
new_nodes=[],pos=0}
var new_node=new $Node()
new_node.line_num=$get_node(this).line_num
var it_js=iterable.to_js(),iterable_name='$iter'+num,js='var '+iterable_name+' = '+it_js+';'+
'$locals["$next'+num+'"]'+' = $B.$getattr($B.$iter('+
iterable_name+'),"__next__")'
new $NodeJSCtx(new_node,js)
new_nodes[pos++]=new_node
var js='if(isinstance('+iterable_name+', dict)){$locals.$len_func'+
num+' = $B.$getattr('+iterable_name+', "__len__"); $locals.$len'+
num+' = $locals.$len_func'+num+'()}else{$locals.$len'+
num+' = null}'
new_nodes[pos++]=$NodeJS(js)
if(this.has_break){
new_nodes[pos++]=$NodeJS(local_ns+'["$no_break'+num+
'"] = true;')}
var while_node=new $Node()
if(this.has_break){js='while('+local_ns+'["$no_break'+num+'"])'}else{js='while(1)'}
new $NodeJSCtx(while_node,js)
while_node.C.loop_num=num
while_node.C.type='for'
while_node.line_num=node.line_num
if(scope.ntype=='generator'){
while_node.loop_start=num}
new_nodes[pos++]=while_node
node.parent.children.splice(rank,1)
if(this.test_range){for(var i=new_nodes.length-1;i >=0;i--){else_node.insert(0,new_nodes[i])}}else{for(var i=new_nodes.length-1;i >=0;i--){node.parent.insert(rank,new_nodes[i])
offset+=new_nodes.length}}
while_node.add($NodeJS('if($locals.$len'+num+
'!==null && $locals.$len'+num+'!=$locals.$len_func'+
num+'()){throw RuntimeError.$factory("dictionary'+
' changed size during iteration")}'))
var try_node=$NodeJS("try")
try_node.bindings=node.bindings
while_node.add(try_node)
var iter_node=new $Node()
iter_node.id=this.module
var C=new $NodeCtx(iter_node)
var target_expr=new $ExprCtx(C,'left',true)
if(target_is_1_tuple){
var t=new $ListOrTupleCtx(target_expr)
t.real='tuple'
t.tree=target.tree}else{target_expr.tree=target.tree}
var assign=new $AssignCtx(target_expr)
assign.tree[1]=new $JSCode('$locals["$next'+num+'"]()')
try_node.add(iter_node)
while_node.add(
$NodeJS('catch($err){if($B.is_exc($err, [StopIteration]))'+
'{break;}else{throw($err)}}'))
children.forEach(function(child){while_node.add(child)})
node.children=[]
return 0}
this.to_js=function(){this.js_processed=true
var iterable=this.tree.pop()
return 'for ('+$to_js(this.tree)+' in '+iterable.to_js()+')'}}
var $FromCtx=$B.parser.$FromCtx=function(C){
this.type='from'
this.parent=C
this.module=''
this.names=[]
this.aliases={}
C.tree[C.tree.length]=this
this.expect='module'
this.scope=$get_scope(this)
this.add_name=function(name){this.names[this.names.length]=name
if(name=='*'){this.scope.blurred=true}}
this.bind_names=function(){
var scope=$get_scope(this)
this.names.forEach(function(name){name=this.aliases[name]||name
$bind(name,scope,this)},this)}
this.toString=function(){return '(from) '+this.module+' (import) '+this.names+
'(as)'+this.aliases}
this.to_js=function(){this.js_processed=true
var scope=$get_scope(this),module=$get_module(this),mod=module.module,res=[],pos=0,indent=$get_node(this).indent,head=' '.repeat(indent)
var mod_elts=this.module.split(".")
for(var i=0;i < mod_elts.length;i++){module.imports[mod_elts.slice(0,i+1).join(".")]=true}
var _mod=this.module.replace(/\$/g,''),$package,packages=[]
while(_mod.length > 0){if(_mod.charAt(0)=='.'){if($package===undefined){if($B.imported[mod]!==undefined){$package=$B.imported[mod].__package__
packages=$package.split('.')}}else{$package=$B.imported[$package]
packages.pop()}
if($package===undefined){return 'throw SystemError.$factory("Parent module \'\' '+
'not loaded, cannot perform relative import")'}else if($package=='None'){console.log('package is None !')}
_mod=_mod.substr(1)}else{break}}
if(_mod){packages.push(_mod)}
this.module=packages.join('.')
var mod_name=this.module.replace(/\$/g,'')
res[pos++]='$B.$import("'
res[pos++]=mod_name+'",["'
res[pos++]=this.names.join('","')+'"], {'
var sep=''
for(var attr in this.aliases){res[pos++]=sep+'"'+attr+'": "'+this.aliases[attr]+'"'
sep=','}
res[pos++]='}, {}, true);'
if(this.names[0]=='*'){
scope.blurred=true
res[pos++]='\n'+head+'for(var $attr in $B.imported["'+
mod_name+'"]){if($attr.charAt(0) !== "_" && $attr.charAt(0) !== "$")'+
'{$locals[$attr] = $B.imported["'+mod_name+'"][$attr]}};'}else{this.names.forEach(function(name){module.imports[this.module+'.'+name]=true
res[pos++]='\n'+head+'$locals["'+
(this.aliases[name]||name)+'"] = $B.imported["'+
mod_name+'"]["'+name+'"];'},this)}
res[pos++]='\n'+head+'None;'
return res.join('');}}
var $FuncArgs=$B.parser.$FuncArgs=function(C){
this.type='func_args'
this.parent=C
this.tree=[]
this.names=[]
C.tree[C.tree.length]=this
this.expect='id'
this.has_default=false
this.has_star_arg=false
this.has_kw_arg=false
this.toString=function(){return 'func args '+this.tree}
this.to_js=function(){this.js_processed=true
return $to_js(this.tree)}}
var $FuncArgIdCtx=$B.parser.$FuncArgIdCtx=function(C,name){
this.type='func_arg_id'
this.name=name
this.parent=C
if(C.has_star_arg){C.parent.after_star.push(name)}else{C.parent.positional_list.push(name)}
var node=$get_node(this)
if(node.binding[name]){$_SyntaxError(C,["duplicate argument '"+name+"' in function definition"])}
$bind(name,node,this)
this.tree=[]
C.tree[C.tree.length]=this
var ctx=C
while(ctx.parent !==undefined){if(ctx.type=='def'){ctx.locals.push(name)
break}
ctx=ctx.parent}
this.expect='='
this.toString=function(){return 'func arg id '+this.name+'='+this.tree}
this.to_js=function(){this.js_processed=true
return this.name+$to_js(this.tree)}}
var $FuncStarArgCtx=$B.parser.$FuncStarArgCtx=function(C,op){
this.type='func_star_arg'
this.op=op
this.parent=C
this.node=$get_node(this)
C.has_star_arg=op=='*'
C.has_kw_arg=op=='**'
C.tree[C.tree.length]=this
this.toString=function(){return '(func star arg '+this.op+') '+this.name}
this.set_name=function(name){this.name=name
if(this.node.binding[name]){$_SyntaxError(C,["duplicate argument '"+name+"' in function definition"])}
$bind(name,this.node,this)
var ctx=C
while(ctx.parent !==undefined){if(ctx.type=='def'){ctx.locals.push(name)
break}
ctx=ctx.parent}
if(op=='*'){ctx.other_args='"'+name+'"'}
else{ctx.other_kw='"'+name+'"'}}}
var $GlobalCtx=$B.parser.$GlobalCtx=function(C){
this.type='global'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.expect='id'
this.scope=$get_scope(this)
$B._globals[this.scope.id]=$B._globals[this.scope.id]||{}
this.toString=function(){return 'global '+this.tree}
this.add=function(name){$B._globals[this.scope.id][name]=true}
this.to_js=function(){this.js_processed=true
return ''}}
var $IdCtx=$B.parser.$IdCtx=function(C,value){
this.type='id'
this.value=$mangle(value,C)
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
var scope=this.scope=$get_scope(this)
this.blurred_scope=this.scope.blurred
this.env=clone(this.scope.binding)
if(scope.ntype=="def" ||scope.ntype=="generator"){scope.referenced=scope.referenced ||{}
if(! $B.builtins[this.value]){scope.referenced[this.value]=true}}
if(C.parent.type=='call_arg'){this.call_arg=true}
var ctx=C
while(ctx.parent !==undefined){switch(ctx.type){case 'ctx_manager_alias':
$bind(value,scope,this)
break
case 'list_or_tuple':
case 'dict_or_set':
case 'call_arg':
case 'def':
case 'lambda':
if(ctx.vars===undefined){ctx.vars=[value]}
else if(ctx.vars.indexOf(value)==-1){ctx.vars.push(value)}
if(this.call_arg&&ctx.type=='lambda'){if(ctx.locals===undefined){ctx.locals=[value]}
else{ctx.locals.push(value)}}}
ctx=ctx.parent}
if(C.type=='target_list' ||
(C.type=='expr' && C.parent.type=='target_list')){
$bind(value,scope,this)
this.bound=true}
if(scope.ntype=='def' ||scope.ntype=='generator'){
var _ctx=this.parent
while(_ctx){if(_ctx.type=='list_or_tuple' && _ctx.is_comp()){this.in_comp=true
return}
_ctx=_ctx.parent}
if(C.type=='expr' && C.parent.type=='comp_if'){
return}else if(C.type=='global'){if(scope.globals===undefined){scope.globals=[value]}else if(scope.globals.indexOf(value)==-1){scope.globals.push(value)}}}
this.toString=function(){return '(id) '+this.value+':'+(this.tree ||'')}
this.firstBindingScopeId=function(){
var scope=this.scope,found=[],nb=0
while(scope && nb++< 20){if(scope.binding && scope.binding[this.value]){return scope.id}
scope=scope.parent}}
this.boundBefore=function(scope){
var nb=0,node=$get_node(this),found=false
while(!found && node.parent && nb++< 100){var pnode=node.parent
if(pnode.bindings && pnode.bindings[this.value]){return pnode.bindings[this.value]}
for(var i=0;i < pnode.children.length;i++){var child=pnode.children[i]
if(child===node){break}
if(child.bindings && child.bindings[this.value]){return child.bindings[this.value]}}
if(pnode===scope){break}
node=pnode}
return found}
this.bindingType=function(scope){
var nb=0,node=$get_node(this),found=false,unknown,ix
while(!found && node.parent && nb++< 100){var pnode=node.parent
if(pnode.bindings && pnode.bindings[this.value]){return pnode.bindings[this.value]}
for(var i=0;i < pnode.children.length;i++){var child=pnode.children[i]
if(child===node){break}
if(child.bindings && child.bindings[this.value]){found=child.bindings[this.value]
ix=i}}
if(found){for(var j=ix+1;j < pnode.children.length;j++){child=pnode.children[j]
if(child.children.length > 0){unknown=true
break}else if(child===node){break}}
return unknown ||found}
if(pnode===scope){break}
node=pnode}
return found}
this.to_js=function(arg){
if(this.result !==undefined && this.scope.ntype=='generator'){return this.result}
this.js_processed=true
var val=this.value
var is_local=this.scope.binding[val]!==undefined,this_node=$get_node(this),bound_before=this_node.bound_before
this.nonlocal=this.scope.nonlocals &&
this.scope.nonlocals[val]!==undefined
this.unbound=this.unbound ||(is_local && !this.bound &&
bound_before && bound_before.indexOf(val)==-1)
if((!this.bound)&& this.scope.C
&& this.scope.ntype=='class' &&
this.scope.C.tree[0].name==val){
return '$B.$search("'+val+'")'}
if(this.unbound && !this.nonlocal){if(this.scope.ntype=='def' ||this.scope.ntype=='generator'){return '$B.$local_search("'+val+'")'}else{return '$B.$search("'+val+'")'}}
if(val=='__BRYTHON__' ||val=='$B'){return val}
var innermost=$get_scope(this),scope=innermost,found=[]
var search_ids=['"'+innermost.id+'"']
var gs=innermost
var $test=false
if($test){console.log("innermost",innermost)}
while(true){if(gs.parent_block){if(gs.parent_block==$B.builtins_scope){break}
else if(gs.parent_block.id===undefined){break}
gs=gs.parent_block}
search_ids.push('"'+gs.id+'"')}
search_ids="["+search_ids.join(", ")+"]"
if(innermost.globals && innermost.globals.indexOf(val)>-1){search_ids=['"'+gs.id+'"']}
if($test){console.log("search ids",search_ids)}
if(this.nonlocal ||this.bound){var bscope=this.firstBindingScopeId()
if($test){console.log("binding",bscope)}
if(bscope !==undefined){return "$locals_"+bscope.replace(/\./g,"_")+'["'+
val+'"]'}}
var global_ns='$locals_'+gs.id.replace(/\./g,'_')
while(1){if($B._globals[scope.id]!==undefined &&
$B._globals[scope.id][val]!==undefined){
if(this.boundBefore(gs)){return global_ns+'["'+val+'"]'}else{if($test){console.log("use global search",this)}
if(this.augm_assign){return global_ns+'["'+val+'"]'}else{return '$B.$global_search("'+val+'", '+
search_ids+')'}}}
if(scope===innermost){
if(bound_before){if(bound_before.indexOf(val)>-1){found.push(scope)}
else if(scope.C &&
scope.C.tree[0].type=='def' &&
scope.C.tree[0].env.indexOf(val)>-1){found.push(scope)}}else{if(scope.binding[val]){
if(this_node.locals[val]===undefined){
if(!scope.is_comp &&
(!scope.parent_block ||
!scope.parent_block.is_comp)){
found.push(scope)}}else{found.push(scope)}}}}else{if(scope.binding===undefined){console.log("scope",scope,val,"no binding",innermost)}
if(scope.binding[val]){found.push(scope)}}
if(scope.parent_block){scope=scope.parent_block}
else{break}}
this.found=found
if($test){console.log("found",found)}
if(this.nonlocal && found[0]===innermost){found.shift()}
if(found.length > 0){
if(found[0].C && found[0]===innermost
&& val.charAt(0)!='$'){var locs=this_node.locals ||{},nonlocs=innermost.nonlocals
if(locs[val]===undefined &&
((innermost.type !='def' ||
innermost.type !='generator')&&
innermost.ntype !='class' &&
innermost.C.tree[0].args.indexOf(val)==-1)&&
(nonlocs===undefined ||nonlocs[val]===undefined)){this.result='$B.$local_search("'+val+'")'
return this.result}}
if(found.length > 1 && found[0].C){if(found[0].C.tree[0].type=='class'){var ns0='$locals_'+found[0].id.replace(/\./g,'_'),ns1='$locals_'+found[1].id.replace(/\./g,'_'),res
if(bound_before){if(bound_before.indexOf(val)>-1){this.found=found[0].binding[val]
res=ns0}else{this.found=found[1].binding[val]
res=ns1}
this.result=res+'["'+val+'"]'
return this.result}else{this.found=false
var res=ns0+'["'+val+'"] !== undefined ? '
res+=ns0+'["'+val+'"] : '
this.result="("+res+ns1+'["'+val+'"])'
return this.result}}}
var scope=found[0]
this.found=scope.binding[val]
var scope_ns='$locals_'+scope.id.replace(/\./g,'_')
if(scope.C===undefined){
if(scope.id=='__builtins__'){if(gs.blurred){
val='('+global_ns+'["'+val+'"] || '+val+')'}else{
if(val !=='__builtins__'){val='$B.builtins.'+val}
this.is_builtin=true}}else if(scope.id==scope.module){
if(this.bound ||this.augm_assign){
val=scope_ns+'["'+val+'"]'}else{if(scope===innermost && this.env[val]===undefined){
this.result='$B.$search("'+val+'")'
return this.result}else{if(this.boundBefore(scope)){
val=scope_ns+'["'+val+'"]'}else{
if($test){console.log("use check def")}
val='$B.$check_def("'+val+'",'+
scope_ns+'["'+val+'"])'}}}}else{val=scope_ns+'["'+val+'"]'}}else if(scope===innermost){if($B._globals[scope.id]&& $B._globals[scope.id][val]){val=global_ns+'["'+val+'"]'}else if(!this.bound && !this.augm_assign){
if(this.boundBefore(scope)){val='$locals["'+val+'"]'}else{val='$B.$check_def_local("'+val+'",$locals["'+
val+'"])'}}else{val='$locals["'+val+'"]'}}else if(!this.augm_assign){
if(scope.ntype=='generator'){
var up=0,
sc=innermost
while(sc !==scope){up++;sc=sc.parent_block}
var scope_name="$B.frames_stack[$B.frames_stack.length-1-"+
up+"][1]"
val='$B.$check_def_free1("'+val+'", "'+
scope.id.replace(/\./g,"_")+'")'}else{val='$B.$check_def_free("'+val+'",'+scope_ns+
'["'+val+'"])'}}else{val=scope_ns+'["'+val+'"]'}
this.result=val+$to_js(this.tree,'')
return this.result}else{
this.unknown_binding=true
this.result='$B.$global_search("'+val+'", '+search_ids+')'
return this.result}}}
var $ImaginaryCtx=$B.parser.$ImaginaryCtx=function(C,value){
this.type='imaginary'
this.value=value
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return 'imaginary '+this.value}
this.to_js=function(){this.js_processed=true
return '$B.make_complex(0,'+this.value+')'}}
var $ImportCtx=$B.parser.$ImportCtx=function(C){
this.type='import'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.expect='id'
this.toString=function(){return 'import '+this.tree}
this.bind_names=function(){
var scope=$get_scope(this)
this.tree.forEach(function(item){if(item.name==item.alias){var name=item.name,parts=name.split('.'),bound=name
if(parts.length>1){bound=parts[0]}}else{bound=item.alias}
$bind(bound,scope,this)},this)}
this.to_js=function(){this.js_processed=true
var scope=$get_scope(this),res=[],module=$get_module(this)
this.tree.forEach(function(item){var mod_name=item.name,aliases=(item.name==item.alias)?
'{}' :('{"'+mod_name+'" : "'+
item.alias+'"}'),localns='$locals_'+scope.id.replace(/\./g,'_'),mod_elts=item.name.split(".")
for(var i=0;i < mod_elts.length;i++){module.imports[mod_elts.slice(0,i+1).join(".")]=true}
res.push('$B.$import("'+mod_name+'", [],'+aliases+
','+localns+', true);')})
return res.join('')+'None;'}}
var $ImportedModuleCtx=$B.parser.$ImportedModuleCtx=function(C,name){this.type='imported module'
this.parent=C
this.name=name
this.alias=name
C.tree[C.tree.length]=this
this.toString=function(){return ' (imported module) '+this.name}
this.to_js=function(){this.js_processed=true
return '"'+this.name+'"'}}
var $IntCtx=$B.parser.$IntCtx=function(C,value){
this.type='int'
this.value=value
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return 'int '+this.value}
this.to_js=function(){this.js_processed=true
var v=parseInt(value[1],value[0])
if(v > $B.min_int && v < $B.max_int){return v}
else{return '$B.long_int.$factory("'+value[1]+'", '+value[0]+')'}}}
var $JSCode=$B.parser.$JSCode=function(js){this.js=js
this.toString=function(){return this.js}
this.to_js=function(){this.js_processed=true
return this.js}}
var $KwArgCtx=$B.parser.$KwArgCtx=function(C){
this.type='kwarg'
this.parent=C.parent
this.tree=[C.tree[0]]
C.parent.tree.pop()
C.parent.tree.push(this)
C.parent.parent.has_kw=true
var value=this.tree[0].value
var ctx=C.parent.parent
if(ctx.kwargs===undefined){ctx.kwargs=[value]}
else if(ctx.kwargs.indexOf(value)==-1){ctx.kwargs.push(value)}
else{$_SyntaxError(C,['keyword argument repeated'])}
this.toString=function(){return 'kwarg '+this.tree[0]+'='+this.tree[1]}
this.to_js=function(){this.js_processed=true
var key=this.tree[0].value
if(key.substr(0,2)=='$$'){key=key.substr(2)}
var res='{$nat:"kw",name:"'+key+'",'
return res+'value:'+
$to_js(this.tree.slice(1,this.tree.length))+'}'}}
var $LambdaCtx=$B.parser.$LambdaCtx=function(C){
this.type='lambda'
this.parent=C
C.tree[C.tree.length]=this
this.tree=[]
this.args_start=$pos+6
this.vars=[]
this.locals=[]
this.toString=function(){return '(lambda) '+this.args_start+' '+this.body_start}
this.to_js=function(){this.js_processed=true
var node=$get_node(this),module=$get_module(this),src=$get_src(C),args=src.substring(this.args_start,this.body_start),body=src.substring(this.body_start+1,this.body_end)
body=body.replace(/\\\n/g,' ')
body=body.replace(/\n/g,' ')
var scope=$get_scope(this)
var rand=$B.UUID(),func_name='lambda_'+$B.lambda_magic+'_'+rand,py='def '+func_name+'('+args+'):\n'
py+='    return '+body
var lambda_name='lambda'+rand,module_name=module.id.replace(/\./g,'_')
var root=$B.py2js(py,module_name,lambda_name,scope,node.line_num)
var js=root.to_js()
js='(function($locals_'+lambda_name+'){\n'+js+
'\nreturn $locals.'+func_name+'\n})({})'
$B.clear_ns(lambda_name)
$B.$py_src[lambda_name]=null
delete $B.$py_src[lambda_name]
return js}}
var $ListOrTupleCtx=$B.parser.$ListOrTupleCtx=function(C,real){
this.type='list_or_tuple'
this.start=$pos
this.real=real
this.expect='id'
this.closed=false
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){switch(this.real){case 'list':
return '(list) ['+this.tree+']'
case 'list_comp':
case 'gen_expr':
return '('+this.real+') ['+this.intervals+'-'+
this.tree+']'
default:
return '(tuple) ('+this.tree+')'}}
this.is_comp=function(){switch(this.real){case 'list_comp':
case 'gen_expr':
case 'dict_or_set_comp':
return true}
return false}
this.get_src=function(){
var src=$get_module(this).src
var scope=$get_scope(this)
if(scope.comments===undefined){return src}
scope.comments.forEach(function(comment){var start=comment[0],len=comment[1]
src=src.substr(0,start)+' '.repeat(len+1)+
src.substr(start+len+1)})
return src}
this.bind_ids=function(scope){
this.tree.forEach(function(item){if(item.type=='id'){$bind(item.value,scope,this)
item.bound=true}else if(item.type=='expr' && item.tree[0].type=="id"){$bind(item.tree[0].value,scope,this)
item.tree[0].bound=true}else if(item.type=='expr' && item.tree[0].type=="packed"){if(item.tree[0].tree[0].type=='id'){$bind(item.tree[0].tree[0].value,scope,this)
item.tree[0].tree[0].bound=true}}else if(item.type=='list_or_tuple' ||
(item.type=="expr" &&
item.tree[0].type=='list_or_tuple')){if(item.type=="expr"){item=item.tree[0]}
item.bind_ids(scope)}},this)}
this.packed_indices=function(){var ixs=[]
for(var i=0;i < this.tree.length;i++){var t=this.tree[i]
if(t.type=="expr"){t=t.tree[0]
if(t.type=="packed" ||
(t.type=="call" && t.func.type=="packed")){ixs.push(i)}}}
return ixs}
this.unpack=function(packed){var js="",res
for(var i=0;i < this.tree.length;i++){if(packed.indexOf(i)>-1){res="_b_.list.$factory("+this.tree[i].to_js()+")"}else{res="["+this.tree[i].to_js()+"]"}
if(i > 0){res=".concat("+res+")"}
js+=res}
return js}
this.to_js=function(){this.js_processed=true
var scope=$get_scope(this),sc=scope,scope_id=scope.id.replace(/\//g, '_'),
            pos = 0
        var root = $get_module(this),
            module_name = root.module
        switch(this.real) {
            case 'list':
                var packed = this.packed_indices()
                if(packed.length > 0){
                    return '$B.$list(' + this.unpack(packed) + ')'
                }
                return '$B.$list([' + $to_js(this.tree) + '])'
            case 'list_comp':
            case 'gen_expr':
            case 'dict_or_set_comp':
                var src = this.get_src()
                var res1 = [], items = []
                var qesc = new RegExp('"', "g") //to escape double quotes in arguments
var comments=root.comments
for(var i=1;i < this.intervals.length;i++){var start=this.intervals[i-1],end=this.intervals[i],txt=src.substring(start,end)
comments.forEach(function(comment){if(comment[0]> start && comment[0]< end){
var pos=comment[0]-start
txt=txt.substr(0,pos)+
' '.repeat(comment[1])+
txt.substr(pos+comment[1]+1)}})
items.push(txt)
var lines=txt.split('\n')
var res2=[]
lines.forEach(function(txt){
if(txt.replace(/ /g,'').length !=0){txt=txt.replace(/\n/g,' ')
txt=txt.replace(/\\/g,'\\\\')
txt=txt.replace(qesc,'\\"')
res2.push('"'+txt+'"')}})
res1.push('['+res2.join(',')+']')}
var line_num=$get_node(this).line_num
switch(this.real){case 'list_comp':
var lc=$B.$list_comp(items),
py=lc[0],ix=lc[1],listcomp_name='lc'+ix,save_pos=$pos
var root=$B.py2js({src:py,is_comp:true},module_name,listcomp_name,scope,1)
$pos=save_pos
var js=root.to_js()
root=null
$B.clear_ns(listcomp_name)
delete $B.$py_src[listcomp_name]
js+='return $locals_lc'+ix+'["x'+ix+'"]'
js='(function($locals_'+listcomp_name+'){'+
js+'})({})'
return js
case 'dict_or_set_comp':
if(this.expression.length==1){return $B.$gen_expr(module_name,scope,items,line_num)}
return $B.$dict_comp(module_name,scope,items,line_num)}
return $B.$gen_expr(module_name,scope,items,line_num)
case 'tuple':
var packed=this.packed_indices()
if(packed.length > 0){return 'tuple.$factory('+this.unpack(packed)+')'}
if(this.tree.length==1 && this.has_comma===undefined){return this.tree[0].to_js()}
return 'tuple.$factory(['+$to_js(this.tree)+'])'}}}
var $NodeCtx=$B.parser.$NodeCtx=function(node){
this.node=node
node.C=this
this.tree=[]
this.type='node'
var scope=null
var tree_node=node
while(tree_node.parent && tree_node.parent.type !='module'){var ntype=tree_node.parent.C.tree[0].type,_break_flag=false
switch(ntype){case 'def':
case 'class':
case 'generator':
scope=tree_node.parent
_break_flag=true}
if(_break_flag){break}
tree_node=tree_node.parent}
if(scope===null){scope=tree_node.parent ||tree_node }
this.node.locals=clone(scope.binding)
this.toString=function(){return 'node '+this.tree}
this.to_js=function(){if(this.js !==undefined){return this.js}
this.js_processed=true
if(this.tree.length > 1){var new_node=new $Node()
var ctx=new $NodeCtx(new_node)
ctx.tree=[this.tree[1]]
new_node.indent=node.indent+4
this.tree.pop()
node.add(new_node)}
this.js=""
if(this.tree[0]){if(this.tree[0].annotation){
if(this.tree[0].type=="expr" &&
this.tree[0].tree[0].type=="id"){return "$locals.__annotations__.$string_dict['"+
this.tree[0].tree[0].value+"'] = "+
this.tree[0].annotation.to_js()+";"}else{
this.js=this.tree[0].annotation.to_js()+";"}}else if(this.tree[0].type=="assign" &&
this.tree[0].tree[0].annotation){
var left=this.tree[0].tree[0]
if(left.tree[0]&& left.tree[0].type=="id"){this.js="$locals.__annotations__.$string_dict['"+
left.tree[0].value+"'] = "+
left.annotation.to_js()+";"}else{
this.js=left.annotation.to_js()+";"}}}
if(node.children.length==0){this.js+=$to_js(this.tree)+';'}else{this.js+=$to_js(this.tree)}
return this.js}}
var $NodeJS=$B.parser.$NodeJS=function(js){var node=new $Node()
new $NodeJSCtx(node,js)
return node}
var $NodeJSCtx=$B.parser.$NodeJSCtx=function(node,js){
this.node=node
node.C=this
this.type='node_js'
this.tree=[js]
this.toString=function(){return 'js '+js}
this.to_js=function(){this.js_processed=true
return js}}
var $NonlocalCtx=$B.parser.$NonlocalCtx=function(C){
this.type='global'
this.parent=C
this.tree=[]
this.names={}
C.tree[C.tree.length]=this
this.expect='id'
this.scope=$get_scope(this)
this.scope.nonlocals=this.scope.nonlocals ||{}
if(this.scope.C===undefined){$_SyntaxError(C,["nonlocal declaration not allowed at module level"])}
this.toString=function(){return 'global '+this.tree}
this.add=function(name){if(this.scope.binding[name]=="arg"){$_SyntaxError(C,["name '"+name+"' is parameter and nonlocal"])}
this.names[name]=[false,$pos]
this.scope.nonlocals[name]=true}
this.transform=function(node,rank){var pscope=this.scope.parent_block
if(pscope.C===undefined){$_SyntaxError(C,["no binding for nonlocal '"+
$B.last(Object.keys(this.names))+"' found"])}else{while(pscope !==undefined && pscope.C !==undefined){for(var name in this.names){if(pscope.binding[name]!==undefined){this.names[name]=[true]}}
pscope=pscope.parent_block}
for(var name in this.names){if(!this.names[name][0]){console.log('nonlocal error, C '+C)
$pos=this.names[name][1]
$_SyntaxError(C,["no binding for nonlocal '"+
name+"' found"])}}}}
this.to_js=function(){this.js_processed=true
return ''}}
var $NotCtx=$B.parser.$NotCtx=function(C){
this.type='not'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return 'not ('+this.tree+')'}
this.to_js=function(){this.js_processed=true
return '!$B.$bool('+$to_js(this.tree)+')'}}
var $OpCtx=$B.parser.$OpCtx=function(C,op){
this.type='op'
this.op=op
this.parent=C.parent
this.tree=[C]
this.scope=$get_scope(this)
if(C.type=="expr"){if(['int','float','str'].indexOf(C.tree[0].type)>-1){this.left_type=C.tree[0].type}else if(C.tree[0].type=="id"){var binding=this.scope.binding[C.tree[0].value]
if(binding){this.left_type=binding.type}}}
C.parent.tree.pop()
C.parent.tree.push(this)
this.toString=function(){return '(op '+this.op+') ['+this.tree+']'}
this.to_js=function(){this.js_processed=true
var comps={'==':'eq','!=':'ne','>=':'ge','<=':'le','<':'lt','>':'gt'}
if(comps[this.op]!==undefined){var method=comps[this.op]
if(this.tree[0].type=='expr' && this.tree[1].type=='expr'){var t0=this.tree[0].tree[0],t1=this.tree[1].tree[0],js0=t0.to_js(),js1=t1.to_js()
switch(t1.type){case 'int':
switch(t0.type){case 'int':
if(Number.isSafeInteger(t0.value)&&
Number.isSafeInteger(t1.value)){return js0+this.op+js1}else{return '$B.$getattr('+
this.tree[0].to_js()+',"__'+
method+'__")('+
this.tree[1].to_js()+')'}
case 'str':
switch(this.op){case "==":
return "false"
case "!=":
return "true"
default:
return '$B.$TypeError("unorderable types: '+
" int() "+this.op+' str()")'}
case 'id':
return 'typeof '+js0+' == "number" ? '+
js0+this.op+js1+' : $B.rich_comp("__'+
method+'__",'+this.tree[0].to_js()+
','+this.tree[1].to_js()+')'}
break;
case 'str':
switch(t0.type){case 'str':
return js0+this.op+js1
case 'int':
switch(this.op){case "==":
return "false"
case "!=":
return "true"
default:
return '$B.$TypeError("unorderable types: '+
' str() '+this.op+' int()")'}
case 'id':
return 'typeof '+js0+' == "string" ? '+
js0+this.op+js1+' : $B.rich_comp("__'+
method+'__",'+this.tree[0].to_js()+
','+this.tree[1].to_js()+')'}
break;
case 'id':
if(t0.type=='id'){return 'typeof '+js0+'!="object" && typeof '+
js0+'!="function" && typeof '+js0+
' == typeof '+js1+' ? '+js0+this.op+js1+
' : $B.rich_comp("__'+method+'__",'+
this.tree[0].to_js()+','+this.tree[1].to_js()+
')'}
break}}}
switch(this.op){case 'and':
var op0=this.tree[0].to_js(),op1=this.tree[1].to_js()
if(this.wrap !==undefined){
return '(function(){var '+this.wrap.name+' = '+
this.wrap.js+';return $B.$test_expr($B.$test_item('+
op0+') && $B.$test_item('+op1+'))})()'}else{return '$B.$test_expr($B.$test_item('+op0+')&&'+
'$B.$test_item('+op1+'))'}
case 'or':
var res='$B.$test_expr($B.$test_item('+
this.tree[0].to_js()+')||'
return res+'$B.$test_item('+this.tree[1].to_js()+'))'
case 'in':
return '$B.$is_member('+$to_js(this.tree)+')'
case 'not_in':
return '!$B.$is_member('+$to_js(this.tree)+')'
case 'unary_neg':
case 'unary_pos':
case 'unary_inv':
var op,method
if(this.op=='unary_neg'){op='-';method='__neg__'}
else if(this.op=='unary_pos'){op='+';method='__pos__'}
else{op='~';method='__invert__'}
if(this.tree[1].type=="expr"){var x=this.tree[1].tree[0]
switch(x.type){case 'int':
var v=parseInt(x.value[1],x.value[0])
if(Number.isSafeInteger(v)){return op+v}
return '$B.$getattr('+x.to_js()+', "'+
method+'")()'
case 'float':
return 'float.$factory('+op+x.value+')'
case 'imaginary':
return '$B.make_complex(0,'+op+x.value+')'}}
return '$B.$getattr('+this.tree[1].to_js()+',"'+
method+'")()'
case 'is':
return '$B.$is('+this.tree[0].to_js()+', '+
this.tree[1].to_js()+')'
case 'is_not':
return this.tree[0].to_js()+'!=='+this.tree[1].to_js()
case '*':
case '+':
case '-':
var op=this.op,vars=[],has_float_lit=false,scope=$get_scope(this)
function is_simple(elt){if(elt.type=='expr' && elt.tree[0].type=='int'){return true}else if(elt.type=='expr' &&
elt.tree[0].type=='float'){has_float_lit=true
return true}else if(elt.type=='expr' &&
elt.tree[0].type=='list_or_tuple' &&
elt.tree[0].real=='tuple' &&
elt.tree[0].tree.length==1 &&
elt.tree[0].tree[0].type=='expr'){return is_simple(elt.tree[0].tree[0].tree[0])}else if(elt.type=='expr' && elt.tree[0].type=='id'){var _var=elt.tree[0].to_js()
if(vars.indexOf(_var)==-1){vars.push(_var)}
return true}else if(elt.type=='op' &&
['*','+','-'].indexOf(elt.op)>-1){for(var i=0;i < elt.tree.length;i++){if(!is_simple(elt.tree[i])){return false}}
return true}
return false}
function get_type(ns,v){var t
if(['int','float','str'].indexOf(v.type)>-1){t=v.type}else if(v.type=='id' && ns[v.value]){t=ns[v.value].type}
return t}
var e0=this.tree[0],e1=this.tree[1]
if(is_simple(this)){var v0=this.tree[0].tree[0],v1=this.tree[1].tree[0]
if(vars.length==0 && !has_float_lit){
return this.simple_js()}else if(vars.length==0){
return 'new Number('+this.simple_js()+')'}else{
var ns=scope.binding,t0=get_type(ns,v0),t1=get_type(ns,v1)
if((t0=='float' && t1=='float')||
(this.op=='+' && t0=='str' && t1=='str')){this.result_type=t0
return v0.to_js()+this.op+v1.to_js()}else if(['int','float'].indexOf(t0)>-1 &&
['int','float'].indexOf(t1)>-1){if(t0=='int' && t1=='int'){this.result_type='int'}else{this.result_type='float'}
switch(this.op){case '+':
return '$B.add('+v0.to_js()+','+
v1.to_js()+')'
case '-':
return '$B.sub('+v0.to_js()+','+
v1.to_js()+')'
case '*':
return '$B.mul('+v0.to_js()+','+
v1.to_js()+')'}}
var tests=[],tests1=[],pos=0
vars.forEach(function(_var){
tests.push('typeof '+_var+
'.valueOf() == "number"')
tests1.push('typeof '+_var+' == "number"')})
var res=[tests.join(' && ')+' ? ']
res.push('('+tests1.join(' && ')+' ? ')
res.push(this.simple_js())
res.push(' : new Number('+this.simple_js()+')')
res.push(')')
var t0=this.tree[0].to_js(),t1=this.tree[1].to_js()
if(this.op=='+'){res.push(' : (typeof '+t0+
' == "string" && typeof '+t1+
' == "string") ? '+t0+'+'+t1)}
res.push(': $B.$getattr('+t0+',"__')
res.push($operators[this.op]+'__")('+t1+')')
return '('+res.join('')+')'}}
if(comps[this.op]!==undefined){return '$B.rich_comp("__'+$operators[this.op]+'__",'+
e0.to_js()+','+e1.to_js()+')'}else{return '$B.$getattr('+e0.to_js()+', "__'+
$operators[this.op]+'__")('+e1.to_js()+')'}
default:
if(comps[this.op]!==undefined){return '$B.rich_comp("__'+$operators[this.op]+'__",'+
this.tree[0].to_js()+','+this.tree[1].to_js()+')'}else{return '$B.$getattr('+this.tree[0].to_js()+', "__'+
$operators[this.op]+'__")('+this.tree[1].to_js()+
')'}}}
this.simple_js=function(){function sjs(elt){if(elt.type=='op'){return elt.simple_js()}
else if(elt.type=='expr' && elt.tree[0].type=='list_or_tuple'
&& elt.tree[0].real=='tuple'
&& elt.tree[0].tree.length==1
&& elt.tree[0].tree[0].type=='expr'){return '('+elt.tree[0].tree[0].tree[0].simple_js()+')'}else{return elt.tree[0].to_js()}}
if(op=='+'){return '$B.add('+sjs(this.tree[0])+','+
sjs(this.tree[1])+')'}else if(op=='-'){return '$B.sub('+sjs(this.tree[0])+','+
sjs(this.tree[1])+')'}else if(op=='*'){return '$B.mul('+sjs(this.tree[0])+','+
sjs(this.tree[1])+')'}else if(op=='/'){return '$B.div('+sjs(this.tree[0])+','+
sjs(this.tree[1])+')'}else{return sjs(this.tree[0])+op+sjs(this.tree[1])}}}
var $PackedCtx=$B.parser.$PackedCtx=function(C){
this.type='packed'
if(C.parent.type=='list_or_tuple' &&
C.parent.parent.type=="node"){
for(var i=0;i < C.parent.tree.length;i++){var child=C.parent.tree[i]
if(child.type=='expr' && child.tree.length > 0
&& child.tree[0].type=='packed'){$_SyntaxError(C,["two starred expressions in assignment"])}}}
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return '(packed) '+this.tree}
this.to_js=function(){this.js_processed=true
return $to_js(this.tree)}}
var $PassCtx=$B.parser.$PassCtx=function(C){
this.type='pass'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return '(pass)'}
this.to_js=function(){this.js_processed=true
return 'void(0)'}}
var $RaiseCtx=$B.parser.$RaiseCtx=function(C){
this.type='raise'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return ' (raise) '+this.tree}
this.to_js=function(){this.js_processed=true
var res=''
if(this.tree.length==0){return '$B.$raise()'}
var exc_js=this.tree[0].to_js()
return '$B.$raise('+exc_js+')'}}
var $RawJSCtx=$B.parser.$RawJSCtx=function(C,js){this.type="raw_js"
C.tree[C.tree.length]=this
this.parent=C
this.toString=function(){return '(js) '+js}
this.to_js=function(){this.js_processed=true
return js}}
var $ReturnCtx=$B.parser.$ReturnCtx=function(C){
this.type='return'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
var node=$get_node(this)
while(node.parent){if(node.parent.C){var elt=node.parent.C.tree[0]
if(elt.type=='for'){elt.has_return=true
break}else if(elt.type=='try'){elt.has_return=true}else if(elt.type=='single_kw' && elt.token=='finally'){elt.has_return=true}}
node=node.parent}
this.toString=function(){return 'return '+this.tree}
this.to_js=function(){this.js_processed=true
if(this.tree.length==1 && this.tree[0].type=='abstract_expr'){
this.tree.pop()
new $IdCtx(new $ExprCtx(this,'rvalue',false),'None')}
var scope=$get_scope(this)
if(scope.ntype=='generator'){return 'return [$B.generator_return('+$to_js(this.tree)+')]'}
var js='var $res = '+$to_js(this.tree)+';'+'$B.leave_frame'
if(scope.id.substr(0,6)=='$exec_'){js+='_exec'}
return js+'();return $res'}}
var $SingleKwCtx=$B.parser.$SingleKwCtx=function(C,token){
this.type='single_kw'
this.token=token
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
if(token=="else"){var node=C.node
var pnode=node.parent
for(var rank=0;rank < pnode.children.length;rank++){if(pnode.children[rank]===node){break}}
var pctx=pnode.children[rank-1].C
if(pctx.tree.length > 0){var elt=pctx.tree[0]
if(elt.type=='for' ||
elt.type=='asyncfor' ||
(elt.type=='condition' && elt.token=='while')){elt.has_break=true
elt.else_node=$get_node(this)
this.loop_num=elt.loop_num}}}
this.toString=function(){return this.token}
this.transform=function(node,rank){
if(this.token=='finally'){var scope=$get_scope(this)
if(scope.ntype !='generator'){node.insert(0,$NodeJS('var $exit;'+
'if($B.frames_stack.length<$stack_length){'+
'$exit = true;'+
'$B.frames_stack.push($top_frame)'+
'}')
)
var scope_id=scope.id.replace(/\./g,'_')
var last_child=node.children[node.children.length-1]
if(last_child.C.tree[0].type !="return"){node.add($NodeJS('if($exit){$B.leave_frame()}'))}}}}
this.to_js=function(){this.js_processed=true
if(this.token=='finally'){return this.token}
if(this.loop_num !==undefined){var scope=$get_scope(this)
var res='if($locals_'+scope.id.replace(/\./g,'_')
return res+'["$no_break'+this.loop_num+'"])'}
return this.token}}
var $SliceCtx=$B.parser.$SliceCtx=function(C){
this.type='slice'
this.parent=C
this.tree=C.tree.length > 0 ?[C.tree.pop()]:[]
C.tree.push(this)
this.to_js=function(){for(var i=0;i < this.tree.length;i++){if(this.tree[i].type=="abstract_expr"){this.tree[i].to_js=function(){return "None"}}}
return "slice.$factory("+$to_js(this.tree)+")"}}
var $StarArgCtx=$B.parser.$StarArgCtx=function(C){
this.type='star_arg'
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
this.toString=function(){return '(star arg) '+this.tree}
this.to_js=function(){this.js_processed=true
return '{$nat:"ptuple",arg:'+$to_js(this.tree)+'}'}}
var $StringCtx=$B.parser.$StringCtx=function(C,value){
this.type='str'
this.parent=C
this.tree=[value]
C.tree[C.tree.length]=this
this.raw=false
this.toString=function(){return 'string '+(this.tree ||'')}
this.to_js=function(){this.js_processed=true
var res='',type=null,scope=$get_scope(this)
function fstring(parsed_fstring){
var elts=[]
for(var i=0;i < parsed_fstring.length;i++){if(parsed_fstring[i].type=='expression'){var expr=parsed_fstring[i].expression
var pos=0,br_stack=[],parts=[expr]
while(pos < expr.length){var car=expr.charAt(pos)
if(car==":" && br_stack.length==0){parts=[expr.substr(0,pos),expr.substr(pos+1)]
break}else if("{[(".indexOf(car)>-1){br_stack.push(car)}else if(")]}".indexOf(car)>-1){br_stack.pop()}
pos++}
expr=parts[0]
var save_pos=$pos,temp_id="temp"+$B.UUID()
var expr_node=$B.py2js(expr,scope.module,temp_id,scope)
expr_node.to_js()
delete $B.$py_src[temp_id]
$pos=save_pos
for(var j=0;j < expr_node.children.length;j++){var node=expr_node.children[j]
if(node.C.tree && node.C.tree.length==1 &&
node.C.tree[0]=="try"){
for(var k=0;k < node.children.length;k++){
if(node.children[k].is_line_num){continue}
var expr1=node.children[k].js
while("\n;".indexOf(expr1.charAt(expr1.length-1))>-1){expr1=expr1.substr(0,expr1.length-1)}
break}
break}}
switch(parsed_fstring[i].conversion){case "a":
expr1='$B.builtins.ascii('+expr1+')'
break
case "r":
expr1='$B.builtins.repr('+expr1+')'
break
case "s":
expr1='$B.builtins.str.$factory('+expr1+')'
break}
var fmt=parts[1]
if(fmt !==undefined){
var parsed_fmt=$B.parse_fstring(fmt)
if(parsed_fmt.length > 1){fmt=fstring(parsed_fmt)}else{fmt="'"+fmt+"'"}
var res1="$B.builtins.str.format('{0:' + "+
fmt+" + '}', "+expr1+")"
elts.push(res1)}else{if(parsed_fstring[i].conversion===null){expr1='$B.builtins.str.$factory('+expr1+')'}
elts.push(expr1)}}else{var re=new RegExp("'","g")
elts.push("'"+parsed_fstring[i].replace(re,"\\'")+"'")}}
return elts.join(' + ')}
for(var i=0;i < this.tree.length;i++){if(this.tree[i].type=="call"){
var js='(function(){throw TypeError.$factory("'+"'str'"+
' object is not callable")}())'
return js}else{var value=this.tree[i],is_fstring=Array.isArray(value),is_bytes=false
if(!is_fstring){is_bytes=value.charAt(0)=='b'}
if(type==null){type=is_bytes
if(is_bytes){res+='bytes.$factory('}}else if(type !=is_bytes){return '$B.$TypeError("can\'t concat bytes to str")'}
if(!is_bytes){if(is_fstring){res+=fstring(value)}else{res+=value.replace(/\n/g,'\\n\\\n')}}else{res+=value.substr(1).replace(/\n/g,'\\n\\\n')}
if(i < this.tree.length-1){res+='+'}}}
if(is_bytes){res+=',"ISO-8859-1")'}
return res}}
var $SubCtx=$B.parser.$SubCtx=function(C){
this.type='sub'
this.func='getitem'
this.value=C.tree[0]
C.tree.pop()
C.tree[C.tree.length]=this
this.parent=C
this.tree=[]
this.toString=function(){return '(sub) (value) '+this.value+' (tree) '+this.tree}
this.to_js=function(){this.js_processed=true
if(this.func=='getitem' && this.value.type=='id'){var type=$get_node(this).locals[this.value.value],val=this.value.to_js()
if(type=='list' ||type=='tuple'){if(this.tree.length==1){return '$B.list_key('+val+
', '+this.tree[0].to_js()+')'}else if(this.tree.length==2){return '$B.list_slice('+val+
', '+(this.tree[0].to_js()||"null")+','+
(this.tree[1].to_js()||"null")+')'}else if(this.tree.length==3){return '$B.list_slice_step('+val+
', '+(this.tree[0].to_js()||"null")+','+
(this.tree[1].to_js()||"null")+','+
(this.tree[2].to_js()||"null")+')'}}}
if(this.func=='getitem' && this.tree.length==1){return '$B.$getitem('+this.value.to_js()+','+
this.tree[0].to_js()+')'}
var res='',shortcut=false
if(this.func !=='delitem' &&
this.tree.length==1 && !this.in_sub){var expr='',x=this
shortcut=true
while(x.value.type=='sub'){expr+='['+x.tree[0].to_js()+']'
x.value.in_sub=true
x=x.value}
var subs=x.value.to_js()+'['+x.tree[0].to_js()+']'+
'((Array.isArray('+x.value.to_js()+') || typeof '+
x.value.to_js()+' == "string") && '+subs+
' !== undefined ?'+subs+expr+' : '}
var val=this.value.to_js()
res+='$B.$getattr('+val+',"__'+this.func+'__")('
if(this.tree.length==1){res+=this.tree[0].to_js()+')'}else{var res1=[]
this.tree.forEach(function(elt){if(elt.type=='abstract_expr'){res1.push('None')}
else{res1.push(elt.to_js())}})
res+='tuple.$factory(['+res1.join(',')+']))'}
return shortcut ? res+')' :res}}
var $TargetListCtx=$B.parser.$TargetListCtx=function(C){
this.type='target_list'
this.parent=C
this.tree=[]
this.expect='id'
C.tree[C.tree.length]=this
this.toString=function(){return '(target list) '+this.tree}
this.to_js=function(){this.js_processed=true
return $to_js(this.tree)}}
var $TernaryCtx=$B.parser.$TernaryCtx=function(C){
this.type='ternary'
this.parent=C.parent
C.parent.tree.pop()
C.parent.tree.push(this)
C.parent=this
this.tree=[C]
this.toString=function(){return '(ternary) '+this.tree}
this.to_js=function(){this.js_processed=true
var res='$B.$bool('+this.tree[1].to_js()+') ? '
res+=this.tree[0].to_js()+' : '
return res+this.tree[2].to_js()}}
var $TryCtx=$B.parser.$TryCtx=function(C){
this.type='try'
this.parent=C
C.tree[C.tree.length]=this
this.toString=function(){return '(try) '}
this.transform=function(node,rank){if(node.parent.children.length==rank+1){$_SyntaxError(C,"missing clause after 'try'")}else{var next_ctx=node.parent.children[rank+1].C.tree[0]
switch(next_ctx.type){case 'except':
case 'finally':
case 'single_kw':
break
default:
$_SyntaxError(C,"missing clause after 'try'")}}
var scope=$get_scope(this)
var error_name=create_temp_name('$err')
var failed_name=create_temp_name('$failed')
var js='var '+failed_name+' = false;\n'+
' '.repeat(node.indent+4)+'try'
new $NodeJSCtx(node,js)
node.is_try=true
node.has_return=this.has_return
var catch_node=$NodeJS('catch('+error_name+')')
catch_node.is_catch=true
node.parent.insert(rank+1,catch_node)
catch_node.add($NodeJS("$B.set_exc("+error_name+")"))
catch_node.add(
$NodeJS('var '+failed_name+' = true;'+
'$B.pmframe = $B.last($B.frames_stack);'+
'if(0){}')
)
var pos=rank+2,has_default=false,
has_else=false,
has_finally=false
while(1){if(pos==node.parent.children.length){break}
var ctx=node.parent.children[pos].C.tree[0]
if(ctx===undefined){
break}
if(ctx.type=='except'){
if(has_else){$_SyntaxError(C,"'except' or 'finally' after 'else'")}
if(has_finally){$_SyntaxError(C,"'except' after 'finally'")}
ctx.error_name=error_name
if(ctx.tree.length > 0 && ctx.tree[0].alias !==null
&& ctx.tree[0].alias !==undefined){
var alias=ctx.tree[0].alias
node.parent.children[pos].insert(0,$NodeJS('$locals["'+alias+'"] = $B.exception('+
error_name+')')
)}
catch_node.insert(catch_node.children.length,node.parent.children[pos])
if(ctx.tree.length==0){if(has_default){$_SyntaxError(C,'more than one except: line')}
has_default=true}
node.parent.children.splice(pos,1)}else if(ctx.type=='single_kw' && ctx.token=='finally'){has_finally=true
var finally_node=node.parent.children[pos]
pos++}else if(ctx.type=='single_kw' && ctx.token=='else'){if(has_else){$_SyntaxError(C,"more than one 'else'")}
if(has_finally){$_SyntaxError(C,"'else' after 'finally'")}
has_else=true
var else_body=node.parent.children[pos]
node.parent.children.splice(pos,1)}else{break}}
if(!has_default){
var new_node=new $Node(),ctx=new $NodeCtx(new_node)
catch_node.insert(catch_node.children.length,new_node)
new $SingleKwCtx(ctx,'else')
new_node.add($NodeJS('throw '+error_name))}
if(has_else){var else_node=new $Node()
else_node.module=scope.module
new $NodeJSCtx(else_node,'if(!'+failed_name+')')
else_body.children.forEach(function(elt){else_node.add(elt)})
if(has_finally){finally_node.insert(0,else_node)}else{node.parent.insert(pos,else_node)}
pos++}
$loop_num++}
this.to_js=function(){this.js_processed=true
return 'try'}}
var $UnaryCtx=$B.parser.$UnaryCtx=function(C,op){
this.type='unary'
this.op=op
this.parent=C
C.tree[C.tree.length]=this
this.toString=function(){return '(unary) '+this.op}
this.to_js=function(){this.js_processed=true
return this.op}}
var $WithCtx=$B.parser.$WithCtx=function(C){
this.type='with'
this.parent=C
C.tree[C.tree.length]=this
this.tree=[]
this.expect='as'
this.scope=$get_scope(this)
this.toString=function(){return '(with) '+this.tree}
this.set_alias=function(arg){this.tree[this.tree.length-1].alias=arg
$bind(arg,this.scope,this)
if(this.scope.ntype !=='module'){
this.scope.C.tree[0].locals.push(arg)}}
this.transform=function(node,rank){while(this.tree.length > 1){
var suite=node.children,item=this.tree.pop(),new_node=new $Node(),ctx=new $NodeCtx(new_node),with_ctx=new $WithCtx(ctx)
item.parent=with_ctx
with_ctx.tree=[item]
suite.forEach(function(elt){new_node.add(elt)})
node.children=[new_node]}
node.is_try=true
if(this.transformed){return}
if(this.tree.length > 1){var nw=new $Node(),ctx=new $NodeCtx(nw)
nw.parent=node
nw.module=node.module
nw.indent=node.indent+4
var wc=new $WithCtx(ctx)
wc.tree=this.tree.slice(1)
node.children.forEach(function(elt){nw.add(elt)})
node.children=[nw]
this.transformed=true
return}
var num=this.num=$loop_num++
var cm_name='$ctx_manager'+num,cme_name='$ctx_manager_exit'+num,exc_name='$exc'+num,err_name='$err'+num,val_name='$value'+num
if(this.tree[0].alias===null){this.tree[0].alias='$temp'}
if(this.tree[0].type=='expr' &&
this.tree[0].tree[0].type=='list_or_tuple'){if(this.tree[1].type !='expr' ||
this.tree[1].tree[0].type !='list_or_tuple'){$_SyntaxError(C)}
if(this.tree[0].tree[0].tree.length !=
this.tree[1].tree[0].tree.length){$_SyntaxError(C,['wrong number of alias'])}
var ids=this.tree[0].tree[0].tree,alias=this.tree[1].tree[0].tree
this.tree.shift()
this.tree.shift()
for(var i=ids.length-1;i >=0;i--){ids[i].alias=alias[i].value
this.tree.splice(0,0,ids[i])}}
var block=node.children
node.children=[]
var try_node=new $Node()
try_node.is_try=true
new $NodeJSCtx(try_node,'try')
node.add(try_node)
if(this.tree[0].alias){var alias=this.tree[0].alias.tree[0].tree[0].value
try_node.add($NodeJS('$locals'+'["'+alias+'"] = '+
val_name))}
block.forEach(function(elt){try_node.add(elt)})
var catch_node=new $Node()
catch_node.is_catch=true
new $NodeJSCtx(catch_node,'catch('+err_name+')')
catch_node.add($NodeJS(exc_name+' = false;'+err_name+
' = $B.exception('+err_name+')\n'+' '.repeat(node.indent+4)+
'var $b = '+cme_name+'('+
err_name+'.__class__,'+
err_name+','+
'$B.$getattr('+err_name+', "traceback")'+
')'+
';if(!$B.$bool($b)){'+
'throw '+err_name+
'}'
))
node.add(catch_node)
var finally_node=new $Node()
new $NodeJSCtx(finally_node,'finally')
finally_node.C.type='single_kw'
finally_node.C.token='finally'
finally_node.C.in_ctx_manager=true
finally_node.is_except=true
finally_node.in_ctx_manager=true
finally_node.add($NodeJS('if('+exc_name+')'+cme_name+
'(None,None,None);')
)
node.parent.insert(rank+1,finally_node)
this.transformed=true}
this.to_js=function(){this.js_processed=true
var indent=$get_node(this).indent,h=' '.repeat(indent+4),num=this.num
var cm_name='$ctx_manager'+num,cme_name='$ctx_manager_exit'+num,exc_name='$exc'+num,val_name='$value'+num
return 'var '+cm_name+' = '+this.tree[0].to_js()+'\n'+
h+'var '+cme_name+' = $B.$getattr('+cm_name+',"__exit__")\n'+
h+'var '+val_name+' = $B.$getattr('+cm_name+',"__enter__")()\n'+
h+'var '+exc_name+' = true\n'+
h+'try'}}
var $YieldCtx=$B.parser.$YieldCtx=function(C,is_await){
this.type='yield'
this.toString=function(){return '(yield) '+this.tree}
this.parent=C
this.tree=[]
C.tree[C.tree.length]=this
var in_lambda=false,parent=C
while(parent){if(parent.type=="lambda"){in_lambda=true
break}
parent=parent.parent}
if(! in_lambda){switch(C.type){case 'node':
break;
case 'assign':
case 'tuple':
case 'list_or_tuple':
$get_node(C).yield_atoms.push(this)
break
default:
$_SyntaxError(C,'yield atom must be inside ()')}}
var scope=this.scope=$get_scope(this,true)
if(! in_lambda){var in_func=scope.is_function,func_scope=scope
if(! in_func && scope.is_comp){var parent=scope.parent_block
while(parent.is_comp){parent=parent_block}
in_func=parent.is_function
func_scope=parent}
if(! in_func){$_SyntaxError(C,["'yield' outside function"])}}
if(! in_lambda){var def=func_scope.C.tree[0]
if(! is_await){def.type='generator'}
def.yields.push(this)}
this.toString=function(){return '(yield) '+(this.from ? '(from) ' :'')+this.tree}
this.transform=function(node,rank){var new_node=$NodeJS('// placeholder for generator sent value')
new_node.is_set_yield_value=true
node.parent.insert(rank+1,new_node)}
this.to_js=function(){this.js_processed=true
if(this.from===undefined){return $to_js(this.tree)||'None'}
return $to_js(this.tree)}}
var $add_profile=$B.parser.$add_profile=function(node,rank){if(node.type=='module'){var i=0
while(i < node.children.length){i+=$add_profile(node.children[i],i)}}else{var elt=node.C.tree[0],offset=1,flag=true,pnode=node
while(pnode.parent !==undefined){pnode=pnode.parent}
var mod_id=pnode.id
if(node.line_num===undefined){flag=false}
if(elt.type=='condition' && elt.token=='elif'){flag=false}
else if(elt.type=='except'){flag=false}
else if(elt.type=='single_kw'){flag=false}
if(flag){
var new_node=new $Node()
new $NodeJSCtx(new_node,';$B.$profile.count("'+mod_id+'",'+node.line_num+');')
node.parent.insert(rank,new_node)
offset=2}
var i=0
while(i < node.children.length){i+=$add_profile(node.children[i],i)}
return offset}}
var $add_line_num=$B.parser.$add_line_num=function(node,rank){if(node.type=='module'){var i=0
while(i < node.children.length){i+=$add_line_num(node.children[i],i)}}else if(node.type !=='marker'){var elt=node.C.tree[0],offset=1,flag=true,pnode=node
while(pnode.parent !==undefined){pnode=pnode.parent}
var mod_id=pnode.id
var line_num=node.line_num ||node.forced_line_num
if(line_num===undefined){flag=false}
if(elt.type=='condition' && elt.token=='elif'){flag=false}
else if(elt.type=='except'){flag=false}
else if(elt.type=='single_kw'){flag=false}
if(flag){
var js=';$locals.$line_info = "'+line_num+','+
mod_id+'";'
var new_node=new $Node()
new_node.is_line_num=true
new $NodeJSCtx(new_node,js)
node.parent.insert(rank,new_node)
offset=2}
var i=0
while(i < node.children.length){i+=$add_line_num(node.children[i],i)}
if((elt.type=='condition' && elt.token=="while")
||node.C.type=='for'){if($B.last(node.children).C.tree[0].type !="return"){node.add($NodeJS('$locals.$line_info = "'+line_num+
','+mod_id+'";'))}}
return offset}else{return 1}}
$B.$add_line_num=$add_line_num
var $bind=$B.parser.$bind=function(name,scope,C){
if(scope.nonlocals && scope.nonlocals[name]){
return}
if(scope.globals && scope.globals.indexOf(name)>-1){var module=$get_module(C)
module.binding[name]=true
return}
var node=$get_node(C)
node.bindings=node.bindings ||{}
node.bindings[name]=true
scope.binding=scope.binding ||{}
if(scope.binding[name]===undefined){scope.binding[name]=true}}
function $parent_match(ctx,obj){
var flag
while(ctx.parent){flag=true
for(var attr in obj){if(ctx.parent[attr]!=obj[attr]){flag=false
break}}
if(flag){return ctx.parent}
ctx=ctx.parent}
return false}
var $previous=$B.parser.$previous=function(C){var previous=C.node.parent.children[C.node.parent.children.length-2]
if(!previous ||!previous.C){$_SyntaxError(C,'keyword not following correct keyword')}
return previous.C.tree[0]}
var $get_docstring=$B.parser.$get_docstring=function(node){var doc_string=''
if(node.children.length > 0){var firstchild=node.children[0]
if(firstchild.C.tree && firstchild.C.tree.length > 0 &&
firstchild.C.tree[0].type=='expr'){var expr=firstchild.C.tree[0].tree[0]
if(expr.type=='str' && !Array.isArray(expr.tree[0])){doc_string=firstchild.C.tree[0].tree[0].to_js()}}}
return doc_string}
var $get_scope=$B.parser.$get_scope=function(C,flag){
var ctx_node=C.parent
while(ctx_node.type !=='node'){ctx_node=ctx_node.parent}
var tree_node=ctx_node.node,scope=null
while(tree_node.parent && tree_node.parent.type !=='module'){var ntype=tree_node.parent.C.tree[0].type
switch(ntype){case 'def':
case 'class':
case 'generator':
var scope=tree_node.parent
scope.ntype=ntype
scope.is_function=ntype !='class'
return scope}
tree_node=tree_node.parent}
var scope=tree_node.parent ||tree_node
scope.ntype="module"
return scope}
var $get_line_num=$B.parser.$get_line_num=function(C){var ctx_node=$get_node(C),line_num=ctx_node.line_num
if(ctx_node.line_num===undefined){ctx_node=ctx_node.parent
while(ctx_node && ctx_node.line_num===undefined){ctx_node=ctx_node.parent}
if(ctx_node && ctx_node.line_num){line_num=ctx_node.line_num}}
return line_num}
var $get_module=$B.parser.$get_module=function(C){
var ctx_node=C.parent
while(ctx_node.type !=='node'){ctx_node=ctx_node.parent}
var tree_node=ctx_node.node
if(tree_node.ntype=="module"){return tree_node}
var scope=null
while(tree_node.parent.type !='module'){tree_node=tree_node.parent}
var scope=tree_node.parent
scope.ntype="module"
return scope}
var $get_src=$B.parser.$get_src=function(C){
var node=$get_node(C)
while(node.parent !==undefined){node=node.parent}
return node.src}
var $get_node=$B.parser.$get_node=function(C){var ctx=C
while(ctx.parent){ctx=ctx.parent}
return ctx.node}
var $to_js_map=$B.parser.$to_js_map=function(tree_element){if(tree_element.to_js !==undefined){return tree_element.to_js()}
throw Error('no to_js() for '+tree_element)}
var $to_js=$B.parser.$to_js=function(tree,sep){if(sep===undefined){sep=','}
return tree.map($to_js_map).join(sep)}
var $mangle=$B.parser.$mangle=function(name,C){
if(name.substr(0,2)=="__" && name.substr(name.length-2)!=="__"){var klass=null,scope=$get_scope(C)
while(true){if(scope.ntype=="module"){return name}
else if(scope.ntype=="class"){var class_name=scope.C.tree[0].name
while(class_name.charAt(0)=='_'){class_name=class_name.substr(1)}
return '_'+class_name+name}else{if(scope.parent && scope.parent.C){scope=$get_scope(scope.C.tree[0])}else{return name}}}}else{return name}}
var $transition=$B.parser.$transition=function(C,token,value){
switch(C.type){case 'abstract_expr':
var packed=C.packed,is_await=C.is_await
switch(token){case 'id':
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case '[':
case '(':
case '{':
case '.':
case 'not':
case 'lambda':
case 'yield':
C.parent.tree.pop()
var commas=C.with_commas
C=C.parent
C.packed=packed
C.is_await=is_await}
switch(token){case 'await':
return new $AwaitCtx(C)
case 'id':
return new $IdCtx(new $ExprCtx(C,'id',commas),value)
case 'str':
return new $StringCtx(new $ExprCtx(C,'str',commas),value)
case 'bytes':
return new $StringCtx(new $ExprCtx(C,'bytes',commas),value)
case 'int':
return new $IntCtx(new $ExprCtx(C,'int',commas),value)
case 'float':
return new $FloatCtx(new $ExprCtx(C,'float',commas),value)
case 'imaginary':
return new $ImaginaryCtx(
new $ExprCtx(C,'imaginary',commas),value)
case '(':
return new $ListOrTupleCtx(
new $ExprCtx(C,'tuple',commas),'tuple')
case '[':
return new $ListOrTupleCtx(
new $ExprCtx(C,'list',commas),'list')
case '{':
return new $DictOrSetCtx(
new $ExprCtx(C,'dict_or_set',commas))
case '.':
return new $EllipsisCtx(
new $ExprCtx(C,'ellipsis',commas))
case 'not':
if(C.type=='op' && C.op=='is'){
C.op='is_not'
return C}
return new $NotCtx(new $ExprCtx(C,'not',commas))
case 'lambda':
return new $LambdaCtx(new $ExprCtx(C,'lambda',commas))
case 'op':
var tg=value
switch(tg){case '*':
C.parent.tree.pop()
var commas=C.with_commas
C=C.parent
return new $PackedCtx(
new $ExprCtx(C,'expr',commas))
case '-':
case '~':
case '+':
C.parent.tree.pop()
var left=new $UnaryCtx(C.parent,tg)
if(tg=='-'){var op_expr=new $OpCtx(left,'unary_neg')}else if(tg=='+'){var op_expr=new $OpCtx(left,'unary_pos')}else{var op_expr=new $OpCtx(left,'unary_inv')}
return new $AbstractExprCtx(op_expr,false)
case 'not':
C.parent.tree.pop()
var commas=C.with_commas
C=C.parent
return new $NotCtx(
new $ExprCtx(C,'not',commas))}
$_SyntaxError(C,'token '+token+' after '+
C)
case '=':
$_SyntaxError(C,token)
case 'yield':
return new $AbstractExprCtx(new $YieldCtx(C),true)
case ':':
if(C.parent.type=="sub" ||
(C.parent.type=="list_or_tuple" &&
C.parent.parent.type=="sub")){return new $AbstractExprCtx(new $SliceCtx(C.parent),false)}
return $transition(C.parent,token,value)
case ')':
case ',':
switch(C.parent.type){case 'slice':
case 'list_or_tuple':
case 'call_arg':
case 'op':
case 'yield':
break
default:
$_SyntaxError(C,token)}}
return $transition(C.parent,token,value)
case 'annotation':
if(token=="eol" && C.tree.length==1 &&
C.tree[0].tree.length==0){$_SyntaxError(C,"empty annotation")}
return $transition(C.parent,token)
case 'assert':
if(token=='eol'){return $transition(C.parent,token)}
$_SyntaxError(C,token)
case 'assign':
if(token=='eol'){if(C.tree[1].type=='abstract_expr'){$_SyntaxError(C,'token '+token+' after '+
C)}
C.guess_type()
return $transition(C.parent,'eol')}
$_SyntaxError(C,'token '+token+' after '+C)
case 'async':
if(token=="def"){return $transition(C.parent,token,value)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'attribute':
if(token==='id'){var name=value
if(noassign[name]===true){$_SyntaxError(C,["cannot assign to "+name])}
name=$mangle(name,C)
C.name=name
return C.parent}
$_SyntaxError(C,token)
case 'augm_assign':
if(token=='eol'){if(C.tree[1].type=='abstract_expr'){$_SyntaxError(C,'token '+token+' after '+
C)}
return $transition(C.parent,'eol')}
$_SyntaxError(C,'token '+token+' after '+C)
case 'await':
C.parent.is_await=true
return $transition(C.parent,token,value)
case 'break':
if(token=='eol'){return $transition(C.parent,'eol')}
$_SyntaxError(C,token)
case 'call':
switch(token){case ',':
if(C.expect=='id'){$_SyntaxError(C,token)}
C.expect='id'
return C
case 'await':
case 'id':
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case '[':
case '(':
case '{':
case '.':
case 'not':
case 'lambda':
C.expect=','
return $transition(new $CallArgCtx(C),token,value)
case ')':
C.end=$pos
return C.parent
case 'op':
C.expect=','
switch(value){case '-':
case '~':
case '+':
C.expect=','
return $transition(new $CallArgCtx(C),token,value)
case '*':
C.has_star=true
return new $StarArgCtx(C)
case '**':
C.has_dstar=true
return new $DoubleStarArgCtx(C)}
$_SyntaxError(C,token)}
return $transition(C.parent,token,value)
case 'call_arg':
switch(token){case 'await':
case 'id':
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case '[':
case '(':
case '{':
case '.':
case 'not':
case 'lambda':
if(C.expect=='id'){C.expect=','
var expr=new $AbstractExprCtx(C,false)
return $transition(expr,token,value)}
break
case '=':
if(C.expect==','){return new $ExprCtx(new $KwArgCtx(C),'kw_value',false)}
break
case 'for':
var lst=new $ListOrTupleCtx(C,'gen_expr')
lst.vars=C.vars
lst.locals=C.locals
lst.intervals=[C.start]
C.tree.pop()
lst.expression=C.tree
C.tree=[lst]
lst.tree=[]
var comp=new $ComprehensionCtx(lst)
return new $TargetListCtx(new $CompForCtx(comp))
case 'op':
if(C.expect=='id'){var op=value
C.expect=','
switch(op){case '+':
case '-':
case '~':
return $transition(new $AbstractExprCtx(C,false),token,op)
case '*':
return new $StarArgCtx(C)
case '**':
return new $DoubleStarArgCtx(C)}}
$_SyntaxError(C,'token '+token+' after '+C)
case ')':
if(C.parent.kwargs &&
$B.last(C.parent.tree).tree[0]&&
['kwarg','star_arg','double_star_arg'].
indexOf($B.last(C.parent.tree).tree[0].type)==-1){$_SyntaxError(C,['non-keyword arg after keyword arg'])}
if(C.tree.length > 0){var son=C.tree[C.tree.length-1]
if(son.type=='list_or_tuple' &&
son.real=='gen_expr'){son.intervals.push($pos)}}
return $transition(C.parent,token)
case ':':
if(C.expect==',' &&
C.parent.parent.type=='lambda'){return $transition(C.parent.parent,token)}
break
case ',':
if(C.expect==','){if(C.parent.kwargs &&
['kwarg','star_arg','double_star_arg'].
indexOf($B.last(C.parent.tree).tree[0].type)==-1){$_SyntaxError(C,['non-keyword arg after keyword arg'])}
return $transition(C.parent,token,value)}}
$_SyntaxError(C,'token '+token+' after '+C)
case 'class':
switch(token){case 'id':
if(C.expect=='id'){C.set_name(value)
C.expect='(:'
return C}
break
case '(':
return new $CallCtx(C)
case ':':
return $BodyCtx(C)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'comp_if':
return $transition(C.parent,token,value)
case 'comp_for':
if(token=='in' && C.expect=='in'){C.expect=null
return new $AbstractExprCtx(new $CompIterableCtx(C),true)}
if(C.expect===null){
return $transition(C.parent,token,value)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'comp_iterable':
return $transition(C.parent,token,value)
case 'comprehension':
switch(token){case 'if':
return new $AbstractExprCtx(new $CompIfCtx(C),false)
case 'for':
return new $TargetListCtx(new $CompForCtx(C))}
return $transition(C.parent,token,value)
case 'condition':
if(token==':'){if(C.tree[0].type=="abstract_expr" &&
C.tree[0].tree.length==0){
$_SyntaxError(C,'token '+token+' after '+C)}
return $BodyCtx(C)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'continue':
if(token=='eol'){return C.parent}
$_SyntaxError(C,'token '+token+' after '+C)
case 'ctx_manager_alias':
switch(token){case ',':
case ':':
return $transition(C.parent,token,value)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'decorator':
if(token=='id' && C.tree.length==0){return $transition(new $DecoratorExprCtx(C),token,value)}
if(token=='eol'){return $transition(C.parent,token)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'decorator_expression':
if(C.expects===undefined){if(token=="id"){C.names.push(value)
C.expects="."
return C}
$_SyntaxError(C,'token '+token+' after '+C)}else if(C.is_call && token !=="eol"){$_SyntaxError(C,'token '+token+' after '+C)}else if(token=="id" && C.expects=="id"){C.names.push(value)
C.expects="."
return C}else if(token=="." && C.expects=="."){C.expects="id"
return C}else if(token=="(" && C.expects=="."){if(! C.is_call){C.is_call=true
return new $CallCtx(C)}}else if(token=='eol'){return $transition(C.parent,token)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'def':
switch(token){case 'id':
if(C.name){$_SyntaxError(C,'token '+token+' after '+C)}
C.set_name(value)
return C
case '(':
if(C.name==null){$_SyntaxError(C,'token '+token+
' after '+C)}
C.has_args=true;
return new $FuncArgs(C)
case 'annotation':
return new $AbstractExprCtx(new $AnnotationCtx(C),true)
case ':':
if(C.has_args){return $BodyCtx(C)}}
$_SyntaxError(C,'token '+token+' after '+C)
case 'del':
if(token=='eol'){return $transition(C.parent,token)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'dict_or_set':
if(C.closed){switch(token){case '[':
return new $AbstractExprCtx(new $SubCtx(C.parent),false)
case '(':
return new $CallArgCtx(new $CallCtx(C.parent))}
return $transition(C.parent,token,value)}else{if(C.expect==','){switch(token){case '}':
switch(C.real){case 'dict_or_set':
if(C.tree.length !=1){break}
C.real='set'
case 'set':
case 'set_comp':
case 'dict_comp':
C.items=C.tree
C.tree=[]
C.closed=true
return C
case 'dict':
if(C.nb_dict_items()% 2==0){C.items=C.tree
C.tree=[]
C.closed=true
return C}}
$_SyntaxError(C,'token '+token+
' after '+C)
case ',':
if(C.real=='dict_or_set'){C.real='set'}
if(C.real=='dict' &&
C.nb_dict_items()% 2){$_SyntaxError(C,'token '+token+
' after '+C)}
C.expect='id'
return C
case ':':
if(C.real=='dict_or_set'){C.real='dict'}
if(C.real=='dict'){C.expect=','
return new $AbstractExprCtx(C,false)}else{$_SyntaxError(C,'token '+token+
' after '+C)}
case 'for':
if(C.real=='dict_or_set'){C.real='set_comp'}
else{C.real='dict_comp'}
var lst=new $ListOrTupleCtx(C,'dict_or_set_comp')
lst.intervals=[C.start+1]
lst.vars=C.vars
C.tree.pop()
lst.expression=C.tree
C.tree=[lst]
lst.tree=[]
var comp=new $ComprehensionCtx(lst)
return new $TargetListCtx(new $CompForCtx(comp))}
$_SyntaxError(C,'token '+token+' after '+C)}else if(C.expect=='id'){switch(token){case '}':
if(C.tree.length==0){
C.items=[]
C.real='dict'}else{
C.items=C.tree}
C.tree=[]
C.closed=true
return C
case 'id':
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case '[':
case '(':
case '{':
case '.':
case 'not':
case 'lambda':
C.expect=','
var expr=new $AbstractExprCtx(C,false)
return $transition(expr,token,value)
case 'op':
switch(value){case '*':
case '**':
C.expect=","
var expr=new $AbstractExprCtx(C,false)
expr.packed=value.length
if(C.real=="dict_or_set"){C.real=value=="*" ? "set" :
"dict"}else if(
(C.real=="set" && value=="**")||
(C.real=="dict" && value=="*")){$_SyntaxError(C,'token '+token+
' after '+C)}
return expr
case '+':
return C
case '-':
case '~':
C.expect=','
var left=new $UnaryCtx(C,value)
if(value=='-'){var op_expr=new $OpCtx(left,'unary_neg')}else if(value=='+'){var op_expr=new $OpCtx(left,'unary_pos')}else{var op_expr=new $OpCtx(left,'unary_inv')}
return new $AbstractExprCtx(op_expr,false)}
$_SyntaxError(C,'token '+token+
' after '+C)}
$_SyntaxError(C,'token '+token+' after '+C)}
return $transition(C.parent,token,value)}
case 'double_star_arg':
switch(token){case 'id':
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case '[':
case '(':
case '{':
case '.':
case 'not':
case 'lambda':
return $transition(new $AbstractExprCtx(C,false),token,value)
case ',':
case ')':
return $transition(C.parent,token)
case ':':
if(C.parent.parent.type=='lambda'){return $transition(C.parent.parent,token)}}
$_SyntaxError(C,'token '+token+' after '+C)
case 'ellipsis':
if(token=='.'){C.nbdots++;return C}
else{if(C.nbdots !=3){$pos--
$_SyntaxError(C,'token '+token+' after '+
C)}else{return $transition(C.parent,token,value)}}
case 'except':
switch(token){case 'id':
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case '[':
case '(':
case '{':
case 'not':
case 'lamdba':
if(C.expect=='id'){C.expect='as'
return $transition(new $AbstractExprCtx(C,false),token,value)}
case 'as':
if(C.expect=='as' &&
C.has_alias===undefined){C.expect='alias'
C.has_alias=true
return C}
case 'id':
if(C.expect=='alias'){C.expect=':'
C.set_alias(value)
return C}
break
case ':':
var _ce=C.expect
if(_ce=='id' ||_ce=='as' ||_ce==':'){return $BodyCtx(C)}
break
case '(':
if(C.expect=='id' && C.tree.length==0){C.parenth=true
return C}
break
case ')':
if(C.expect==',' ||C.expect=='as'){C.expect='as'
return C}
case ',':
if(C.parenth !==undefined &&
C.has_alias===undefined &&
(C.expect=='as' ||C.expect==',')){C.expect='id'
return C}}
$_SyntaxError(C,'token '+token+' after '+C.expect)
case 'expr':
switch(token){case 'id':
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case 'lamdba':
$_SyntaxError(C,'token '+token+' after '+
C)
break
case '[':
case '(':
case '{':
case '.':
case 'not':
if(C.expect=='expr'){C.expect=','
return $transition(new $AbstractExprCtx(C,false),token,value)}}
switch(token){case 'not':
if(C.expect==','){return new $ExprNot(C)}
break
case 'in':
if(C.parent.type=='target_list'){
return $transition(C.parent,token)}
if(C.expect==','){return $transition(C,'op','in')}
break
case ',':
if(C.expect==','){if(C.with_commas){if($parent_match(C,{type:"yield","from":true})){$_SyntaxError(C,"no implicit tuple for yield from")}
C.parent.tree.pop()
var tuple=new $ListOrTupleCtx(C.parent,'tuple')
tuple.implicit=true
tuple.has_comma=true
tuple.tree=[C]
C.parent=tuple
return tuple}}
return $transition(C.parent,token)
case '.':
return new $AttrCtx(C)
case '[':
return new $AbstractExprCtx(new $SubCtx(C),true)
case '(':
return new $CallCtx(C)
case 'op':
var op_parent=C.parent,op=value
if(op_parent.type=='ternary' && op_parent.in_else){var new_op=new $OpCtx(C,op)
return new $AbstractExprCtx(new_op,false)}
var op1=C.parent,repl=null
while(1){if(op1.type=='expr'){op1=op1.parent}
else if(op1.type=='op' &&
$op_weight[op1.op]>=$op_weight[op]&&
!(op1.op=='**' && op=='**')){
repl=op1
op1=op1.parent}else if(op1.type=="not" &&
$op_weight['not']> $op_weight[op]){repl=op1
op1=op1.parent}else{break}}
if(repl===null){while(1){if(C.parent !==op1){C=C.parent
op_parent=C.parent}else{break}}
C.parent.tree.pop()
var expr=new $ExprCtx(op_parent,'operand',C.with_commas)
expr.expect=','
C.parent=expr
var new_op=new $OpCtx(C,op)
return new $AbstractExprCtx(new_op,false)}else{
if(op==='and' ||op==='or'){while(repl.parent.type=='not'||
(repl.parent.type=='expr' &&
repl.parent.parent.type=='not')){
repl=repl.parent
op_parent=repl.parent}}}
if(repl.type=='op'){var _flag=false
switch(repl.op){case '<':
case '<=':
case '==':
case '!=':
case 'is':
case '>=':
case '>':
_flag=true}
if(_flag){switch(op){case '<':
case '<=':
case '==':
case '!=':
case 'is':
case '>=':
case '>':
var c2=repl.tree[1],
c2js=c2.to_js()
var c2_clone=new Object()
for(var attr in c2){c2_clone[attr]=c2[attr]}
var vname="$c"+chained_comp_num
c2.to_js=function(){return vname}
c2_clone.to_js=function(){return vname}
chained_comp_num++
while(repl.parent && repl.parent.type=='op'){if($op_weight[repl.parent.op]<
$op_weight[repl.op]){repl=repl.parent}else{break}}
repl.parent.tree.pop()
var and_expr=new $OpCtx(repl,'and')
and_expr.wrap={'name':vname,'js':c2js}
c2_clone.parent=and_expr
and_expr.tree.push('xxx')
var new_op=new $OpCtx(c2_clone,op)
return new $AbstractExprCtx(new_op,false)}}}
repl.parent.tree.pop()
var expr=new $ExprCtx(repl.parent,'operand',false)
expr.tree=[op1]
repl.parent=expr
var new_op=new $OpCtx(repl,op)
return new $AbstractExprCtx(new_op,false)
case 'augm_assign':
var parent=C.parent
while(parent){if(parent.type=="assign" ||parent.type=="augm_assign"){$_SyntaxError(C,"augmented assign inside assign")}else if(parent.type=="op"){$_SyntaxError(C,["can't assign to operator"])}
parent=parent.parent}
if(C.expect==','){return new $AbstractExprCtx(
new $AugmentedAssignCtx(C,value),true)}
return $transition(C.parent,token,value)
case ":":
if(C.parent.type=="sub" ||
(C.parent.type=="list_or_tuple" &&
C.parent.parent.type=="sub")){return new $AbstractExprCtx(new $SliceCtx(C.parent),false)}else if(C.parent.type=="slice"){return $transition(C.parent,token,value)}else if(C.parent.type=="node"){
return new $AbstractExprCtx(new $AnnotationCtx(C),false)}
break
case '=':
function has_parent(ctx,type){
while(ctx.parent){if(ctx.parent.type==type){return ctx.parent}
ctx=ctx.parent}
return false}
var annotation
if(C.expect==','){if(C.parent.type=="call_arg"){
if(C.tree[0].type !="id"){$_SyntaxError(C,["keyword can't be an expression"])}
return new $AbstractExprCtx(new $KwArgCtx(C),true)}else if(annotation=has_parent(C,"annotation")){return $transition(annotation,token,value)}else if(C.parent.type=="op"){
$_SyntaxError(C,["can't assign to operator"])}else if(C.parent.type=="list_or_tuple"){
for(var i=0;i < C.parent.tree.length;i++){var item=C.parent.tree[i]
if(item.type=="expr" && item.name=="operand"){$_SyntaxError(C,["can't assign to operator"])}}}
while(C.parent !==undefined){C=C.parent
if(C.type=="condition"){$_SyntaxError(C,'token '+token+' after '
+C)}else if(C.type=="augm_assign"){$_SyntaxError(C,"assign inside augmented assign")}}
C=C.tree[0]
return new $AbstractExprCtx(new $AssignCtx(C),true)}
break
case 'if':
var in_comp=false,ctx=C.parent
while(true){if(ctx.type=="list_or_tuple"){
break}else if(ctx.type=='comp_for' ||ctx.type=="comp_if"){in_comp=true
break}
if(ctx.parent !==undefined){ctx=ctx.parent}
else{break}}
if(in_comp){break}
var ctx=C
while(ctx.parent && ctx.parent.type=='op'){ctx=ctx.parent
if(ctx.type=='expr' &&
ctx.parent && ctx.parent.type=='op'){ctx=ctx.parent}}
return new $AbstractExprCtx(new $TernaryCtx(ctx),false)
case 'eol':
if(["dict_or_set","list_or_tuple"].indexOf(C.parent.type)==-1){var t=C.tree[0]
if(t.type=="packed" ||
(t.type=="call" && t.func.type=="packed")){$_SyntaxError(C,["can't use starred expression here"])}}}
return $transition(C.parent,token)
case 'expr_not':
if(token=='in'){
C.parent.tree.pop()
return new $AbstractExprCtx(
new $OpCtx(C.parent,'not_in'),false)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'for':
switch(token){case 'in':
return new $AbstractExprCtx(
new $ExprCtx(C,'target list',true),false)
case ':':
if(C.tree.length < 2
||C.tree[1].tree[0].type=="abstract_expr"){$_SyntaxError(C,'token '+token+' after '+
C)}
return $BodyCtx(C)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'from':
switch(token){case 'id':
if(C.expect=='id'){C.add_name(value)
C.expect=','
return C}
if(C.expect=='alias'){C.aliases[C.names[C.names.length-1]]=
value
C.expect=','
return C}
case '.':
if(C.expect=='module'){if(token=='id'){C.module+=value}
else{C.module+='.'}
return C}
case 'import':
if(C.expect=='module'){C.expect='id'
return C}
case 'op':
if(value=='*' && C.expect=='id'
&& C.names.length==0){if($get_scope(C).ntype !=='module'){$_SyntaxError(C,["import * only allowed at module level"])}
C.add_name('*')
C.expect='eol'
return C}
case ',':
if(C.expect==','){C.expect='id'
return C}
case 'eol':
switch(C.expect){case ',':
case 'eol':
C.bind_names()
return $transition(C.parent,token)
case 'id':
$_SyntaxError(C,['trailing comma not allowed without '+
'surrounding parentheses'])
default:
$_SyntaxError(C,['invalid syntax'])}
case 'as':
if(C.expect==',' ||C.expect=='eol'){C.expect='alias'
return C}
case '(':
if(C.expect=='id'){C.expect='id'
return C}
case ')':
if(C.expect==',' ||C.expect=='id'){C.expect='eol'
return C}}
$_SyntaxError(C,'token '+token+' after '+C)
case 'func_arg_id':
switch(token){case '=':
if(C.expect=='='){C.has_default=true
var def_ctx=C.parent.parent
if(C.parent.has_star_arg){def_ctx.default_list.push(def_ctx.after_star.pop())}else{def_ctx.default_list.push(def_ctx.positional_list.pop())}
return new $AbstractExprCtx(C,false)}
break
case ',':
case ')':
if(C.parent.has_default && C.tree.length==0 &&
C.parent.has_star_arg===undefined){$pos-=C.name.length
$_SyntaxError(C,['non-default argument follows default argument'])}else{return $transition(C.parent,token)}
case ':':
if(C.has_default){
$_SyntaxError(C,'token '+token+' after '+
C)}
return new $AbstractExprCtx(new $AnnotationCtx(C),false)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'func_args':
switch(token){case 'id':
if(C.has_kw_arg){$_SyntaxError(C,'duplicate kw arg')}
if(C.expect=='id'){C.expect=','
if(C.names.indexOf(value)>-1){$_SyntaxError(C,['duplicate argument '+value+
' in function definition'])}}
return new $FuncArgIdCtx(C,value)
case ',':
if(C.expect==','){C.expect='id'
return C}
$_SyntaxError(C,'token '+token+' after '+
C)
case ')':
return C.parent
case 'op':
if(C.has_kw_arg){$_SyntaxError(C,'duplicate kw arg')}
var op=value
C.expect=','
if(op=='*'){if(C.has_star_arg){$_SyntaxError(C,'duplicate star arg')}
return new $FuncStarArgCtx(C,'*')}
if(op=='**'){return new $FuncStarArgCtx(C,'**')}
$_SyntaxError(C,'token '+op+' after '+C)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'func_star_arg':
switch(token){case 'id':
if(C.name===undefined){if(C.parent.names.indexOf(value)>-1){$_SyntaxError(C,['duplicate argument '+value+
' in function definition'])}}
C.set_name(value)
C.parent.names.push(value)
return C
case ',':
case ')':
if(C.name===undefined){
C.set_name('$dummy')
C.parent.names.push('$dummy')}
return $transition(C.parent,token)
case ':':
if(C.name===undefined){$_SyntaxError(C,'annotation on an unnamed parameter')}
return new $AbstractExprCtx(
new $AnnotationCtx(C),false)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'global':
switch(token){case 'id':
if(C.expect=='id'){new $IdCtx(C,value)
C.add(value)
C.expect=','
return C}
break
case ',':
if(C.expect==','){C.expect='id'
return C}
break
case 'eol':
if(C.expect==','){return $transition(C.parent,token)}
break}
$_SyntaxError(C,'token '+token+' after '+C)
case 'id':
switch(token){case '=':
if(C.parent.type=='expr' &&
C.parent.parent !==undefined &&
C.parent.parent.type=='call_arg'){return new $AbstractExprCtx(
new $KwArgCtx(C.parent),false)}
return $transition(C.parent,token,value)
case 'op':
return $transition(C.parent,token,value)
case 'id':
case 'str':
case 'int':
case 'float':
case 'imaginary':
if(C.value=="print"){$_SyntaxError(C,["missing parenthesis in call to 'print'"])}
$_SyntaxError(C,'token '+token+' after '+
C)}
if(C.value=="async"){
if(token=='def'){C.parent.parent.tree=[]
var ctx=$transition(C.parent.parent,token,value)
ctx.async=true
return ctx}}
return $transition(C.parent,token,value)
case 'import':
switch(token){case 'id':
if(C.expect=='id'){new $ImportedModuleCtx(C,value)
C.expect=','
return C}
if(C.expect=='qual'){C.expect=','
C.tree[C.tree.length-1].name+=
'.'+value
C.tree[C.tree.length-1].alias+=
'.'+value
return C}
if(C.expect=='alias'){C.expect=','
C.tree[C.tree.length-1].alias=
value
return C}
break
case '.':
if(C.expect==','){C.expect='qual'
return C}
break
case ',':
if(C.expect==','){C.expect='id'
return C}
break
case 'as':
if(C.expect==','){C.expect='alias'
return C}
break
case 'eol':
if(C.expect==','){C.bind_names()
return $transition(C.parent,token)}
break}
$_SyntaxError(C,'token '+token+' after '+C)
case 'imaginary':
case 'int':
case 'float':
switch(token){case 'id':
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case '[':
case '(':
case '{':
case 'not':
case 'lamdba':
$_SyntaxError(C,'token '+token+' after '+
C)}
return $transition(C.parent,token,value)
case 'kwarg':
if(token==','){return new $CallArgCtx(C.parent.parent)}
return $transition(C.parent,token)
case 'lambda':
if(token==':' && C.args===undefined){C.args=C.tree
C.tree=[]
C.body_start=$pos
return new $AbstractExprCtx(C,false)}
if(C.args !==undefined){
C.body_end=$pos
return $transition(C.parent,token)}
if(C.args===undefined){return $transition(new $CallCtx(C),token,value)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'list_or_tuple':
if(C.closed){if(token=='['){return new $AbstractExprCtx(
new $SubCtx(C.parent),false)}
if(token=='('){return new $CallCtx(C.parent)}
return $transition(C.parent,token,value)}else{if(C.expect==','){switch(C.real){case 'tuple':
case 'gen_expr':
if(token==')'){C.closed=true
if(C.real=='gen_expr'){C.intervals.push($pos)}
if(C.parent.type=="packed"){return C.parent.parent}
return C.parent}
break
case 'list':
case 'list_comp':
if(token==']'){C.closed=true
if(C.real=='list_comp'){C.intervals.push($pos)}
if(C.parent.type=="packed"){return C.parent.parent}
return C.parent}
break
case 'dict_or_set_comp':
if(token=='}'){C.intervals.push($pos)
return $transition(C.parent,token)}
break}
switch(token){case ',':
if(C.real=='tuple'){C.has_comma=true}
C.expect='id'
return C
case 'for':
if(C.real=='list'){C.real='list_comp'}
else{C.real='gen_expr'}
C.intervals=[C.start+1]
C.expression=C.tree
C.tree=[]
var comp=new $ComprehensionCtx(C)
return new $TargetListCtx(new $CompForCtx(comp))}
return $transition(C.parent,token,value)}else if(C.expect=='id'){switch(C.real){case 'tuple':
if(token==')'){C.closed=true
return C.parent}
if(token=='eol' && C.implicit===true){C.closed=true
return $transition(C.parent,token)}
break
case 'gen_expr':
if(token==')'){C.closed=true
return $transition(C.parent,token)}
break
case 'list':
if(token==']'){C.closed=true
return C}
break}
switch(token){case '=':
if(C.real=='tuple' &&
C.implicit===true){C.closed=true
C.parent.tree.pop()
var expr=new $ExprCtx(C.parent,'tuple',false)
expr.tree=[C]
C.parent=expr
return $transition(C.parent,token)}
break
case ')':
break
case ']':
if(C.real=='tuple' &&
C.implicit===true){
return $transition(C.parent,token,value)}else{break}
case ',':
$_SyntaxError(C,'unexpected comma inside list')
default:
C.expect=','
var expr=new $AbstractExprCtx(C,false)
return $transition(expr,token,value)}}else{return $transition(C.parent,token,value)}}
case 'list_comp':
switch(token){case ']':
return C.parent
case 'in':
return new $ExprCtx(C,'iterable',true)
case 'if':
return new $ExprCtx(C,'condition',true)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'node':
switch(token){case 'id':
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case '[':
case '(':
case '{':
case 'not':
case 'lamdba':
case '.':
var expr=new $AbstractExprCtx(C,true)
return $transition(expr,token,value)
case 'op':
switch(value){case '*':
case '+':
case '-':
case '~':
var expr=new $AbstractExprCtx(C,true)
return $transition(expr,token,value)}
break
case 'async':
return new $AsyncCtx(C)
case 'await':
return new $AbstractExprCtx(new $AwaitCtx(C),true)
case 'class':
return new $ClassCtx(C)
case 'continue':
return new $ContinueCtx(C)
case '__debugger__':
return new $DebuggerCtx(C)
case 'break':
return new $BreakCtx(C)
case 'def':
return new $DefCtx(C)
case 'for':
return new $TargetListCtx(new $ForExpr(C))
case 'if':
case 'while':
return new $AbstractExprCtx(
new $ConditionCtx(C,token),false)
case 'elif':
var previous=$previous(C)
if(['condition'].indexOf(previous.type)==-1 ||
previous.token=='while'){$_SyntaxError(C,'elif after '+previous.type)}
return new $AbstractExprCtx(
new $ConditionCtx(C,token),false)
case 'else':
var previous=$previous(C)
if(['condition','except','for'].
indexOf(previous.type)==-1){$_SyntaxError(C,'else after '+previous.type)}
return new $SingleKwCtx(C,token)
case 'finally':
var previous=$previous(C)
if(['try','except'].indexOf(previous.type)==-1 &&
(previous.type !='single_kw' ||
previous.token !='else')){$_SyntaxError(C,'finally after '+previous.type)}
return new $SingleKwCtx(C,token)
case 'try':
return new $TryCtx(C)
case 'except':
var previous=$previous(C)
if(['try','except'].indexOf(previous.type)==-1){$_SyntaxError(C,'except after '+previous.type)}
return new $ExceptCtx(C)
case 'assert':
return new $AbstractExprCtx(
new $AssertCtx(C),'assert',true)
case 'from':
return new $FromCtx(C)
case 'import':
return new $ImportCtx(C)
case 'global':
return new $GlobalCtx(C)
case 'nonlocal':
return new $NonlocalCtx(C)
case 'lambda':
return new $LambdaCtx(C)
case 'pass':
return new $PassCtx(C)
case 'raise':
return new $AbstractExprCtx(new $RaiseCtx(C),true)
case 'return':
return new $AbstractExprCtx(new $ReturnCtx(C),true)
case 'with':
return new $AbstractExprCtx(new $WithCtx(C),false)
case 'yield':
return new $AbstractExprCtx(new $YieldCtx(C),true)
case 'del':
return new $AbstractExprCtx(new $DelCtx(C),true)
case '@':
return new $DecoratorCtx(C)
case 'eol':
if(C.tree.length==0){
C.node.parent.children.pop()
return C.node.parent.C}
return C}
console.log('syntax error','token',token,'after',C)
$_SyntaxError(C,'token '+token+' after '+C)
case 'not':
switch(token){case 'in':
C.parent.parent.tree.pop()
return new $ExprCtx(new $OpCtx(C.parent,'not_in'),'op',false)
case 'id':
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case '[':
case '(':
case '{':
case '.':
case 'not':
case 'lamdba':
var expr=new $AbstractExprCtx(C,false)
return $transition(expr,token,value)
case 'op':
var a=value
if('+'==a ||'-'==a ||'~'==a){var expr=new $AbstractExprCtx(C,false)
return $transition(expr,token,value)}}
return $transition(C.parent,token)
case 'op':
if(C.op===undefined){$_SyntaxError(C,['C op undefined '+C])}
if(C.op.substr(0,5)=='unary' && token !='eol'){if(C.parent.type=='assign' ||
C.parent.type=='return'){
C.parent.tree.pop()
var t=new $ListOrTupleCtx(C.parent,'tuple')
t.tree.push(C)
C.parent=t
return t}}
switch(token){case 'id':
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case '[':
case '(':
case '{':
case '.':
case 'not':
case 'lamdba':
return $transition(new $AbstractExprCtx(C,false),token,value)
case 'op':
switch(value){case '+':
case '-':
case '~':
return new $UnaryCtx(C,value)}
default:
if(C.tree[C.tree.length-1].type==
'abstract_expr'){$_SyntaxError(C,'token '+token+' after '+
C)}}
return $transition(C.parent,token)
case 'packed':
if(token=='id'){new $IdCtx(C,value)
C.parent.expect=','
return C.parent}else if(token=="["){C.parent.expect=','
return new $ListOrTupleCtx(C,"list")}else if(token=="("){C.parent.expect=','
return new $ListOrTupleCtx(C,"tuple")}
console.log("syntax error",C,token)
$_SyntaxError(C,'token '+token+' after '+C)
case 'pass':
if(token=='eol'){return C.parent}
$_SyntaxError(C,'token '+token+' after '+C)
case 'raise':
switch(token){case 'id':
if(C.tree.length==0){return new $IdCtx(new $ExprCtx(C,'exc',false),value)}
break
case 'from':
if(C.tree.length > 0){return new $AbstractExprCtx(C,false)}
break
case 'eol':
return $transition(C.parent,token)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'return':
return $transition(C.parent,token)
case 'single_kw':
if(token==':'){return $BodyCtx(C)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'slice':
if(token==":"){return new $AbstractExprCtx(C,false)}
return $transition(C.parent,token,value)
case 'star_arg':
switch(token){case 'id':
if(C.parent.type=="target_list"){C.tree.push(value)
C.parent.expect=','
return C.parent}
return $transition(new $AbstractExprCtx(C,false),token,value)
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case '[':
case '(':
case '{':
case 'not':
case 'lamdba':
return $transition(new $AbstractExprCtx(C,false),token,value)
case ',':
return $transition(C.parent,token)
case ')':
return $transition(C.parent,token)
case ':':
if(C.parent.parent.type=='lambda'){return $transition(C.parent.parent,token)}}
$_SyntaxError(C,'token '+token+' after '+C)
case 'str':
switch(token){case '[':
return new $AbstractExprCtx(new $SubCtx(C.parent),false)
case '(':
C.parent.tree[0]=C
return new $CallCtx(C.parent)
case 'str':
C.tree.push(value)
return C}
return $transition(C.parent,token,value)
case 'sub':
switch(token){case 'id':
case 'imaginary':
case 'int':
case 'float':
case 'str':
case 'bytes':
case '[':
case '(':
case '{':
case '.':
case 'not':
case 'lamdba':
var expr=new $AbstractExprCtx(C,false)
return $transition(expr,token,value)
case ']':
return C.parent
case ':':
return new $AbstractExprCtx(new $SliceCtx(C),false)
case ',':
return new $AbstractExprCtx(C,false)}
console.log('syntax error',C,token)
$_SyntaxError(C,'token '+token+' after '+C)
case 'target_list':
switch(token){case 'id':
if(C.expect=='id'){C.expect=','
return new $IdCtx(
new $ExprCtx(C,'target',false),value)}
case 'op':
if(C.expect=='id' && value=='*'){
return new $PackedCtx(C)}
case '(':
case '[':
if(C.expect=='id'){C.expect=','
return new $TargetListCtx(C)}
case ')':
case ']':
if(C.expect==','){return C.parent}
case ',':
if(C.expect==','){C.expect='id'
return C}}
if(C.expect==','){return $transition(C.parent,token,value)}else if(token=='in'){
return $transition(C.parent,token,value)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'ternary':
if(token=='else'){C.in_else=true
return new $AbstractExprCtx(C,false)}else if(! C.in_else){$_SyntaxError(C,'token '+token+' after '+C)}
return $transition(C.parent,token,value)
case 'try':
if(token==':'){return $BodyCtx(C)}
$_SyntaxError(C,'token '+token+' after '+C)
case 'unary':
switch(token){case 'int':
case 'float':
case 'imaginary':
var expr=C.parent
C.parent.parent.tree.pop()
if(C.op=='-'){value="-"+value}
else if(C.op=='~'){value=~value}
return $transition(C.parent.parent,token,value)
case 'id':
C.parent.parent.tree.pop()
var expr=new $ExprCtx(C.parent.parent,'call',false)
var expr1=new $ExprCtx(expr,'id',false)
new $IdCtx(expr1,value)
var repl=new $AttrCtx(expr)
if(C.op=='+'){repl.name='__pos__'}
else if(C.op=='-'){repl.name='__neg__'}
else{repl.name='__invert__'}
return expr1
case 'op':
if('+'==value ||'-'==value){if(C.op===value){C.op='+'}
else{C.op='-'}
return C}}
return $transition(C.parent,token,value)
case 'with':
switch(token){case 'id':
if(C.expect=='id'){C.expect='as'
return $transition(
new $AbstractExprCtx(C,false),token,value)}
if(C.expect=='alias'){if(C.parenth !==undefined){C.expect=','}
else{C.expect=':'}
C.set_alias(value)
return C}
break
case 'as':
return new $AbstractExprCtx(new $AliasCtx(C))
case ':':
switch(C.expect){case 'id':
case 'as':
case ':':
return $BodyCtx(C)}
break
case '(':
if(C.expect=='id' && C.tree.length==0){C.parenth=true
return C}else if(C.expect=='alias'){C.expect=':'
return new $TargetListCtx(C,false)}
break
case ')':
if(C.expect==',' ||C.expect=='as'){C.expect=':'
return C}
break
case ',':
if(C.parenth !==undefined &&
C.has_alias===undefined &&
(C.expect==',' ||C.expect=='as')){C.expect='id'
return C}else if(C.expect=='as'){C.expect='id'
return C}else if(C.expect==':'){C.expect='id'
return C}
break}
$_SyntaxError(C,'token '+token+' after '+
C.expect)
case 'yield':
if(token=='from'){
if(C.tree[0].type !='abstract_expr'){
$_SyntaxError(C,"'from' must follow 'yield'")}
C.from=true
$add_yield_from_code(C)
return C.tree[0]}
return $transition(C.parent,token)}}
$B.forbidden=["alert","arguments","case","catch","constructor","Date","delete","default","document","enum","eval","extends","Error","history","function","keys","length","location","Math","new","null","Number","RegExp","super","this","throw","var","window","toLocaleString","toString","message"]
$B.aliased_names=$B.list2obj($B.forbidden)
var s_escaped='abfnrtvxuU"0123456789'+"'"+'\\',is_escaped={}
for(var i=0;i < s_escaped.length;i++){is_escaped[s_escaped.charAt(i)]=true}
var $tokenize=$B.parser.$tokenize=function(root,src){var br_close={")":"(","]":"[","}":"{"},br_stack="",br_pos=[]
var kwdict=["class","return","break","for","lambda","try","finally","raise","def","from","nonlocal","while","del","global","with","as","elif","else","if","yield","assert","import","except","raise","in","pass","with","continue","__debugger__","async","await"
]
var unsupported=[]
var $indented=["class","def","for","condition","single_kw","try","except","with"
]
var int_pattern=new RegExp("^\\d[0-9_]*(j|J)?"),float_pattern1=new RegExp("^\\d[0-9_]*\\.\\d*([eE][+-]?\\d+)?(j|J)?"),float_pattern2=new RegExp("^\\d[0-9_]*([eE][+-]?\\d+)(j|J)?"),hex_pattern=new RegExp("^0[xX]([0-9a-fA-F_]+)"),octal_pattern=new RegExp("^0[oO]([0-7_]+)"),binary_pattern=new RegExp("^0[bB]([01_]+)")
var C=null
var new_node=new $Node(),current=root,name="",_type=null,pos=0,indent=null,string_modifier=false
var module=root.module
var lnum=root.line_num ||1
while(pos < src.length){var car=src.charAt(pos)
if(indent===null){var indent=0
while(pos < src.length){var _s=src.charAt(pos)
if(_s==" "){indent++;pos++}
else if(_s=="\t"){
indent++;pos++
if(indent % 8 > 0){indent+=8-indent % 8}}else{break}}
var _s=src.charAt(pos)
if(_s=='\n'){pos++;lnum++;indent=null;continue}
else if(_s=='#'){
var offset=src.substr(pos).search(/\n/)
if(offset==-1){break}
pos+=offset+1
lnum++
indent=null
continue}
new_node.indent=indent
new_node.line_num=lnum
new_node.module=module
if(current.is_body_node){
current.indent=indent}
if(indent > current.indent){
if(C !==null){if($indented.indexOf(C.tree[0].type)==-1){$pos=pos
$_SyntaxError(C,'unexpected indent',pos)}}
current.add(new_node)}else if(indent <=current.indent && C && C.tree[0]&&
$indented.indexOf(C.tree[0].type)>-1 &&
C.tree.length < 2){$pos=pos
$_SyntaxError(C,'expected an indented block',pos)}else{
while(indent !==current.indent){current=current.parent
if(current===undefined ||indent > current.indent){$pos=pos
$_SyntaxError(C,'unexpected indent',pos)}}
current.parent.add(new_node)}
current=new_node
C=new $NodeCtx(new_node)
continue}
if(car=="#"){var end=src.substr(pos+1).search('\n')
if(end==-1){end=src.length-1}
root.comments.push([pos,end])
pos+=end+1
continue}
if(car=='"' ||car=="'"){var raw=C.type=='str' && C.raw,bytes=false,fstring=false,sm_length,
end=null;
if(string_modifier){switch(string_modifier){case 'r':
raw=true
break
case 'u':
break
case 'b':
bytes=true
break
case 'rb':
case 'br':
bytes=true;raw=true
break
case 'f':
fstring=true
sm_length=1
break
case 'fr','rf':
fstring=true
sm_length=2
raw=true
break}
string_modifier=false}
if(src.substr(pos,3)==car+car+car){_type="triple_string"
end=pos+3}else{_type="string"
end=pos+1}
var escaped=false,zone=car,found=false
while(end < src.length){if(escaped){if(src.charAt(end)=="a"){zone=zone.substr(0,zone.length-1)+"\u0007"}else{zone+=src.charAt(end)
if(raw && src.charAt(end)=='\\'){zone+='\\'}}
escaped=false
end++}else if(src.charAt(end)=="\\"){if(raw){if(end < src.length-1 &&
src.charAt(end+1)==car){zone+='\\\\'+car
end+=2}else{zone+='\\\\'
end++}
escaped=true}else{if(src.charAt(end+1)=='\n'){
end+=2
lnum++}else if(src.substr(end+1,2)=='N{'){
var end_lit=end+3,re=new RegExp("[-A-Z0-9 ]+"),search=re.exec(src.substr(end_lit))
if(search===null){$_SyntaxError(C,"(unicode error) "+
"malformed \\N character escape",pos)}
var end_lit=end_lit+search[0].length
if(src.charAt(end_lit)!="}"){$_SyntaxError(C,"(unicode error) "+
"malformed \\N character escape",pos)}
var description=search[0]
if($B.unicodedb===undefined){var xhr=new XMLHttpRequest
xhr.open("GET",$B.brython_path+"unicode.txt",false)
xhr.onreadystatechange=function(){if(this.readyState==4){if(this.status==200){$B.unicodedb=this.responseText}else{console.log("Warning - could not "+
"load unicode.txt")}}}
xhr.send()}
if($B.unicodedb !==undefined){var re=new RegExp("^([0-9A-F]+);"+
description+"$","m")
search=re.exec($B.unicodedb)
if(search===null){$_SyntaxError(C,"(unicode error) "+
"unknown Unicode character name",pos)}
if(search[1].length==4){zone+="\\u"+search[1]
end=end_lit+1}else{end++}}else{end++}}else{if(end < src.length-1 &&
is_escaped[src.charAt(end+1)]===undefined){zone+='\\'}
zone+='\\'
escaped=true
end++}}}else if(src.charAt(end)=='\n' && _type !='triple_string'){
$pos=end
$_SyntaxError(C,["EOL while scanning string literal"])}else if(src.charAt(end)==car){if(_type=="triple_string" &&
src.substr(end,3)!=car+car+car){zone+=src.charAt(end)
end++}else{found=true
$pos=pos
var $string=zone.substr(1),string=''
for(var i=0;i < $string.length;i++){var $car=$string.charAt(i)
if($car==car &&
(raw ||(i==0 ||
$string.charAt(i-1)!='\\'))){string+='\\'}
string+=$car}
if(fstring){try{var re=new RegExp("\\\\"+car,"g"),string_no_bs=string.replace(re,car)
var elts=$B.parse_fstring(string_no_bs)}catch(err){$_SyntaxError(C,[err.toString()])}}
if(bytes){C=$transition(C,'str','b'+car+string+car)}else if(fstring){$pos-=sm_length
C=$transition(C,'str',elts)
$pos+=sm_length}else{C=$transition(C,'str',car+string+car)}
C.raw=raw;
pos=end+1
if(_type=="triple_string"){pos=end+3}
break}}else{zone+=src.charAt(end)
if(src.charAt(end)=='\n'){lnum++}
end++}}
if(!found){if(_type==="triple_string"){$_SyntaxError(C,"Triple string end not found")}else{$_SyntaxError(C,"String end not found")}}
continue}
if(name=="" && car !='$'){
if($B.regexIdentifier.exec(car)){name=car
var p0=pos
pos++
while(pos < src.length &&
$B.regexIdentifier.exec(src.substring(p0,pos+1))){name+=src.charAt(pos)
pos++}}
if(name){if(kwdict.indexOf(name)>-1){$pos=pos-name.length
if(unsupported.indexOf(name)>-1){$_SyntaxError(C,"Unsupported Python keyword '"+name+"'")}
C=$transition(C,name)}else if(typeof $operators[name]=='string' &&
['is_not','not_in'].indexOf(name)==-1){
if(name=='is'){
var re=/^\s+not\s+/
var res=re.exec(src.substr(pos))
if(res !==null){pos+=res[0].length
$pos=pos-name.length
C=$transition(C,'op','is_not')}else{$pos=pos-name.length
C=$transition(C,'op',name)}}else if(name=='not'){
var re=/^\s+in\s+/
var res=re.exec(src.substr(pos))
if(res !==null){pos+=res[0].length
$pos=pos-name.length
C=$transition(C,'op','not_in')}else{$pos=pos-name.length
C=$transition(C,name)}}else{$pos=pos-name.length
C=$transition(C,'op',name)}}else if((src.charAt(pos)=='"' ||src.charAt(pos)=="'")
&&['r','b','u','rb','br','f','fr','rf'].
indexOf(name.toLowerCase())!==-1){string_modifier=name.toLowerCase()
name=""
continue}else{if($B.forbidden.indexOf(name)>-1){name='$$'+name}
$pos=pos-name.length
C=$transition(C,'id',name)}
name=""
continue}}
function rmu(numeric_literal){
return numeric_literal.replace(/_/g,"")}
switch(car){case ' ':
case '\t':
pos++
break
case '.':
if(pos < src.length-1 &&/^\d$/.test(src.charAt(pos+1))){
var j=pos+1
while(j < src.length &&
src.charAt(j).search(/\d|e|E/)>-1){j++}
C=$transition(C,'float','0'+src.substr(pos,j-pos))
pos=j
break}
$pos=pos
C=$transition(C,'.')
pos++
break
case '0':
var res=hex_pattern.exec(src.substr(pos))
if(res){C=$transition(C,'int',[16,rmu(res[1])])
pos+=res[0].length
break}
var res=octal_pattern.exec(src.substr(pos))
if(res){C=$transition(C,'int',[8,rmu(res[1])])
pos+=res[0].length
break}
var res=binary_pattern.exec(src.substr(pos))
if(res){C=$transition(C,'int',[2,rmu(res[1])])
pos+=res[0].length
break}
if(src.charAt(pos+1).search(/\d/)>-1){
if(parseInt(src.substr(pos))===0){res=int_pattern.exec(src.substr(pos))
$pos=pos
C=$transition(C,'int',[10,rmu(res[0])])
pos+=res[0].length
break}else{$_SyntaxError(C,'invalid literal starting with 0')}}
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
var res=float_pattern1.exec(src.substr(pos))
if(res){$pos=pos
if(res[2]!==undefined){C=$transition(C,'imaginary',rmu(res[0].substr(0,res[0].length-1)))}else{C=$transition(C,'float',rmu(res[0]))}}else{res=float_pattern2.exec(src.substr(pos))
if(res){$pos=pos
if(res[2]!==undefined){C=$transition(C,'imaginary',rmu(res[0].substr(0,res[0].length-1)))}else{C=$transition(C,'float',rmu(res[0]))}}else{res=int_pattern.exec(src.substr(pos))
$pos=pos
if(res[1]!==undefined){C=$transition(C,'imaginary',rmu(res[0].substr(0,res[0].length-1)))}else{C=$transition(C,'int',[10,rmu(res[0])])}}}
pos+=res[0].length
break
case '\n':
lnum++
if(br_stack.length > 0){
pos++}else{if(current.C.tree.length > 0 ||current.C.async){$pos=pos
C=$transition(C,'eol')
indent=null
new_node=new $Node()}else{new_node.line_num=lnum}
pos++}
break
case '(':
case '[':
case '{':
br_stack+=car
br_pos[br_stack.length-1]=[C,pos]
$pos=pos
C=$transition(C,car)
pos++
break
case ')':
case ']':
case '}':
if(br_stack==""){$pos=pos
$_SyntaxError(C,"Unexpected closing bracket")}else if(br_close[car]!=
br_stack.charAt(br_stack.length-1)){$pos=pos
$_SyntaxError(C,"Unbalanced bracket")}else{br_stack=br_stack.substr(0,br_stack.length-1)
$pos=pos
C=$transition(C,car)
pos++}
break
case '=':
if(src.charAt(pos+1)!="="){$pos=pos
C=$transition(C,'=')
pos++}else{$pos=pos
C=$transition(C,'op','==')
pos+=2}
break
case ',':
case ':':
$pos=pos
C=$transition(C,car)
pos++
break
case ';':
$transition(C,'eol')
if(current.C.tree.length==0){
$pos=pos
$_SyntaxError(C,'invalid syntax')}
var pos1=pos+1
var ends_line=false
while(pos1 < src.length){var _s=src.charAt(pos1)
if(_s=='\n' ||_s=='#'){ends_line=true;break}
else if(_s==' '){pos1++}
else{break}}
if(ends_line){pos++;break}
new_node=new $Node()
new_node.indent=$get_node(C).indent
new_node.line_num=lnum
new_node.module=module
$get_node(C).parent.add(new_node)
current=new_node
C=new $NodeCtx(new_node)
pos++
break
case '/':
case '%':
case '&':
case '>':
case '<':
case '-':
case '+':
case '*':
case '@':
case '/':
case '^':
case '=':
case '|':
case '~':
case '!':
if(car=='-' && src.charAt(pos+1)=='>'){C=$transition(C,'annotation')
pos+=2
continue}
if(car=='@' && C.type=="node"){$pos=pos
C=$transition(C,car)
pos++
break}
var op_match=""
for(var op_sign in $operators){if(op_sign==src.substr(pos,op_sign.length)
&& op_sign.length > op_match.length){op_match=op_sign}}
$pos=pos
if(op_match.length > 0){if(op_match in $augmented_assigns){C=$transition(C,'augm_assign',op_match)}else{C=$transition(C,'op',op_match)}
pos+=op_match.length}else{$_SyntaxError(C,'invalid character: '+car)}
break
case '\\':
if(src.charAt(pos+1)=='\n'){lnum++
pos+=2
break}
case String.fromCharCode(12):
pos+=1
break
default:
$pos=pos
$_SyntaxError(C,'unknown token ['+car+']')}}
if(br_stack.length !=0){var br_err=br_pos[0]
$pos=br_err[1]
$_SyntaxError(br_err[0],["Unbalanced bracket "+br_stack.charAt(br_stack.length-1)])}
if(C !==null && C.type=="async"){
console.log("error with async",pos,src,src.substr(pos))
$pos=pos-7
throw $_SyntaxError(C,"car "+car+"after async",pos)}
if(C !==null && C.tree[0]&& $indented.indexOf(C.tree[0].type)>-1){$pos=pos-1
$_SyntaxError(C,'expected an indented block',pos)}}
var $create_root_node=$B.parser.$create_root_node=function(src,module,locals_id,parent_block,line_num){var root=new $Node('module')
root.module=module
root.id=locals_id
root.binding={__doc__:true,__name__:true,__file__:true,__package__:true,__annotations__:true}
root.parent_block=parent_block
root.line_num=line_num
root.indent=-1
root.comments=[]
root.imports={}
if(typeof src=="object"){root.is_comp=src.is_comp
src=src.src}
root.src=src
return root}
$B.py2js=function(src,module,locals_id,parent_scope,line_num){
$pos=0
if(typeof module=="object"){var __package__=module.__package__
module=module.__name__}else{var __package__=""}
parent_scope=parent_scope ||$B.builtins_scope
var t0=new Date().getTime(),is_comp=false
if(typeof src=='object'){is_comp=src.is_comp
src=src.src}
src=src.replace(/\r\n/gm,"\n")
while(src.endsWith("\\")){src=src.substr(0,src.length-1)}
if(src.charAt(src.length-1)!="\n"){src+="\n"}
var locals_is_module=Array.isArray(locals_id)
if(locals_is_module){locals_id=locals_id[0]}
var internal=locals_id.charAt(0)=='$'
var local_ns='$locals_'+locals_id.replace(/\./g,'_')
var global_ns='$locals_'+module.replace(/\./g,'_')
var root=$create_root_node({src:src,is_comp:is_comp},module,locals_id,parent_scope,line_num)
$tokenize(root,src)
root.is_comp=is_comp
root.transform()
var js=['var $B = __BRYTHON__;\n'],pos=1
js[pos++]='var $bltns = __BRYTHON__.InjectBuiltins();eval($bltns);\n\n'
js[pos]='var $locals = '+local_ns+';'
var offset=0
root.insert(0,$NodeJS(js.join('')))
offset++
root.insert(offset++,$NodeJS(local_ns+'["__package__"] = "'+__package__+'"'))
root.insert(offset++,$NodeJS('$locals.__annotations__ = _b_.dict.$factory()'))
var enter_frame_pos=offset,js='var $top_frame = ["'+locals_id.replace(/\./g,'_')+'", '+
local_ns+', "'+module.replace(/\./g,'_')+'", '+
global_ns+']; $B.frames_stack.push($top_frame); '+
'var $stack_length = $B.frames_stack.length;'
root.insert(offset++,$NodeJS(js))
var try_node=new $NodeJS('try'),children=root.children.slice(enter_frame_pos+1,root.children.length)
root.insert(enter_frame_pos+1,try_node)
if(children.length==0){children=[$NodeJS('')]}
children.forEach(function(child){try_node.add(child)})
try_node.add($NodeJS('$B.leave_frame()'))
root.children.splice(enter_frame_pos+2,root.children.length)
var catch_node=new $NodeJS('catch(err)')
catch_node.add($NodeJS('$B.leave_frame()'))
catch_node.add($NodeJS('throw err'))
root.add(catch_node)
if($B.profile > 0){$add_profile(root,null,module)}
if($B.debug > 0){$add_line_num(root,null,module)}
var t1=new Date().getTime()
if($B.debug >=2){if(module==locals_id){console.log('module '+module+' translated in '+
(t1-t0)+' ms')}}
$B.compile_time+=t1-t0
return root}
var brython=$B.parser.brython=function(options){
if(options===undefined){options={'debug':0}}
if(typeof options=='number'){options={'debug':options}}
if(options.debug===undefined){options.debug=0}
$B.debug=options.debug
_b_.__debug__=$B.debug > 0
$B.compile_time=0
if(options.profile===undefined){options.profile=0}
$B.profile=options.profile
if(options.indexedDB===undefined){options.indexedDB=true}
if(options.static_stdlib_import===undefined){options.static_stdlib_import=true}
$B.static_stdlib_import=options.static_stdlib_import
if(options.open !==undefined){_b_.open=options.open
console.log("DeprecationWarning: \'open\' option of \'brython\' "+
"function will be deprecated in future versions of Brython.")}
$B.$options=options
var meta_path=[],path_hooks=[]
if($B.use_VFS){meta_path.push($B.$meta_path[0])
path_hooks.push($B.$path_hooks[0])}
if(options.static_stdlib_import !==false){
meta_path.push($B.$meta_path[1])
if($B.path.length > 3){$B.path.shift()
$B.path.shift()}}
meta_path.push($B.$meta_path[2])
$B.meta_path=meta_path
path_hooks.push($B.$path_hooks[1])
$B.path_hooks=path_hooks
var $href=$B.script_path=_window.location.href,$href_elts=$href.split('/')
$href_elts.pop()
if(isWebWorker){$href_elts.pop()}
$B.curdir=$href_elts.join('/')
if(options.pythonpath !==undefined){$B.path=options.pythonpath
$B.$options.static_stdlib_import=false}
if(options.python_paths){options.python_paths.forEach(function(path){var lang,prefetch
if(typeof path !=="string"){lang=path.lang
prefetch=path.prefetch
path=path.path}
$B.path.push(path)
if(path.slice(-7).toLowerCase()=='.vfs.js' &&
(prefetch===undefined ||prefetch===true)){$B.path_importer_cache[path+'/']=
$B.imported['_importlib'].VFSPathFinder(path)}
if(lang){_importlib.optimize_import_for_path(path,lang)}})}
if(!isWebWorker){
var path_links=document.querySelectorAll('head link[rel~=pythonpath]'),_importlib=$B.imported['_importlib']
for(var i=0,e;e=path_links[i];++i){var href=e.href;
if((' '+e.rel+' ').indexOf(' prepend ')!=-1){$B.path.unshift(href);}else{$B.path.push(href);}
if(href.slice(-7).toLowerCase()=='.vfs.js' &&
(' '+e.rel+' ').indexOf(' prefetch ')!=-1){
$B.path_importer_cache[href+'/']=
$B.imported['_importlib'].VFSPathFinder.$factory(href)}
var filetype=e.hreflang
if(filetype){if(filetype.slice(0,2)=='x-'){filetype=filetype.slice(2)}
_importlib.optimize_import_for_path(e.href,filetype)}}}
if(options.re_module !==undefined){if(options.re_module=='pyre' ||options.re_module=='jsre'){$B.$options.re=options.re}
console.log("DeprecationWarning: \'re_module\' option of \'brython\' "+
"function will be deprecated in future versions of Brython.")}
if($B.$options.args){$B.__ARGV=$B.$options.args}else{$B.__ARGV=_b_.list.$factory([])}
if(!isWebWorker){_run_scripts(options)}}
$B.run_script=function(src,name,run_loop){
if(run_loop){if($B.idb_cx && $B.idb_cx.$closed){$B.tasks.push([$B.idb_open])}}
$B.$py_module_path[name]=$B.script_path
try{var root=$B.py2js(src,name,name),js=root.to_js(),script={__doc__:root.__doc__,js:js,__name__:name,$src:src,__file__:$B.script_path+
($B.script_path.endsWith("/")? "" :"/")+name}
$B.file_cache[script.__file__]=src
if($B.debug > 1){console.log(js)}}catch(err){$B.handle_error(err)}
if($B.hasOwnProperty("VFS")&& $B.has_indexedDB){
var imports1=Object.keys(root.imports).slice(),imports=imports1.filter(function(item){return $B.VFS.hasOwnProperty(item)})
Object.keys(imports).forEach(function(name){if($B.VFS.hasOwnProperty(name)){var submodule=$B.VFS[name],type=submodule[0]
if(type==".py"){var src=submodule[1],subimports=submodule[2],is_package=submodule.length==4
if(type==".py"){
required_stdlib_imports(subimports)}
subimports.forEach(function(mod){if(imports.indexOf(mod)==-1){imports.push(mod)}})}}})
for(var j=0;j<imports.length;j++){$B.tasks.push([$B.inImported,imports[j]])}
root=null}
$B.tasks.push(["execute",script])
if(run_loop){$B.loop()}}
var $log=$B.$log=function(js){js.split("\n").forEach(function(line,i){console.log(i+1,":",line)})}
var _run_scripts=$B.parser._run_scripts=function(options){
var kk=Object.keys(_window)
if(options.ipy_id !==undefined){var $elts=[]
options.ipy_id.forEach(function(elt){$elts.push(document.getElementById(elt))})}else{var scripts=document.getElementsByTagName('script'),$elts=[]
for(var i=0;i < scripts.length;i++){var script=scripts[i]
if(script.type=="text/python" ||script.type=="text/python3"){$elts.push(script)}}}
var first_script=true,module_name
if(options.ipy_id !==undefined){module_name='__main__'
var $src="",js,root
$B.$py_module_path[module_name]=$B.script_path
$elts.forEach(function(elt){$src+=(elt.innerHTML ||elt.textContent)})
try{
root=$B.py2js($src,module_name,module_name)
js=root.to_js()
if($B.debug > 1){$log(js)}
eval(js)
$B.clear_ns(module_name)
root=null
js=null}catch($err){root=null
js=null
console.log($err)
if($B.debug > 1){console.log($err)
for(var attr in $err){console.log(attr+' : ',$err[attr])}}
if($err.$py_error===undefined){console.log('Javascript error',$err)
$err=_b_.RuntimeError.$factory($err+'')}
var $trace=_b_.getattr($err,'info')+'\n'+$err.__name__+
': '+$err.args
try{_b_.getattr($B.stderr,'write')($trace)}catch(print_exc_err){console.log($trace)}
throw $err}}else{if($elts.length > 0){if(options.indexedDB && $B.has_indexedDB &&
$B.hasOwnProperty("VFS")){$B.tasks.push([$B.idb_open])}}
var defined_ids={}
for(var i=0;i < $elts.length;i++){var elt=$elts[i]
if(elt.id){if(defined_ids[elt.id]){throw Error("Brython error : Found 2 scripts with the "+
"same id '"+elt.id+"'")}else{defined_ids[elt.id]=true}}}
var scripts=[]
for(var i=0;i < $elts.length;i++){var elt=$elts[i]
if(elt.type=="text/python" ||elt.type=="text/python3"){
if(elt.id){module_name=elt.id}
else{
if(first_script){module_name='__main__'
first_script=false}else{module_name='__main__'+$B.UUID()}
while(defined_ids[module_name]!==undefined){module_name='__main__'+$B.UUID()}}
var $src=null
if(elt.src){
$B.tasks.push([$B.ajax_load_script,{name:module_name,url:elt.src}])}else{
var src=(elt.innerHTML ||elt.textContent)
src=src.replace(/^\n/,'')
$B.run_script(src,module_name)}}}}
if(options.ipy_id===undefined){$B.loop()}}
$B.$operators=$operators
$B.$Node=$Node
$B.$NodeJSCtx=$NodeJSCtx
$B.brython=brython})(__BRYTHON__)
var brython=__BRYTHON__.brython
;

(function($B){var _b_=$B.builtins
function idb_load(evt,module){
var res=evt.target.result
var timestamp=$B.timestamp
if($B.VFS_timestamp && $B.VFS_timestamp > $B.timestamp){
$B.timestamp=$B.VFS_timestamp}
if(res===undefined ||res.timestamp !=$B.timestamp){
if($B.VFS[module]!==undefined){var elts=$B.VFS[module],ext=elts[0],source=elts[1],is_package=elts.length==4,__package__
if(ext==".py"){
if(is_package){__package__=module}
else{var parts=module.split(".")
parts.pop()
__package__=parts.join(".")}
$B.imported[module]=$B.module.$factory(module,"",__package__)
try{var root=$B.py2js(source,module,module),js=root.to_js()}catch(err){$B.handle_error(err)
throw err}
delete $B.imported[module]
if($B.debug > 1){console.log("precompile",module)}
var imports=elts[2]
imports=imports.join(",")
$B.tasks.splice(0,0,[store_precompiled,module,js,imports,is_package])}else{console.log('bizarre',module,ext)}}else{}}else{
if(res.is_package){$B.precompiled[module]=[res.content]}else{$B.precompiled[module]=res.content}
if(res.imports.length > 0){
var subimports=res.imports.split(",")
for(var i=0;i < subimports.length;i++){var subimport=subimports[i]
if(subimport.startsWith(".")){
var url_elts=module.split("."),nb_dots=0
while(subimport.startsWith(".")){nb_dots++
subimport=subimport.substr(1)}
var elts=url_elts.slice(0,nb_dots)
if(subimport){elts=elts.concat([subimport])}
subimport=elts.join(".")}
if(!$B.imported.hasOwnProperty(subimport)&&
!$B.precompiled.hasOwnProperty(subimport)){
if($B.VFS.hasOwnProperty(subimport)){var submodule=$B.VFS[subimport],ext=submodule[0],source=submodule[1]
if(submodule[0]==".py"){$B.tasks.splice(0,0,[idb_get,subimport])}else{add_jsmodule(subimport,source)}}}}}}
loop()}
function store_precompiled(module,js,imports,is_package){
var db=$B.idb_cx.result,tx=db.transaction("modules","readwrite"),store=tx.objectStore("modules"),cursor=store.openCursor(),data={"name":module,"content":js,"imports":imports,"timestamp":__BRYTHON__.timestamp,"is_package":is_package},request=store.put(data)
request.onsuccess=function(evt){
$B.tasks.splice(0,0,[idb_get,module])
loop()}}
function idb_get(module){
var db=$B.idb_cx.result,tx=db.transaction("modules","readonly")
try{var store=tx.objectStore("modules")
req=store.get(module)
req.onsuccess=function(evt){idb_load(evt,module)}}catch(err){console.log('error',err)}}
$B.idb_open=function(obj){var idb_cx=$B.idb_cx=indexedDB.open("brython_stdlib")
idb_cx.onsuccess=function(){var db=idb_cx.result
if(!db.objectStoreNames.contains("modules")){var version=db.version
db.close()
console.log('create object store',version)
idb_cx=indexedDB.open("brython_stdlib",version+1)
idb_cx.onupgradeneeded=function(){console.log("upgrade needed")
var db=$B.idb_cx.result,store=db.createObjectStore("modules",{"keyPath":"name"})
store.onsuccess=loop}
idb_cx.onversionchanged=function(){console.log("version changed")}
idb_cx.onsuccess=function(){console.log("db opened",idb_cx)
var db=idb_cx.result,store=db.createObjectStore("modules",{"keyPath":"name"})
store.onsuccess=loop}}else{console.log("using indexedDB for stdlib modules cache")
loop()}}
idb_cx.onupgradeneeded=function(){console.log("upgrade needed")
var db=idb_cx.result,store=db.createObjectStore("modules",{"keyPath":"name"})
store.onsuccess=loop}
idb_cx.onerror=function(){console.log('could not open indexedDB database')}}
$B.ajax_load_script=function(script){var url=script.url,name=script.name
var req=new XMLHttpRequest()
req.open("GET",url+"?"+Date.now(),true)
req.onreadystatechange=function(){if(this.readyState==4){if(this.status==200){var src=this.responseText
$B.tasks.splice(0,0,[$B.run_script,src,name,true])}else if(this.status==404){throw Error(url+" not found")}
loop()}}
req.send()}
function add_jsmodule(module,source){
source+="\nvar $locals_"+
module.replace(/\./g,"_")+" = $module"
$B.precompiled[module]=source}
var inImported=$B.inImported=function(module){if($B.imported.hasOwnProperty(module)){}else if(__BRYTHON__.VFS && __BRYTHON__.VFS.hasOwnProperty(module)){var elts=__BRYTHON__.VFS[module]
if(elts===undefined){console.log('bizarre',module)}
var ext=elts[0],source=elts[1],is_package=elts.length==4
if(ext==".py"){if($B.idb_cx){$B.tasks.splice(0,0,[idb_get,module])}}else{add_jsmodule(module,source)}}else{console.log("bizarre",module)}
loop()}
var loop=$B.loop=function(){if($B.tasks.length==0){
if($B.idb_cx){$B.idb_cx.result.close()
$B.idb_cx.$closed=true}
return}
var task=$B.tasks.shift(),func=task[0],args=task.slice(1)
if(func=="execute"){try{var script=task[1],script_id=script.__name__.replace(/\./g,"_"),module=$B.module.$factory(script.__name__)
module.$src=script.$src
module.__file__=script.__file__
$B.imported[script_id]=module
new Function("$locals_"+script_id,script.js)(module)}catch(err){
if(err.$py_error===undefined){console.log('Javascript error',err)
$B.print_stack()
err=_b_.RuntimeError.$factory(err+'')}
$B.handle_error(err)}
loop()}else{
func.apply(null,args)}}
$B.tasks=[]
$B.has_indexedDB=self.indexedDB !==undefined
$B.handle_error=function(err){
if(err.__class__ !==undefined){var name=err.__class__.$infos.__name__,trace=_b_.getattr(err,'info')
if(name=='SyntaxError' ||name=='IndentationError'){var offset=err.args[3]
trace+='\n    '+' '.repeat(offset)+'^'+
'\n'+name+': '+err.args[0]}else{trace+='\n'+name+': '+err.args}}else{console.log(err)
trace=err+""}
try{_b_.getattr($B.stderr,'write')(trace)}catch(print_exc_err){console.log(trace)}
throw err}
function required_stdlib_imports(imports,start){
var nb_added=0
start=start ||0
for(var i=start;i < imports.length;i++){var module=imports[i]
if($B.imported.hasOwnProperty(module)){continue}
var mod_obj=$B.VFS[module]
if(mod_obj===undefined){console.log("undef",module)}
if(mod_obj[0]==".py"){var subimports=mod_obj[2]
subimports.forEach(function(subimport){if(!$B.imported.hasOwnProperty(subimport)&&
imports.indexOf(subimport)==-1){if($B.VFS.hasOwnProperty(subimport)){imports.push(subimport)
nb_added++}}})}}
if(nb_added){required_stdlib_imports(imports,imports.length-nb_added)}
return imports}})(__BRYTHON__)
;
__BRYTHON__.builtins.object=(function($B){var _b_=$B.builtins
var object={
$infos:{__name__:"object"},$is_class:true,$native:true}
var opnames=["add","sub","mul","truediv","floordiv","mod","pow","lshift","rshift","and","xor","or"]
var opsigns=["+","-","*","/","//","%","**","<<",">>","&","^","|"]
object.__delattr__=function(self,attr){_b_.getattr(self,attr)
delete self[attr]
return _b_.None}
object.__dir__=function(self){var objects
if(self.$is_class){objects=[self].concat(self.__mro__)}else{var klass=self.__class__ ||$B.get_class(self)
objects=[self,klass].concat(klass.__mro__)}
var res=[]
for(var i=0,len=objects.length;i < len;i++){for(var attr in objects[i]){if(attr.charAt(0)=="$"){
continue}
if(! isNaN(parseInt(attr.charAt(0)))){
continue}
if(attr=="__mro__"){continue}
res.push(attr)}}
if(self.__dict__){for(var attr in self.__dict__.$string_dict){if(attr.substr(0,2)=="$$"){res.push(attr.substr(2))}
else if(attr.charAt(0)!="$"){res.push(attr)}}}
res=_b_.list.$factory(_b_.set.$factory(res))
_b_.list.sort(res)
return res}
object.__eq__=function(self,other){
if(self===other){return true}
return _b_.NotImplemented}
object.__format__=function(){var $=$B.args("__format__",2,{self:null,spec:null},["self","spec"],arguments,{},null,null)
if($.spec !==""){throw _b_.TypeError.$factory(
"non-empty format string passed to object.__format__")}
return _b_.getattr($.self,"__str__")()}
object.__ge__=function(){return _b_.NotImplemented}
object.__getattribute__=function(obj,attr){var klass=obj.__class__ ||$B.get_class(obj)
var $test=false
if($test){console.log("attr",attr,"de",obj,"klass",klass)}
if(attr==="__class__"){return klass}
var res=obj[attr]
if(res===undefined && obj.__dict__ &&
obj.__dict__.$string_dict.hasOwnProperty(attr)){return obj.__dict__.$string_dict[attr]}
if(res===undefined){
function check(obj,kl,attr){var v=kl[attr]
if(v !==undefined){return v}}
res=check(obj,klass,attr)
if(res===undefined){var mro=klass.__mro__
for(var i=0,len=mro.length;i < len;i++){res=check(obj,mro[i],attr)
if(res !==undefined){if($test){console.log("found in",mro[i])}
break}}}}else{if(res.__set__===undefined){
return res}}
if(res !==undefined){if($test){console.log(res)}
if(res.__class__===_b_.property){return res.__get__(res,obj,klass)}
if(res.__class__===$B.method){if($test){console.log("res is method")}
if(res.__get__===undefined){console.log("bizarre",obj,attr,res)}
return res.__get__(obj,klass)}
var get=res.__get__
if(get===undefined && res.__class__){var get=res.__class__.__get__
for(var i=0;i < res.__class__.__mro__.length &&
get===undefined;i++){get=res.__class__.__mro__[i].__get__}}
if($test){console.log("get",get)}
var __get__=get===undefined ? null :
_b_.getattr(res,"__get__",null)
if($test){console.log("__get__",__get__)}
if(__get__ !==null){try{return __get__.apply(null,[obj,klass])}
catch(err){console.log('error in get.apply',err)
console.log("get attr",attr,"of",obj)
console.log(__get__+'')
throw err}}
if(typeof res=="object"){if(__get__ &&(typeof __get__=="function")){get_func=function(x,y){return __get__.apply(x,[y,klass.$factory])}}}
if(__get__===null &&(typeof res=="function")){__get__=function(x){return x}}
if(__get__ !==null){
res.__name__=attr
if(attr=="__new__"){res.$type="staticmethod"}
var res1=__get__.apply(null,[res,obj,klass])
if($test){console.log("res",res,"res1",res1)}
if(typeof res1=="function"){
if(res1.__class__===$B.method){return res}
if(res.$type=="staticmethod"){return res}
else{var self=res.__class__===$B.method ? klass :obj
function method(){var args=[self]
for(var i=0;i < arguments.length;i++){args.push(arguments[i])}
var result=res.apply(null,args)
return result}
if(attr=="a"){console.log("make method from res",res)}
method.__class__=$B.method
method.__get__=function(obj,cls){var clmethod=function(){return res(cls,...arguments)}
clmethod.__class__=$B.method
clmethod.$infos={__self__:cls,__func__:res,__name__:res.$infos.__name__,__qualname__:cls.$infos.__name__+"."+res.$infos.__name__}
return clmethod}
method.__get__.__class__=$B.method_wrapper
method.__get__.$infos=res.$infos
if(klass.$infos===undefined){console.log("no $infos",klass)
console.log($B.last($B.frames_stack))}
method.$infos={__self__:self,__func__:res,__name__:attr,__qualname__:klass.$infos.__name__+"."+attr}
if($test){console.log("return method",method)}
return method}}else{
return res1}}
return res}else{
var _ga=obj["__getattr__"]
if(_ga===undefined){_ga=klass["__getattr__"]
if(_ga===undefined){var mro=klass.__mro__
for(var i=0,len=mro.length;i < len;i++){_ga=mro[i]["__getattr__"]
if(_ga !==undefined){break}}}}
if(_ga !==undefined){try{return _ga(obj,attr)}
catch(err){if($B.debug > 2){console.log(err)}}}
if(attr.substr(0,2)=="__" && attr.substr(attr.length-2)=="__"){var attr1=attr.substr(2,attr.length-4)
var rank=opnames.indexOf(attr1)
if(rank >-1){var rop="__r"+opnames[rank]+"__"
var func=function(){try{
if($B.get_class(arguments[0])===klass){throw Error('')}
return _b_.getattr(arguments[0],rop)(obj)}catch(err){var msg="unsupported operand types for "+
opsigns[rank]+": '"+klass.$infos.__name__+
"' and '"+$B.class_name(arguments[0])+
"'"
throw _b_.TypeError.$factory(msg)}}
func.$infos={__name__ :klass.$infos.__name__+"."+attr}
return func}}}}
object.__gt__=function(){return _b_.NotImplemented}
object.__hash__=function(self){var hash=self.__hashvalue__
if(hash !==undefined){return hash}
return self.__hashvalue__=$B.$py_next_hash--}
object.__init__=function(){if(arguments.length==0){throw _b_.TypeError.$factory("descriptor '__init__' of 'object' "+
"object needs an argument")}
return _b_.None}
object.__le__=function(){return _b_.NotImplemented}
object.__lt__=function(){return _b_.NotImplemented}
object.__mro__=[]
object.__new__=function(cls,...args){if(cls===undefined){throw _b_.TypeError.$factory("object.__new__(): not enough arguments")}
var init_func=$B.$getattr(cls,"__init__")
if(init_func===object.__init__){if(args.length > 0){throw _b_.TypeError.$factory("object() takes no parameters")}}
return{
__class__ :cls,__dict__:_b_.dict.$factory()}}
object.__ne__=function(self,other){
if(self===other){return false}
var eq=$B.$getattr(self,"__eq__",null)
if(eq !==null){var res=$B.$call(eq)(other)
if(res===_b_.NotImplemented){return res}
return ! $B.$bool(res)}
return _b_.NotImplemented}
object.__reduce__=function(self){function _reconstructor(cls){return $B.$call(cls)()}
_reconstructor.$infos={__qualname__:"_reconstructor"}
var res=[_reconstructor]
res.push(_b_.tuple.$factory([self.__class__].
concat(self.__class__.__mro__)))
var d=_b_.dict.$factory()
for(var attr in self.__dict__.$string_dict){d.$string_dict[attr]=self.__dict__.$string_dict[attr]}
console.log("object.__reduce__, d",d)
res.push(d)
return _b_.tuple.$factory(res)}
function __newobj__(cls){return $B.$getattr(cls,"__new__").apply(null,arguments)}
__newobj__.$infos={__name__:"__newobj__",__qualname__:"__newobj__"}
_b_.__newobj__=__newobj__
object.__reduce_ex__=function(self){var res=[__newobj__]
res.push(_b_.tuple.$factory([self.__class__]))
var d=_b_.dict.$factory(),nb=0
if(self.__dict__===undefined){console.log("no dict",self)
$B.frames_stack.forEach(function(frame){console.log(frame[0],frame[1],frame[2])})}
for(var attr in self.__dict__.$string_dict){if(attr=="__class__" ||attr.startsWith("$")){continue}
d.$string_dict[attr]=self.__dict__.$string_dict[attr]
nb++}
if(nb==0){d=_b_.None}
res.push(d)
res.push(_b_.None)
return _b_.tuple.$factory(res)}
object.__repr__=function(self){if(self===object){return "<class 'object'>"}
if(self.__class__===_b_.type){return "<class '"+self.__name__+"'>"}
if(self.__class__.$infos.__module__ !==undefined &&
self.__class__.$infos.__module__ !=="builtins"){return "<"+self.__class__.$infos.__module__+"."+
self.__class__.$infos.__name__+" object>"}else{return "<"+self.__class__.$infos.__name__+" object>"}}
object.__setattr__=function(self,attr,val){if(val===undefined){
throw _b_.TypeError.$factory(
"can't set attributes of built-in/extension type 'object'")}else if(self.__class__===object){
if(object[attr]===undefined){throw _b_.AttributeError.$factory(
"'object' object has no attribute '"+attr+"'")}else{throw _b_.AttributeError.$factory(
"'object' object attribute '"+attr+"' is read-only")}}
if($B.aliased_names[attr]){attr="$$"+attr}
if(self.__dict__){self.__dict__.$string_dict[attr]=val}else{
self[attr]=val}
return _b_.None}
object.__setattr__.__get__=function(obj){return function(attr,val){object.__setattr__(obj,attr,val)}}
object.__setattr__.__str__=function(){return "method object.setattr"}
object.__str__=function(self){var repr_func=$B.$getattr(self,"__repr__")
return $B.$call(repr_func)()}
object.__subclasshook__=function(){return _b_.NotImplemented}
object.$factory=function(){var res={__class__:object},args=[res].concat(Array.prototype.slice.call(arguments))
object.__init__.apply(null,args)
return res}
$B.set_func_names(object,"builtins")
$B.make_class=function(name,factory){
var A={__class__:_b_.type,__mro__:[object],$infos:{__name__:name},$is_class:true}
A.$factory=factory
return A}
return object})(__BRYTHON__)
;
;(function($B){var _b_=$B.builtins
$B.$class_constructor=function(class_name,class_obj,bases,parents_names,kwargs){var $test=false
if($test){console.log("create class",class_name,"class_obj",class_obj)}
bases=bases ||[]
var metaclass
var module=class_obj.__module__
if(module===undefined){
module=$B.last($B.frames_stack)[2]}
for(var i=0;i < bases.length;i++){if(bases[i]===undefined){
$B.line_info=class_obj.$def_line
throw _b_.NameError.$factory("name '"+parents_names[i]+
"' is not defined")}}
var extra_kwargs={},prepare_kwargs={}
if(kwargs){for(var i=0;i < kwargs.length;i++){var key=kwargs[i][0],val=kwargs[i][1]
if(key=="metaclass"){
metaclass=val}else{
extra_kwargs[key]=val}
prepare_kwargs[key]=val}}
var mro0=class_obj
var orig_bases=bases.slice(),use_mro_entries=false
for(var i=0;i < bases.length;i++){if(bases[i]===undefined ||
(bases[i].__mro__===undefined &&
bases[i].__class__ !==$B.JSObject)){var mro_entries=$B.$getattr(bases[i],"__mro_entries__",_b_.None)
if(mro_entries !==_b_.None){var entries=_b_.list.$factory(mro_entries(bases))
bases.splice(i,1,...entries)
use_mro_entries=true
i--
continue}}}
if(metaclass===undefined){if(bases && bases.length > 0 && bases[0].__class__ !==$B.JSObject){metaclass=bases[0].__class__
for(var i=1;i < bases.length;i++){var mc=bases[i].__class__
if(mc===metaclass){}else if(mc.__bases__ &&
mc.__bases__.indexOf(metaclass)>-1){metaclass=mc}else if(metaclass.__bases__ &&
metaclass.__bases__.indexOf(mc)==-1){throw _b_.TypeError.$factory("metaclass conflict: the "+
"metaclass of a derived class must be a (non-"+
"strict) subclass of the metaclasses of all its bases")}}}else{metaclass=_b_.type}}
var prepare=$B.$getattr(metaclass,"__prepare__",_b_.None),cl_dict=prepare(class_name,bases)
if(cl_dict.__class__ !==_b_.dict){set_class_item=$B.$getattr(cl_dict,"__setitem__")}else{set_class_item=function(attr,value){cl_dict.$string_dict[attr]=value}}
for(var attr in class_obj){if(attr.charAt(0)!="$" ||attr.substr(0,2)=="$$"){set_class_item(attr,class_obj[attr])}}
if(use_mro_entries){set_class_item("__orig_bases__",_b_.tuple.$factory(orig_bases))}
var class_dict={__bases__:bases,__class__:metaclass,__dict__:cl_dict}
if(cl_dict.__class__===_b_.dict){for(var key in cl_dict.$string_dict){class_dict[key]=cl_dict.$string_dict[key]}}else{var get_class_item=$B.$getattr(cl_dict,"__getitem__")
var it=_b_.iter(cl_dict)
while(true){try{var key=_b_.next(it)
class_dict[key]=get_class_item(key)}catch(err){break}}}
class_dict.__mro__=_b_.type.mro(class_dict)
var is_instanciable=true,non_abstract_methods={},abstract_methods={},mro=[class_dict].concat(class_dict.__mro__)
for(var i=0;i < mro.length;i++){var kdict=i==0 ? mro0 :mro[i]
for(var attr in kdict){if(non_abstract_methods[attr]){continue}
var v=kdict[attr]
if(typeof v=="function"){if(v.__isabstractmethod__===true ||
(v.$attrs && v.$attrs.__isabstractmethod__)){is_instanciable=false
abstract_methods[attr]=true}else{non_abstract_methods[attr]=true}}}}
var _slots=class_obj.__slots__
if(_slots !==undefined){if(typeof _slots=="string"){_slots=[_slots]}else{_slots=_b_.list.$factory(_slots)}
cl_dict.__slots__=_slots}
for(var i=0;i < mro.length-1;i++){for(var attr in mro[i]){if(attr=="__setattr__"){cl_dict.$has_setattr=true
break}else if(mro[i][attr]&& mro[i][attr].__get__){cl_dict.$has_setattr=true
break}}}
var meta_new=_b_.type.__getattribute__(metaclass,"__new__")
var kls=meta_new(metaclass,class_name,bases,cl_dict)
kls.__module__=module
kls.$infos={__module__:module,__name__:class_name,__qualname__:class_name}
kls.$subclasses=[]
if(kls.__class__===metaclass){
var meta_init=_b_.type.__getattribute__(metaclass,"__init__")
meta_init(kls,class_name,bases,cl_dict)}
for(var i=0;i < bases.length;i++){bases[i].$subclasses=bases[i].$subclasses ||[]
bases[i].$subclasses.push(kls)
if(i==0){init_subclass=_b_.type.__getattribute__(bases[i],"__init_subclass__")
if(init_subclass.$infos.__func__ !==undefined){init_subclass.$infos.__func__(kls,{$nat:"kw",kw:extra_kwargs})}else{init_subclass(kls,{$nat:"kw",kw:extra_kwargs})}}}
if(bases.length==0){$B.$getattr(metaclass,"__init_subclass__")(kls,{$nat:"kw",kw:extra_kwargs})}
if(!is_instanciable){function nofactory(){throw _b_.TypeError.$factory("Can't instantiate abstract class "+
"interface with abstract methods "+
Object.keys(abstract_methods).join(", "))}
kls.$factory=nofactory}
kls.__qualname__=class_name.replace("$$","")
return kls}
var type=$B.make_class("type",function(obj,bases,cl_dict){if(arguments.length==1){return obj.__class__ ||$B.get_class(obj)}
return type.__new__(type,obj,bases,cl_dict)}
)
type.__call__=function(klass,...extra_args){var new_func=_b_.type.__getattribute__(klass,"__new__")
var instance=new_func.apply(null,arguments)
if(instance.__class__===klass){
var init_func=_b_.type.__getattribute__(klass,"__init__")
if(init_func !==_b_.object.__init__){
init_func(instance,...extra_args)}}
return instance}
type.__class__=type
type.__format__=function(klass,fmt_spec){
return _b_.str.$factory(klass)}
type.__getattribute__=function(klass,attr){switch(attr){case "__annotations__":
var mro=[klass].concat(klass.__mro__)
var res=_b_.dict.$factory()
for(var i=mro.length-1;i >=0;i--){var ann=mro[i].__annotations__
if(ann){for(var key in ann.$string_dict){res.$string_dict[key]=ann.$string_dict[key]}}}
return res
case "__bases__":
var res=klass.__bases__ ||_b_.tuple.$factory()
res.__class__=_b_.tuple
if(res.length==0){res.push(_b_.object)}
return res
case "__class__":
return klass.__class__
case "__doc__":
return klass.__doc__ ||_b_.None
case "__setattr__":
if(klass["__setattr__"]!==undefined){var func=klass["__setattr__"]}else{var func=function(obj,key,value){obj[key]=value}}
return method_wrapper.$factory(attr,klass,func)
case "__delattr__":
if(klass["__delattr__"]!==undefined){return klass["__delattr__"]}
return method_wrapper.$factory(attr,klass,function(key){delete klass[key]})}
var res=klass[attr]
var $test=false
if($test){console.log("attr",attr,"of",klass,res)}
if(res===undefined && klass.__slots__ &&
klass.__slots__.indexOf(attr)>-1){return member_descriptor.$factory(attr,klass)}
if(klass.__class__ &&
klass.__class__[attr]&&
klass.__class__[attr].__get__ &&
klass.__class__[attr].__set__){
if($test){console.log("data descriptor")}
return klass.__class__[attr].__get__(klass)}
if(res===undefined){
var v=klass[attr]
if(v===undefined){var mro=klass.__mro__
for(var i=0;i < mro.length;i++){var v=mro[i][attr]
if(v !==undefined){res=v
break}}}else{res=v}
if(res===undefined){
var meta=klass.__class__,res=meta[attr]
if($test){console.log("search in meta",meta,res)}
if(res===undefined){var meta_mro=meta.__mro__
for(var i=0;i < meta_mro.length;i++){var res=meta_mro[i][attr]
if(res !==undefined){break}}}
if(res !==undefined){if($test){console.log("found in meta",res,typeof res)}
if(res.__class__===_b_.property){return res.fget(klass)}
if(typeof res=="function"){var meta_method=function(){return res(klass,...arguments)}
meta_method.__class__=$B.method
meta_method.$infos={__self__:klass,__func__:res,__name__:attr,__qualname__:klass.$infos.__name__+"."+attr,__module__:res.$infos ? res.$infos.__module__ :""}
return meta_method}}
if(res===undefined){
var getattr=meta.__getattr__
if(getattr===undefined){for(var i=0;i < meta_mro.length;i++){if(meta_mro[i].__getattr__ !==undefined){getattr=meta_mro[i].__getattr__
break}}}
if(getattr !==undefined){return getattr(klass,attr)}}}}
if(res !==undefined){if($test){console.log("res",res)}
if(res.__class__===_b_.property){return res }
if(res.__get__){if(res.__class__===method){var result=res.__get__(res.__func__,klass)
result.$infos={__func__:res,__name__:res.$infos.__name__,__qualname__:klass.$infos.__name__+"."+res.$infos.__name__,__self__:klass}}else{result=res.__get__(klass)}
return result}
if(typeof res=="function"){
if(res.$infos===undefined){console.log("warning: no attribute $infos for",res)}
if($test){console.log("res is function",res)}
if(attr=="__new__"){res.$type="staticmethod"}
if(attr=="__class_getitem__" && res.__class__ !==$B.method){res=_b_.classmethod.$factory(res)}
if(res.__class__===$B.method){return res.__get__(null,klass)}else{if($test){console.log("return res",res)}
return res}}else{return res}}}
type.__init__=function(){}
type.__init_subclass__=function(cls,kwargs){
var $=$B.args("__init_subclass__",1,{cls:null},["cls"],arguments,{},"args","kwargs")
if($.kwargs !==undefined){if($.kwargs.__class__ !==_b_.dict ||
Object.keys($.kwargs.$string_dict).length > 0){throw _b_.TypeError.$factory(
"__init_subclass__() takes no keyword arguments")}}
return _b_.None}
type.__instancecheck__=function(cls,instance){var kl=instance.__class__ ||$B.get_class(instance)
if(kl===cls){return true}
else{for(var i=0;i < kl.__mro__.length;i++){if(kl.__mro__[i]===cls){return true}}}
return false}
type.__instancecheck__.$type="staticmethod"
type.__name__={__get__:function(self){return self.$infos.__name__},__set__:function(self,value){self.$infos.__name__=value}}
type.__new__=function(meta,name,bases,cl_dict){
var class_dict={__class__ :meta,__bases__ :bases,__dict__ :cl_dict,$infos:{__name__:name.replace("$$","")},$is_class:true,$has_setattr:cl_dict.$has_setattr}
var items=$B.$dict_items(cl_dict)
for(var i=0;i < items.length;i++){var key=$B.to_alias(items[i][0]),v=items[i][1]
class_dict[key]=v}
class_dict.__mro__=type.mro(class_dict)
return class_dict}
type.__repr__=type.__str__=function(kls){if(kls.$infos===undefined){console.log("no $infos",kls)}
var qualname=kls.$infos.__name__
if(kls.$infos.__module__ !="builtins"){qualname=kls.$infos.__module__+"."+qualname}
return "<class '"+qualname+"'>"}
type.__prepare__=function(){return _b_.dict.$factory()}
type.__qualname__={__get__:function(self){return self.$infos.__qualname__ ||self.$infos.__name__},__set__:function(self,value){self.$infos.__qualname__=value}}
type.mro=function(cls){
var bases=cls.__bases__,seqs=[],pos1=0
for(var i=0;i < bases.length;i++){
if(bases[i]===_b_.str){bases[i]=$B.StringSubclass}
else if(bases[i]===_b_.float){bases[i]=$B.FloatSubclass}
else if(bases[i]===_b_.list){for(var attr in _b_.list){if(attr=="$factory"){continue}
if(cls[attr]===undefined){cls[attr]=_b_.list[attr]}}
cls.$native=true}
var bmro=[],pos=0
if(bases[i]===undefined ||
bases[i].__mro__===undefined){if(bases[i].__class__===$B.JSObject){
var js_func=bases[i].js_func
bases[i]={__class__:_b_.type,__mro__:[_b_.object],__name__:js_func.name,__init__:function(instance,...args){args.forEach(function(arg,i){args[i]=$B.pyobj2jsobj(arg)})
js_func.apply(instance,args)
for(var attr in instance){if(typeof instance[attr]=="function"){instance[attr]=(function(f){return function(){var res=f.apply(instance,arguments)
return $B.jsobj2pyobj(res)}})(instance[attr])}}}}
bases[i].__init__.$infos={__name__:bases[i].$infos.__name__}}else{throw _b_.TypeError.$factory(
"Object passed as base class is not a class")}}
bmro[pos++]=bases[i]
var _tmp=bases[i].__mro__
if(_tmp[0]===bases[i]){_tmp.splice(0,1)}
for(var k=0;k < _tmp.length;k++){bmro[pos++]=_tmp[k]}
seqs[pos1++]=bmro}
if(bases.indexOf(_b_.object)==-1){bases=bases.concat(_b_.tuple.$factory([_b_.object]))}
for(var i=0;i < bases.length;i++){seqs[pos1++]=bases[i]}
var mro=[],mpos=0
while(1){var non_empty=[],pos=0
for(var i=0;i < seqs.length;i++){if(seqs[i].length > 0){non_empty[pos++]=seqs[i]}}
if(non_empty.length==0){break}
for(var i=0;i < non_empty.length;i++){var seq=non_empty[i],candidate=seq[0],not_head=[],pos=0
for(var j=0;j < non_empty.length;j++){var s=non_empty[j]
if(s.slice(1).indexOf(candidate)>-1){not_head[pos++]=s}}
if(not_head.length > 0){candidate=null}
else{break}}
if(candidate===null){throw _b_.TypeError.$factory(
"inconsistent hierarchy, no C3 MRO is possible")}
mro[mpos++]=candidate
for(var i=0;i < seqs.length;i++){var seq=seqs[i]
if(seq[0]===candidate){
seqs[i].shift()}}}
if(mro[mro.length-1]!==_b_.object){mro[mpos++]=_b_.object}
return mro}
$B.set_func_names(type,"builtins")
_b_.type=type
var wrapper_descriptor=$B.make_class("wrapper_descriptor")
$B.set_func_names(wrapper_descriptor,"builtins")
type.__call__.__class__=wrapper_descriptor
$B.$factory={__class__:type,$is_class:true}
$B.$factory.__mro__=[type,_b_.object]
var $instance_creator=$B.$instance_creator=function(klass){
if(klass.$instanciable !==undefined){return function(){throw _b_.TypeError.$factory(
"Can't instantiate abstract class interface "+
"with abstract methods")}}
var metaclass=klass.__class__,call_func,factory
if(metaclass===_b_.type &&(!klass.__bases__ ||klass.__bases__.length==0)){if(klass.hasOwnProperty("__new__")){if(klass.hasOwnProperty("__init__")){factory=function(){var args=[]
for(var i=0;i < arguments.length;i++){args.push(arguments[i])}
var obj=klass.__new__.apply(null,[klass].concat(args))
klass.__init__.apply(null,[obj].concat(args))
return obj}}else{factory=function(){var args=[klass]
for(var i=0;i < arguments.length;i++){args.push(arguments[i])}
return klass.__new__.apply(null,args)}}}else if(klass.hasOwnProperty("__init__")){factory=function(){var obj={__class__:klass,__dict__:_b_.dict.$factory()}
var args=[obj]
for(var i=0;i < arguments.length;i++){args.push(arguments[i])}
klass.__init__.apply(null,args)
return obj}}else{factory=function(){if(arguments.length > 0){if(arguments.length==1 && arguments[0].$nat &&
Object.keys(arguments[0].kw).length==0){}else{throw _b_.TypeError.$factory("object() takes no parameters")}}
return{__class__:klass,__dict__:_b_.dict.$factory()}}}}else{call_func=_b_.type.__getattribute__(metaclass,"__call__")
var factory=function(){var args=[klass]
for(var i=0;i < arguments.length;i++){args.push(arguments[i])}
return call_func.apply(null,args)}}
factory.__class__=$B.Function
factory.$infos={__name__:klass.$infos.__name__,__module__:klass.$infos.__module__}
return factory}
var method_wrapper=$B.method_wrapper=$B.make_class("method_wrapper",function(attr,klass,method){var f=function(){return method.apply(null,arguments)}
f.$infos={__name__:attr,__module__:klass.__module__}
return f}
)
method_wrapper.__str__=method_wrapper.__repr__=function(self){return "<method '"+self.$infos.__name__+"' of function object>"}
var member_descriptor=$B.make_class("member_descriptor",function(attr,cls){return{__class__:member_descriptor,cls:cls,attr:attr}}
)
member_descriptor.__str__=member_descriptor.__repr__=function(self){return "<member '"+self.attr+"' of '"+self.cls.$infos.__name__+
"' objects>"}
$B.set_func_names(member_descriptor,"builtins")
var method=$B.method=$B.make_class("method")
method.__eq__=function(self,other){return self.$infos !==undefined &&
other.$infos !==undefined &&
self.$infos.__func__===other.$infos.__func__ &&
self.$infos.__self__===other.$infos.__self__}
method.__ne__=function(self,other){return ! $B.method.__eq__(self,other)}
method.__get__=function(self){var f=function(){return self(arguments)}
f.__class__=$B.method_wrapper
f.$infos=method.$infos
return f}
method.__getattribute__=function(self,attr){
var infos=self.$infos
if(infos && infos[attr]){if(attr=="__code__"){var res={__class__:$B.Code}
for(var attr in infos.__code__){res[attr]=infos.__code__[attr]}
return res}else{return infos[attr]}}else if(method.hasOwnProperty(attr)){return _b_.object.__getattribute__(self,attr)}else{
return $B.Function.__getattribute__(self.$infos.__func__,attr)}}
method.__repr__=method.__str__=function(self){return "<bound method "+self.$infos.__qualname__+
" of "+_b_.str.$factory(self.$infos.__self__)+">"}
method.__setattr__=function(self,key,value){
if(key=="__class__"){throw _b_.TypeError.$factory("__class__ assignment only supported "+
"for heap types or ModuleType subclasses")}
throw _b_.AttributeError.$factory("'method' object has no attribute '"+
key+"'")}
$B.set_func_names(method,"builtins")
method_descriptor=$B.method_descriptor=
$B.make_class("method_descriptor")
classmethod_descriptor=$B.classmethod_descriptor=
$B.make_class("classmethod_descriptor")
_b_.object.__class__=type})(__BRYTHON__)
;
;(function($B){var _b_=$B.builtins,_window=self,isWebWorker=('undefined' !==typeof WorkerGlobalScope)&&
("function"===typeof importScripts)&&
(navigator instanceof WorkerNavigator)
$B.args=function($fname,argcount,slots,var_names,args,$dobj,extra_pos_args,extra_kw_args){
var $args=[]
if(Array.isArray(args)){$args=args}
else{
for(var i=0,len=args.length;i < len;i++){$args.push(args[i])}}
var has_kw_args=false,nb_pos=$args.length,filled=0
if(nb_pos > 0 && $args[nb_pos-1]&& $args[nb_pos-1].$nat){nb_pos--
if(Object.keys($args[nb_pos].kw).length > 0){has_kw_args=true
var kw_args=$args[nb_pos].kw
if(Array.isArray(kw_args)){kw_args=$B.extend($fname,...kw_args)}}}
if(extra_pos_args){slots[extra_pos_args]=[]
slots[extra_pos_args].__class__=_b_.tuple}
if(extra_kw_args){
slots[extra_kw_args]={__class__:_b_.dict,$numeric_dict:{},$object_dict:{},$string_dict :{},$str_hash:{},length:0}}
if(nb_pos > argcount){
if(extra_pos_args===null){
msg=$fname+"() takes "+argcount+" positional argument"+
(argcount> 1 ? "" :"s")+" but more were given"
throw _b_.TypeError.$factory(msg)}else{
for(var i=argcount;i < nb_pos;i++){slots[extra_pos_args].push($args[i])}
nb_pos=argcount}}
for(var i=0;i < nb_pos;i++){slots[var_names[i]]=$args[i]
filled++}
if(filled==argcount && argcount===var_names.length &&
! has_kw_args){return slots}
if(has_kw_args){for(var key in kw_args){var value=kw_args[key]
if(slots[key]===undefined){
if(extra_kw_args){
if(key.substr(0,2)=="$$"){key=key.substr(2)}
slots[extra_kw_args].$string_dict[key]=value}else{throw _b_.TypeError.$factory($fname+
"() got an unexpected keyword argument '"+key+"'")}}else if(slots[key]!==null){
throw _b_.TypeError.$factory($fname+
"() got multiple values for argument '"+key+"'")}else{
slots[key]=value}}}
var missing=[]
for(var attr in slots){if(slots[attr]===null){if($dobj[attr]!==undefined){slots[attr]=$dobj[attr]}
else{missing.push("'"+attr+"'")}}}
if(missing.length > 0){if(missing.length==1){throw _b_.TypeError.$factory($fname+
" missing 1 positional argument: "+missing[0])}else{var msg=$fname+" missing "+missing.length+
" positional arguments: "
msg+=missing.join(" and ")
throw _b_.TypeError.$factory(msg)}}
return slots}
$B.wrong_nb_args=function(name,received,expected,positional){if(received < expected){var missing=expected-received
throw _b_.TypeError.$factory(name+"() missing "+missing+
" positional argument"+(missing > 1 ? "s" :"")+": "+
positional.slice(received))}else{throw _b_.TypeError.$factory(name+"() takes "+expected+
" positional argument"+(expected > 1 ? "s" :"")+
" but more were given")}}
$B.get_class=function(obj){
if(obj===null){return $B.$NoneDict}
var klass=obj.__class__
if(klass===undefined){switch(typeof obj){case "number":
if(obj % 1===0){
obj.__class__=_b_.int
return _b_.int}
obj.__class__=_b_.float
return _b_.float
case "string":
return _b_.str
case "boolean":
return _b_.bool
case "function":
obj.__class__=$B.Function
return $B.Function
case "object":
if(Array.isArray(obj)){if(Object.getPrototypeOf(obj)===Array.prototype){obj.__class__=_b_.list
return _b_.list}}else if(obj.constructor===Number){return _b_.float}
break}}
return klass}
$B.class_name=function(obj){return $B.get_class(obj).$infos.__name__}
$B.$mkdict=function(glob,loc){var res={}
for(var arg in glob){res[arg]=glob[arg]}
for(var arg in loc){res[arg]=loc[arg]}
return res}
$B.$list_comp=function(items){
var ix=$B.UUID(),py="x"+ix+"=[]\n",indent=0
for(var i=1,len=items.length;i < len;i++){var item=items[i].replace(/\s+$/,"").replace(/\n/g,"")
py+=" ".repeat(indent)+item+":\n"
indent+=4}
py+=" ".repeat(indent)
py+="x"+ix+".append("+items[0]+")\n"
return[py,ix]}
$B.$dict_comp=function(module_name,parent_scope,items,line_num){
var ix=$B.UUID(),res="res"+ix,py=res+"={}\n",
indent=0
for(var i=1,len=items.length;i < len;i++){var item=items[i].replace(/\s+$/,"").replace(/\n/g,"")
py+="    ".repeat(indent)+item+":\n"
indent++}
py+="    ".repeat(indent)+res+".update({"+items[0]+"})"
var dictcomp_name="dc"+ix,root=$B.py2js({src:py,is_comp:true},module_name,dictcomp_name,parent_scope,line_num),js=root.to_js()
js+='\nreturn $locals["'+res+'"]\n'
js="(function($locals_"+dictcomp_name+"){"+js+"})({})"
$B.clear_ns(dictcomp_name)
delete $B.$py_src[dictcomp_name]
return js}
$B.$gen_expr=function(module_name,parent_scope,items,line_num){
var $ix=$B.UUID(),py="def __ge"+$ix+"():\n",
indent=1
for(var i=1,len=items.length;i < len;i++){var item=items[i].replace(/\s+$/,"").replace(/\n/g,"")
py+=" ".repeat(indent)+item+":\n"
indent+=4}
py+=" ".repeat(indent)
py+="yield ("+items[0]+")"
var genexpr_name="__ge"+$ix,root=$B.py2js({src:py,is_comp:true},genexpr_name,genexpr_name,parent_scope,line_num),js=root.to_js(),lines=js.split("\n")
js=lines.join("\n")
js+="\nvar $res = $locals_"+genexpr_name+'["'+genexpr_name+
'"]();\n$res.is_gen_expr = true;\nreturn $res\n'
js="(function($locals_"+genexpr_name+"){"+js+"})({})\n"
delete $B.$py_src[genexpr_name]
return js}
$B.clear_ns=function(name){
if(name.startsWith("__ge")){console.log("clear ns",name)}
var len=name.length
for(var key in $B.$py_module_path){if(key.substr(0,len)==name){$B.$py_module_path[key]=null
delete $B.$py_module_path[key]}}
$B.$py_src[name]=null
delete $B.$py_src[name]
var alt_name=name.replace(/\./g,"_")
if(alt_name !=name){$B.clear_ns(alt_name)}}
$B.from_alias=function(attr){if(attr.substr(0,2)=="$$" && $B.aliased_names[attr.substr(2)]){return attr.substr(2)}
return attr}
$B.$search=function(name,global_ns){
var frame=$B.last($B.frames_stack)
if(frame[1][name]!==undefined){return frame[1][name]}
else if(frame[3][name]!==undefined){return frame[3][name]}
else if(_b_[name]!==undefined){return _b_[name]}
else{if(frame[0]==frame[2]||frame[1].$type=="class"){throw _b_.NameError.$factory(
"name '"+name+"' is not defined")}
else{throw _b_.UnboundLocalError.$factory("local variable '"+
name+"' referenced before assignment")}}}
$B.$global_search=function(name,search_ids){
var ns={}
for(var i=0;i< $B.frames_stack.length;i++){var frame=$B.frames_stack[i]
if(search_ids.indexOf(frame[0])>-1 &&
frame[1][name]!==undefined){return frame[1][name]}
if(search_ids.indexOf(frame[2])>-1 &&
frame[3][name]!==undefined){return frame[3][name]}}
for(var i=0;i < search_ids.length;i++){var search_id=search_ids[i]
if($B.imported[search_id]&& $B.imported[search_id][name]){return $B.imported[search_id][name]}}
throw _b_.NameError.$factory("name '"+$B.from_alias(name)+
"' is not defined")}
$B.$local_search=function(name){
var frame=$B.last($B.frames_stack)
if(frame[1][name]!==undefined){return frame[1][name]}
else{throw _b_.UnboundLocalError.$factory("local variable '"+name+
"' referenced before assignment")}}
$B.$check_def=function(name,value){
if(value !==undefined){return value}
throw _b_.NameError.$factory("name '"+name+"' is not defined")}
$B.$check_def_local=function(name,value){
if(value !==undefined){return value}
throw _b_.UnboundLocalError.$factory("local variable '"+name+
"' referenced before assignment")}
$B.$check_def_free=function(name,value){
if(value !==undefined){return value}
var res
for(var i=$B.frames_stack.length-1;i >=0;i--){res=$B.frames_stack[i][1][name]
if(res !==undefined){return res}
res=$B.frames_stack[i][3][name]
if(res !==undefined){return res}}
throw _b_.NameError.$factory("free variable '"+name+
"' referenced before assignment in enclosing scope")}
$B.$check_def_free1=function(name,scope_id){
var res
for(var i=$B.frames_stack.length-1;i >=0;i--){var frame=$B.frames_stack[i]
res=frame[1][name]
if(res !==undefined){return res}
if(frame[1].$parent){res=frame[1].$parent[name]
if(res !==undefined){return res}}
if(frame[2]==scope_id){res=frame[3][name]
if(res !==undefined){return res}}}
throw _b_.NameError.$factory("free variable '"+name+
"' referenced before assignment in enclosing scope")}
$B.$JS2Py=function(src){if(typeof src==="number"){if(src % 1===0){return src}
return _b_.float.$factory(src)}
if(src===null ||src===undefined){return _b_.None}
var klass=$B.get_class(src)
if(klass !==undefined){if(klass===_b_.list){if(src.__class__){return src}
return $B.JSArray.$factory(src)}else if(klass===$B.JSObject){src=src.js}else{return src}}
if(typeof src=="object"){if($B.$isNode(src)){return $B.DOMNode.$factory(src)}
if($B.$isEvent(src)){return $B.$DOMEvent(src)}
if($B.$isNodeList(src)){return $B.DOMNode.$factory(src)}
if(Array.isArray(src)&&
Object.getPrototypeOf(src)===Array.prototype){var res=[]
for(var i=0,len=src.length;i< len;i++){res.push($B.$JS2Py(src[i]))}
return res}}
return $B.JSObject.$factory(src)}
$B.list_key=function(obj,key){key=$B.$GetInt(key)
if(key < 0){key+=obj.length}
var res=obj[key]
if(res===undefined){throw _b_.IndexError.$factory("list index out of range")}
return res}
$B.list_slice=function(obj,start,stop){if(start===null){start=0}
else{start=$B.$GetInt(start)
if(start < 0){start=Math.max(0,start+obj.length)}}
if(stop===null){return obj.slice(start)}
stop=$B.$GetInt(stop)
if(stop < 0){stop=Math.max(0,stop+obj.length)}
return obj.slice(start,stop)}
$B.list_slice_step=function(obj,start,stop,step){if(step===null ||step==1){return $B.list_slice(obj,start,stop)}
if(step==0){throw _b_.ValueError.$factory("slice step cannot be zero")}
step=$B.$GetInt(step)
if(start===null){start=step >=0 ? 0 :obj.length-1}
else{start=$B.$GetInt(start)
if(start < 0){start=Math.min(0,start+obj.length)}}
if(stop===null){stop=step >=0 ? obj.length :-1}
else{stop=$B.$GetInt(stop)
if(stop < 0){stop=Math.max(0,stop+obj.length)}}
var res=[]
if(step > 0){for(var i=start;i < stop;i+=step){res.push(obj[i])}}else{for(var i=start;i > stop;i+=step){res.push(obj[i])}}
return res}
function index_error(obj){var type=typeof obj=="string" ? "string" :"list"
throw _b_.IndexError.$factory(type+" index out of range")}
$B.$getitem=function(obj,item){var is_list=Array.isArray(obj)&& obj.__class__===_b_.list
if(typeof item=="number"){if(is_list ||typeof obj=="string"){item=item >=0 ? item :obj.length+item
if(obj[item]!==undefined){return obj[item]}
else{index_error(obj)}}}
try{item=$B.$GetInt(item)}catch(err){}
if((is_list ||typeof obj=="string")
&& typeof item=="number"){item=item >=0 ? item :obj.length+item
if(obj[item]!==undefined){return obj[item]}
else{index_error(obj)}}
if(obj.$is_class){var class_gi=$B.$getattr(obj,"__class_getitem__",_b_.None)
if(class_gi !==_b_.None){return class_gi(item)}else if(obj.__class__){class_gi=$B.$getattr(obj.__class__,"__getitem__",_b_.None)
if(class_gi !==_b_.None){return class_gi(obj,item)}}}
var gi=$B.$getattr(obj,"__getitem__",_b_.None)
if(gi !==_b_.None){return gi(item)}
throw _b_.TypeError.$factory("'"+$B.class_name(obj)+
"' object is not subscriptable")}
$B.set_list_key=function(obj,key,value){try{key=$B.$GetInt(key)}
catch(err){if(_b_.isinstance(key,_b_.slice)){var s=_b_.slice.$conv_for_seq(key,obj.length)
return $B.set_list_slice_step(obj,s.start,s.stop,s.step,value)}}
if(key < 0){key+=obj.length}
if(obj[key]===undefined){console.log(obj,key)
throw _b_.IndexError.$factory("list assignment index out of range")}
obj[key]=value}
$B.set_list_slice=function(obj,start,stop,value){if(start===null){start=0}
else{start=$B.$GetInt(start)
if(start < 0){start=Math.max(0,start+obj.length)}}
if(stop===null){stop=obj.length}
stop=$B.$GetInt(stop)
if(stop < 0){stop=Math.max(0,stop+obj.length)}
var res=_b_.list.$factory(value)
obj.splice.apply(obj,[start,stop-start].concat(res))}
$B.set_list_slice_step=function(obj,start,stop,step,value){if(step===null ||step==1){return $B.set_list_slice(obj,start,stop,value)}
if(step==0){throw _b_.ValueError.$factory("slice step cannot be zero")}
step=$B.$GetInt(step)
if(start===null){start=step > 0 ? 0 :obj.length-1}
else{start=$B.$GetInt(start)
if(start < 0){start=Math.min(0,start+obj.length)}}
if(stop===null){stop=step > 0 ? obj.length :-1}
else{stop=$B.$GetInt(stop)
if(stop < 0){stop=Math.max(0,stop+obj.length)}}
var repl=_b_.list.$factory(value),j=0,test,nb=0
if(step > 0){test=function(i){return i < stop}}
else{test=function(i){return i > stop}}
for(var i=start;test(i);i+=step){nb++}
if(nb !=repl.length){throw _b_.ValueError.$factory(
"attempt to assign sequence of size "+repl.length+
" to extended slice of size "+nb)}
for(var i=start;test(i);i+=step){obj[i]=repl[j]
j++}}
$B.nbsi=0
$B.siklass={}
$B.$setitem=function(obj,item,value){if(Array.isArray(obj)&& obj.__class__===undefined &&
typeof item=="number" &&
!_b_.isinstance(obj,_b_.tuple)){if(item < 0){item+=obj.length}
if(obj[item]===undefined){throw _b_.IndexError.$factory("list assignment index out of range")}
obj[item]=value
return}else if(obj.__class__===_b_.dict){_b_.dict.$setitem(obj,item,value)
return}else if(obj.__class__===$B.JSObject){$B.JSObject.__setattr__(obj,item,value)
return}else if(obj.__class__===_b_.list){return _b_.list.$setitem(obj,item,value)}
$B.nbsi++
var klname=obj.__class__.$infos.__name__
if($B.siklass[klname]!==undefined){$B.siklass[klname]++}else{$B.siklass[klname]=1}
$B.$getattr(obj,"__setitem__")(item,value)}
$B.augm_item_add=function(obj,item,incr){if(Array.isArray(obj)&& typeof item=="number" &&
obj[item]!==undefined){if(Array.isArray(obj[item])&& Array.isArray(incr)){for(var i=0,len=incr.length;i < len;i++){obj[item].push(incr[i])}
return}else if(typeof obj[item]=="string" && typeof incr=="string"){obj[item]+=incr
return}}
var ga=$B.$getattr
try{var augm_func=ga(ga(obj,"__getitem__")(item),"__iadd__")}catch(err){ga(obj,"__setitem__")(item,ga(ga(obj,"__getitem__")(item),"__add__")(incr))
return}
augm_func(incr)}
var augm_item_src=""+$B.augm_item_add
var augm_ops=[["-=","sub"],["*=","mul"]]
for(var i=0,len=augm_ops.length;i < len;i++){var augm_code=augm_item_src.replace(/add/g,augm_ops[i][1])
augm_code=augm_code.replace(/\+=/g,augm_ops[i][0])
eval("$B.augm_item_"+augm_ops[i][1]+"="+augm_code)}
$B.extend=function(fname,arg){
for(var i=2;i < arguments.length;i++){var mapping=arguments[i]
var it=_b_.iter(mapping),getter=$B.$getattr(mapping,"__getitem__")
while(true){try{var key=_b_.next(it)
if(typeof key !=="string"){throw _b_.TypeError.$factory(fname+
"() keywords must be strings")}
if(arg[key]!==undefined){throw _b_.TypeError.$factory(fname+
"() got multiple values for argument '"+key+"'")}
arg[key]=getter(key)}catch(err){if(_b_.isinstance(err,[_b_.StopIteration])){break}
throw err}}}
return arg}
$B.extend_list=function(){
var res=Array.prototype.slice.call(arguments,0,arguments.length-1),last=$B.last(arguments)
var it=_b_.iter(last)
while(true){try{res.push(_b_.next(it))}catch(err){if(_b_.isinstance(err,[_b_.StopIteration])){break}
throw err}}
return res}
$B.$test_item=function(expr){
$B.$test_result=expr
return _b_.bool.$factory(expr)}
$B.$test_expr=function(){
return $B.$test_result}
$B.$is=function(a,b){
if(a instanceof Number && b instanceof Number){return a.valueOf()==b.valueOf()}
return a===b}
$B.$is_member=function(item,_set){
var f,_iter
try{f=$B.$getattr(_set,"__contains__")}
catch(err){}
if(f){return f(item)}
try{_iter=_b_.iter(_set)}
catch(err){}
if(_iter){while(1){try{var elt=_b_.next(_iter)
if($B.rich_comp("__eq__",elt,item)){return true}}catch(err){if(err.__class__===_b_.StopIteration){return false}
throw err}}}
try{f=$B.$getattr(_set,"__getitem__")}
catch(err){throw _b_.TypeError.$factory("'"+$B.class_name(_set)+
"' object is not iterable")}
if(f){var i=-1
while(1){i++
try{var elt=f(i)
if($B.rich_comp("__eq__",elt,item)){return true}}catch(err){if(err.__class__===_b_.IndexError){return false}
throw err}}}}
$B.$call=function(callable){if(callable.__class__===$B.method){return callable}
else if(callable.$is_func ||typeof callable=="function"){return callable}else if(callable.$factory){return callable.$factory}else if(callable.$is_class){
return callable.$factory=$B.$instance_creator(callable)}else if(callable.__class__===$B.JSObject){if(typeof(callable.js)=="function"){return callable.js}else{throw _b_.TypeError.$factory("'"+$B.class_name(callable)+
"' object is not callable")}}
try{return $B.$getattr(callable,"__call__")}catch(err){throw _b_.TypeError.$factory("'"+$B.class_name(callable)+
"' object is not callable")}}
var $io={__class__:_b_.type,$infos:{__name__:"io"}}
$io.__mro__=[_b_.object]
$B.stderr={__class__:$io,write:function(data){console.log(data)},flush:function(){}}
$B.stderr_buff=""
$B.stdout={__class__:$io,write:function(data){console.log(data)},flush:function(){}}
$B.stdin={__class__:$io,__original__:true,closed:false,len:1,pos:0,read:function(){return ""},readline:function(){return ""}}
$B.jsobject2pyobject=function(obj){switch(obj){case null:
return _b_.None
case true:
return _b_.True
case false:
return _b_.False}
if(typeof obj==="object" && ! Array.isArray(obj)&&
obj.__class__===undefined){
var res=_b_.dict.$factory()
for(var attr in obj){res.$string_dict[attr]=$B.jsobject2pyobject(obj[attr])}
return res}
if(_b_.isinstance(obj,_b_.list)){var res=[],pos=0
for(var i=0,len=obj.length;i < len;i++){res[pos++]=$B.jsobject2pyobject(obj[i])}
return res}
if(obj.__class__ !==undefined){if(obj.__class__===_b_.list){for(var i=0,len=obj.length;i < len;i++){obj[i]=$B.jsobject2pyobject(obj[i])}
return obj}
return obj}
if(obj._type_==="iter"){
return _b_.iter(obj.data)}
return $B.JSObject.$factory(obj)}
$B.set_line=function(line_num,module_name){$B.line_info=line_num+","+module_name
return _b_.None}
$B.$iterator=function(items,klass){var res={__class__:klass,__iter__:function(){return res},__len__:function(){return items.length},__next__:function(){res.counter++
if(res.counter < items.length){return items[res.counter]}
throw _b_.StopIteration.$factory("StopIteration")},__repr__:function(){return "<"+klass.$infos.__name__+" object>"},counter:-1}
res.__str__=res.toString=res.__repr__
return res}
$B.$iterator_class=function(name){var res={__class__:_b_.type,__mro__:[_b_.object],$infos:{__name__:name,__module__:"builtins"},$is_class:true}
function as_array(s){var _a=[],pos=0,_it=_b_.iter(s)
while(1){try{_a[pos++]=_b_.next(_it)}catch(err){if(err.__class__===_b_.StopIteration){break}}}
return _a}
function as_list(s){return _b_.list.$factory(as_array(s))}
function as_set(s){return _b_.set.$factory(as_array(s))}
res.__eq__=function(self,other){if(_b_.isinstance(other,[_b_.tuple,_b_.set,_b_.list])){return $B.$getattr(as_list(self),"__eq__")(other)}
if(_b_.hasattr(other,"__iter__")){return $B.$getattr(as_list(self),"__eq__")(as_list(other))}
_b_.NotImplementedError.$factory(
"__eq__ not implemented yet for list and "+_b_.type(other))}
var _ops=["eq","ne"],_f=res.__eq__+""
for(var i=0;i < _ops.length;i++){var _op="__"+_ops[i]+"__"
eval("res."+_op+"="+_f.replace(new RegExp("__eq__","g"),_op))}
res.__or__=function(self,other){if(_b_.isinstance(other,[_b_.tuple,_b_.set,_b_.list])){return $B.$getattr(as_set(self),"__or__")(other)}
if(_b_.hasattr(other,"__iter__")){return $B.$getattr(as_set(self),"__or__")(as_set(other))}
_b_.NotImplementedError.$factory(
"__or__ not implemented yet for set and "+_b_.type(other))}
var _ops=["sub","and","xor","gt","ge","lt","le"],_f=res.__or__+""
for(var i=0;i < _ops.length;i++){var _op="__"+_ops[i]+"__"
eval("res."+_op+"="+_f.replace(new RegExp("__or__","g"),_op))}
return res}
function $err(op,klass,other){var msg="unsupported operand type(s) for "+op+": '"+
klass.$infos.__name__+"' and '"+$B.class_name(other)+"'"
throw _b_.TypeError.$factory(msg)}
var ropnames=["add","sub","mul","truediv","floordiv","mod","pow","lshift","rshift","and","xor","or"]
var ropsigns=["+","-","*","/","//","%","**","<<",">>","&","^","|"]
$B.make_rmethods=function(klass){for(var j=0,_len_j=ropnames.length;j < _len_j;j++){if(klass["__"+ropnames[j]+"__"]===undefined){klass["__"+ropnames[j]+"__"]=(function(name,sign){return function(self,other){try{return $B.$getattr(other,"__r"+name+"__")(self)}
catch(err){$err(sign,klass,other)}}})(ropnames[j],ropsigns[j])}}}
$B.UUID=function(){return $B.$py_UUID++}
$B.nb_inject=0
$B.InjectBuiltins=function(){$B.nb_inject++
var _str=["var _b_ = $B.builtins"],pos=1
for(var $b in $B.builtins){_str[pos++]="var "+$b+'=_b_["'+$b+'"]'}
return _str.join(";")}
$B.$GetInt=function(value){
if(typeof value=="number" ||value.constructor===Number){return value}
else if(typeof value==="boolean"){return value ? 1 :0}
else if(_b_.isinstance(value,_b_.int)){return value}
else if(_b_.isinstance(value,_b_.float)){return value.valueOf()}
if(! value.$is_class){try{var v=$B.$getattr(value,"__int__")();return v}catch(e){}
try{var v=$B.$getattr(value,"__index__")();return v}catch(e){}}
throw _b_.TypeError.$factory("'"+$B.class_name(value)+
"' object cannot be interpreted as an integer")}
$B.PyNumber_Index=function(item){switch(typeof item){case "boolean":
return item ? 1 :0
case "number":
return item
case "object":
if(item.__class__===$B.long_int){return item}
var method=$B.$getattr(item,"__index__",_b_.None)
if(method !==_b_.None){method=typeof method=="function" ?
method :$B.$getattr(method,"__call__")
return $B.int_or_bool(method)}
default:
throw _b_.TypeError.$factory("'"+$B.class_name(item)+
"' object cannot be interpreted as an integer")}}
$B.int_or_bool=function(v){switch(typeof v){case "boolean":
return v ? 1 :0
case "number":
return v
case "object":
if(v.__class__===$B.long_int){return v}
else{throw _b_.TypeError.$factory("'"+$B.class_name(v)+
"' object cannot be interpreted as an integer")}
default:
throw _b_.TypeError.$factory("'"+$B.class_name(v)+
"' object cannot be interpreted as an integer")}}
$B.int_value=function(v){
try{return $B.int_or_bool(v)}
catch(err){if(_b_.isinstance(v,_b_.complex)&& v.$imag==0){return $B.int_or_bool(v.$real)}else if(isinstance(v,_b_.float)&& v==Math.floor(v)){return Math.floor(v)}else{throw _b_.TypeError.$factory("'"+$B.class_name(v)+
"' object cannot be interpreted as an integer")}}}
$B.enter_frame=function(frame){
$B.frames_stack.push(frame)}
$B.leave_frame=function(arg){
if($B.profile > 0){$B.$profile.return()}
if($B.frames_stack.length==0){console.log("empty stack");return}
$B.del_exc()
$B.frames_stack.pop()}
$B.leave_frame_exec=function(arg){
if($B.profile > 0){$B.$profile.return()}
if($B.frames_stack.length==0){console.log("empty stack");return}
var frame=$B.frames_stack.pop()
for(var i=$B.frames_stack.length-1;i >=0;i--){if($B.frames_stack[i][2]==frame[2]){$B.frames_stack[i][3]=frame[3]}}}
$B.memory=function(){var info=[]
for(var attr in __BRYTHON__){var obj=__BRYTHON__[attr]
if(obj===null){continue}
if(Array.isArray(obj)){info.push([obj.length,attr])}
else if(typeof obj=="object"){info.push([Object.keys(obj).length,attr])}}
info.sort(function(x,y){return x[0]-y[0]})
for(var i=0,len=info.length;i < len;i++){console.log(info[i][0],info[i][1],__BRYTHON__[info[i][1]])}}
var Profile=$B.make_class("profile",function(){return{__class__:Profile}}
)
Profile.__dir__=function(self){return Object.keys(self)}
Profile.__getattribute__=function(self,attr){if(attr=="__str__"){return function(){var res="<profile object"
for(var attr in self){if(attr.startsWith("__")){continue}
res+=" "+attr+": "
if(typeof self[attr]=="object"){res+=_b_.dict.__str__($B.obj_dict(self[attr]))}else{res+=_b_.str.$factory(self[attr])}}
return res+">"}}
return $B.jsobj2pyobj(self[attr])}
$B.$profile_data=Profile.$factory()
$B.$profile=(function(profile){var call_times={},
_START=0,
_CALLER=1,_CUMULATED=2,_LAST_RESUMED=3,call_stack=[],
profile_start=null,
active=false,
paused=false,
cumulated=0
var _fhash=function(module,fname,line){return module+"."+fname+":"+line}
var _hash=function(module,line){return module+":"+line}
var _is_recursive=function(h){for(var i=0;i < call_stack.length;i++)
if(call_stack[i]==h){return true}
return false}
var $profile={"call":function(module,fname,line,caller){if($B.profile > 1 && active){var ctime=new Date()
var h=_fhash(module,fname,line)
if(!(h in call_times)){call_times[h]=[]}
if(call_stack.length > 0){in_func=call_stack[call_stack.length-1]
func_stack=call_times[in_func]
inner_most_call=func_stack[func_stack.length-1]
inner_most_call[_CUMULATED]+=ctime-
inner_most_call[_LAST_RESUMED]
caller=caller+":"+in_func}
call_times[h].push([ctime,caller,0,ctime])
call_stack.push(h)}},"return":function(){if($B.profile > 1 && active){var h=call_stack.pop()
if(h in call_times){var t_end=new Date(),data=call_times[h].pop()
t_start=data[_START]
caller=data[_CALLER]
t_duration=t_end-t_start
t_in_func=data[_CUMULATED]+t_end-
data[_LAST_RESUMED]
if(!(h in profile.call_times)){profile.call_times[h]=0
profile.call_times_proper[h]=0
profile.call_counts[h]=0
profile.call_counts_norec[h]=0
profile.callers[h]={}}
profile.call_times[h]+=t_duration
profile.call_times_proper[h]+=t_in_func
profile.call_counts[h]+=1
if(!(caller in profile.callers[h])){profile.callers[h][caller]=[0,0,0,0]}
if(! _is_recursive(h)){profile.call_counts_norec[h]+=1
profile.callers[h][caller][3]++}
profile.callers[h][caller][0]+=t_duration
profile.callers[h][caller][1]+=t_in_func
profile.callers[h][caller][2]++
if(call_stack.length > 0){
in_func=call_stack[call_stack.length-1]
func_stack=call_times[in_func]
inner_most_call=func_stack[func_stack.length-1]
inner_most_call[_LAST_RESUMED]=new Date()}}}},"count":function(module,line){if(active){var h=_hash(module,line)
if(!(h in profile.line_counts)){profile.line_counts[h]=0}
profile.line_counts[h]++}},"pause":function(){if(active){elapsed=(new Date())-profile_start
cumulated+=elapsed
active=false
paused=true}},"start":function(){if($B.profile > 0){if(! paused){$B.$profile.clear()}
else{paused=false}
active=true
profile_start=new Date()}},"elapsed":function(){if(active){return cumulated+(new Date())-profile_start}
else{return cumulated}},"stop":function(){if(active ||paused){profile.profile_duration=((new Date())-profile_start)+
cumulated
active=false
paused=false}},"clear":function(){cumulated=0;
profile.line_counts={}
profile.call_times={}
profile.call_times_proper={}
profile.call_counts={}
profile.call_counts_norec={}
profile.callers={}
active=false
paused=false},"status":function(){if($B.profile <=0){return "Disabled"}
if(active){return "Collecting data: active"}
else if(paused){return "Collecting data: paused"}
else{return "Stopped"}},}
return $profile})($B.$profile_data)
var min_int=Math.pow(-2,53),max_int=Math.pow(2,53)-1
$B.is_safe_int=function(){for(var i=0;i < arguments.length;i++){var arg=arguments[i]
if(arg < min_int ||arg > max_int){return false}}
return true}
$B.add=function(x,y){var z=(typeof x !="number" ||typeof y !="number")?
new Number(x+y):x+y
if(x > min_int && x < max_int && y > min_int && y < max_int
&& z > min_int && z < max_int){return z}
else if((typeof x=="number" ||x.__class__===$B.long_int)
&&(typeof y=="number" ||y.__class__===$B.long_int)){if((typeof x=="number" && isNaN(x))||
(typeof y=="number" && isNaN(y))){return _b_.float.$factory("nan")}
var res=$B.long_int.__add__($B.long_int.$factory(x),$B.long_int.$factory(y))
return res}else{return z}}
$B.div=function(x,y){var z=x/y
if(x > min_int && x < max_int && y > min_int && y < max_int
&& z > min_int && z < max_int){return z}
else{return $B.long_int.__truediv__($B.long_int.$factory(x),$B.long_int.$factory(y))}}
$B.eq=function(x,y){if(x > min_int && x < max_int && y > min_int && y < max_int){return x==y}
return $B.long_int.__eq__($B.long_int.$factory(x),$B.long_int.$factory(y))}
$B.floordiv=function(x,y){var z=x/y
if(x > min_int && x < max_int && y > min_int && y < max_int
&& z > min_int && z < max_int){return Math.floor(z)}
else{return $B.long_int.__floordiv__($B.long_int.$factory(x),$B.long_int.$factory(y))}}
$B.mul=function(x,y){var z=(typeof x !="number" ||typeof y !="number")?
new Number(x*y):x*y
if(x > min_int && x < max_int && y > min_int && y < max_int
&& z > min_int && z < max_int){return z}
else if((typeof x=="number" ||x.__class__===$B.long_int)
&&(typeof y=="number" ||y.__class__===$B.long_int)){if((typeof x=="number" && isNaN(x))||
(typeof y=="number" && isNaN(y))){return _b_.float.$factory("nan")}
return $B.long_int.__mul__($B.long_int.$factory(x),$B.long_int.$factory(y))}else{return z}}
$B.sub=function(x,y){var z=(typeof x !="number" ||typeof y !="number")?
new Number(x-y):x-y
if(x > min_int && x < max_int && y > min_int && y < max_int
&& z > min_int && z < max_int){return z}
else if((typeof x=="number" ||x.__class__===$B.long_int)
&&(typeof y=="number" ||y.__class__===$B.long_int)){if((typeof x=="number" && isNaN(x))||
(typeof y=="number" && isNaN(y))){return _b_.float.$factory("nan")}
return $B.long_int.__sub__($B.long_int.$factory(x),$B.long_int.$factory(y))}else{return z}}
$B.ge=function(x,y){if(typeof x=="number" && typeof y=="number"){return x >=y}
else if(typeof x=="number" && typeof y !="number"){return ! y.pos}
else if(typeof x !="number" && typeof y=="number"){return x.pos===true}else{return $B.long_int.__ge__(x,y)}}
$B.gt=function(x,y){if(typeof x=="number" && typeof y=="number"){return x > y}
else if(typeof x=="number" && typeof y !="number"){return ! y.pos}
else if(typeof x !="number" && typeof y=="number"){return x.pos===true}else{return $B.long_int.__gt__(x,y)}}
var reversed_op={"__lt__":"__gt__","__le__":"__ge__","__gt__":"__lt__","__ge__":"__le__"}
var method2comp={"__lt__":"<","__le__":"<=","__gt__":">","__ge__":">="}
$B.rich_comp=function(op,x,y){var x1=x.valueOf(),y1=y.valueOf()
if(typeof x1=="number" && typeof y1=="number" &&
x.__class__===undefined && y.__class__===undefined){switch(op){case "__eq__":
return x1==y1
case "__ne__":
return x1 !=y1
case "__le__":
return x1 <=y1
case "__lt__":
return x1 < y1
case "__ge__":
return x1 >=y1
case "__gt__":
return x1 > y1}}
var res,rev_op,compared=false
if(x.$is_class ||x.$factory){if(op=="__eq__"){return(x===y)}else if(op=="__ne__"){return !(x===y)}else{throw _b_.TypeError.$factory("'"+op+
"' not supported between types")}}
if(x.__class__ && y.__class__){
if(y.__class__.__mro__.indexOf(x.__class__)>-1){rev_op=reversed_op[op]||op
var rev_func=$B.$getattr(y,rev_op)
res=$B.$call($B.$getattr(y,rev_op))(x)
if(res !==_b_.NotImplemented){return res}
compared=true}}
res=$B.$call($B.$getattr(x,op))(y)
if(res !==_b_.NotImplemented){return res}
if(compared){return false}
rev_op=reversed_op[op]||op
res=$B.$getattr(y,rev_op)(x)
if(res !==_b_.NotImplemented ){return res}
if(op=="__eq__"){return _b_.False}
else if(op=="__ne__"){return _b_.True}
throw _b_.TypeError.$factory("'"+method2comp[op]+
"' not supported between instances of '"+$B.class_name(x)+
"' and '"+$B.class_name(y)+"'")}
$B.is_none=function(o){return o===undefined ||o===null ||o==_b_.None}})(__BRYTHON__)
if(!Array.prototype.indexOf){Array.prototype.indexOf=function(obj,fromIndex){if(fromIndex < 0)fromIndex+=this.length
for(var i=fromIndex ||0,len=this.length;i < len;i++){if(this[i]===obj){return i}}
return-1}}
if(!String.prototype.repeat){String.prototype.repeat=function(count){if(count < 1){return ''}
var result='',pattern=this.valueOf()
while(count > 1){if(count & 1){result+=pattern}
count >>=1,pattern+=pattern}
return result+pattern}}
;

;(function($B){var bltns=$B.InjectBuiltins()
eval(bltns)
_b_.__debug__=false
var object=_b_.object,odga=object.__getattribute__
$B.$comps={'>':'gt','>=':'ge','<':'lt','<=':'le'}
$B.$inv_comps={'>':'lt','>=':'le','<':'gt','<=':'ge'}
function check_nb_args(name,expected,args){
var len=args.length,last=args[len-1]
if(last && last.$nat=="kw"){var kw=last.kw
if(Array.isArray(kw)&& kw[1]&& kw[1].__class__===_b_.dict){if(Object.keys(kw[1].$string_dict).length==0){len--}}}
if(len !=expected){if(expected==0){throw _b_.TypeError.$factory(name+"() takes no argument"+
" ("+got+" given)")}else{throw _b_.TypeError.$factory(name+"() takes exactly "+
expected+" argument"+(expected < 2 ? '' :'s')+
" ("+len+" given)")}}}
function check_no_kw(name,x,y){
if(x.$nat ||(y !==undefined && y.$nat)){throw _b_.TypeError.$factory(name+"() takes no keyword arguments")}}
var NoneType={__class__:_b_.type,$infos:{__name__:"NoneType",__module__:"builtins"},__mro__:[object],$is_class:true}
NoneType.__setattr__=function(self,attr){return no_set_attr(NoneType,attr)}
var None={__bool__:function(){return False},__class__:NoneType,__hash__:function(){return 0},__repr__:function(){return 'None'},__str__:function(){return 'None'},toString:function(){return 'None'}}
NoneType.$factory=function(){return None}
for(var $op in $B.$comps){
var key=$B.$comps[$op]
switch(key){case 'ge':
case 'gt':
case 'le':
case 'lt':
NoneType['__'+key+'__']=(function(op){return function(other){return _b_.NotImplemented}})($op)}}
for(var $func in None){if(typeof None[$func]=='function'){None[$func].__str__=(function(f){return function(){return "<method-wrapper "+f+
" of NoneType object>"}})($func)}}
$B.set_func_names(NoneType,"builtins")
function abs(obj){check_nb_args('abs',1,arguments)
check_no_kw('abs',obj)
if(isinstance(obj,_b_.int)){if(obj.__class__===$B.long_int){return{
__class__:$B.long_int,value:obj.value,pos:true}}else{return _b_.int.$factory(Math.abs(obj))}}
if(isinstance(obj,_b_.float)){return _b_.float.$factory(Math.abs(obj))}
if(hasattr(obj,'__abs__')){return $B.$getattr(obj,'__abs__')()}
throw _b_.TypeError.$factory("Bad operand type for abs(): '"+
$B.get_class(obj)+"'")}
function all(obj){check_nb_args('all',1,arguments)
check_no_kw('all',obj)
var iterable=iter(obj)
while(1){try{var elt=next(iterable)
if(!$B.$bool(elt)){return false}}catch(err){return true}}}
function any(obj){check_nb_args('any',1,arguments)
check_no_kw('any',obj)
var iterable=iter(obj)
while(1){try{var elt=next(iterable)
if($B.$bool(elt)){return true}}catch(err){return false}}}
function ascii(obj){check_nb_args('ascii',1,arguments)
check_no_kw('ascii',obj)
var res=repr(obj),res1='',cp
for(var i=0;i < res.length;i++){cp=res.charCodeAt(i)
if(cp < 128){res1+=res.charAt(i)}
else if(cp < 256){res1+='\\x'+cp.toString(16)}
else{var s=cp.toString(16)
if(s.length % 2==1){s="0"+s}
res1+='\\u'+s}}
return res1}
function $builtin_base_convert_helper(obj,base){var prefix="";
switch(base){case 2:
prefix='0b';break
case 8:
prefix='0o';break
case 16:
prefix='0x';break
default:
console.log('invalid base:'+base)}
if(obj.__class__===$B.long_int){if(obj.pos){return prefix+$B.long_int.to_base(obj,base)}
return '-'+prefix+$B.long_int.to_base(-obj,base)}
var value=$B.$GetInt(obj)
if(value===undefined){
throw _b_.TypeError.$factory('Error, argument must be an integer or'+
' contains an __index__ function')}
if(value >=0){return prefix+value.toString(base)}
return '-'+prefix+(-value).toString(base)}
function bin(obj){check_nb_args('bin',1,arguments)
check_no_kw('bin',obj)
if(isinstance(obj,_b_.int)){return $builtin_base_convert_helper(obj,2)}
return $B.$getattr(obj,'__index__')()}
function callable(obj){check_nb_args('callable',1,arguments)
check_no_kw('callable',obj)
return hasattr(obj,'__call__')}
function chr(i){check_nb_args('chr',1,arguments)
check_no_kw('chr',i)
if(i < 0 ||i > 1114111){throw _b_.ValueError.$factory('Outside valid range')}
return String.fromCharCode(i)}
var classmethod=$B.make_class("classmethod",function(func){check_nb_args('classmethod',1,arguments)
check_no_kw('classmethod',func)
var f=function(){return func.apply(null,arguments)}
f.__class__=$B.method
if(func.$attrs){for(var key in func.$attrs){f[key]=func.$attrs[key]}}
f.$infos={__func__:func,__name__:func.$infos.__name__}
f.__get__=function(obj,cls){var method=function(){return f(cls,...arguments)}
method.__class__=$B.method
method.$infos={__self__:cls,__func__:f,__name__:func.$infos.__name__,__qualname__:cls.$infos.__name__+"."+func.$infos.__name__}
return method}
f.__get__.__class__=$B.method_wrapper
f.__get__.$infos=func.$infos
return f}
)
$B.set_func_names(classmethod,"builtins")
var code=$B.code=$B.make_class("code")
code.__repr__=code.__str__=function(self){return '<code object '+self.name+', file '+self.filename+'>'}
code.__getattr__=function(self,attr){if(attr=="co_code"){return 'co_code'}
return self[attr]}
function compile(){var $=$B.args('compile',6,{source:null,filename:null,mode:null,flags:null,dont_inherit:null,optimize:null},['source','filename','mode','flags','dont_inherit','optimize'],arguments,{flags:0,dont_inherit:false,optimize:-1},null,null)
var module_name='$exec_'+$B.UUID()
$B.clear_ns(module_name)
$.__class__=code
$.co_flags=$.flags
$B.py2js($.source,module_name,module_name)
return $}
var __debug__=$B.debug > 0
function delattr(obj,attr){
check_no_kw('delattr',obj,attr)
check_nb_args('delattr',2,arguments)
if(typeof attr !='string'){throw _b_.TypeError.$factory("attribute name must be string, not '"+
$B.class_name(attr)+"'")}
var klass=$B.get_class(obj)
var res=obj[attr]
if(res===undefined){res=klass[attr]
if(res===undefined){var mro=klass.__mro__
for(var i=0;i < mro.length;i++){var res=mro[i][attr]
if(res !==undefined){break}}}}
if(res !==undefined && res.__delete__ !==undefined){res.__delete__(res,obj,attr)}else{$B.$getattr(obj,'__delattr__')(attr)}
return None}
function dir(obj){if(obj===undefined){
var frame=$B.last($B.frames_stack),globals_obj=frame[3],res=_b_.list.$factory(),pos=0
for(var attr in globals_obj){if(attr.charAt(0)=='$' && attr.charAt(1)!='$'){
continue}
res[pos++]=attr}
_b_.list.sort(res)
return res}
check_nb_args('dir',1,arguments)
check_no_kw('dir',obj)
var klass=obj.__class__ ||$B.get_class(obj)
if(obj.$is_class){
var dir_func=$B.$getattr(obj.__class__,"__dir__")
return $B.$call(dir_func)(obj)}
try{var res=$B.$call($B.$getattr(obj,'__dir__'))()
res=_b_.list.$factory(res)
res.sort()
return res}catch(err){
console.log(err)}
var res=[],pos=0
for(var attr in obj){if(attr.charAt(0)!=='$' && attr !=='__class__' &&
obj[attr]!==undefined){res[pos++]=attr}}
res.sort()
return res}
function divmod(x,y){check_no_kw('divmod',x,y)
check_nb_args('divmod',2,arguments)
var klass=x.__class__ ||$B.get_class(x)
return _b_.tuple.$factory([$B.$getattr(klass,'__floordiv__')(x,y),$B.$getattr(klass,'__mod__')(x,y)])}
var enumerate=$B.make_class("enumerate",function(){var $ns=$B.args("enumerate",2,{iterable:null,start:null},['iterable','start'],arguments,{start:0},null,null)
var _iter=iter($ns["iterable"])
var _start=$ns["start"]
var res={__class__:enumerate,__getattr__:function(attr){return res[attr]},__iter__:function(){return res},__name__:'enumerate iterator',__next__:function(){res.counter++
return _b_.tuple.$factory([res.counter,next(_iter)])},__repr__:function(){return "<enumerate object>"},__str__:function(){return "<enumerate object>"},counter:_start-1}
for(var attr in res){if(typeof res[attr]==='function' && attr !=="__class__"){res[attr].__str__=(function(x){return function(){return "<method wrapper '"+x+"' of enumerate object>"}})(attr)}}
return res}
)
$B.set_func_names(enumerate,"builtins")
$B.from_alias=function(attr){if(attr.substr(0,2)=='$$' && $B.aliased_names[attr.substr(2)]){return attr.substr(2)}
return attr}
$B.to_alias=function(attr){if($B.aliased_names[attr]){return '$$'+attr}
return attr}
function $$eval(src,_globals,_locals){if(_globals===undefined){_globals=_b_.None}
if(_locals===undefined){_locals=_b_.None}
var current_frame=$B.frames_stack[$B.frames_stack.length-1]
if(current_frame !==undefined){var current_locals_id=current_frame[0].replace(/\./,'_'),current_globals_id=current_frame[2].replace(/\./,'_')}
var stack_len=$B.frames_stack.length
var is_exec=arguments[3]=='exec',leave=false
if(src.__class__===code){is_exec=src.mode=="exec"
src=src.source}else if(typeof src !=='string'){throw _b_.TypeError.$factory("eval() arg 1 must be a string, bytes "+
"or code object")}
var globals_id='$exec_'+$B.UUID(),locals_id='$exec_'+$B.UUID(),parent_scope
if(_globals===_b_.None){if(current_locals_id==current_globals_id){locals_id=globals_id}
var local_scope={module:locals_id,id:locals_id,binding:{},bindings:{}}
for(var attr in current_frame[1]){local_scope.binding[attr]=true
local_scope.bindings[attr]=true}
var global_scope={module:globals_id,id:globals_id,binding:{},bindings:{}}
for(var attr in current_frame[3]){global_scope.binding[attr]=true
global_scope.bindings[attr]=true}
local_scope.parent_block=global_scope
global_scope.parent_block=$B.builtins_scope
parent_scope=local_scope
eval("$locals_"+parent_scope.id+" = current_frame[1]")}else{
if(_globals.__class__ !=_b_.dict){throw _b_.TypeError.$factory("exec() globals must be a dict, not "+
_globals.__class__.$infos.__name__)}
_globals.globals_id=_globals.globals_id ||globals_id
globals_id=_globals.globals_id
if(_locals===_globals ||_locals===_b_.None){locals_id=globals_id
parent_scope=$B.builtins_scope}else{
var grandparent_scope={id:globals_id,parent_block:$B.builtins_scope,binding:{}}
parent_scope={id:locals_id,parent_block:grandparent_scope,binding:{}}
for(var attr in _globals.$string_dict){grandparent_scope.binding[attr]=true}
for(var attr in _locals.$string_dict){parent_scope.binding[attr]=true}}}
$B.$py_module_path[globals_id]=$B.$py_module_path[current_globals_id]
eval('var $locals_'+globals_id+' = {}\nvar $locals_'+
locals_id+' = {}')
if(_globals===_b_.None){var gobj=current_frame[3],ex='var $locals_'+current_globals_id+' = gobj;'
eval(ex)
for(var attr in gobj){if((! attr.startsWith("$"))||attr.startsWith('$$')){eval("$locals_"+globals_id+"[attr] = gobj[attr]")}}}else{if(_globals.$jsobj){var items=_globals.$jsobj}
else{var items=_globals.$string_dict}
eval("$locals_"+globals_id+" = _globals.$string_dict")
for(var item in items){var item1=$B.to_alias(item)
try{eval('$locals_'+globals_id+'["'+item1+
'"] = items[item]')}catch(err){console.log(err)
console.log('error setting',item)
break}}}
if(_locals===_b_.None){if(_globals !==_b_.None){eval('var $locals_'+locals_id+' = $locals_'+globals_id)}else{var lobj=current_frame[1],ex=''
for(var attr in current_frame[1]){if(attr.startsWith("$")&& !attr.startsWith("$$")){continue}
ex+='$locals_'+locals_id+'["'+attr+
'"] = current_frame[1]["'+attr+'"];'
eval(ex)}}}else{if(_locals.$jsobj){var items=_locals.$jsobj}
else{var items=_locals.$string_dict}
for(var item in items){var item1=$B.to_alias(item)
try{eval('$locals_'+locals_id+'["'+item+'"] = items.'+item)}catch(err){console.log(err)
console.log('error setting',item)
break}}}
eval("$locals_"+locals_id+".$src = src")
var root=$B.py2js(src,globals_id,locals_id,parent_scope),js,gns,lns
if(_globals !==_b_.None && _locals==_b_.None){for(var attr in _globals.$string_dict){root.binding[attr]=true}}
try{
var try_node=root.children[root.children.length-2],instr=try_node.children[try_node.children.length-2]
var type=instr.C.tree[0].type
switch(type){case 'expr':
case 'list_or_tuple':
case 'op':
case 'ternary':
var children=try_node.children
root.children.splice(root.children.length-2,2)
for(var i=0;i < children.length-1;i++){root.add(children[i])}
break
default:
if(!is_exec){throw _b_.SyntaxError.$factory(
"eval() argument must be an expression",'<string>',1,1,src)}}
js=root.to_js()
if(is_exec){var locals_obj=eval("$locals_"+locals_id),globals_obj=eval("$locals_"+globals_id)
if(_globals===_b_.None){var res=new Function("$locals_"+globals_id,"$locals_"+locals_id,js)(globals_obj,locals_obj)}else{current_globals_obj=current_frame[3]
current_locals_obj=current_frame[1]
var res=new Function("$locals_"+globals_id,"$locals_"+locals_id,"$locals_"+current_globals_id,"$locals_"+current_locals_id,js)(globals_obj,locals_obj,current_globals_obj,current_locals_obj)}}else{var res=eval(js)}
gns=eval("$locals_"+globals_id)
if($B.frames_stack[$B.frames_stack.length-1][2]==globals_id){gns=$B.frames_stack[$B.frames_stack.length-1][3]}
if(_locals !==_b_.None){lns=eval("$locals_"+locals_id)
for(var attr in lns){var attr1=$B.from_alias(attr)
if(attr1.charAt(0)!='$'){if(_locals.$jsobj){_locals.$jsobj[attr]=lns[attr]}
else{_locals.$string_dict[attr1]=lns[attr]}}}}else{for(var attr in lns){if(attr !=="$src"){current_frame[1][attr]=lns[attr]}}}
if(_globals !==_b_.None){
for(var attr in gns){attr1=$B.from_alias(attr)
if(attr1.charAt(0)!='$'){if(_globals.$jsobj){_globals.$jsobj[attr]=gns[attr]}
else{_globals.$string_dict[attr1]=gns[attr]}}}}else{for(var attr in gns){if(attr !=="$src"){current_frame[3][attr]=gns[attr]}}}
if(res===undefined){return _b_.None}
return res}catch(err){err.src=src
err.module=globals_id
if(err.$py_error===undefined){throw $B.exception(err)}
throw err}finally{
if($B.frames_stack.length==stack_len+1){$B.frames_stack.pop()}
root=null
js=null
gns=null
lns=null
$B.clear_ns(globals_id)
$B.clear_ns(locals_id)}}
$$eval.$is_func=true
function exec(src,globals,locals){var missing={}
var $=$B.args("exec",3,{src:null,globals:null,locals:null},["src","globals","locals"],arguments,{globals:_b_.None,locals:_b_.None},null,null),src=$.src,globals=$.globals,locals=$.locals
return $$eval(src,globals,locals,'exec')||_b_.None}
exec.$is_func=true
function exit(){throw _b_.SystemExit}
exit.__repr__=exit.__str__=function(){return "Use exit() or Ctrl-Z plus Return to exit"}
var filter=$B.make_class("filter",function(func,iterable){check_no_kw('filter',func,iterable)
check_nb_args('filter',2,arguments)
iterable=iter(iterable)
if(func===_b_.None){func=$B.$bool}
return{
__class__:filter,func:func,iterable:iterable}}
)
filter.__iter__=function(self){return self}
filter.__next__=function(self){while(true){var _item=next(self.iterable)
if(self.func(_item)){return _item}}}
$B.set_func_names(filter,"builtins")
function format(value,format_spec){var args=$B.args("format",2,{value:null,format_spec:null},["value","format_spec"],arguments,{format_spec:''},null,null)
var fmt=$B.$getattr(args.value,'__format__',null)
if(fmt !==null){return fmt(args.format_spec)}
throw _b_.NotImplementedError("__format__ is not implemented for object '"+
_b_.str.$factory(args.value)+"'")}
function attr_error(attr,cname){var msg="bad operand type for unary #: '"+cname+"'"
switch(attr){case '__neg__':
throw _b_.TypeError.$factory(msg.replace('#','-'))
case '__pos__':
throw _b_.TypeError.$factory(msg.replace('#','+'))
case '__invert__':
throw _b_.TypeError.$factory(msg.replace('#','~'))
case '__call__':
throw _b_.TypeError.$factory("'"+cname+"'"+
' object is not callable')
default:
while(attr.charAt(0)=='$'){attr=attr.substr(1)}
throw _b_.AttributeError.$factory("'"+cname+
"' object has no attribute '"+attr+"'")}}
function getattr(){var missing={}
var $=$B.args("getattr",3,{obj:null,attr:null,_default:null},["obj","attr","_default"],arguments,{_default:missing},null,null)
return $B.$getattr($.obj,$.attr,$._default===missing ? undefined :$._default)}
function in_mro(klass,attr){if(klass===undefined){return false}
if(klass.hasOwnProperty(attr)){return klass[attr]}
var mro=klass.__mro__
for(var i=0,len=mro.length;i < len;i++){if(mro[i].hasOwnProperty(attr)){return mro[i][attr]}}
return false}
$B.$getattr=function(obj,attr,_default){
var rawname=attr
attr=$B.to_alias(attr)
var is_class=obj.$is_class ||obj.$factory
var klass=obj.__class__
var $test=false
if($test){console.log("$getattr",attr,obj,klass)}
if(klass !==undefined && klass.__bases__ &&
(klass.__bases__.length==0 ||
(klass.__bases__.length==1 &&
klass.__bases__[0]===_b_.object))){if(obj.hasOwnProperty(attr)){return obj[attr]}else if(obj.__dict__ &&
obj.__dict__.$string_dict.hasOwnProperty(attr)&&
!(klass.hasOwnProperty(attr)&&
klass[attr].__get__)){return obj.__dict__.$string_dict[attr]}else if(klass.hasOwnProperty(attr)){if(typeof klass[attr]!="function" &&
attr !="__dict__" &&
klass[attr].__get__===undefined){var kl=klass[attr].__class__
if(! in_mro(kl,"__get__")){return klass[attr]}}}}
if($test){console.log("attr",attr,"of",obj,"class",klass,"isclass",is_class)}
if(klass===undefined){
if(typeof obj=='string'){klass=_b_.str}
else if(typeof obj=='number'){klass=obj % 1==0 ? _b_.int :_b_.float}else if(obj instanceof Number){klass=_b_.float}else{klass=$B.get_class(obj)
if(klass===undefined){
if($test){console.log("no class",attr,obj.hasOwnProperty(attr),obj[attr])}
var res=obj[attr]
if(res !==undefined){if(typeof res=="function"){var f=function(){
return res.apply(obj,arguments)}
f.$infos={__name__:attr,__qualname__:attr}
return f}else{return $B.$JS2Py(res)}}
if(_default !==undefined){return _default}
throw _b_.AttributeError.$factory('object has no attribute '+rawname)}}}
switch(attr){case '__call__':
if(typeof obj=='function'){var res=function(){return obj.apply(null,arguments)}
res.__class__=method_wrapper
res.$infos={__name__:"__call__"}
return res}
break
case '__class__':
return klass
case '__dict__':
if(is_class){return $B.mappingproxy.$factory(obj)}else{if(obj.hasOwnProperty(attr)){return obj[attr]}else if(obj.$infos){if(obj.$infos.hasOwnProperty("__dict__")){return obj.$infos.__dict__}else if(obj.$infos.hasOwnProperty("__func__")){return obj.$infos.__func__.$infos.__dict__}}
return $B.obj_dict(obj)}
case '__doc__':
for(var i=0;i < builtin_names.length;i++){if(obj===_b_[builtin_names[i]]){_get_builtins_doc()
return $B.builtins_doc[builtin_names[i]]}}
break
case '__mro__':
if(obj.$is_class){
return _b_.tuple.$factory([obj].concat(obj.__mro__))}
break
case '__subclasses__':
if(klass.$factory ||klass.$is_class){var subclasses=obj.$subclasses ||[]
return function(){return subclasses}}
break
case '$$new':
if(klass===$B.JSObject && obj.js_func !==undefined){return $B.JSConstructor.$factory(obj)}
break}
if(typeof obj=='function'){var value=obj[attr]
if(value !==undefined){if(attr=='__module__'){return value}}}
if(klass.$native){if($test){console.log("native class",klass)}
if(klass[attr]===undefined){var object_attr=_b_.object[attr]
if(object_attr !==undefined){klass[attr]=object_attr}
else{if(obj[attr]!==undefined){return obj[attr]}
if(_default===undefined){attr_error(attr,klass.$infos.__name__)}
return _default}}
if(klass.$descriptors && klass.$descriptors[attr]!==undefined){return klass[attr](obj)}
if(typeof klass[attr]=='function'){var func=klass[attr]
if(attr=='__new__'){func.$type="staticmethod"}
if(func.$type=="staticmethod"){return func}
var self=klass[attr].__class__==$B.method ? klass :obj
function method(){var args=[self]
for(var i=0,len=arguments.length;i < len;i++){args.push(arguments[i])}
return klass[attr].apply(null,args)}
method.__class__=$B.method
method.$infos={__func__:func,__name__:attr,__self__:self,__qualname__:klass.$infos.__name__+"."+attr}
return method}
attr_error(rawname,klass.$infos.__name__)
return klass[attr]}
var mro,attr_func
if(is_class){attr_func=_b_.type.__getattribute__ }else{attr_func=klass.__getattribute__
if(attr_func===undefined){var mro=klass.__mro__
if(mro===undefined){console.log(obj,attr,"no mro, klass",klass)}
for(var i=0,len=mro.length;i < len;i++){attr_func=mro[i]['__getattribute__']
if(attr_func !==undefined){break}}}}
if(typeof attr_func !=='function'){console.log(attr+' is not a function '+attr_func,klass)}
if($test){console.log("attr_func is odga",attr_func===odga,obj[attr])}
if(attr_func===odga){var res=obj[attr]
if(res===null){return null}
else if(res===undefined && obj.hasOwnProperty(attr)){return res}else if(res !==undefined){if(res.__set__===undefined ||res.$is_class){if($test){console.log("return",res,res+'',res.__set__,res.$is_class)}
return res}}}
try{var res=attr_func(obj,attr)
if($test){console.log("result of attr_func",res)}}catch(err){if(_default !==undefined){return _default}
throw err}
if(res !==undefined){return res}
if(_default !==undefined){return _default}
var cname=klass.$infos.__name__
if(is_class){cname=obj.$infos.__name__}
attr_error(rawname,cname)}
function globals(){
check_nb_args('globals',0,arguments)
return $B.obj_dict($B.last($B.frames_stack)[3])}
function hasattr(obj,attr){check_no_kw('hasattr',obj,attr)
check_nb_args('hasattr',2,arguments)
try{$B.$getattr(obj,attr);return true}
catch(err){return false}}
var hash_cache={}
function hash(obj){check_no_kw('hash',obj)
check_nb_args('hash',1,arguments)
if(obj.__hashvalue__ !==undefined){return obj.__hashvalue__}
if(isinstance(obj,_b_.bool)){return _b_.int.$factory(obj)}
if(isinstance(obj,_b_.int)){return obj.valueOf()}
if(obj.$is_class ||
obj.__class__===_b_.type ||
obj.__class__===$B.Function){return obj.__hashvalue__=$B.$py_next_hash--}
if(typeof obj=="string"){var cached=hash_cache[obj]
if(cached !==undefined){return cached}
else{return hash_cache[obj]=_b_.str.__hash__(obj)}}
var hashfunc=$B.$getattr(obj,'__hash__',_b_.None)
if(hashfunc==_b_.None){throw _b_.TypeError.$factory("unhashable type: '"+
$B.class_name(obj)+"'",'hash')}
if(hashfunc.$infos===undefined){return obj.__hashvalue__=hashfunc()}
if(hashfunc.$infos.__func__===_b_.object.__hash__){if($B.$getattr(obj,'__eq__').$infos.__func__ !==_b_.object.__eq__){throw _b_.TypeError.$factory("unhashable type: '"+
$B.class_name(obj)+"'",'hash')}else{return _b_.object.__hash__(obj)}}else{return hashfunc()}}
function _get_builtins_doc(){if($B.builtins_doc===undefined){
var url=$B.brython_path
if(url.charAt(url.length-1)=='/'){url=url.substr(0,url.length-1)}
url+='/builtins_docstrings.js'
var f=_b_.open(url)
eval(f.$content)
$B.builtins_doc=docs}}
function help(obj){if(obj===undefined){obj='help'}
if(typeof obj=='string' && _b_[obj]!==undefined){_get_builtins_doc()
var _doc=$B.builtins_doc[obj]
if(_doc !==undefined && _doc !=''){_b_.print(_doc)
return}}
for(var i=0;i < builtin_names.length;i++){if(obj===_b_[builtin_names[i]]){_get_builtins_doc()
_b_.print(_doc=$B.builtins_doc[builtin_names[i]])}}
if(typeof obj=='string'){$B.$import("pydoc");
var pydoc=$B.imported["pydoc"]
$B.$getattr($B.$getattr(pydoc,"help"),"__call__")(obj)
return}
try{return $B.$getattr(obj,'__doc__')}
catch(err){return ''}}
help.__repr__=help.__str__=function(){return "Type help() for interactive help, or help(object) "+
"for help about object."}
function hex(x){check_no_kw('hex',x)
check_nb_args('hex',1,arguments)
return $builtin_base_convert_helper(x,16)}
function id(obj){check_no_kw('id',obj)
check_nb_args('id',1,arguments)
if(isinstance(obj,[_b_.str,_b_.int,_b_.float])&&
!isinstance(obj,$B.long_int)){return $B.$getattr(_b_.str.$factory(obj),'__hash__')()}else if(obj.$id !==undefined){return obj.$id}
else{return obj.$id=$B.UUID()}}
function __import__(mod_name,globals,locals,fromlist,level){
var $=$B.args('__import__',5,{name:null,globals:null,locals:null,fromlist:null,level:null},['name','globals','locals','fromlist','level'],arguments,{globals:None,locals:None,fromlist:_b_.tuple.$factory(),level:0},null,null)
return $B.$__import__($.name,$.globals,$.locals,$.fromlist)}
function input(msg){var stdin=($B.imported.sys && $B.imported.sys.stdin ||$B.stdin);
if(stdin.__original__){return prompt(msg ||'')||''}
msg=msg ||""
if(msg){$B.stdout.write(msg)}
stdin.msg=msg
var val=$B.$getattr(stdin,'readline')()
val=val.split('\n')[0]
if(stdin.len===stdin.pos){$B.$getattr(stdin,'close')()}
return val}
function isinstance(obj,cls){check_no_kw('isinstance',obj,cls)
check_nb_args('isinstance',2,arguments)
if(obj===null){return cls===None}
if(obj===undefined){return false}
if(cls.constructor===Array){for(var i=0;i < cls.length;i++){if(isinstance(obj,cls[i])){return true}}
return false}
if(cls===_b_.int &&(obj===True ||obj===False)){return True}
if(cls===_b_.bool){switch(typeof obj){case "string":
return false
case "number":
return false
case "boolean":
return true}}
var klass=obj.__class__
if(klass==undefined){if(typeof obj=='string'){if(cls==_b_.str){return true}
else if($B.builtin_classes.indexOf(cls)>-1){return false}}else if(obj.contructor===Number && Number.isFinite(obj)){if(cls==_b_.float){return true}
else if($B.builtin_classes.indexOf(cls)>-1){return false}}else if(typeof obj=='number' && Number.isFinite(obj)){if(Number.isFinite(obj)&& cls==_b_.int){return true}
else if($B.builtin_classes.indexOf(cls)>-1){return false}}
klass=$B.get_class(obj)}
if(klass===undefined){return false}
function check(kl,cls){if(kl===cls){return true}
else if(cls===_b_.str && kl===$B.StringSubclass){return true}
else if(cls===_b_.float && kl===$B.FloatSubclass){return true}
else if(cls===_b_.int && kl===$B.IntSubclass){return true}}
if(check(klass,cls)){return true}
var mro=klass.__mro__
for(var i=0;i < mro.length;i++){if(check(mro[i],cls)){return true}}
var instancecheck=$B.$getattr(cls.__class__ ||$B.get_class(cls),'__instancecheck__',_b_.None)
if(instancecheck !==_b_.None){return instancecheck(cls,obj)}
return false}
function issubclass(klass,classinfo){check_no_kw('issubclass',klass,classinfo)
check_nb_args('issubclass',2,arguments)
if(!klass.__class__ ||
!(klass.$factory !==undefined ||klass.$is_class !==undefined)){throw _b_.TypeError.$factory("issubclass() arg 1 must be a class")}
if(isinstance(classinfo,_b_.tuple)){for(var i=0;i < classinfo.length;i++){if(issubclass(klass,classinfo[i])){return true}}
return false}
if(classinfo.$factory ||classinfo.$is_class){if(klass===classinfo ||
klass.__mro__.indexOf(classinfo)>-1){return true}}
var sch=$B.$getattr(classinfo,'__subclasscheck__',_b_.None)
if(sch==_b_.None){return false}
return sch(klass)}
var iterator_class=$B.make_class("iterator",function(getitem,len){return{
__class__:iterator_class,getitem:getitem,len:len,counter:-1}}
)
iterator_class.__next__=function(self){self.counter++
if(self.len !==null && self.counter==self.len){throw _b_.StopIteration.$factory('')}
try{return self.getitem(self.counter)}
catch(err){throw _b_.StopIteration.$factory('')}}
callable_iterator=$B.make_class("callable_iterator",function(func,sentinel){return{
__class__:callable_iterator,func:func,sentinel:sentinel}}
)
callable_iterator.__iter__=function(self){return self}
callable_iterator.__next__=function(self){var res=self.func()
if($B.rich_comp("__eq__",res,self.sentinel)){throw _b_.StopIteration.$factory()}
return res}
$B.$iter=function(obj,sentinel){
if(sentinel===undefined){try{var _iter=$B.$getattr(obj,'__iter__')
_iter=$B.$call(_iter)}catch(err){var gi=$B.$getattr(obj,'__getitem__',-1),ln=$B.$getattr(obj,'__len__',-1)
if(gi !==-1){if(ln !==-1){var len=$B.$getattr(ln,'__call__')()
return iterator_class.$factory(gi,len)}else{return iterator_class.$factory(gi,null)}}
throw _b_.TypeError.$factory("'"+$B.class_name(obj)+
"' object is not iterable")}
var res=$B.$call(_iter)()
try{$B.$getattr(res,'__next__')}
catch(err){if(isinstance(err,_b_.AttributeError)){throw _b_.TypeError.$factory(
"iter() returned non-iterator of type '"+
$B.class_name(res)+"'")}}
return res}else{console.log("iter with sentinel")
return callable_iterator.$factory(obj,sentinel)}}
function iter(){
var $=$B.args('iter',1,{obj:null},['obj'],arguments,{},'args','kw'),sentinel
if($.args.length > 0){var sentinel=$.args[0]}
return $B.$iter($.obj,sentinel)}
function len(obj){check_no_kw('len',obj)
check_nb_args('len',1,arguments)
try{return $B.$getattr(obj,'__len__')()}
catch(err){throw _b_.TypeError.$factory("object of type '"+
$B.class_name(obj)+"' has no len()")}}
function locals(){
check_nb_args('locals',0,arguments)
return $B.obj_dict($B.last($B.frames_stack)[1])}
var map=$B.make_class("map",function(){var $=$B.args('map',2,{func:null,it1:null},['func','it1'],arguments,{},'args',null),func=$B.$call($.func)
var iter_args=[$B.$iter($.it1)]
$.args.forEach(function(item){iter_args.push($B.$iter(item))})
var obj={__class__:map,args:iter_args,func:func}
return obj}
)
map.__iter__=function(self){return self}
map.__next__=function(self){var args=[]
for(var i=0;i < self.args.length;i++){args.push(next(self.args[i]))}
return self.func.apply(null,args)}
$B.set_func_names(map,"builtins")
function $extreme(args,op){
var $op_name='min'
if(op==='__gt__'){$op_name="max"}
if(args.length==0){throw _b_.TypeError.$factory($op_name+
" expected 1 arguments, got 0")}
var last_arg=args[args.length-1],nb_args=args.length,has_default=false,func=false
if(last_arg.$nat=='kw'){nb_args--
last_arg=last_arg.kw
for(var attr in last_arg){switch(attr){case 'key':
func=last_arg[attr]
break
case '$$default':
var default_value=last_arg[attr]
has_default=true
break
default:
throw _b_.TypeError.$factory("'"+attr+
"' is an invalid keyword argument for this function")}}}
if(!func){func=function(x){return x}}
if(nb_args==0){throw _b_.TypeError.$factory($op_name+" expected 1 argument, got 0")}else if(nb_args==1){
var $iter=iter(args[0]),res=null
while(true){try{var x=next($iter)
if(res===null ||$B.$bool($B.$getattr(func(x),op)(func(res)))){res=x}}catch(err){if(err.__class__==_b_.StopIteration){if(res===null){if(has_default){return default_value}
else{throw _b_.ValueError.$factory($op_name+
"() arg is an empty sequence")}}else{return res}}
throw err}}}else{if(has_default){throw _b_.TypeError.$factory("Cannot specify a default for "+
$op_name+"() with multiple positional arguments")}
var res=null
for(var i=0;i < nb_args;i++){var x=args[i]
if(res===null ||$B.$bool($B.$getattr(func(x),op)(func(res)))){res=x}}
return res}}
function max(){return $extreme(arguments,'__gt__')}
var memoryview=$B.make_class('memoryview',function(obj){check_no_kw('memoryview',obj)
check_nb_args('memoryview',1,arguments)
if(obj.__class__===memoryview){return obj}
if($B.get_class(obj).$buffer_protocol){return{
__class__:memoryview,obj:obj,
format:'B',itemsize:1,ndim:1,shape:_b_.tuple.$factory([_b_.len(obj)]),strides:_b_.tuple.$factory([1]),suboffsets:_b_.tuple.$factory([]),c_contiguous:true,f_contiguous:true,contiguous:true}}else{throw _b_.TypeError.$factory("memoryview: a bytes-like object "+
"is required, not '"+$B.class_name(obj)+"'")}}
)
memoryview.__eq__=function(self,other){if(other.__class__ !==memoryview){return false}
return $B.$getattr(self.obj,'__eq__')(other.obj)}
memoryview.__getitem__=function(self,key){if(isinstance(key,_b_.int)){var start=key*self.itemsize
if(self.format=="I"){var res=self.obj.source[start],coef=256
for(var i=1;i < 4;i++){res+=self.obj.source[start+i]*coef
coef*=256}
return res}else if("B".indexOf(self.format)>-1){return self.obj.source[key]}else{
return self.obj.source[key]}}
var res=self.obj.__class__.__getitem__(self.obj,key)
if(key.__class__===_b_.slice){return memoryview.$factory(res)}}
memoryview.__len__=function(self){return len(self.obj)/self.itemsize}
memoryview.cast=function(self,format){switch(format){case "B":
return memoryview.$factory(self.obj)
case "I":
var res=memoryview.$factory(self.obj),objlen=len(self.obj)
res.itemsize=4
res.format="I"
if(objlen % 4 !=0){throw _b_.TypeError.$factory("memoryview: length is not "+
"a multiple of itemsize")}
return res}}
memoryview.hex=function(self){var res='',bytes=_b_.bytes.$factory(self)
bytes.source.forEach(function(item){res+=item.toString(16)})
return res}
memoryview.tobytes=function(self){return _b_.bytes.$factory(self.obj)}
memoryview.tolist=function(self){if(self.itemsize==1){return _b_.list.$factory(_b_.bytes.$factory(self.obj))}else if(self.itemsize==4){if(self.format=="I"){var res=[]
for(var i=0;i < self.obj.source.length;i+=4){var item=self.obj.source[i],coef=256
for(var j=1;j < 4;j++){item+=coef*self.obj.source[i+j]
coef*=256}
res.push(item)}
return res}}}
$B.set_func_names(memoryview,"builtins")
function min(){return $extreme(arguments,'__lt__')}
function next(obj){check_no_kw('next',obj)
check_nb_args('next',1,arguments)
var ga=$B.$getattr(obj,'__next__')
if(ga !==undefined){return $B.$call(ga)()}
throw _b_.TypeError.$factory("'"+$B.class_name(obj)+
"' object is not an iterator")}
var NotImplementedType=$B.make_class("NotImplementedType",function(){return NotImplemented}
)
NotImplementedType.__repr__=NotImplementedType.__str__=function(self){return "NotImplemented"}
var NotImplemented={__class__:NotImplementedType}
function $not(obj){return !$B.$bool(obj)}
function oct(x){return $builtin_base_convert_helper(x,8)}
function ord(c){check_no_kw('ord',c)
check_nb_args('ord',1,arguments)
if(typeof c=='string'){if(c.length==1){return c.charCodeAt(0)}
throw _b_.TypeError.$factory('ord() expected a character, but '+
'string of length '+c.length+' found')}
switch($B.get_class(c)){case _b_.str:
if(c.length==1){return c.charCodeAt(0)}
throw _b_.TypeError.$factory('ord() expected a character, but '+
'string of length '+c.length+' found')
case _b_.bytes:
case _b_.bytearray:
if(c.source.length==1){return c.source[0]}
throw _b_.TypeError.$factory('ord() expected a character, but '+
'string of length '+c.source.length+' found')
default:
throw _b_.TypeError.$factory('ord() expected a character, but '+
$B.class_name(c)+' was found')}}
function pow(){var $ns=$B.args('pow',3,{x:null,y:null,z:null},['x','y','z'],arguments,{z:null},null,null)
var x=$ns['x'],y=$ns['y'],z=$ns['z']
var res=$B.$getattr(x,'__pow__')(y,z)
if(z===null){return res}
else{if(x !=_b_.int.$factory(x)||y !=_b_.int.$factory(y)){throw _b_.TypeError.$factory("pow() 3rd argument not allowed "+
"unless all arguments are integers")}
return $B.$getattr(res,'__mod__')(z)}}
function $print(){var $ns=$B.args('print',0,{},[],arguments,{},'args','kw')
var ks=$ns['kw'].$string_dict
var end=(ks['end']===undefined ||ks['end']===None)? '\n' :ks['end'],sep=(ks['sep']===undefined ||ks['sep']===None)? ' ' :ks['sep'],file=ks['file']===undefined ? $B.stdout :ks['file'],args=$ns['args']
var items=[]
args.forEach(function(arg){items.push(_b_.str.$factory(arg))})
var res=items.join(sep)+end
res=res.replace(new RegExp("\u0007","g"),"").
replace(new RegExp("(.)\b","g"),"")
$B.$getattr(file,'write')(res)
var flush=$B.$getattr(file,'flush',None)
if(flush !==None){flush()}
return None}
$print.__name__='print'
$print.is_func=true
var property=$B.make_class("property")
property.__init__=function(self,fget,fset,fdel,doc){self.__doc__=doc ||""
self.$type=fget.$type
self.fget=fget
self.fset=fset
self.fdel=fdel
if(fget && fget.$attrs){for(var key in fget.$attrs){self[key]=fget.$attrs[key]}}
self.__get__=function(self,obj,objtype){if(obj===undefined){return self}
if(self.fget===undefined){throw _b_.AttributeError.$factory("unreadable attribute")}
return $B.$call(self.fget)(obj)}
if(fset !==undefined){self.__set__=function(self,obj,value){if(self.fset===undefined){throw _b_.AttributeError.$factory("can't set attribute")}
$B.$getattr(self.fset,'__call__')(obj,value)}}
self.__delete__=fdel;
self.getter=function(fget){return property.$factory(fget,self.fset,self.fdel,self.__doc__)}
self.setter=function(fset){return property.$factory(self.fget,fset,self.fdel,self.__doc__)}
self.deleter=function(fdel){return property.$factory(self.fget,self.fset,fdel,self.__doc__)}}
$B.set_func_names(property,"builtins")
function quit(){throw _b_.SystemExit}
quit.__repr__=quit.__str__=function(){return "Use quit() or Ctrl-Z plus Return to exit"}
function repr(obj){check_no_kw('repr',obj)
check_nb_args('repr',1,arguments)
if(obj.$is_class ||obj.$factory){
var func=_b_.type.__getattribute__(obj.__class__,'__repr__')
return func(obj)}
var func=$B.$getattr(obj,'__repr__')
if(func !==undefined){return $B.$call(func)()}
throw _b_.AttributeError.$factory("object has no attribute __repr__")}
var reversed=$B.make_class("reversed",function(seq){
check_no_kw('reversed',seq)
check_nb_args('reversed',1,arguments)
var rev_method=$B.$getattr(seq,'__reversed__',null)
if(rev_method !==null){
return rev_method()}
try{var res={__class__:reversed,$counter :$B.$getattr(seq,'__len__')(),getter:$B.$getattr(seq,'__getitem__')}
return res}catch(err){throw _b_.TypeError.$factory("argument to reversed() must be a sequence")}}
)
reversed.__iter__=function(self){return self}
reversed.__next__=function(self){self.$counter--
if(self.$counter < 0){throw _b_.StopIteration.$factory('')}
return self.getter(self.$counter)}
$B.set_func_names(reversed,"builtins")
function round(arg,n){var $=$B.args('round',2,{number:null,ndigits:null},['number','ndigits'],arguments,{ndigits:None},null,null),arg=$.number,n=$.ndigits
if(!isinstance(arg,[_b_.int,_b_.float])){if(!hasattr(arg,'__round__'))
throw _b_.TypeError.$factory("type "+arg.__class__+
" doesn't define __round__ method")
if(n===undefined){return $B.$getattr(arg,'__round__')()}
else{return $B.$getattr(arg,'__round__')(n)}}
if(isinstance(arg,_b_.float)&&
(arg.value===Infinity ||arg.value===-Infinity)){throw _b_.OverflowError.$factory("cannot convert float infinity to integer")}
if(n===None){var floor=Math.floor(arg)
var diff=Math.abs(arg-floor)
if(diff==0.5){if(floor % 2){return Math.round(arg)}else{return Math.floor(arg)}}else{return _b_.int.$factory(Math.round(arg))}}
if(!isinstance(n,_b_.int)){throw _b_.TypeError.$factory(
"'"+n.__class__+"' object cannot be interpreted as an integer")}
var mult=Math.pow(10,n)
if(isinstance(arg,_b_.float)){return _b_.float.$factory(_b_.int.__truediv__(
Number(Math.round(arg.valueOf()*mult)),mult))}else{return _b_.int.$factory(_b_.int.__truediv__(
Number(Math.round(arg.valueOf()*mult)),mult))}}
function setattr(){var $=$B.args('setattr',3,{obj:null,attr:null,value:null},['obj','attr','value'],arguments,{},null,null),obj=$.obj,attr=$.attr,value=$.value
if(!(typeof attr=='string')){throw _b_.TypeError.$factory("setattr(): attribute name must be string")}
return $B.$setattr(obj,attr,value)}
$B.$setattr=function(obj,attr,value){
var $test=false
if($B.aliased_names[attr]){attr='$$'+attr}else if(attr=='__dict__'){
if(! isinstance(value,_b_.dict)){throw _b_.TypeError.$factory("__dict__ must be set to a dictionary, "+
"not a '"+$B.class_name(value)+"'")}
if(obj.$infos){obj.$infos.__dict__=value
return None}
obj.__dict__=value
return None}else if(attr=="__class__"){
function error(msg){throw _b_.TypeError.$factory(msg)}
if(value.__class__){if(value.__module__=="builtins"){error("__class__ assignement only "+
"supported for heap types or ModuleType subclasses")}else if(Array.isArray(value.__bases__)){for(var i=0;i < value.__bases__.length;i++){if(value.__bases__[i].__module__=="builtins"){error("__class__ assignment: '"+
obj.__class__.$infos.__name__+"' object layout "+
"differs from '"+value.__class__.$infos.__name__+
"'")}}}}
obj.__class__=value
return None}
if($test){console.log("set attr",attr,"to",obj)}
if(obj.$factory ||obj.$is_class){var metaclass=obj.__class__
if($test){console.log("obj is class",metaclass,metaclass[attr])}
if(metaclass && metaclass[attr]&& metaclass[attr].__get__ &&
metaclass[attr].__set__){console.log("use data descriptor")
metaclass[attr].__set__(obj,value)
return None}
obj[attr]=value
if(attr=="__init__" ||attr=="__new__"){
obj.$factory=$B.$instance_creator(obj)}
return None}
var res=obj[attr],klass=obj.__class__ ||$B.get_class(obj)
if($test){console.log('set attr',attr,'to',obj,obj[attr],'class',klass)}
if(res===undefined && klass){res=klass[attr]
if(res===undefined){var mro=klass.__mro__,_len=mro.length
for(var i=0;i < _len;i++){res=mro[i][attr]
if(res !==undefined){break}}}}
if($test){console.log('set attr',attr,'found in class',res)}
if(res !==undefined){
if(res.__set__ !==undefined){res.__set__(res,obj,value);return None}
var rcls=res.__class__,__set1__
if(rcls !==undefined){var __set1__=rcls.__set__
if(__set1__===undefined){var mro=rcls.__mro__
for(var i=0,_len=mro.length;i < _len;i++){__set1__=mro[i].__set__
if(__set1__){break}}}}
if(__set1__ !==undefined){var __set__=$B.$getattr(res,'__set__',null)
if(__set__ &&(typeof __set__=='function')){__set__.apply(res,[obj,value])
return None}}else if(klass && klass.$descriptors !==undefined &&
klass[attr]!==undefined){var setter=klass[attr].setter
if(typeof setter=='function'){setter(obj,value)
return None}else{throw _b_.AttributeError.$factory('readonly attribute')}}}
var _setattr=false
if(klass !==undefined){_setattr=klass.__setattr__
if(_setattr===undefined){var mro=klass.__mro__
for(var i=0,_len=mro.length-1;i < _len;i++){_setattr=mro[i].__setattr__
if(_setattr){break}}}}
var special_attrs=["__module__"]
if(klass && klass.__slots__ && special_attrs.indexOf(attr)==-1 &&
! _setattr){var has_slot=false
if(klass.__slots__.indexOf(attr)>-1){has_slot=true}else{for(var i=0;i < klass.__mro__.length;i++){var kl=klass.__mro__[i]
if(kl.__slots__ && kl.__slots__.indexOf(attr)>-1){has_slot=true
break}}}
if(! has_slot){throw _b_.AttributeError.$factory("'"+klass.$infos.__name__+
"' object has no attribute '"+attr+"'")}}
if($test){console.log("attr",attr,"use _setattr",_setattr)}
if(!_setattr){if(obj.__dict__===undefined){obj[attr]=value}else{obj.__dict__.$string_dict[attr]=value}}else{_setattr(obj,attr,value)}
return None}
function sorted(){var $=$B.args('sorted',1,{iterable:null},['iterable'],arguments,{},null,'kw')
var _list=_b_.list.$factory(iter($.iterable)),args=[_list]
for(var i=1;i < arguments.length;i++){args.push(arguments[i])}
_b_.list.sort.apply(null,args)
return _list}
var staticmethod=$B.make_class("staticmethod",function(func){var f={$infos:func.$infos,__get__:function(){return func}}
f.__get__.__class__=$B.method_wrapper
f.__get__.$infos=func.$infos
return f}
)
$B.set_func_names(staticmethod,"builtins")
function sum(iterable,start){var $=$B.args('sum',2,{iterable:null,start:null},['iterable','start'],arguments,{start:0},null,null),iterable=$.iterable,start=$.start
if(start===undefined){start=0}else{if(typeof start==='str'){throw _b_.TypeError.$factory("TypeError: sum() can't sum strings"+
" [use ''.join(seq) instead]")}
if(_b_.isinstance(start,_b_.bytes)){throw _b_.TypeError.$factory("TypeError: sum() can't sum bytes"+
" [use b''.join(seq) instead]")}}
var res=start,iterable=iter(iterable)
while(1){try{var _item=next(iterable)
res=$B.$getattr(res,'__add__')(_item)}catch(err){if(err.__class__===_b_.StopIteration){break}else{throw err}}}
return res}
$B.missing_super2=function(obj){obj.$missing=true
return obj}
var $$super=$B.make_class("super",function(_type1,_type2){var missing2=false
if(Array.isArray(_type2)){_type2=_type2[0]
missing2=true}
return{__class__:$$super,__thisclass__:_type1,__self_class__:_type2,$missing2:missing2}}
)
$$super.__getattribute__=function(self,attr){var mro=self.__thisclass__.__mro__,res
var sc=self.__self_class__
if(sc !==undefined){if(!sc.$is_class){sc=sc.__class__}
var sc_mro=[sc].concat(sc.__mro__)
for(var i=0;i < sc_mro.length;i++){if(sc_mro[i]===self.__thisclass__){mro=sc_mro.slice(i+1)
break}}}
if(attr=="__repr__" ||attr=="__str__"){
return function(){return $$super.__repr__(self)}}
var f=_b_.type.__getattribute__(mro[0],attr)
var $test=false
if($test){console.log("super",attr,self,f)}
if(f.$type=="staticmethod"){return f}
else{if(f.__class__===$B.method){
f=f.$infos.__func__}
var callable=$B.$call(f)
var method=function(){var res=callable(self.__self_class__,...arguments)
if($test){console.log("calling super",self.__self_class__,attr,f,"res",res)}
return res}
method.__class__=$B.method
var module
if(f.$infos !==undefined){module=f.$infos.__module__}else if(f.__class__===property){module=f.fget.$infos.__module}else if(f.$is_class){module=f.__module__}
method.$infos={__self__:self.__self_class__,__func__:f,__name__:attr,__module__:module,__qualname__:self.__thisclass__.$infos.__name__+"."+attr}
return method}
throw _b_.AttributeError.$factory("object 'super' has no attribute '"+
attr+"'")}
$$super.__repr__=$$super.__str__=function(self){var res="<super: <class '"+self.__thisclass__.$infos.__name__+"'>"
if(self.__self_class__ !==undefined){res+=', <'+self.__self_class__.__class__.$infos.__name__+' object>'}else{res+=', NULL'}
return res+'>'}
$B.set_func_names($$super,"builtins")
function vars(){var def={},$=$B.args('vars',1,{obj:null},['obj'],arguments,{obj:def},null,null)
if($.obj===def){return _b_.locals()}else{try{return $B.$getattr($.obj,'__dict__')}
catch(err){if(err.__class__===_b_.AttributeError){throw _b_.TypeError.$factory("vars() argument must have __dict__ attribute")}
throw err}}}
var $Reader={__class__:_b_.type,$infos:{__name__:'reader'}}
$Reader.__enter__=function(self){return self}
$Reader.__exit__=function(self){return false}
$Reader.__iter__=function(self){return iter(self.$lines)}
$Reader.__len__=function(self){return self.lines.length}
$Reader.__mro__=[object]
$Reader.close=function(self){self.closed=true}
$Reader.flush=function(self){return None}
$Reader.read=function(self,nb){if(self.closed===true){throw _b_.ValueError.$factory('I/O operation on closed file')}
if(nb===undefined){return self.$content}
if(self.$content.__class__===_b_.bytes){res=_b_.bytes.$factory(self.$content.source.slice(self.$counter,self.$counter+nb))}else{res=self.$content.substr(self.$counter-nb,nb)}
self.$counter+=nb
return res}
$Reader.readable=function(self){return true}
$Reader.readline=function(self,limit){
self.$lc=self.$lc===undefined ?-1 :self.$lc
if(self.closed===true){throw _b_.ValueError.$factory('I/O operation on closed file')}
if(self.$lc==self.$lines.length-1){return self.$bin ? _b_.bytes.$factory():''}
self.$lc++
var res=self.$lines[self.$lc]
self.$counter+=(self.$bin ? res.source.length :res.length)
return res}
$Reader.readlines=function(self,hint){if(self.closed===true){throw _b_.ValueError.$factory('I/O operation on closed file')}
self.$lc=self.$lc===undefined ?-1 :self.$lc
return self.$lines.slice(self.$lc+1)}
$Reader.seek=function(self,offset,whence){if(self.closed===True){throw _b_.ValueError.$factory('I/O operation on closed file')}
if(whence===undefined){whence=0}
if(whence===0){self.$counter=offset}
else if(whence===1){self.$counter+=offset}
else if(whence===2){self.$counter=self.$content.length+offset}}
$Reader.seekable=function(self){return true}
$Reader.tell=function(self){return self.$counter}
$Reader.writable=function(self){return false}
var $BufferedReader=$B.make_class('_io.BuffredReader')
$BufferedReader.__mro__=[$Reader,object]
var $TextIOWrapper=$B.make_class('_io.TextIOWrapper')
$TextIOWrapper.__mro__=[$Reader,object]
$B.set_func_names($TextIOWrapper,"builtins")
$B.TextIOWrapper=$TextIOWrapper
function $url_open(){
var $ns=$B.args('open',3,{file:null,mode:null,encoding:null},['file','mode','encoding'],arguments,{mode:'r',encoding:'utf-8'},'args','kw'),$res
for(var attr in $ns){eval('var '+attr+'=$ns["'+attr+'"]')}
if(args.length > 0){var mode=args[0]}
if(args.length > 1){var encoding=args[1]}
if(isinstance(file,$B.JSObject)){return $B.OpenFile.$factory(file.js,mode,encoding)}
if(isinstance(file,_b_.str)){
var is_binary=mode.search('b')>-1
if($ns.file=="<string>"){console.log($ns.file,$B.file_cache[$ns.file])}
if($B.file_cache.hasOwnProperty($ns.file)){var str_content=$B.file_cache[$ns.file]
if(is_binary){$res=_b_.str.encode(str_content,"utf-8")}else{$res=str_content}}else{if(is_binary){throw _b_.IOError.$factory("open() in binary mode is not supported")}
var req=new XMLHttpRequest();
req.onreadystatechange=function(){try{var status=this.status
if(status==404){$res=_b_.IOError.$factory('File '+file+' not found')}else if(status !=200){$res=_b_.IOError.$factory('Could not open file '+
file+' : status '+status)}else{$res=this.responseText}}catch(err){$res=_b_.IOError.$factory('Could not open file '+file+
' : error '+err)}}
var fake_qs='?foo='+(new Date().getTime())
req.open('GET',file+fake_qs,false)
req.overrideMimeType('text/plain; charset=utf-8')
req.send()
if($res.constructor===Error){throw $res}}
if(typeof $res=="string"){var lines=$res.split('\n')
for(var i=0;i < lines.length-1;i++){lines[i]+='\n'}}else{var lines=_b_.bytes.split($res,_b_.bytes.$factory([10]))}
var res={$content:$res,$counter:0,$lines:lines,closed:False,encoding:encoding,mode:mode,name:file}
res.__class__=is_binary ? $BufferedReader :$TextIOWrapper
return res}}
var zip=$B.make_class("zip",function(){var res={__class__:zip,items:[]}
if(arguments.length==0)return res
var $ns=$B.args('zip',0,{},[],arguments,{},'args','kw')
var _args=$ns['args']
var args=[]
for(var i=0;i < _args.length;i++){args.push(iter(_args[i]))}
var rank=0,items=[]
while(1){var line=[],flag=true
for(var i=0;i < args.length;i++){try{line.push(next(args[i]))}catch(err){if(err.__class__==_b_.StopIteration){flag=false
break}else{throw err}}}
if(!flag){break}
items[rank++]=_b_.tuple.$factory(line)}
res.items=items
return res}
)
var $zip_iterator=$B.$iterator_class('zip_iterator')
zip.__iter__=function(self){
return self.$iterator=self.$iterator ||
$B.$iterator(self.items,$zip_iterator)}
$B.set_func_names(zip,"builtins")
function no_set_attr(klass,attr){if(klass[attr]!==undefined){throw _b_.AttributeError.$factory("'"+klass.$infos.__name__+
"' object attribute '"+attr+"' is read-only")}else{throw _b_.AttributeError.$factory("'"+klass.$infos.__name__+
"' object has no attribute '"+attr+"'")}}
var True=true
var False=false
var ellipsis=$B.make_class("ellipsis",function(){return Ellipsis}
)
var Ellipsis={__class__:ellipsis,__bool__:function(){return True},}
for(var $key in $B.$comps){
switch($B.$comps[$key]){case 'ge':
case 'gt':
case 'le':
case 'lt':
ellipsis['__'+$B.$comps[$key]+'__']=(function(k){return function(other){throw _b_.TypeError.$factory("unorderable types: ellipsis() "+
k+" "+$B.class_name(other))}})($key)}}
for(var $func in Ellipsis){if(typeof Ellipsis[$func]=='function'){Ellipsis[$func].__str__=(function(f){return function(){return "<method-wrapper "+f+
" of Ellipsis object>"}})($func)}}
$B.set_func_names(ellipsis)
var FunctionCode=$B.make_class("function code")
var FunctionGlobals=$B.make_class("function globals")
$B.Function={__class__:_b_.type,__code__:{__class__:FunctionCode,__name__:'function code'},__globals__:{__class__:FunctionGlobals,__name__:'function globals'},__mro__:[object],$infos:{__name__:'function',__module__:"builtins"},$is_class:true}
$B.Function.__delattr__=function(self,attr){if(attr=="__dict__"){throw _b_.TypeError.$factory("can't deleted function __dict__")}}
$B.Function.__dir__=function(self){var infos=self.$infos ||{},attrs=self.$attrs ||{}
return Object.keys(infos).concat(Object.keys(attrs))}
$B.Function.__eq__=function(self,other){return self===other}
$B.Function.__get__=function(self,obj){if(obj===_b_.None){return self}
var method=function(){return self(obj,...arguments)}
method.__class__=$B.method
if(self.$infos===undefined){console.log("no $infos",self)
console.log($B.last($B.frames_stack))}
method.$infos={__name__:self.$infos.__name__,__qualname__:obj.__class__.$infos.__name__+"."+self.$infos.__name__,__self__:obj,__func__:self}
return method}
$B.Function.__getattribute__=function(self,attr){
if(attr=="known_attr"){console.log("get function attr",attr,self)}
if(!self.$infos){console.log("get attr",attr,"from function",self,"no $infos")}
if(self.$infos && self.$infos[attr]!==undefined){if(attr=='__code__'){var res={__class__:code}
for(var attr in self.$infos.__code__){res[attr]=self.$infos.__code__[attr]}
res.name=self.$infos.__name__
res.filename=self.$infos.__code__.co_filename
res.co_code=self+""
return res}else if(attr=='__annotations__'){
return $B.obj_dict(self.$infos[attr])}else if(self.$infos.hasOwnProperty(attr)){return self.$infos[attr]}}else if(self.$infos.__dict__ &&
self.$infos.__dict__.$string_dict[attr]!==undefined){return self.$infos.__dict__.$string_dict[attr]}else if(attr=="__closure__"){var free_vars=self.$infos.__code__.co_freevars
if(free_vars.length==0){return None}
var cells=[]
for(var i=0;i < free_vars.length;i++){try{cells.push($B.cell.$factory($B.$check_def_free(free_vars[i])))}catch(err){
cells.push($B.cell.$factory(null))}}
return _b_.tuple.$factory(cells)}else if(self.$attrs && self.$attrs[attr]!==undefined){return self.$attrs[attr]}else{return _b_.object.__getattribute__(self,attr)}}
$B.Function.__repr__=$B.Function.__str__=function(self){if(self.$infos===undefined){return '<function '+self.name+'>'}else{return '<function '+self.$infos.__qualname__+'>'}}
$B.Function.__mro__=[object]
$B.Function.__setattr__=function(self,attr,value){if(attr=="__closure__"){throw _b_.AttributeError.$factory("readonly attribute")}
if(self.$infos[attr]!==undefined){self.$infos[attr]=value}
else{self.$attrs=self.$attrs ||{};self.$attrs[attr]=value}}
$B.Function.$factory=function(){}
$B.set_func_names($B.Function,"builtins")
_b_.__BRYTHON__=__BRYTHON__
$B.builtin_funcs=["abs","all","any","ascii","bin","callable","chr","compile","delattr","dir","divmod","eval","exec","exit","format","getattr","globals","hasattr","hash","help","hex","id","input","isinstance","issubclass","iter","len","locals","max","min","next","oct","open","ord","pow","print","quit","repr","round","setattr","sorted","sum","vars"
]
var builtin_function=$B.builtin_function=$B.make_class("builtin_function_or_method")
builtin_function.__getattribute__=$B.Function.__getattribute__
builtin_function.__reduce_ex__=builtin_function.__reduce__=function(self){return self.$infos.__name__}
builtin_function.__repr__=builtin_function.__str__=function(self){return '<built-in function '+self.$infos.__name__+'>'}
$B.set_func_names(builtin_function,"builtins")
var method_wrapper=$B.make_class("method_wrapper")
method_wrapper.__repr__=method_wrapper.__str__=function(self){return "<method wrapper '"+self.$infos.__name__+"' of function object>"}
$B.set_func_names(method_wrapper,"builtins")
var wrapper_descriptor=$B.wrapper_descriptor=
$B.make_class("wrapper_descriptor")
wrapper_descriptor.__getattribute__=$B.Function.__getattribute__
wrapper_descriptor.__repr__=wrapper_descriptor.__str__=function(self){return "<slot wrapper '"+self.$infos.__name__+"' of '"+
self.__objclass__.$infos.__name__+"' object>"}
$B.set_func_names(wrapper_descriptor,"builtins")
$B.builtin_classes=["bool","bytearray","bytes","classmethod","complex","dict","enumerate","filter","float","frozenset","int","list","map","memoryview","object","property","range","reversed","set","slice","staticmethod","str","super","tuple","type","zip"
]
var other_builtins=['Ellipsis','False','None','True','__debug__','__import__','copyright','credits','license','NotImplemented'
]
var builtin_names=$B.builtin_funcs.
concat($B.builtin_classes).
concat(other_builtins)
for(var i=0;i < builtin_names.length;i++){var name=builtin_names[i],orig_name=name,name1=name
if(name=='open'){name1='$url_open'}
if(name=='super'){name=name1='$$super'}
if(name=='eval'){name=name1='$$eval'}
if(name=='print'){name1='$print'}
try{_b_[name]=eval(name1)
if($B.builtin_funcs.indexOf(orig_name)>-1){_b_[name].__class__=builtin_function
_b_[name].$infos={__module__:'builtins',__name__:orig_name,__qualname__:orig_name}}}
catch(err){}}
_b_['open']=$url_open
_b_['print']=$print
_b_['$$super']=$$super
_b_.object.__init__.__class__=wrapper_descriptor
_b_.object.__new__.__class__=builtin_function})(__BRYTHON__)
;
;(function($B){var bltns=$B.InjectBuiltins()
eval(bltns)
$B.del_exc=function(){var frame=$B.last($B.frames_stack)
frame[1].$current_exception=undefined}
$B.set_exc=function(exc){var frame=$B.last($B.frames_stack)
frame[1].$current_exception=$B.exception(exc)}
$B.get_exc=function(){var frame=$B.last($B.frames_stack)
return frame[1].$current_exception}
$B.$raise=function(arg){
if(arg===undefined){var es=$B.get_exc()
if(es !==undefined){throw es}
throw _b_.RuntimeError.$factory("No active exception to reraise")}else if(isinstance(arg,BaseException)){throw arg}else if(arg.$is_class && issubclass(arg,BaseException)){throw $B.$call(arg)()}else{throw _b_.TypeError.$factory("exceptions must derive from BaseException")}}
$B.$syntax_err_line=function(exc,module,src,pos,line_num){
var pos2line={},lnum=1,module=module.charAt(0)=="$" ? "<string>" :module
if(src===undefined){exc.$line_info=line_num+','+module
exc.args=_b_.tuple.$factory([$B.$getitem(exc.args,0),module,line_num,0,0])}else{var line_pos={1:0}
for(var i=0,len=src.length;i < len;i++){pos2line[i]=lnum
if(src.charAt(i)=="\n"){line_pos[++lnum]=i}}
while(line_num===undefined){line_num=pos2line[pos]
pos--}
exc.$line_info=line_num+","+module
var lines=src.split("\n"),line=lines[line_num-1],lpos=pos-line_pos[line_num],len=line.length
exc.text=line
lpos-=len-line.length
if(lpos < 0){lpos=0}
line=line.replace(/^\s*/,'')
exc.offset=lpos
exc.args=_b_.tuple.$factory([$B.$getitem(exc.args,0),module,line_num,lpos,line])}
exc.lineno=line_num
exc.msg=exc.args[0]
exc.filename=module}
$B.$SyntaxError=function(module,msg,src,pos,line_num,root){
if(root !==undefined && root.line_info !==undefined){
line_num=root.line_info}
var exc=_b_.SyntaxError.$factory(msg)
$B.$syntax_err_line(exc,module,src,pos,line_num)
throw exc}
$B.$IndentationError=function(module,msg,src,pos,line_num,root){$B.frames_stack.push([module,{$line_info:line_num+","+module},module,{$src:src}])
if(root !==undefined && root.line_info !==undefined){
line_num=root.line_info}
var exc=_b_.IndentationError.$factory(msg)
$B.$syntax_err_line(exc,module,src,pos,line_num)
throw exc}
$B.print_stack=function(){$B.frames_stack.forEach(function(frame){var line_info=frame[1].$line_info
if(line_info !==undefined){var info=line_info.split(",")
console.log(info[1]+" line "+info[0])
var src=$B.file_cache[frame[3].__file__]
if(src){var lines=src.split("\n"),line=lines[parseInt(info[0])-1]
console.log("    "+line.trim())}}})}
var traceback=$B.make_class("traceback",function(exc,stack){if(stack===undefined)
stack=exc.$stack
return{
__class__ :traceback,$stack:stack,exc:exc}}
)
traceback.__getattribute__=function(self,attr){var line_info
if(attr==='tb_frame' ||
attr==='tb_lineno' ||
attr==='tb_lasti' ||
attr==='tb_next'){if(self.$stack.length==0){console.log("no stack",attr)}
var first_frame=self.$stack[0]
if(first_frame===undefined){console.log("last frame undef",self.$stack,Object.keys(self.$stack))}
var line_info=first_frame[1].$line_info}
switch(attr){case "tb_frame":
return frame.$factory(self.$stack)
case "tb_lineno":
if(line_info===undefined ||
first_frame[0].search($B.lambda_magic)>-1){if(first_frame[4]&& first_frame[4].$infos &&
first_frame[4].$infos.__code__){return first_frame[4].$infos.__code__.co_firstlineno}
return-1}
else{return parseInt(line_info.split(",")[0])}
case "tb_lasti":
if(line_info===undefined){return "<unknown>"}
else{var info=line_info.split(",")
var src=$B.$py_src[info[1]]
if(src !==undefined){return src.split("\n")[parseInt(info[0]-1)].trim()}else{return "<unknown>"}}
case "tb_next":
if(self.$stack.length <=1){return None}
else{return traceback.$factory(self.exc,self.$stack.slice(1))}
default:
return _b_.object.__getattribute__(self,attr)}}
$B.set_func_names(traceback,"builtins")
var frame=$B.make_class("frame",function(stack,pos){var fs=stack
var res={__class__:frame,f_builtins :{},
$stack:deep_copy(stack)}
if(pos===undefined){pos=0}
res.$pos=pos
if(fs.length){var _frame=fs[pos],locals_id=_frame[0],filename
try{res.f_locals=$B.obj_dict(_frame[1])}catch(err){console.log("err "+err)
throw err}
res.f_globals=$B.obj_dict(_frame[3])
if(locals_id.startsWith("$exec")){filename="<string>"}
if(_frame[1].$line_info===undefined){res.f_lineno=-1}else{var line_info=_frame[1].$line_info.split(",")
res.f_lineno=parseInt(line_info[0])
var module_name=line_info[1]
if($B.imported.hasOwnProperty(module_name)){filename=$B.imported[module_name].__file__}
res.f_lineno=parseInt(_frame[1].$line_info.split(',')[0])}
var co_name=locals_id
if(locals_id==_frame[2]){co_name="<module>"}else{if(_frame[0].$name){co_name=_frame[0].$name}else if(_frame.length > 4){if(_frame[4].$infos){co_name=_frame[4].$infos.__name__}else{co_name=_frame[4].name}
if(filename===undefined && _frame[4].$infos.__code__){filename=_frame[4].$infos.__code__.co_filename
res.f_lineno=_frame[4].$infos.__code__.co_firstlineno}}}
res.f_code={__class__:$B.code,co_code:None,
co_name:co_name,
co_filename:filename }
if(res.f_code.co_filename===undefined){res.f_code.co_filename="<string>"}}
return res}
)
frame.__getattr__=function(self,attr){
if(attr=="f_back"){if(self.$pos > 0){return frame.$factory(self.$stack.slice(0,self.$stack.length-1))}else{return _b_.None}}else if(attr=="clear"){return function(){}}}
$B.set_func_names(frame,"builtins")
$B._frame=frame
var BaseException=_b_.BaseException={__class__:_b_.type,__bases__ :[_b_.object],__mro__:[_b_.object],args:[],$infos:{__name__:"BaseException",__module__:"builtins"},$is_class:true}
BaseException.__init__=function(self){var args=arguments[1]===undefined ?[]:[arguments[1]]
self.args=_b_.tuple.$factory(args)}
BaseException.__repr__=function(self){return self.__class__.$infos.__name__+repr(self.args)}
BaseException.__str__=function(self){if(self.args.length > 0){return _b_.str.$factory(self.args[0])}
return self.__class__.$infos.__name__}
BaseException.__new__=function(cls){var err=_b_.BaseException.$factory()
err.__class__=cls
err.__dict__=_b_.dict.$factory()
return err}
var getExceptionTrace=function(exc,includeInternal){if(exc.__class__===undefined){if($B.debug > 1){console.log("no class",exc)}
return exc+''}
var info=''
if(exc.$js_exc !==undefined && includeInternal){info+="\nJS stack:\n"+exc.$js_exc.stack+"\n"}
info+="Traceback (most recent call last):"
var line_info=exc.$line_info
for(var i=0;i < exc.$stack.length;i++){var frame=exc.$stack[i]
if(! frame[1]||! frame[1].$line_info){continue}
var $line_info=frame[1].$line_info
var line_info=$line_info.split(','),src
if(exc.module==line_info[1]){src=exc.src}
if(!includeInternal){var src=frame[3].$src
if(src===undefined){if($B.VFS && $B.VFS.hasOwnProperty(frame[2])){src=$B.VFS[frame[2]][1]}else if(src=$B.file_cache[frame[3].__file__]){}else{continue}}}
var module=line_info[1]
if(module.charAt(0)=="$"){module="<module>"}
info+="\n  module "+module+" line "+line_info[0]
if(frame.length > 4 && frame[4].$infos){info+=', in '+frame[4].$infos.__name__}
if(src !==undefined){var lines=src.split("\n");
var line=lines[parseInt(line_info[0])-1]
if(line){line=line.replace(/^[ ]+/g,"")}
info+="\n    "+line}else{console.log("src undef",line_info)}}
if(exc.__class__===_b_.SyntaxError){info+="\n  File "+exc.args[1]+", line "+exc.args[2]+
"\n    "+exc.text}
return info}
BaseException.__getattr__=function(self,attr){if(attr=="info"){return getExceptionTrace(self,false);}else if(attr=="infoWithInternal"){return getExceptionTrace(self,true);}else if(attr=="traceback"){
if(self.$traceback !==undefined){return self.$traceback}
return traceback.$factory(self)}else{throw _b_.AttributeError.$factory(self.__class__.$infos.__name__+
" has no attribute '"+attr+"'")}}
BaseException.with_traceback=function(self,tb){self.traceback=tb
return self}
function deep_copy(stack){var result=stack.slice();
for(var i=0;i < result.length;i++){
result[i]=result[i].slice()
result[i][1]={$line_info:result[i][1].$line_info}}
return result;}
BaseException.$factory=function(){var err=Error()
err.args=_b_.tuple.$factory(Array.prototype.slice.call(arguments))
err.__class__=_b_.BaseException
err.$py_error=true
err.$stack=deep_copy($B.frames_stack);
if($B.frames_stack.length){err.$line_info=$B.last($B.frames_stack)[1].$line_info}
eval("//placeholder//")
err.__cause__=_b_.None
err.__context__=_b_.None
err.__suppress_context__=false
return err}
BaseException.$factory.$infos={__name__:"BaseException",__qualname__:"BaseException"}
$B.set_func_names(BaseException)
_b_.BaseException=BaseException
$B.exception=function(js_exc){
if(! js_exc.$py_error){console.log("Javascript exception:",js_exc)
console.log($B.last($B.frames_stack))
var exc=Error()
exc.__name__="Internal Javascript error: "+
(js_exc.__name__ ||js_exc.name)
exc.__class__=_b_.Exception
exc.$js_exc=js_exc
if(js_exc.name=="ReferenceError"){exc.__name__="NameError"
exc.__class__=_b_.NameError
js_exc.message=js_exc.message.replace("$$","")}else if(js_exc.name=="InternalError"){exc.__name__="RuntimeError"
exc.__class__=_b_.RuntimeError}
exc.__cause__=_b_.None
exc.__context__=_b_.None
exc.__suppress_context__=false
var $message="<Javascript "+js_exc.name+">: "+
(js_exc.message ||"<"+js_exc+">")
exc.args=_b_.tuple.$factory([$message])
exc.$py_error=true
exc.$stack=deep_copy($B.frames_stack);}else{var exc=js_exc}
return exc}
$B.is_exc=function(exc,exc_list){
if(exc.__class__===undefined){exc=$B.exception(exc)}
var this_exc_class=exc.__class__
for(var i=0;i < exc_list.length;i++){var exc_class=exc_list[i]
if(this_exc_class===undefined){console.log("exc class undefined",exc)}
if(issubclass(this_exc_class,exc_class)){return true}}
return false}
function $make_exc(names,parent){
var _str=[],pos=0
for(var i=0;i < names.length;i++){var name=names[i],code=""
if(Array.isArray(name)){
var code=name[1],name=name[0]}
$B.builtins_scope[name]=true
var $exc=(BaseException.$factory+"").replace(/BaseException/g,name)
$exc=$exc.replace("//placeholder//",code)
_str[pos++]="_b_."+name+' = {__class__:_b_.type, '+
'__mro__: [_b_.'+parent.$infos.__name__+
"].concat(parent.__mro__), $is_class: true,"+
"$infos: {__name__:'"+name+"'}}"
_str[pos++]="_b_."+name+".$factory = "+$exc
_str[pos++]="_b_."+name+'.$factory.$infos = {__name__: "'+
name+'", __qualname__: "'+name+'"}'
_str[pos++]="$B.set_func_names(_b_."+name+", 'builtins')"}
try{eval(_str.join(";"))}catch(err){console.log("--err"+err)
throw err}}
$make_exc(["SystemExit","KeyboardInterrupt","GeneratorExit","Exception"],BaseException)
$make_exc([["StopIteration","err.value = arguments[0]"],"ArithmeticError","AssertionError","AttributeError","BufferError","EOFError","ImportError","LookupError","MemoryError","NameError","OSError","ReferenceError","RuntimeError","SyntaxError","SystemError","TypeError","ValueError","Warning"],_b_.Exception)
$make_exc(["FloatingPointError","OverflowError","ZeroDivisionError"],_b_.ArithmeticError)
$make_exc(["IndexError","KeyError"],_b_.LookupError)
$make_exc(["UnboundLocalError"],_b_.NameError)
$make_exc(["BlockingIOError","ChildProcessError","ConnectionError","FileExistsError","FileNotFoundError","InterruptedError","IsADirectoryError","NotADirectoryError","PermissionError","ProcessLookupError","TimeoutError"],_b_.OSError)
$make_exc(["BrokenPipeError","ConnectionAbortedError","ConnectionRefusedError","ConnectionResetError"],_b_.ConnectionError)
$make_exc(["NotImplementedError"],_b_.RuntimeError)
$make_exc(["IndentationError"],_b_.SyntaxError)
$make_exc(["TabError"],_b_.IndentationError)
$make_exc(["UnicodeError"],_b_.ValueError)
$make_exc(["UnicodeDecodeError","UnicodeEncodeError","UnicodeTranslateError"],_b_.UnicodeError)
$make_exc(["DeprecationWarning","PendingDeprecationWarning","RuntimeWarning","SyntaxWarning","UserWarning","FutureWarning","ImportWarning","UnicodeWarning","BytesWarning","ResourceWarning"],_b_.Warning)
$make_exc(["EnvironmentError","IOError","VMSError","WindowsError"],_b_.OSError)
$B.$TypeError=function(msg){throw _b_.TypeError.$factory(msg)}})(__BRYTHON__)
;

;(function($B){var _b_=$B.builtins,None=_b_.None,range={__class__:_b_.type,__mro__:[_b_.object],$infos:{__module__:"builtins",__name__:"range"},$is_class:true,$native:true,$descriptors:{start:true,step:true,stop:true}}
range.__contains__=function(self,other){if(range.__len__(self)==0){return false}
try{other=$B.int_or_bool(other)}
catch(err){
try{range.index(self,other);return true}
catch(err){return false}}
var sub=$B.sub(other,self.start),fl=$B.floordiv(sub,self.step),res=$B.mul(self.step,fl)
if($B.eq(res,sub)){if($B.gt(self.stop,self.start)){return $B.ge(other,self.start)&& $B.gt(self.stop,other)}else{return $B.ge(self.start,other)&& $B.gt(other,self.stop)}}else{return false}}
range.__delattr__=function(self,attr,value){throw _b_.AttributeError.$factory("readonly attribute")}
range.__eq__=function(self,other){if(_b_.isinstance(other,range)){var len=range.__len__(self)
if(! $B.eq(len,range.__len__(other))){return false}
if(len==0){return true}
if(! $B.eq(self.start,other.start)){return false}
if(len==1){return true}
return $B.eq(self.step,other.step)}
return false}
function compute_item(r,i){var len=range.__len__(r)
if(len==0){return r.start}
else if(i > len){return r.stop}
return $B.add(r.start,$B.mul(r.step,i))}
range.__getitem__=function(self,rank){if(_b_.isinstance(rank,_b_.slice)){var norm=_b_.slice.$conv_for_seq(rank,range.__len__(self)),substep=$B.mul(self.step,norm.step),substart=compute_item(self,norm.start),substop=compute_item(self,norm.stop)
return range.$factory(substart,substop,substep)}
if(typeof rank !="number"){rank=$B.$GetInt(rank)}
if($B.gt(0,rank)){rank=$B.add(rank,range.__len__(self))}
var res=$B.add(self.start,$B.mul(rank,self.step))
if(($B.gt(self.step,0)&&
($B.ge(res,self.stop)||$B.gt(self.start,res)))||
($B.gt(0,self.step)&&
($B.ge(self.stop,res)||$B.gt(res,self.start)))){throw _b_.IndexError.$factory("range object index out of range")}
return res}
range.__hash__=function(self){var len=range.__len__(self)
if(len==0){return _b_.hash(_b_.tuple.$factory([0,None,None]))}
if(len==1){return _b_.hash(_b_.tuple.$factory([1,self.start,None]))}
return _b_.hash(_b_.tuple.$factory([len,self.start,self.step]))}
var RangeIterator={__class__:_b_.type,__mro__:[_b_.object],__iter__:function(self){return self},__next__:function(self){return _b_.next(self.obj)},$infos:{__name__:"range_iterator",__module__:"builtins"}}
RangeIterator.$factory=function(obj){return{__class__:RangeIterator,obj:obj}}
$B.set_func_names(RangeIterator,"builtins")
range.__iter__=function(self){var res={__class__ :range,start:self.start,stop:self.stop,step:self.step}
if(self.$safe){res.$counter=self.start-self.step}else{res.$counter=$B.sub(self.start,self.step)}
return RangeIterator.$factory(res)}
range.__len__=function(self){var len
if($B.gt(self.step,0)){if($B.ge(self.start,self.stop)){return 0}
var n=$B.sub(self.stop,$B.add(1,self.start)),q=$B.floordiv(n,self.step)
len=$B.add(1,q)}else{if($B.ge(self.stop,self.start)){return 0}
var n=$B.sub(self.start,$B.add(1,self.stop)),q=$B.floordiv(n,$B.mul(-1,self.step))
len=$B.add(1,q)}
if($B.maxsize===undefined){$B.maxsize=$B.long_int.__pow__($B.long_int.$factory(2),63)
$B.maxsize=$B.long_int.__sub__($B.maxsize,1)}
return len}
range.__next__=function(self){if(self.$safe){self.$counter+=self.step
if((self.step > 0 && self.$counter >=self.stop)
||(self.step < 0 && self.$counter <=self.stop)){throw _b_.StopIteration.$factory("")}}else{self.$counter=$B.add(self.$counter,self.step)
if(($B.gt(self.step,0)&& $B.ge(self.$counter,self.stop))
||($B.gt(0,self.step)&& $B.ge(self.stop,self.$counter))){throw _b_.StopIteration.$factory("")}}
return self.$counter}
range.__reversed__=function(self){var n=$B.sub(range.__len__(self),1)
return range.$factory($B.add(self.start,$B.mul(n,self.step)),$B.sub(self.start,self.step),$B.mul(-1,self.step))}
range.__repr__=range.__str__=function(self){var res="range("+_b_.str.$factory(self.start)+", "+
_b_.str.$factory(self.stop)
if(self.step !=1){res+=", "+_b_.str.$factory(self.step)}
return res+")"}
range.__setattr__=function(self,attr,value){throw _b_.AttributeError.$factory("readonly attribute")}
range.start=function(self){return self.start}
range.step=function(self){return self.step},range.stop=function(self){return self.stop}
range.count=function(self,ob){if(_b_.isinstance(ob,[_b_.int,_b_.float,_b_.bool])){return _b_.int.$factory(range.__contains__(self,ob))}else{var comp=function(other){return $B.rich_comp("__eq__",ob,other)},it=range.__iter__(self),_next=RangeIterator.__next__,nb=0
while(true){try{if(comp(_next(it))){nb++}}catch(err){if(_b_.isinstance(err,_b_.StopIteration)){return nb}
throw err}}}}
range.index=function(self,other){var $=$B.args("index",2,{self:null,other:null},["self","other"],arguments,{},null,null),self=$.self,other=$.other
try{other=$B.int_or_bool(other)}catch(err){var comp=function(x){return $B.rich_comp("__eq__",other,x)},it=range.__iter__(self),_next=RangeIterator.__next__,nb=0
while(true){try{if(comp(_next(it))){return nb}
nb++}catch(err){if(_b_.isinstance(err,_b_.StopIteration)){throw _b_.ValueError.$factory(_b_.str.$factory(other)+
" not in range")}
throw err}}}
var sub=$B.sub(other,self.start),fl=$B.floordiv(sub,self.step),res=$B.mul(self.step,fl)
if($B.eq(res,sub)){if(($B.gt(self.stop,self.start)&& $B.ge(other,self.start)
&& $B.gt(self.stop,other))||
($B.ge(self.start,self.stop)&& $B.ge(self.start,other)
&& $B.gt(other,self.stop))){return fl}else{throw _b_.ValueError.$factory(_b_.str.$factory(other)+
' not in range')}}else{throw _b_.ValueError.$factory(_b_.str.$factory(other)+
" not in range")}}
range.$factory=function(){var $=$B.args("range",3,{start:null,stop:null,step:null},["start","stop","step"],arguments,{stop:null,step:null},null,null),start=$.start,stop=$.stop,step=$.step,safe
if(stop===null && step===null){stop=$B.PyNumber_Index(start)
safe=typeof stop==="number"
return{__class__:range,start:0,stop:stop,step:1,$is_range:true,$safe:safe}}
if(step===null){step=1}
start=$B.PyNumber_Index(start)
stop=$B.PyNumber_Index(stop)
step=$B.PyNumber_Index(step)
if(step==0){throw _b_.ValueError.$factory("range.$factory() arg 3 must not be zero")}
safe=(typeof start=="number" && typeof stop=="number" &&
typeof step=="number")
return{__class__:range,start:start,stop:stop,step:step,$is_range:true,$safe:safe}}
$B.set_func_names(range,"builtins")
var slice={__class__:_b_.type,__mro__:[_b_.object],$infos:{__module__:"builtins",__name__:"slice"},$is_class:true,$native:true,$descriptors:{start:true,step:true,stop:true}}
slice.__eq__=function(self,other){var conv1=conv_slice(self),conv2=conv_slice(other)
return conv1[0]==conv2[0]&&
conv1[1]==conv2[1]&&
conv1[2]==conv2[2]}
slice.__repr__=slice.__str__=function(self){return "slice("+_b_.str.$factory(self.start)+", "+
_b_.str.$factory(self.stop)+", "+_b_.str.$factory(self.step)+")"}
slice.__setattr__=function(self,attr,value){throw _b_.AttributeError.$factory("readonly attribute")}
function conv_slice(self){
var attrs=["start","stop","step"],res=[]
for(var i=0;i < attrs.length;i++){var val=self[attrs[i]]
if(val===_b_.None){res.push(val)}else{try{res.push($B.PyNumber_Index(val))}catch(err){throw _b_.TypeError.$factory("slice indices must be "+
"integers or None or have an __index__ method")}}}
return res}
slice.$conv_for_seq=function(self,len){
var step=self.step===None ? 1 :$B.PyNumber_Index(self.step),step_is_neg=$B.gt(0,step),len_1=$B.sub(len,1)
if(step==0){throw _b_.ValueError.$factory('slice step cannot be zero')}
var start
if(self.start===None){start=step_is_neg ? len_1 :0}else{start=$B.PyNumber_Index(self.start)
if($B.gt(0,start)){start=$B.add(start,len)}
if($B.gt(0,start)){start=step < 0 ?-1 :0}
if($B.ge(start,len)){start=step < 0 ? len_1 :len}}
if(self.stop===None){stop=step_is_neg ?-1 :len}else{stop=$B.PyNumber_Index(self.stop)
if($B.gt(0,stop)){stop+=len}
if($B.gt(0,stop)){stop=step < 0 ?-1 :0}
if($B.ge(stop,len)){stop=step_is_neg ? len_1 :len}}
return{start:start,stop:stop,step:step}}
slice.start=function(self){return self.start}
slice.step=function(self){return self.step}
slice.stop=function(self){return self.stop}
slice.indices=function(self,length){var len=$B.$GetInt(length)
if(len < 0){_b_.ValueError.$factory("length should not be negative")}
if(self.step > 0){var _len=_b_.min(len,self.stop)
return _b_.tuple.$factory([self.start,_len,self.step])}else if(self.step==_b_.None){var _len=_b_.min(len,self.stop),_start=self.start
if(_start==_b_.None){_start=0}
return _b_.tuple.$factory([_start,_len,1])}
_b_.NotImplementedError.$factory(
"Error! negative step indices not implemented yet")}
slice.$factory=function(){var $=$B.args("slice",3,{start:null,stop:null,step:null},["start","stop","step"],arguments,{stop:null,step:null},null,null),start,stop,step
if($.stop===null && $.step===null){start=_b_.None
stop=$.start
step=_b_.None}else{start=$.start
stop=$.stop
step=$.step===null ? _b_.None :$.step}
var res={__class__ :slice,start:start,stop:stop,step:step}
conv_slice(res)
return res}
$B.set_func_names(slice,"builtins")
_b_.range=range
_b_.slice=slice})(__BRYTHON__)
;
;(function($B){var _b_=$B.builtins,object=_b_.object,isinstance=_b_.isinstance,getattr=_b_.getattr,None=_b_.None
var from_unicode={},to_unicode={}
$B.to_bytes=function(obj){var res
if(_b_.isinstance(obj,[bytes,bytearray])){res=obj.source}else{var ga=$B.$getattr(obj,"tobytes",null)
if(ga !==null){res=$B.$call(ga)().source}
else{throw _b_.TypeError.$factory("object doesn't support the buffer protocol")}}
return res}
var bytearray={__class__:_b_.type,__mro__:[object],$buffer_protocol:true,$infos:{__module__:"builtins",__name__:"bytearray"},$is_class:true}
var mutable_methods=["__delitem__","clear","copy","count","index","pop","remove","reverse","sort"]
mutable_methods.forEach(function(method){bytearray[method]=(function(m){return function(self){var args=[self.source],pos=1
for(var i=1,len=arguments.length;i < len;i++){args[pos++]=arguments[i]}
return _b_.list[m].apply(null,args)}})(method)})
var $bytearray_iterator=$B.$iterator_class('bytearray_iterator')
bytearray.__iter__=function(self){return $B.$iterator(self.source,$bytearray_iterator)}
bytearray.__mro__=[object]
bytearray.__repr__=bytearray.__str__=function(self){return 'bytearray('+bytes.__repr__(self)+")"}
bytearray.__setitem__=function(self,arg,value){if(isinstance(arg,_b_.int)){if(! isinstance(value,_b_.int)){throw _b_.TypeError.$factory('an integer is required')}else if(value > 255){throw _b_.ValueError.$factory("byte must be in range(0, 256)")}
var pos=arg
if(arg < 0){pos=self.source.length+pos}
if(pos >=0 && pos < self.source.length){self.source[pos]=value}
else{throw _b_.IndexError.$factory('list index out of range')}}else if(isinstance(arg,_b_.slice)){var start=arg.start===None ? 0 :arg.start
var stop=arg.stop===None ? self.source.length :arg.stop
if(start < 0){start=self.source.length+start}
if(stop < 0){stop=self.source.length+stop}
self.source.splice(start,stop-start)
try{var $temp=_b_.list.$factory(value)
for(var i=$temp.length-1;i >=0;i--){if(! isinstance($temp[i],_b_.int)){throw _b_.TypeError.$factory('an integer is required')}else if($temp[i]> 255){throw ValueError.$factory("byte must be in range(0, 256)")}
self.source.splice(start,0,$temp[i])}}catch(err){throw _b_.TypeError.$factory("can only assign an iterable")}}else{throw _b_.TypeError.$factory('list indices must be integer, not '+
$B.class_name(arg))}}
bytearray.append=function(self,b){if(arguments.length !=2){throw _b_.TypeError.$factory(
"append takes exactly one argument ("+(arguments.length-1)+
" given)")}
if(! isinstance(b,_b_.int)){throw _b_.TypeError.$factory("an integer is required")}
if(b > 255){throw ValueError.$factory("byte must be in range(0, 256)")}
self.source[self.source.length]=b}
bytearray.insert=function(self,pos,b){if(arguments.length !=3){throw _b_.TypeError.$factory(
"insert takes exactly 2 arguments ("+(arguments.length-1)+
" given)")}
if(!isinstance(b,_b_.int)){throw _b_.TypeError.$factory("an integer is required")}
if(b > 255){throw ValueError.$factory("byte must be in range(0, 256)")}
_b_.list.insert(self.source,pos,b)}
bytearray.$factory=function(source,encoding,errors){return bytearray.__new__(bytearray,source,encoding,errors)}
var bytes={__class__ :_b_.type,__mro__:[object],$buffer_protocol:true,$infos:{__module__:"builtins",__name__:"bytes"},$is_class:true}
bytes.__add__=function(self,other){if(isinstance(other,bytes)){return self.__class__.$factory(self.source.concat(other.source))}else if(isinstance(other,bytearray)){return self.__class__.$factory(bytes.__add__(self,bytes.$factory(other)))}else if(isinstance(other,_b_.memoryview)){return self.__class__.$factory(bytes.__add__(self,_b_.memoryview.tobytes(other)))}
throw _b_.TypeError.$factory("can't concat bytes to "+
_b_.str.$factory(other))}
bytes.__contains__=function(self,other){if(typeof other=="number"){return self.source.indexOf(other)>-1}
if(self.source.length > other.source.length){return false}
var len=self.source.length
for(var i=0;i < other.source.length-self.source.length+1;i++){var flag=true
for(var j=0;j < len;j++){if(other.source[i+j]!=self.source[j]){flag=false
break}}
if(flag){return true}}
return false}
var $bytes_iterator=$B.$iterator_class("bytes_iterator")
bytes.__iter__=function(self){return $B.$iterator(self.source,$bytes_iterator)}
bytes.__eq__=function(self,other){return getattr(self.source,'__eq__')(other.source)}
bytes.__ge__=function(self,other){return _b_.list.__ge__(self.source,other.source)}
bytes.__getitem__=function(self,arg){var i
if(isinstance(arg,_b_.int)){var pos=arg
if(arg < 0){pos=self.source.length+pos}
if(pos >=0 && pos < self.source.length){return self.source[pos]}
throw _b_.IndexError.$factory("index out of range")}else if(isinstance(arg,_b_.slice)){var step=arg.step===None ? 1 :arg.step
if(step > 0){var start=arg.start===None ? 0 :arg.start
var stop=arg.stop===None ?
getattr(self.source,'__len__')():arg.stop}else{var start=arg.start===None ?
getattr(self.source,'__len__')()-1 :arg.start
var stop=arg.stop===None ? 0 :arg.stop}
if(start < 0){start=self.source.length+start}
if(stop < 0){stop=self.source.length+stop}
var res=[],i=null,pos=0
if(step > 0){stop=Math.min(stop,self.source.length)
if(stop <=start){return bytes.$factory([])}
for(var i=start;i < stop;i+=step){res[pos++]=self.source[i]}}else{if(stop >=start){return bytes.$factory([])}
stop=Math.max(0,stop)
for(var i=start;i >=stop;i+=step){res[pos++]=self.source[i]}}
return bytes.$factory(res)}else if(isinstance(arg,_b_.bool)){return self.source.__getitem__(_b_.int.$factory(arg))}}
bytes.__gt__=function(self,other){return _b_.list.__gt__(self.source,other.source)}
bytes.__hash__=function(self){if(self===undefined){return bytes.__hashvalue__ ||$B.$py_next_hash--}
var hash=1
for(var i=0,len=self.source.length;i < len;i++){hash=(101*hash+self.source[i])& 0xFFFFFFFF}
return hash}
bytes.__init__=function(){return _b_.None}
bytes.__le__=function(self,other){return _b_.list.__le__(self.source,other.source)}
bytes.__len__=function(self){return self.source.length}
bytes.__lt__=function(self,other){return _b_.list.__lt__(self.source,other.source)}
bytes.__mul__=function(){var $=$B.args('__mul__',2,{self:null,other:null},['self','other'],arguments,{},null,null),other=$B.PyNumber_Index($.other)
var t=[],source=$.self.source,slen=source.length
for(var i=0;i < other;i++){for(var j=0;j < slen;j++){t.push(source[j])}}
var res=bytes.$factory()
res.source=t
return res}
bytes.__ne__=function(self,other){return ! bytes.__eq__(self,other)}
bytes.__new__=function(cls,source,encoding,errors){
var self={__class__:cls},int_list=[],pos=0
if(source===undefined){}else if(isinstance(source,_b_.int)){var i=source
while(i--){int_list[pos++]=0}}else{if(isinstance(source,_b_.str)){if(encoding===undefined){throw _b_.TypeError.$factory("string argument without an encoding")}
int_list=encode(source,encoding)}else{
int_list=_b_.list.$factory(source)
for(var i=0;i < int_list.length;i++){try{var item=_b_.int.$factory(int_list[i])}catch(err){throw _b_.TypeError.$factory("'"+
$B.class_name(int_list[i])+"' object "+
"cannot be interpreted as an integer")}
if(item < 0 ||item > 255){throw _b_.ValueError.$factory("bytes must be in range"+
"(0, 256)")}}}}
self.source=int_list
self.encoding=encoding
self.errors=errors
return self}
bytes.__repr__=bytes.__str__=function(self){var res="b'"
for(var i=0,len=self.source.length;i < len;i++){var s=self.source[i]
if(s==10){res+='\\n'}else if(s < 32 ||s >=128){var hx=s.toString(16)
hx=(hx.length==1 ? '0' :'')+hx
res+='\\x'+hx}else if(s=="\\".charCodeAt(0)){res+="\\\\"}else{res+=String.fromCharCode(s)}}
return res+"'"}
bytes.__reduce_ex__=function(self){return bytes.__repr__(self)}
bytes.decode=function(self,encoding,errors){if(encoding===undefined){encoding='utf-8'}
if(errors===undefined){errors='strict'}
switch(errors){case 'strict':
case 'ignore':
case 'replace':
case 'surrogateescape':
case 'surrogatepass':
case 'xmlcharrefreplace':
case 'backslashreplace':
return decode(self.source,encoding,errors)
default:}}
bytes.join=function(){var $ns=$B.args('join',2,{self:null,iterable:null},['self','iterable'],arguments,{}),self=$ns['self'],iterable=$ns['iterable']
var next_func=_b_.getattr(_b_.iter(iterable),'__next__'),res=self.__class__.$factory(),empty=true
while(true){try{var item=next_func()
if(empty){empty=false}
else{res=bytes.__add__(res,self)}
res=bytes.__add__(res,item)}catch(err){if(isinstance(err,_b_.StopIteration)){break}
throw err}}
return res}
bytes.maketrans=function(from,to){var _t=[],to=$B.to_bytes(to)
for(var i=0;i < 256;i++){_t[i]=i}
for(var i=0,len=from.source.length;i < len;i++){var _ndx=from.source[i]
_t[_ndx]=to[i]}
return bytes.$factory(_t)}
bytes.find=function(){var $=$B.args('find',4,{self:null,sub:null,start:null,end:null},['self','sub','start','end'],arguments,{start:0,end:-1},null,null),sub=$.sub,start=$.start
if(typeof sub=="number"){if(sub < 0 ||sub > 255){throw _b_.ValueError.$factory("byte must be in range(0, 256)")}
return $.self.source.slice(0,$.end==-1 ? undefined :$.end).indexOf(sub,start)}else if(! sub.__class__){throw _b_.TypeError.$factory("first argument must be a bytes-like "+
"object, not '"+$B.class_name(sub)+"'")}else if(! sub.__class__.$buffer_protocol){throw _b_.TypeError.$factory("first argument must be a bytes-like "+
"object, not '"+$B.class_name(sub)+"'")}
var end=$.end==-1 ? $.self.source.length-sub.source.length :
Math.min($.self.source.length-sub.source.length,$.end)
for(var i=start;i <=end;i++){if(bytes.startswith($.self,sub,i)){return i}}
return-1}
bytes.rfind=function(){var $=$B.args('rfind',4,{self:null,sub:null,start:null,end:null},['self','sub','start','end'],arguments,{start:0,end:-1},null,null),sub=$.sub,start=$.start
if(typeof sub=="number"){if(sub < 0 ||sub > 255){throw _b_.ValueError.$factory("byte must be in range(0, 256)")}
return $.self.source.slice(start,$.end==-1 ? undefined :$.end).
lastIndexOf(sub)+start}else if(! sub.__class__){throw _b_.TypeError.$factory("first argument must be a bytes-like "+
"object, not '"+$B.class_name($.sub)+"'")}else if(! sub.__class__.$buffer_protocol){throw _b_.TypeError.$factory("first argument must be a bytes-like "+
"object, not '"+$B.class_name(sub)+"'")}
var end=$.end==-1 ? $.self.source.length-sub.source.length :
Math.min($.self.source.length-sub.source.length,$.end)
for(var i=end-1;i >=start;--i){if(bytes.startswith($.self,sub,i)){return i}}
return-1}
bytes.index=function(){var $=$B.args('rfind',4,{self:null,sub:null,start:null,end:null},['self','sub','start','end'],arguments,{start:0,end:-1},null,null)
var index=bytes.find($.self,$.sub,$.start,$.end)
if(index==-1){throw _b_.ValueError.$factory("subsection not found")}
return index}
bytes.rindex=function(){var $=$B.args('rfind',4,{self:null,sub:null,start:null,end:null},['self','sub','start','end'],arguments,{start:0,end:-1},null,null)
var index=bytes.rfind($.self,$.sub,$.start,$.end)
if(index==-1){throw _b_.ValueError.$factory("subsection not found")}
return index}
bytes.count=function(){var $=$B.args('count',4,{self:null,sub:null,start:null,end:null},['self','sub','start','end'],arguments,{start:0,end:-1},null,null)
var n=0,index=-1,len=0
if(typeof $.sub=="number"){if($.sub < 0 ||$.sub > 255)
throw _b_.ValueError.$factory("byte must be in range(0, 256)")
len=1}else if(!$.sub.__class__){throw _b_.TypeError.$factory("first argument must be a bytes-like "+
"object, not '"+$B.class_name($.sub)+"'")}else if(!$.sub.__class__.$buffer_protocol){throw _b_.TypeError.$factory("first argument must be a bytes-like "+
"object, not '"+$B.class_name($.sub)+"'")}else{len=$.sub.source.length}
do{index=bytes.find($.self,$.sub,Math.max(index+len,$.start),$.end)
if(index !=-1){n++}}while(index !=-1)
return n}
bytes.replace=function(){var $=$B.args('replace',4,{self:null,old:null,new:null,count:null},['self','old','new','count'],arguments,{count:-1},null,null),res=[]
var self=$.self,src=self.source,len=src.length,old=$.old,$new=$.new
var count=$.count >=0 ? $.count :src.length
if(! $.old.__class__){throw _b_.TypeError.$factory("first argument must be a bytes-like "+
"object, not '"+$B.class_name($.old)+"'")}else if(! $.old.__class__.$buffer_protocol){throw _b_.TypeError.$factory("first argument must be a bytes-like "+
"object, not '"+$B.class_name($.sep)+"'")}
if(! $.new.__class__){throw _b_.TypeError.$factory("second argument must be a bytes-like "+
"object, not '"+$B.class_name($.old)+"'")}else if(! $.new.__class__.$buffer_protocol){throw _b_.TypeError.$factory("second argument must be a bytes-like "+
"object, not '"+$B.class_name($.sep)+"'")}
for(var i=0;i < len;i++){if(bytes.startswith(self,old,i)&& count){for(var j=0;j < $new.source.length;j++){res.push($new.source[j])}
i+=(old.source.length-1)
count--}else{res.push(src[i])}}
return bytes.$factory(res)}
bytes.partition=function(){var $=$B.args('partition',2,{self:null,sep:null},['self','sep'],arguments,{},null,null)
if(! $.sep.__class__){throw _b_.TypeError.$factory("a bytes-like object is required, "+
"not '"+$B.class_name($.sep)+"'")}else if(! $.sep.__class__.$buffer_protocol){throw _b_.TypeError.$factory("a bytes-like object is required, "+
"not '"+$B.class_name($.sep)+"'")}
var len=$.sep.source.length,src=$.self.source,i=bytes.find($.self,$.sep)
return _b_.tuple.$factory([bytes.$factory(src.slice(0,i)),bytes.$factory(src.slice(i,i+len)),bytes.$factory(src.slice(i+len))
])}
bytes.rpartition=function(){var $=$B.args('rpartition',2,{self:null,sep:null},['self','sep'],arguments,{},null,null)
if(!$.sep.__class__){throw _b_.TypeError.$factory("a bytes-like object is required, "+
"not '"+$B.class_name($.sep)+"'")}else if(!$.sep.__class__.$buffer_protocol){throw _b_.TypeError.$factory("a bytes-like object is required, "+
"not '"+$B.class_name($.sep)+"'")}
var len=$.sep.source.length,src=$.self.source,i=bytes.rfind($.self,$.sep)
return _b_.tuple.$factory([bytes.$factory(src.slice(0,i)),bytes.$factory(src.slice(i,i+len)),bytes.$factory(src.slice(i+len))
])}
bytes.split=function(){var $=$B.args('split',2,{self:null,sep:null},['self','sep'],arguments,{},null,null),res=[],start=0,stop=0
if(! $.sep.__class__ ){throw _b_.TypeError.$factory("a bytes-like object is required, "+
"not '"+$B.class_name($.sep)+"'")}else if(! $.sep.__class__.$buffer_protocol){throw _b_.TypeError.$factory("a bytes-like object is required, "+
"not '"+$B.class_name($.sep)+"'")}
var seps=$.sep.source,len=seps.length,src=$.self.source,blen=src.length
while(stop < blen){var match=true
for(var i=0;i < len && match;i++){if(src[stop+i]!=seps[i]){match=false}}
if(match){res.push(bytes.$factory(src.slice(start,stop)))
start=stop+len
stop=start}else{stop++}}
if(match ||(stop > start)){res.push(bytes.$factory(src.slice(start,stop)))}
return res}
bytes.splitlines=function(){var $=$B.args('splitlines',2,{self:null,keepends:null},['self','keepends'],arguments,{keepends:false},null,null),lines=[],src=$.self.source,start=0,end=-1,newline_end=-1
for(var i=0;i < src.length;++i){var newline_end=-1
if(src[i]===13){end=i
newline_end=++i}
if(src[i]===10){end=newline_end==-1 ? i :i-1
newline_end=++i}
if(newline_end !=-1){lines.push(bytes.$factory(src.slice(start,$.keepends ?
newline_end :end)))
start=i}}
if(src.length > 0){lines.push(bytes.$factory(src.slice(start)))}
return lines}
bytes.swapcase=function(self){var src=self.source,len=src.length,buffer=src.slice()
for(var i=0;i < len;++i){if(buffer[i]> 96 && buffer[i]< 123){buffer[i]-=32}else if(buffer[i]> 64 && buffer[i]< 91){buffer[i]+=32}}
return bytes.$factory(buffer)}
bytes.capitalize=function(self){var src=self.source,len=src.length,buffer=src.slice()
if(buffer[0]> 96 && buffer[0]< 123){buffer[0]-=32}
for(var i=1;i < len;++i){if(buffer[i]> 64 && buffer[i]< 91){buffer[i]+=32}}
return bytes.$factory(buffer)}
bytes.islower=function(self){var src=self.source,len=src.length,res=false
for(let i=0;i < len;++i){
res=res ||(src[i]> 96 && src[i]< 123)
if(src[i]> 64 && src[i]< 91){return false}}
return res}
bytes.isupper=function(self){var src=self.source,len=src.length,res=false
for(let i=0;i < len;++i){
res=res ||(src[i]> 64 && src[i]< 91)
if(src[i]> 96 && src[i]< 123){return false}}
return res}
bytes.isspace=function(self){var src=self.source,len=src.length
for(let i=0;i < len;++i){switch(src[i]){case 9:
case 10:
case 11:
case 12:
case 13:
case 32:
break
default:
return false}}
return true}
bytes.isdigit=function(self){var src=self.source,len=src.length,res=len > 0
for(let i=0;i < len && res;++i){res=src[i]> 47 && src[i]< 58}
return res}
bytes.title=function(self){var src=self.source,len=src.length
buffer=src.slice(),current_char_is_letter=false,prev_char_was_letter=false,is_uppercase=false,is_lowercase=false
for(var i=0;i < len;++i){is_lowercase=buffer[i]> 96 && buffer[i]< 123
is_uppercase=buffer[i]> 64 && buffer[i]< 91
current_char_is_letter=is_lowercase ||is_uppercase
if(current_char_is_letter){if(prev_char_was_letter && is_uppercase){buffer[i]+=32}else if(! prev_char_was_letter && is_lowercase){buffer[i]-=32}}
prev_char_was_letter=current_char_is_letter}
return bytes.$factory(buffer)}
bytes.isalpha=function(self){var src=self.source,len=src.length,res=len > 0
for(var i=0;i < len && res;++i){res=(src[i]> 96 && src[i]< 123)||(src[i]> 64 && src[i]< 91)}
return res}
bytes.isalnum=function(self){var src=self.source,len=src.length,res=len > 0
for(var i=0;i < len && res;++i){res=(src[i]> 96 && src[i]< 123)||
(src[i]> 64 && src[i]< 91)||
(src[i]> 47 && src[i]< 58)}
return res}
bytes.istitle=function(self){var src=self.source,len=src.length,current_char_is_letter=false,prev_char_was_letter=false,is_uppercase=false,is_lowercase=false
for(var i=0;i < len;++i){is_lowercase=src[i]> 96 && src[i]< 123
is_uppercase=src[i]> 64 && src[i]< 91
current_char_is_letter=is_lowercase ||is_uppercase
if(current_char_is_letter &&
(prev_char_was_letter && is_uppercase)||
(! prev_char_was_letter && is_lowercase)){return false}
prev_char_was_letter=current_char_is_letter}
return true}
bytes.zfill=function(self,width){var buffer=self.source.slice(),prefix_offset=(buffer[0]==43 ||buffer[0]==45)? 1 :0
var count=width-self.source.length
var padding=[]
for(var i=0;i < count;++i){padding.push(48)}
buffer.splice.apply(buffer,[prefix_offset,0].concat(padding))
return bytes.$factory(buffer)}
bytes.ljust=function(){var $=$B.args('ljust',3,{self:null,width:null,fillbyte:null},['self','width','fillbyte'],arguments,{fillbyte:bytes.$factory([32])},null,null)
if(!$.fillbyte.__class__){throw _b_.TypeError.$factory("argument 2 must be a byte string of length 1, "+
"not '"+$B.class_name($.fillbyte)+"'")}else if(!$.fillbyte.__class__.$buffer_protocol){throw _b_.TypeError.$factory("argument 2 must be a byte string of length 1, "+
"not '"+$B.class_name($.fillbyte)+"'")}
var padding=[],count=$.width-$.self.source.length
for(var i=0;i < count;++i){padding.push($.fillbyte.source[0])}
return bytes.$factory($.self.source.concat(padding))}
bytes.rjust=function(){var $=$B.args('rjust',3,{self:null,width:null,fillbyte:null},['self','width','fillbyte'],arguments,{fillbyte:bytes.$factory([32])},null,null)
if(!$.fillbyte.__class__){throw _b_.TypeError.$factory("argument 2 must be a byte string of length 1, "+
"not '"+$B.class_name($.fillbyte)+"'")}else if(!$.fillbyte.__class__.$buffer_protocol){throw _b_.TypeError.$factory("argument 2 must be a byte string of length 1, "+
"not '"+$B.class_name($.fillbyte)+"'")}
var padding=[],count=$.width-$.self.source.length
for(var i=0;i < count;++i){padding.push($.fillbyte.source[0])}
return bytes.$factory(padding.concat($.self.source))}
bytes.center=function(){var $=$B.args('center',3,{self:null,width:null,fillbyte:null},['self','width','fillbyte'],arguments,{fillbyte:bytes.$factory([32])},null,null)
var diff=$.width-$.self.source.length
if(diff <=0){return bytes.$factory($.self.source)}
var ljust=bytes.ljust($.self,$.self.source.length+Math.floor(diff/2),$.fillbyte)
return bytes.rjust(ljust,$.width,$.fillbyte)}
function _strip(self,cars,lr){if(cars===undefined){cars=[]
var ws='\r\n \t'
for(var i=0,len=ws.length;i < len;i++){cars.push(ws.charCodeAt(i))}}else if(isinstance(cars,bytes)){cars=cars.source}else{throw _b_.TypeError.$factory("Type str doesn't support the buffer API")}
if(lr=='l'){for(var i=0,len=self.source.length;i < len;i++){if(cars.indexOf(self.source[i])==-1){break}}
return bytes.$factory(self.source.slice(i))}
for(var i=self.source.length-1;i >=0;i--){if(cars.indexOf(self.source[i])==-1){break}}
return bytes.$factory(self.source.slice(0,i+1))}
bytes.lstrip=function(self,cars){return _strip(self,cars,'l')}
bytes.rstrip=function(self,cars){return _strip(self,cars,'r')}
bytes.startswith=function(){var $=$B.args('startswith',3,{self:null,prefix:null,start:null},['self','prefix','start'],arguments,{start:0},null,null),start=$.start
if(_b_.isinstance($.prefix,bytes)){var res=true
for(var i=0;i < $.prefix.source.length && res;i++){res=$.self.source[start+i]==$.prefix.source[i]}
return res}else if(_b_.isinstance($.prefix,_b_.tuple)){var items=[]
for(var i=0;i < $.prefix.length;i++){if(_b_.isinstance($.prefix[i],bytes)){items=items.concat($.prefix[i].source)}else{throw _b_.TypeError.$factory("startswith first arg must be "+
"bytes or a tuple of bytes, not "+
$B.class_name($.prefix))}}
var prefix=bytes.$factory(items)
return bytes.startswith($.self,prefix,start)}else{throw _b_.TypeError.$factory("startswith first arg must be bytes "+
"or a tuple of bytes, not "+$B.class_name($.prefix))}}
bytes.endswith=function(){var $=$B.args('endswith',4,{self:null,suffix:null,start:null,end:null},['self','suffix','start','end'],arguments,{start:-1,end:-1},null,null)
if(_b_.isinstance($.suffix,bytes)){var start=$.start==-1 ?
$.self.source.length-$.suffix.source.length :
Math.min($.self.source.length-$.suffix.source.length,$.start)
var end=$.end==-1 ?
($.start==-1 ? $.self.source.length :start+$.suffix.source.length):
Math.min($.self.source.length-1,$.end)
var res=true
for(var i=$.suffix.source.length-1,len=$.suffix.source.length;
i >=0 && res;--i){res=$.self.source[end-len+i]==$.suffix.source[i]}
return res}else if(_b_.isinstance($.suffix,_b_.tuple)){for(var i=0;i < $.suffix.length;++i){if(_b_.isinstance($.suffix[i],bytes)){if(bytes.endswith($.self,$.suffix[i],$.start,$.end)){return true}}else{throw _b_.TypeError.$factory("endswith first arg must be "+
"bytes or a tuple of bytes, not "+
$B.class_name($.suffix))}}
return false}else{throw _b_.TypeError.$factory("endswith first arg must be bytes "+
"or a tuple of bytes, not "+$B.class_name($.suffix))}}
bytes.expandtabs=function(){var $=$B.args('expandtabs',2,{self:null,tabsize:null},['self','tabsize'],arguments,{tabsize:8},null,null)
var tab_spaces=[]
for(let i=0;i < $.tabsize;++i){tab_spaces.push(32)}
var buffer=$.self.source.slice()
for(let i=0;i < buffer.length;++i){if(buffer[i]===9){buffer.splice.apply(buffer,[i,1].concat(tab_spaces))}}
return _b_.bytes.$factory(buffer)}
bytes.strip=function(self,cars){var res=bytes.lstrip(self,cars)
return bytes.rstrip(res,cars)}
bytes.translate=function(self,table,_delete){if(_delete===undefined){_delete=[]}else if(isinstance(_delete,bytes)){_delete=_delete.source}else{throw _b_.TypeError.$factory("Type "+
$B.get_class(_delete).__name+" doesn't support the buffer API")}
var res=[],pos=0
if(isinstance(table,bytes)&& table.source.length==256){for(var i=0,len=self.source.length;i < len;i++){if(_delete.indexOf(self.source[i])>-1){continue}
res[pos++]=table.source[self.source[i]]}}
return bytes.$factory(res)}
var _upper=function(char_code){if(char_code >=97 && char_code <=122){return char_code-32}else{return char_code}}
var _lower=function(char_code){if(char_code >=65 && char_code <=90){return char_code+32}else{return char_code}}
bytes.upper=function(self){var _res=[],pos=0
for(var i=0,len=self.source.length;i < len;i++){if(self.source[i]){_res[pos++]=_upper(self.source[i])}}
return bytes.$factory(_res)}
bytes.lower=function(self){var _res=[],pos=0
for(var i=0,len=self.source.length;i < len;i++){if(self.source[i]){_res[pos++]=_lower(self.source[i])}}
return bytes.$factory(_res)}
function $UnicodeEncodeError(encoding,code_point,position){throw _b_.UnicodeEncodeError.$factory("'"+encoding+
"' codec can't encode character "+_b_.hex(code_point)+
" in position "+position)}
function $UnicodeDecodeError(encoding,position){throw _b_.UnicodeDecodeError.$factory("'"+encoding+
"' codec can't decode bytes in position "+position)}
function _hex(_int){return _int.toString(16)}
function _int(hex){return parseInt(hex,16)}
function normalise(encoding){var enc=encoding.toLowerCase()
if(enc.substr(0,7)=="windows"){enc="cp"+enc.substr(7)}
if(enc.startsWith("cp")||enc.startsWith("iso")){enc=enc.replace("-","")}
enc=enc.replace(/-/g,"_")
return enc}
function load_decoder(enc){
if(to_unicode[enc]===undefined){load_encoder(enc)
to_unicode[enc]={}
for(var attr in from_unicode[enc]){to_unicode[enc][from_unicode[enc][attr]]=attr}}}
function load_encoder(enc){
if(from_unicode[enc]===undefined){var mod=_b_.__import__("encodings."+enc)
table=mod[enc].decoding_table
from_unicode[enc]={}
for(var i=0;i < table.length;i++){from_unicode[enc][table.charCodeAt(i)]=i}}}
var decode=$B.decode=function(b,encoding,errors){var s="",enc=normalise(encoding)
switch(enc){case "utf_8":
case "utf-8":
case "utf8":
case "U8":
case "UTF":
var i=0,cp,_int_800=_int("800"),_int_c2=_int("c2"),_int_1000=_int("1000"),_int_e0=_int("e0"),_int_e1=_int("e1"),_int_e3=_int("e3"),_int_a0=_int("a0"),_int_80=_int("80"),_int_2000=_int("2000")
while(i < b.length){if(b[i]<=127){s+=String.fromCharCode(b[i])
i+=1}else if(b[i]< _int_e0){if(i < b.length-1){cp=b[i+1]+64*(b[i]-_int_c2)
s+=String.fromCharCode(cp)
i+=2}else{$UnicodeDecodeError(encoding,i)}}else if(b[i]==_int_e0){if(i < b.length-2){var zone=b[i+1]-_int_a0
cp=b[i+2]-_int_80+_int_800+64*zone
s+=String.fromCharCode(cp)
i+=3}else{$UnicodeDecodeError(encoding,i)}}else if(b[i]< _int_e3){if(i < b.length-2){var zone=b[i+1]-_int_80
cp=b[i+2]-_int_80+_int_1000+64*zone
s+=String.fromCharCode(cp)
i+=3}else{$UnicodeDecodeError(encoding,i)}}else{if(i < b.length-2){var zone1=b[i]-_int_e1-1
var zone=b[i+1]-_int_80+64*zone1
cp=b[i+2]-_int_80+_int_2000+64*zone
s+=String.fromCharCode(cp)
i+=3}else{if(errors=="surrogateescape"){s+="\\udc"+_hex(b[i])
i+=1}else{$UnicodeDecodeError(encoding,i)}}}}
break
case "latin_1":
case "windows1252":
case "iso-8859-1":
case "iso8859-1":
case "8859":
case "cp819":
case "latin":
case "latin1":
case "L1":
b.forEach(function(item){s+=String.fromCharCode(item)})
break
case "unicode_escape":
if(Array.isArray(b)){b=decode(b,"latin-1","strict")}
return b.replace(/\\n/g,"\n").
replace(/\\a/g,"\u0007").
replace(/\\b/g,"\b").
replace(/\\f/g,"\f").
replace(/\\t/g,"\t").
replace(/\\'/g,"'").
replace(/\\"/g,'"')
case "raw_unicode_escape":
if(Array.isArray(b)){b=decode(b,"latin-1","strict")}
b=b.replace(/\\u([a-fA-F0-9]{4})/g,function(mo){var cp=parseInt(mo.substr(2),16)
return String.fromCharCode(cp)})
return b
case "ascii":
for(var i=0,len=b.length;i < len;i++){var cp=b[i]
if(cp <=127){s+=String.fromCharCode(cp)}else{var msg="'ascii' codec can't decode byte 0x"+
cp.toString(16)+" in position "+i+
": ordinal not in range(128)"
throw _b_.UnicodeDecodeError.$factory(msg)}}
break
default:
try{load_decoder(enc)}catch(err){console.log(b,encoding,"error load_decoder",err)
throw _b_.LookupError.$factory("unknown encoding: "+enc)}
b.forEach(function(item){var u=to_unicode[enc][item]
if(u !==undefined){s+=String.fromCharCode(u)}
else{s+=String.fromCharCode(item)}})
break}
return s}
var encode=$B.encode=function(s,encoding){var $=$B.args("encode",2,{s:null,encoding:null},["s","encoding"],arguments,{},null,null),s=$.s,encoding=$.encoding
var t=[],pos=0,enc=normalise(encoding)
switch(enc){case "utf-8":
case "utf_8":
case "utf8":
var _int_800=_int("800"),_int_c2=_int("c2"),_int_1000=_int("1000"),_int_e0=_int("e0"),_int_e1=_int("e1"),_int_a0=_int("a0"),_int_80=_int("80"),_int_2000=_int("2000"),_int_D000=_int("D000")
for(var i=0,len=s.length;i < len;i++){var cp=s.charCodeAt(i)
if(cp <=127){t[pos++]=cp}else if(cp < _int_800){var zone=Math.floor((cp-128)/64)
t[pos++]=_int_c2+zone
t[pos++]=cp-64*zone}else if(cp < _int_1000){var zone=Math.floor((cp-_int_800)/64)
t[pos++]=_int_e0
t[pos++]=_int_a0+zone
t[pos++]=_int_80+cp-_int_800-64*zone}else if(cp < _int_2000){var zone=Math.floor((cp-_int_1000)/64)
t[pos++]=_int_e1+Math.floor((cp-_int_1000)/
_int_1000)
t[pos++]=_int_80+zone
t[pos++]=_int_80+cp-_int_1000-64*zone}else if(cp < _int_D000){var zone=Math.floor((cp-_int_2000)/64)
var zone1=Math.floor((cp-_int_2000)/_int_1000)
t[pos++]=_int_e1+Math.floor((cp-_int_1000)/
_int_1000)
t[pos++]=_int_80+zone-zone1*64
t[pos++]=_int_80+cp-_int_2000-64*zone}}
break
case "latin1":
case "iso8859_1":
case "windows1252":
for(var i=0,len=s.length;i < len;i++){var cp=s.charCodeAt(i)
if(cp <=255){t[pos++]=cp}
else{$UnicodeEncodeError(encoding,i)}}
break
case "ascii":
for(var i=0,len=s.length;i < len;i++){var cp=s.charCodeAt(i)
if(cp <=127){t[pos++]=cp}
else{$UnicodeEncodeError(encoding,i)}}
break
case "raw_unicode_escape":
for(var i=0,len=s.length;i < len;i++){var cp=s.charCodeAt(i)
if(cp < 256){t[pos++]=cp}else{var us=cp.toString(16)
if(us.length % 2){us="0"+us}
us="\\u"+us
for(var j=0;j < us.length;j++){t[pos++]=us.charCodeAt(j)}}}
break
default:
try{load_encoder(enc)}catch(err){throw _b_.LookupError.$factory("unknown encoding: "+encoding)}
for(var i=0,len=s.length;i < len;i++){var cp=s.charCodeAt(i)
if(from_unicode[enc][cp]===undefined){$UnicodeEncodeError(encoding,cp,i)}
t[pos++]=from_unicode[enc][cp]}
break}
return t}
bytes.$factory=function(source,encoding,errors){return bytes.__new__(bytes,source,encoding,errors)}
bytes.__class__=_b_.type
bytes.$is_class=true
for(var attr in bytes){if(bytearray[attr]===undefined && typeof bytes[attr]=="function"){bytearray[attr]=(function(_attr){return function(){return bytes[_attr].apply(null,arguments)}})(attr)}}
$B.set_func_names(bytes,"builtins")
$B.set_func_names(bytearray,"builtins")
_b_.bytes=bytes
_b_.bytearray=bytearray})(__BRYTHON__)
;
;(function($B){var _b_=$B.builtins,object=_b_.object,$N=_b_.None
function create_type(obj){return $B.get_class(obj).$factory()}
function clone(obj){var res=create_type(obj)
res.$items=obj.$items.slice()
return res}
var set={__class__:_b_.type,$infos:{__module__:"builtins",__name__:"set"},$is_class:true,$native:true}
set.__add__=function(self,other){throw _b_.TypeError.$factory(
"unsupported operand type(s) for +: 'set' and "+typeof other)}
set.__and__=function(self,other,accept_iter){$test(accept_iter,other)
var res=create_type(self)
for(var i=0,len=self.$items.length;i < len;i++){if(_b_.getattr(other,"__contains__")(self.$items[i])){set.add(res,self.$items[i])}}
return res}
set.__contains__=function(self,item){if(self.$simple){if(typeof item=="number" ||item instanceof Number){if(isNaN(item)){
for(var i=self.$items.length-1;i >=0;i--){if(isNaN(self.$items[i])){return true}}
return false}else{return self.$items.indexOf(item)>-1}}else if(typeof item=="string"){return self.$items.indexOf(item)>-1}}
if(! _b_.isinstance(item,set)){$B.$getattr(item,"__hash__")}
for(var i=0,len=self.$items.length;i < len;i++){if($B.rich_comp("__eq__",self.$items[i],item)){return true}}
return false}
set.__eq__=function(self,other){
if(other===undefined){return self===set}
if(_b_.isinstance(other,[_b_.set,_b_.frozenset])){if(other.$items.length==self.$items.length){for(var i=0,len=self.$items.length;i < len;i++){if(set.__contains__(self,other.$items[i])===false){return false}}
return true}
return false}
return _b_.NotImplemented}
set.__format__=function(self,format_string){return set.__str__(self)}
set.__ge__=function(self,other){return set.__le__(other,self)}
set.__gt__=function(self,other){return set.__lt__(other,self)}
set.__init__=function(self,iterable,second){if(second===undefined){if(Array.isArray(iterable)){for(var i=0,len=iterable.length;i < len;i++){$add(self,iterable[i])}
return _b_.None}}
var $=$B.args("__init__",2,{self:null,iterable:null},["self","iterable"],arguments,{iterable:[]},null,null),self=$.self,iterable=$.iterable
if(_b_.isinstance(iterable,[set,frozenset])){self.$items=iterable.$items.slice()
return $N}
var it=$B.$iter(iterable)
while(1){try{var item=_b_.next(it)
set.add(self,item)}catch(err){if(_b_.isinstance(err,_b_.StopIteration)){break}
throw err}}
return $N}
var $set_iterator=$B.$iterator_class("set iterator")
set.__iter__=function(self){var it=$B.$iterator(self.$items,$set_iterator),len=self.$items.length,nxt=it.__next__
it.__next__=function(){if(it.__len__()!=len){throw _b_.RuntimeError.$factory("size changed during iteration")}
return nxt()}
return it}
set.__le__=function(self,other){if(_b_.isinstance(other,[set,frozenset])){var cfunc=_b_.getattr(other,"__contains__")
for(var i=0,len=self.$items.length;i < len;i++){if(! cfunc(self.$items[i])){return false}}
return true}else{return _b_.object.__le__(self,other)}}
set.__len__=function(self){return self.$items.length}
set.__lt__=function(self,other){if(_b_.isinstance(other,[set,frozenset])){return set.__le__(self,other)&&
set.__len__(self)<_b_.getattr(other,"__len__")()}else{return _b_.object["__lt__"](self,other)}}
set.__mro__=[_b_.object]
set.__new__=function(cls){if(cls===undefined){throw _b_.TypeError.$factory("set.__new__(): not enough arguments")}
return{
__class__:cls,$simple:true,$items:[]}}
set.__or__=function(self,other,accept_iter){
var res=clone(self),func=_b_.getattr($B.$iter(other),"__next__")
while(1){try{set.add(res,func())}
catch(err){if(_b_.isinstance(err,_b_.StopIteration)){break}
throw err}}
res.__class__=self.__class__
return res}
set.__reduce__=function(self){return _b_.tuple.$factory([self.__class__,_b_.tuple.$factory([self.$items]),_b_.None])}
set.__reduce_ex__=function(self,protocol){return set.__reduce__(self)}
set.__str__=set.__repr__=function(self){var frozen=self.$real==="frozen"
self.$cycle=self.$cycle===undefined ? 0 :self.$cycle+1
if(self.$items.length===0){if(frozen){return "frozenset()"}
return "set()"}
var klass_name=$B.class_name(self),head=klass_name+"({",tail="})"
if(head=="set({"){head="{";tail="}"}
var res=[]
if(self.$cycle){self.$cycle--
return klass_name+"(...)"}
for(var i=0,len=self.$items.length;i < len;i++){var r=_b_.repr(self.$items[i])
if(r===self ||r===self.$items[i]){res.push("{...}")}
else{res.push(r)}}
res=res.join(", ")
self.$cycle--
return head+res+tail}
set.__sub__=function(self,other,accept_iter){
$test(accept_iter,other,"-")
var res=create_type(self),cfunc=_b_.getattr(other,"__contains__")
for(var i=0,len=self.$items.length;i < len;i++){if(! cfunc(self.$items[i])){res.$items.push(self.$items[i])}}
return res}
set.__xor__=function(self,other,accept_iter){
$test(accept_iter,other,"^")
var res=create_type(self),cfunc=_b_.getattr(other,"__contains__")
for(var i=0,len=self.$items.length;i < len;i++){if(! cfunc(self.$items[i])){set.add(res,self.$items[i])}}
for(var i=0,len=other.$items.length;i < len;i++){if(! set.__contains__(self,other.$items[i])){set.add(res,other.$items[i])}}
return res}
function $test(accept_iter,other,op){if(accept_iter===undefined &&
! _b_.isinstance(other,[set,frozenset])){throw _b_.TypeError.$factory("unsupported operand type(s) for "+op+
": 'set' and '"+$B.class_name(other)+"'")}}
$B.make_rmethods(set)
function $add(self,item){if(typeof item !=="string" && typeof item !=="number" &&
!(item instanceof Number)){self.$simple=false
$B.$getattr(item,"__hash__")}
if(self.$simple){var ix=self.$items.indexOf(item)
if(ix==-1){self.$items.push(item)}
else{
if(item !==self.$items[ix]){self.$items.push(item)}}
return $N}
var cfunc=function(other){return $B.rich_comp("__eq__",item,other)}
for(var i=0,len=self.$items.length;i < len;i++){if(cfunc(self.$items[i])){return $N}}
self.$items.push(item)
return $N}
set.add=function(){var $=$B.args("add",2,{self:null,item:null},["self","item"],arguments,{},null,null),self=$.self,item=$.item
return $add(self,item)}
set.clear=function(){var $=$B.args("clear",1,{self:null},["self"],arguments,{},null,null)
$.self.$items=[]
return $N}
set.copy=function(){var $=$B.args("copy",1,{self:null},["self"],arguments,{},null,null)
if(_b_.isinstance($.self,frozenset)){return $.self}
var res=set.$factory()
for(var i=0,len=$.self.$items.length;i < len;i++){res.$items[i]=$.self.$items[i]}
return res}
set.difference_update=function(self){var $=$B.args("difference_update",1,{self:null},["self"],arguments,{},"args",null)
for(var i=0;i < $.args.length;i++){var s=set.$factory($.args[i]),_next=_b_.getattr($B.$iter(s),"__next__"),item
while(true){try{item=_next()
var _type=typeof item
if(_type=="string" ||_type=="number"){var _index=self.$items.indexOf(item)
if(_index >-1){self.$items.splice(_index,1)}}else{for(var j=0;j < self.$items.length;j++){if($B.rich_comp("__eq__",self.$items[j],item)){self.$items.splice(j,1)}}}}catch(err){if(_b_.isinstance(err,_b_.StopIteration)){break}
throw err}}}
return $N}
set.discard=function(){var $=$B.args("discard",2,{self:null,item:null},["self","item"],arguments,{},null,null)
try{set.remove($.self,$.item)}
catch(err){if(!_b_.isinstance(err,[_b_.KeyError,_b_.LookupError])){throw err}}
return $N}
set.intersection_update=function(){
var $=$B.args("intersection_update",1,{self:null},["self"],arguments,{},"args",null),self=$.self
for(var i=0;i < $.args.length;i++){var remove=[],s=set.$factory($.args[i])
for(var j=0;j < self.$items.length;j++){var _item=self.$items[j],_type=typeof _item
if(_type=="string" ||_type=="number"){if(s.$items.indexOf(_item)==-1){remove.push(j)}}else{var found=false
for(var k=0;! found && k < s.$items.length;k++){if($B.rich_comp("__eq__",s.$items[k],_item)){found=true}}
if(! found){remove.push(j)}}}
remove.sort(function(x,y){return x-y}).reverse()
for(var j=0;j < remove.length;j++){self.$items.splice(remove[j],1)}}
return $N}
set.isdisjoint=function(){var $=$B.args("is_disjoint",2,{self:null,other:null},["self","other"],arguments,{},null,null)
for(var i=0,len=$.self.$items.length;i < len;i++){if(_b_.getattr($.other,"__contains__")($.self.$items[i])){return false}}
return true}
set.pop=function(self){if(self.$items.length===0){throw _b_.KeyError.$factory('pop from an empty set')}
return self.$items.pop()}
set.remove=function(self,item){
var $=$B.args("remove",2,{self:null,item:null},["self","item"],arguments,{},null,null),self=$.self,item=$.item
if(! _b_.isinstance(item,set)){_b_.hash(item)}
if(typeof item=="string" ||typeof item=="number"){var _i=self.$items.indexOf(item)
if(_i==-1){throw _b_.KeyError.$factory(item)}
self.$items.splice(_i,1)
return $N}
for(var i=0,len=self.$items.length;i < len;i++){if($B.rich_comp("__eq__",self.$items[i],item)){self.$items.splice(i,1)
return $N}}
throw _b_.KeyError.$factory(item)}
set.symmetric_difference_update=function(self,s){
var $=$B.args("symmetric_difference_update",2,{self:null,s:null},["self","s"],arguments,{},null,null),self=$.self,s=$.s
var _next=_b_.getattr($B.$iter(s),"__next__"),item,remove=[],add=[]
while(true){try{item=_next()
var _type=typeof item
if(_type=="string" ||_type=="number"){var _index=self.$items.indexOf(item)
if(_index >-1){remove.push(_index)}else{add.push(item)}}else{var found=false
for(var j=0;! found && j < self.$items.length;j++){if($B.rich_comp("__eq__",self.$items[j],item)){remove.push(j)
found=true}}
if(! found){add.push(item)}}}catch(err){if(_b_.isinstance(err,_b_.StopIteration)){break}
throw err}}
remove.sort(function(x,y){return x-y}).reverse()
for(var i=0;i < remove.length;i++){if(remove[i]!=remove[i-1]){self.$items.splice(remove[i],1)}}
for(var i=0;i < add.length;i++){set.add(self,add[i])}
return $N}
set.update=function(self){
var $=$B.args("update",1,{self:null},["self"],arguments,{},"args",null)
for(var i=0;i < $.args.length;i++){var other=set.$factory($.args[i])
for(var j=0,_len=other.$items.length;j < _len;j++){set.add(self,other.$items[j])}}
return $N}
set.difference=function(){var $=$B.args("difference",1,{self:null},["self"],arguments,{},"args",null)
if($.args.length==0){return set.copy($.self)}
var res=clone($.self)
for(var i=0;i < $.args.length;i++){res=set.__sub__(res,set.$factory($.args[i]))}
return res}
var fc=set.difference+""
eval("set.intersection = "+
fc.replace(/difference/g,"intersection").replace("__sub__","__and__"))
eval("set.symmetric_difference = "+
fc.replace(/difference/g,"symmetric_difference").replace("__sub__","__xor__"))
eval("set.union = "+
fc.replace(/difference/g,"union").replace("__sub__","__or__"))
set.issubset=function(){var $=$B.args("issubset",2,{self:null,other:null},["self","other"],arguments,{},"args",null),func=_b_.getattr($.other,"__contains__")
for(var i=0,len=$.self.$items.length;i < len;i++){if(! func($.self.$items[i])){return false}}
return true}
set.issuperset=function(){var $=$B.args("issuperset",2,{self:null,other:null},["self","other"],arguments,{},"args",null)
var func=_b_.getattr($.self,"__contains__"),it=$B.$iter($.other)
while(true){try{var item=_b_.next(it)
if(! func(item)){return false}}catch(err){if(_b_.isinstance(err,_b_.StopIteration)){return true}
throw err}}
return true}
function $accept_only_set(f,op){return function(self,other,accept_iter){$test(accept_iter,other,op)
f(self,other)
return self}}
set.__iand__=$accept_only_set(set.intersection_update,"&=")
set.__isub__=$accept_only_set(set.difference_update,"-=")
set.__ixor__=$accept_only_set(set.symmetric_difference_update,"^=")
set.__ior__=$accept_only_set(set.update,"|=")
set.$factory=function(){
var res={__class__:set,$simple:true,$items:[]}
var args=[res].concat(Array.prototype.slice.call(arguments))
set.__init__.apply(null,args)
return res}
$B.set_func_names(set,"builtins")
var frozenset={__class__:_b_.type,__mro__:[object],$infos:{__module__:"builtins",__name__:"frozenset"},$is_class:true,$native:true}
for(var attr in set){switch(attr){case "add":
case "clear":
case "discard":
case "pop":
case "remove":
case "update":
break
default:
if(frozenset[attr]==undefined){if(typeof set[attr]=="function"){frozenset[attr]=(function(x){return function(){return set[x].apply(null,arguments)}})(attr)}else{frozenset[attr]=set[attr]}}}}
frozenset.__hash__=function(self){if(self===undefined){return frozenset.__hashvalue__ ||$B.$py_next_hash--}
if(self.__hashvalue__ !==undefined){return self.__hashvalue__}
var _hash=1927868237
_hash*=self.$items.length
for(var i=0,len=self.$items.length;i < len;i++){var _h=_b_.hash(self.$items[i])
_hash ^=((_h ^ 89869747)^(_h << 16))*3644798167}
_hash=_hash*69069+907133923
if(_hash==-1){_hash=590923713}
return self.__hashvalue__=_hash}
frozenset.__init__=function(){
return $N}
frozenset.__new__=function(cls){if(cls===undefined){throw _b_.TypeError.$factory(
"frozenset.__new__(): not enough arguments")}
return{
__class__:cls,$simple:true,$items:[]}}
var singleton_id=Math.floor(Math.random()*Math.pow(2,40))
function empty_frozenset(){return{
__class__:frozenset,$items:[],$id:singleton_id}}
frozenset.$factory=function(){var $=$B.args("frozenset",1,{iterable:null},["iterable"],arguments,{iterable:null},null,null)
if($.iterable===null){return empty_frozenset()}
else if($.iterable.__class__==frozenset){return $.iterable}
var res=set.$factory($.iterable)
if(res.$items.length==0){return empty_frozenset()}
res.__class__=frozenset
return res}
$B.set_func_names(frozenset,"builtins")
_b_.set=set
_b_.frozenset=frozenset})(__BRYTHON__)
;
;(function($B){var bltns=$B.InjectBuiltins()
eval(bltns)
var object=_b_.object
var _window=self;
var JSConstructor={__class__:_b_.type,__mro__:[object],$infos:{__module__:"<javascript>",__name__:'JSConstructor'},$is_class:true}
JSConstructor.__call__=function(self){
return function(){var args=[null]
for(var i=0,len=arguments.length;i < len;i++){args.push(pyobj2jsobj(arguments[i]))}
var factory=self.func.bind.apply(self.func,args)
var res=new factory()
return $B.$JS2Py(res)}}
JSConstructor.__getattribute__=function(self,attr){
if(attr=="__call__"){return function(){var args=[null]
for(var i=0,len=arguments.length;i < len;i++){args.push(pyobj2jsobj(arguments[i]))}
var factory=self.func.bind.apply(self.func,args)
var res=new factory()
return $B.$JS2Py(res)}}
return JSObject.__getattribute__(self.obj,attr)}
JSConstructor.$factory=function(obj){return{
__class__:JSConstructor,obj:obj,func:obj.js_func}}
var UndefinedClass=$B.make_class("undefined",function(){return Undefined}
)
UndefinedClass.__bool__=function(){return false}
UndefinedClass.__repr__=function(){return "undefined"}
var Undefined={__class__:UndefinedClass}
$B.set_func_names(UndefinedClass,"<javascript>")
var jsobj2pyobj=$B.jsobj2pyobj=function(jsobj){switch(jsobj){case true:
case false:
return jsobj}
if(jsobj===undefined){return $B.Undefined}
else if(jsobj===null){return _b_.None}
if(Array.isArray(jsobj)){return _b_.list.$factory(jsobj.map(jsobj2pyobj))}
if(typeof jsobj==='number'){if(jsobj.toString().indexOf('.')==-1){return _b_.int.$factory(jsobj)}
return _b_.float.$factory(jsobj)}
if(jsobj.$nat==='kw'){return jsobj}
return JSObject.$factory(jsobj)}
var pyobj2jsobj=$B.pyobj2jsobj=function(pyobj){
if(pyobj===true ||pyobj===false){return pyobj}
if(pyobj===_b_.None){return null}
if(pyobj===$B.Undefined){return undefined}
var klass=$B.get_class(pyobj)
if(klass===undefined){
return pyobj;}
if(klass===JSObject ||klass===JSConstructor){
if(pyobj.js_func !==undefined){return pyobj.js_func}
return pyobj.js}else if(klass===$B.DOMNode ||
klass.__mro__.indexOf($B.DOMNode)>-1){
return pyobj.elt}else if([_b_.list,_b_.tuple].indexOf(klass)>-1){
var res=[]
pyobj.forEach(function(item){res.push(pyobj2jsobj(item))})
return res}else if(klass===_b_.dict){
var jsobj={}
var items=_b_.list.$factory(_b_.dict.items(pyobj))
items.forEach(function(item){if(typeof item[1]=='function'){
item[1].bind(jsobj)}
jsobj[item[0]]=pyobj2jsobj(item[1])})
return jsobj}else if(klass===$B.builtins.float){
return pyobj.valueOf()}else if(klass===$B.Function ||klass===$B.method){
return function(){try{var args=[]
for(var i=0;i < arguments.length;i++){if(arguments[i]===undefined){args.push(_b_.None)}
else{args.push(jsobj2pyobj(arguments[i]))}}
return pyobj2jsobj(pyobj.apply(this,args))}catch(err){console.log(err)
console.log(_b_.getattr(err,'info'))
console.log(err.__class__.$infos.__name__+':',err.args.length > 0 ? err.args[0]:'' )
throw err}}}else{
return pyobj}}
var JSObject={__class__:_b_.type,__mro__:[object],$infos:{__module__:"builtins",__name__:'JSObject'}}
JSObject.__bool__=function(self){return(new Boolean(self.js)).valueOf()}
JSObject.__delattr__=function(self,attr){_b_.getattr(self,attr)
delete self.js[attr]
return _b_.None}
JSObject.__dir__=function(self){return Object.keys(self.js)}
JSObject.__getattribute__=function(self,attr){var $test=false
if($test){console.log("get attr",attr,"of",self)}
if(attr.substr(0,2)=='$$'){attr=attr.substr(2)}
if(self.js===null){return object.__getattribute__(None,attr)}
if(attr=="__class__"){return JSObject}
if(attr=="__call__"){if(typeof self.js=="function"){return function(){
var args=[]
for(var i=0;i < arguments.length;i++){args.push($B.pyobj2jsobj(arguments[i]))}
var res=self.js.apply(null,args)
if(res===undefined){return None}
return JSObject.$factory(res)}}else{throw _b_.AttributeError.$factory("object is not callable")}}
if(self.__class__===JSObject && attr=="bind" &&
self.js[attr]===undefined &&
self.js['addEventListener']!==undefined){
attr='addEventListener'}
var js_attr=self.js[attr]
if(self.js_func && self.js_func[attr]!==undefined){js_attr=self.js_func[attr]}
if(js_attr !==undefined){if($test){console.log("jsattr",js_attr)}
if(typeof js_attr=='function'){
var res=function(){var args=[]
for(var i=0,len=arguments.length;i < len;i++){var arg=arguments[i]
if(arg !==undefined && arg !==null && arg.$nat !==undefined){
throw TypeError.$factory(
"A Javascript function can't take "+
"keyword arguments")}else{args.push(pyobj2jsobj(arg))}}
if(attr==='replace' && self.js===location){location.replace(args[0])
return}
var new_this=self.js
if(self.js_func){
new_this=self.js_func;}
if(this !==null && this !==undefined && this !==_window){new_this=this}
var result=js_attr.apply(new_this,args)
return jsobj2pyobj(result)}
res.__repr__=function(){return '<function '+attr+'>'}
res.__str__=function(){return '<function '+attr+'>'}
res.prototype=js_attr.prototype
return{__class__:JSObject,js:res,js_func:js_attr}}else{if($test){console.log("use JS2Py",$B.$JS2Py(js_attr))}
return $B.$JS2Py(js_attr)}}else if(self.js===_window && attr==='$$location'){
return $Location()}
var res=self.__class__[attr]
if(res===undefined){
var mro=self.__class__.__mro__
for(var i=0,len=mro.length;i < len;i++){var v=mro[i][attr]
if(v !==undefined){res=v
break}}}
if(res !==undefined){if($test){console.log("found in klass",res+"")}
if(typeof res==='function'){
return function(){var args=[self]
for(var i=0,len=arguments.length;i < len;i++){var arg=arguments[i]
if(arg &&(arg.__class__===JSObject ||
arg.__class__===JSConstructor)){args.push(arg.js)}else{args.push(arg)}}
return res.apply(self,args)}}
return $B.$JS2Py(res)}else{
throw _b_.AttributeError.$factory("no attribute "+attr+' for '+
self.js)}}
JSObject.__getitem__=function(self,rank){if(typeof self.js.length=='number'){if((typeof rank=="number" ||typeof rank=="boolean")&&
typeof self.js.item=='function'){var rank_to_int=_b_.int.$factory(rank)
if(rank_to_int < 0){rank_to_int+=self.js.length}
var res=JSObject.$factory(self.js.item(rank_to_int))
if(res===undefined){throw _b_.KeyError.$factory(rank)}
return res}else if(typeof rank=="string" &&
typeof self.js.getNamedItem=='function'){var res=JSObject.$factory(self.js.getNamedItem(rank))
if(res===undefined){throw _b_.KeyError.$factory(rank)}
return res}}
try{return getattr(self.js,'__getitem__')(rank)}
catch(err){if(self.js[rank]!==undefined){return JSObject.$factory(self.js[rank])}
throw _b_.KeyError.$factory(rank)}}
var $JSObject_iterator=$B.$iterator_class('JS object iterator')
JSObject.__iter__=function(self){var items=[]
if(_window.Symbol && self.js[Symbol.iterator]!==undefined){
if(self.js.length !==undefined && self.js.item !==undefined){for(var i=0;i < self.js.length ;i++){items.push(JSObject.$factory(self.js[i]))}}else{for(var item in self.js){if(self.js.hasOwnProperty(item)){items.push(jsobj2pyobj(item))}}}
return $B.$iterator(items,$JSObject_iterator)}else if(self.js.length !==undefined && self.js.item !==undefined){
for(var i=0;i < self.js.length;i++){items.push(JSObject.$factory(self.js.item(i)))}
return $B.$iterator(items,$JSObject_iterator)}
var _dict=JSObject.to_dict(self)
return _b_.dict.__iter__(_dict)}
JSObject.__len__=function(self){if(typeof self.js.length=='number'){return self.js.length}
try{return getattr(self.js,'__len__')()}
catch(err){throw _b_.AttributeError.$factory(self.js+' has no attribute __len__')}}
JSObject.__repr__=function(self){if(self.js instanceof Date){return self.js.toString()}
var proto=Object.getPrototypeOf(self.js)
if(proto){var name=proto.constructor.name
if(name===undefined){
var proto_str=proto.constructor.toString()
name=proto_str.substring(8,proto_str.length-1)}
return "<"+name+" object>"}
return "<JSObject wraps "+self.js+">"}
JSObject.__setattr__=function(self,attr,value){if(attr.substr && attr.substr(0,2)=='$$'){
attr=attr.substr(2)}
if(isinstance(value,JSObject)){self.js[attr]=value.js}
else{self.js[attr]=value
if(typeof value=='function'){self.js[attr]=function(){var args=[]
for(var i=0,len=arguments.length;i < len;i++){args.push($B.$JS2Py(arguments[i]))}
try{return value.apply(null,args)}
catch(err){err=$B.exception(err)
var info=_b_.getattr(err,'info')
if(err.args.length > 0){err.toString=function(){return info+'\n'+err.__class__.$infos.__name__+
': '+_b_.repr(err.args[0])}}else{err.toString=function(){return info+'\n'+err.__class__.$infos.__name__}}
console.log(err+'')
throw err}}}}}
JSObject.__setitem__=JSObject.__setattr__
JSObject.__str__=JSObject.__repr__
var no_dict={'string':true,'function':true,'number':true,'boolean':true}
JSObject.bind=function(self,evt,func){var js_func=function(ev){return func(jsobj2pyobj(ev))}
self.js.addEventListener(evt,js_func)
return _b_.None}
JSObject.to_dict=function(self){
return $B.obj_dict(self.js,true)}
JSObject.$factory=function(obj){if(obj===null){return _b_.None}
if(typeof obj=='function'){return{__class__:JSObject,js:obj,js_func:obj}}
var klass=$B.get_class(obj)
if(klass===_b_.float){return _b_.float.$factory(obj)}
if(klass===_b_.list){return $B.JSArray.$factory(obj)}
if(klass !==undefined){return obj}
return{
__class__:JSObject,js:obj}}
$B.JSObject=JSObject
$B.JSConstructor=JSConstructor})(__BRYTHON__)
;
;(function($B){$B.stdlib={}
var pylist=['VFS_import','__future__','_abcoll','_codecs','_collections','_collections_abc','_compat_pickle','_contextvars','_csv','_dummy_thread','_functools','_imp','_io','_markupbase','_py_abc','_pydecimal','_queue','_random','_socket','_sre','_struct','_sysconfigdata','_sysconfigdata_0_brython_','_testcapi','_thread','_threading_local','_weakref','_weakrefset','abc','antigravity','argparse','atexit','base64','bdb','binascii','bisect','calendar','cmath','cmd','code','codecs','codeop','colorsys','configparser','contextlib','contextvars','copy','copyreg','csv','dataclasses','datetime','decimal','difflib','doctest','enum','errno','external_import','faulthandler','fnmatch','formatter','fractions','functools','gc','genericpath','getopt','gettext','glob','heapq','imp','inspect','io','ipaddress','itertools','keyword','linecache','locale','nntplib','numbers','opcode','operator','optparse','os','pdb','pickle','platform','posixpath','pprint','profile','pwd','py_compile','pydoc','queue','quopri','re','reprlib','select','selectors','shlex','shutil','signal','site','site-packages.__future__','site-packages.docs','site-packages.header','site-packages.test_sp','socket','sre_compile','sre_constants','sre_parse','stat','string','struct','subprocess','sys','sysconfig','tarfile','tempfile','test.namespace_pkgs.module_and_namespace_package.a_test','textwrap','this','threading','time','timeit','token','tokenize','traceback','turtle','types','typing','uuid','warnings','weakref','webbrowser','zipfile']
for(var i=0;i < pylist.length;i++){$B.stdlib[pylist[i]]=['py']}
var js=['_aio','_ajax','_base64','_binascii','_jsre','_locale','_multiprocessing','_posixsubprocess','_profile','_sre_utils','_string','_strptime','_svg','_sys','_warnings','aes','array','builtins','dis','hashlib','hmac-md5','hmac-ripemd160','hmac-sha1','hmac-sha224','hmac-sha256','hmac-sha3','hmac-sha384','hmac-sha512','json','long_int','marshal','math','md5','modulefinder','pbkdf2','posix','rabbit','rabbit-legacy','random','rc4','ripemd160','sha1','sha224','sha256','sha3','sha384','sha512','tripledes','zlib']
for(var i=0;i < js.length;i++){$B.stdlib[js[i]]=['js']}
var pkglist=['asyncio','browser','collections','concurrent','concurrent.futures','email','email.mime','encodings','html','http','importlib','jqueryui','logging','multiprocessing','multiprocessing.dummy','pydoc_data','site-packages.simpleaio','site-packages.ui','test','test.encoded_modules','test.leakers','test.namespace_pkgs.not_a_namespace_pkg.foo','test.support','test.test_email','test.test_importlib','test.test_importlib.builtin','test.test_importlib.extension','test.test_importlib.frozen','test.test_importlib.import_','test.test_importlib.source','test.test_json','test.tracedmodules','unittest','unittest.test','unittest.test.testmock','urllib','xml','xml.etree','xml.parsers','xml.sax']
for(var i=0;i < pkglist.length;i++){$B.stdlib[pkglist[i]]=['py',true]}})(__BRYTHON__)
;

;(function($B){var _b_=$B.builtins,_window=self
var module=$B.module={__class__ :_b_.type,__mro__:[_b_.object],$infos:{__module__:"builtins",__name__:"module"},$is_class:true}
module.__init__=function(){}
module.__new__=function(cls,name,doc,$package){return{
__class__:cls,__name__:name,__doc__:doc ||_b_.None,__package__:$package ||_b_.None}}
module.__repr__=module.__str__=function(self){var res="<module "+self.__name__
if(self.__file__===undefined){res+=" (built-in)"}
return res+">"}
module.__setattr__=function(self,attr,value){if(self.__name__=="__builtins__"){
$B.builtins[attr]=value}else{self[attr]=value}}
module.$factory=function(name,doc,$package){return{
__class__:module,__name__:name,__doc__:doc ||_b_.None,__package__:$package ||_b_.None}}
$B.set_func_names(module,"builtins")
function parent_package(mod_name){var parts=mod_name.split(".")
parts.pop()
return parts.join(".")}
function $download_module(module,url,$package){var xhr=new XMLHttpRequest(),fake_qs
switch($B.$options.cache){case "version":
fake_qs="?v="+$B.version_info[2]
break
case "browser":
fake_qs=""
break
default:
fake_qs="?v="+(new Date().getTime())}
var timer=_window.setTimeout(function(){xhr.abort()},5000)
var res=null,mod_name=module.__name__,res,t0=new Date()
$B.download_time=$B.download_time ||0
xhr.open("GET",url+fake_qs,false)
xhr.send()
if($B.$CORS){if(xhr.status==200 ||xhr.status==0){res=xhr.responseText}else{res=_b_.FileNotFoundError.$factory("No module named '"+
mod_name+"'")}}else{if(xhr.readyState==4){
const contentType=xhr.getResponseHeader("Content-Type")||"";
if((xhr.status==200 ||xhr.status==0)
&&(contentType.indexOf("html")===-1)){res=xhr.responseText
module.$last_modified=
xhr.getResponseHeader("Last-Modified")}else{
console.log("Error "+xhr.status+
" means that Python module "+mod_name+
" was not found at url "+url)
res=_b_.FileNotFoundError.$factory("No module named '"+
mod_name+"'")}}}
_window.clearTimeout(timer)
if(res==null){throw _b_.FileNotFoundError.$factory("No module named '"+
mod_name+"' (res is null)")}
if(res.constructor===Error){throw res}
$B.download_time+=(new Date())-t0
return res}
$B.$download_module=$download_module
function import_js(module,path){try{var module_contents=$download_module(module,path,undefined)}catch(err){return null}
run_js(module_contents,path,module)
return true}
function run_js(module_contents,path,_module){
try{var $module=new Function(module_contents+";\nreturn $module")()
if($B.$options.store){_module.$js=module_contents}}catch(err){console.log(err)
console.log(path,_module)
throw err}
try{$module}
catch(err){console.log("no $module")
throw _b_.ImportError.$factory("name '$module' is not defined in module")}
$module.__name__=_module.__name__
for(var attr in $module){if(typeof $module[attr]=="function"){$module[attr].$infos={__module__:_module.__name__,__name__:attr,__qualname__:attr}}}
if(_module !==undefined){
for(var attr in $module){_module[attr]=$module[attr]}
$module=_module
$module.__class__=module }else{
$module.__class__=module
$module.__name__=_module.__name__
$module.__repr__=$module.__str__=function(){if($B.builtin_module_names.indexOf(_module.name)>-1){return "<module '"+_module.__name__+"' (built-in)>"}
return "<module '"+_module.__name__+"' from "+path+" >"}
if(_module.name !="builtins"){
$module.__file__=path
$B.file_cache[path]=module_contents}}
$B.imported[_module.__name__]=$module
return true}
function show_ns(){var kk=Object.keys(_window)
for(var i=0,len=kk.length;i < len;i++){console.log(kk[i])
if(kk[i].charAt(0)=="$"){console.log(eval(kk[i]))}}
console.log("---")}
function import_py(module,path,$package){
var mod_name=module.__name__,module_contents=$download_module(module,path,$package)
module.$src=module_contents
$B.imported[mod_name].$is_package=module.$is_package
$B.imported[mod_name].$last_modified=module.$last_modified
if(path.substr(path.length-12)=="/__init__.py"){$B.imported[mod_name].__package__=mod_name
$B.imported[mod_name].__path__=path
$B.imported[mod_name].$is_package=module.$is_package=true}else if($package){$B.imported[mod_name].__package__=$package}else{var mod_elts=mod_name.split(".")
mod_elts.pop()
$B.imported[mod_name].__package__=mod_elts.join(".")}
$B.imported[mod_name].__file__=path
return run_py(module_contents,path,module)}
function run_py(module_contents,path,module,compiled){
$B.file_cache[path]=module_contents
var root,js
if(! compiled){var $Node=$B.$Node,$NodeJSCtx=$B.$NodeJSCtx
$B.$py_module_path[module.__name__]=path
root=$B.py2js(module_contents,module,module.__name__,$B.builtins_scope)
if(module.__package__ !==undefined){root.binding["__package__"]=true}
var body=root.children
root.children=[]
var mod_node=new $Node("expression")
new $NodeJSCtx(mod_node,"var $module = (function()")
root.insert(0,mod_node)
for(var i=0,len=body.length;i < len;i++){mod_node.add(body[i])}
var ret_node=new $Node("expression")
new $NodeJSCtx(ret_node,"return $locals_"+
module.__name__.replace(/\./g,"_"))
mod_node.add(ret_node)
var ex_node=new $Node("expression")
new $NodeJSCtx(ex_node,")(__BRYTHON__)")
root.add(ex_node)}
try{js=compiled ? module_contents :root.to_js()
if($B.$options.debug==10){console.log("code for module "+module.__name__)
console.log(js)}
js+="; return $module"
var module_id="$locals_"+module.__name__.replace(/\./g,'_')
var $module=(new Function(module_id,js))(module)}catch(err){
throw err}finally{root=null
js=null
$B.clear_ns(module.__name__)}
try{
var mod=eval("$module")
for(var attr in mod){module[attr]=mod[attr]}
module.__initializing__=false
$B.imported[module.__name__]=module
return true}catch(err){console.log(""+err+" "+" for module "+module.__name__)
for(var attr in err){console.log(attr+" "+err[attr])}
if($B.debug > 0){console.log("line info "+__BRYTHON__.line_info)}
throw err}}
$B.run_py=run_py
function new_spec(fields){
fields.__class__=module
return fields}
var finder_VFS={__class__:_b_.type,__mro__:[_b_.object],$infos:{__module__:"builtins",__name__:"VFSFinder"},create_module :function(cls,spec){
return _b_.None},exec_module :function(cls,modobj){var stored=modobj.__spec__.loader_state.stored
delete modobj.__spec__["loader_state"]
var ext=stored[0],module_contents=stored[1],imports=stored[2]
modobj.$is_package=stored[3]||false
var path=$B.brython_path+"Lib/"+modobj.__name__
if(modobj.$is_package){path+="/__init__.py"}
modobj.__file__=path
if(ext=='.js'){run_js(module_contents,modobj.__path__,modobj)}else if($B.precompiled.hasOwnProperty(modobj.__name__)){var parts=modobj.__name__.split(".")
for(var i=0;i < parts.length;i++){var parent=parts.slice(0,i+1).join(".")
if($B.imported.hasOwnProperty(parent)&&
$B.imported[parent].__initialized__){continue}
var mod_js=$B.precompiled[parent],is_package=Array.isArray(mod_js)
if(is_package){mod_js=mod_js[0]}
$B.imported[parent]=module.$factory(parent,undefined,is_package)
$B.imported[parent].__initialized__=true
$B.imported[parent].__file__=
$B.imported[parent].__cached__="VFS."+
modobj.__name__+".py"
$B.file_cache[$B.imported[parent].__file__]=module_contents
if(is_package){$B.imported[parent].__path__="<stdlib>"
$B.imported[parent].__package__=parent}else{var elts=parent.split(".")
elts.pop()
$B.imported[parent].__package__=elts.join(".")}
try{var parent_id=parent.replace(/\./g,"_")
mod_js+="return $locals_"+parent_id
var $module=new Function("$locals_"+parent_id,mod_js)(
$B.imported[parent])}catch(err){if($B.debug > 1){console.log(err)
for(var k in err){console.log(k,err[k])}
console.log(Object.keys($B.imported))}
throw err}
for(var attr in $module){$B.imported[parent][attr]=$module[attr]}
if(i>0){
$B.builtins.setattr($B.imported[parts.slice(0,i).join(".")],parts[i],$module)}}
return $module}else{if($B.debug > 1){console.log("run Python code from VFS",modobj.__name__)}
run_py(module_contents,modobj.__path__,modobj,ext=='.pyc.js')}},find_module:function(cls,name,path){return{
__class__:Loader,load_module:function(name,path){var spec=cls.find_spec(cls,name,path)
var mod=module.$factory(name)
$B.imported[name]=mod
mod.__spec__=spec
cls.exec_module(cls,mod)}}},find_spec :function(cls,fullname,path,prev_module){if(!$B.use_VFS){return _b_.None}
var stored=$B.VFS[fullname]
if(stored===undefined){return _b_.None}
var is_package=stored[3]||false,is_builtin=$B.builtin_module_names.indexOf(fullname)>-1
return new_spec({name :fullname,loader:cls,
origin :is_builtin? "built-in" :"brython_stdlib",
submodule_search_locations:is_package?[]:_b_.None,loader_state:{stored:stored},
cached:_b_.None,parent:is_package? fullname :parent_package(fullname),has_location:_b_.False})}}
$B.set_func_names(finder_VFS,"<import>")
for(var method in finder_VFS){if(typeof finder_VFS[method]=="function"){finder_VFS[method]=_b_.classmethod.$factory(
finder_VFS[method])}}
finder_VFS.$factory=function(){return{__class__:finder_VFS}}
var finder_stdlib_static={$factory :finder_stdlib_static,__class__ :_b_.type,__mro__:[_b_.object],$infos:{__module__:"builtins",__name__:"StdlibStatic"},create_module :function(cls,spec){
return _b_.None},exec_module :function(cls,module){var metadata=module.__spec__.loader_state
module.$is_package=metadata.is_package
if(metadata.ext=="py"){import_py(module,metadata.path,module.__package__)}else{import_js(module,metadata.path)}
delete module.__spec__["loader_state"]},find_module:function(cls,name,path){var spec=cls.find_spec(cls,name,path)
if(spec===_b_.None){return _b_.None}
return{
__class__:Loader,load_module:function(name,path){var mod=module.$factory(name)
$B.imported[name]=mod
mod.__spec__=spec
mod.__package__=spec.parent
cls.exec_module(cls,mod)}}},find_spec:function(cls,fullname,path,prev_module){if($B.stdlib && $B.$options.static_stdlib_import){var address=$B.stdlib[fullname]
if(address===undefined){var elts=fullname.split(".")
if(elts.length > 1){elts.pop()
var $package=$B.stdlib[elts.join(".")]
if($package && $package[1]){address=["py"]}}}
if(address !==undefined){var ext=address[0],is_pkg=address[1]!==undefined,path=$B.brython_path+((ext=="py")? "Lib/" :"libs/")+
fullname.replace(/\./g,"/"),metadata={ext:ext,is_package:is_pkg,path:path+(is_pkg? "/__init__.py" :
((ext=="py")? ".py" :".js")),address:address}
var res=new_spec({name :fullname,loader:cls,
origin :metadata.path,submodule_search_locations:is_pkg?[path]:_b_.None,loader_state:metadata,
cached:_b_.None,parent:is_pkg ? fullname :parent_package(fullname),has_location:_b_.True})
return res}}
return _b_.None}}
$B.set_func_names(finder_stdlib_static,"<import>")
for(var method in finder_stdlib_static){if(typeof finder_stdlib_static[method]=="function"){finder_stdlib_static[method]=_b_.classmethod.$factory(
finder_stdlib_static[method])}}
finder_stdlib_static.$factory=function(){return{__class__:finder_stdlib_static}}
var finder_path={__class__:_b_.type,__mro__:[_b_.object],$infos:{__module__:"builtins",__name__:"ImporterPath"},create_module :function(cls,spec){
return _b_.None},exec_module :function(cls,module){var _spec=_b_.getattr(module,"__spec__"),code=_spec.loader_state.code;
module.$is_package=_spec.loader_state.is_package,delete _spec.loader_state["code"]
var src_type=_spec.loader_state.type
if(src_type=="py" ||src_type=="pyc.js"){run_py(code,_spec.origin,module,src_type=="pyc.js")}
else if(_spec.loader_state.type=="js"){run_js(code,_spec.origin,module)}},find_module:function(cls,name,path){return finder_path.find_spec(cls,name,path)},find_spec :function(cls,fullname,path,prev_module){var current_module=$B.last($B.frames_stack)[2]
if($B.VFS && $B.VFS[current_module]){
return _b_.None}
if($B.is_none(path)){
path=$B.path}
for(var i=0,li=path.length;i < li;++i){var path_entry=path[i]
if(path_entry[path_entry.length-1]!="/"){path_entry+="/"}
var finder=$B.path_importer_cache[path_entry]
if(finder===undefined){var finder_notfound=true
for(var j=0,lj=$B.path_hooks.length;
j < lj && finder_notfound;++j){var hook=$B.path_hooks[j].$factory
try{finder=(typeof hook=="function" ? hook :
_b_.getattr(hook,"__call__"))(path_entry)
finder_notfound=false}catch(e){if(e.__class__ !==_b_.ImportError){throw e}}}
if(finder_notfound){$B.path_importer_cache[path_entry]=_b_.None}}
if($B.is_none(finder)){continue}
var find_spec=_b_.getattr(finder,"find_spec"),fs_func=typeof find_spec=="function" ?
find_spec :
_b_.getattr(find_spec,"__call__")
var spec=fs_func(fullname,prev_module)
if(!$B.is_none(spec)){return spec}}
return _b_.None}}
$B.set_func_names(finder_path,"<import>")
for(var method in finder_path){if(typeof finder_path[method]=="function"){finder_path[method]=_b_.classmethod.$factory(
finder_path[method])}}
finder_path.$factory=function(){return{__class__:finder_path}}
var vfs_hook={__class__:_b_.type,__mro__:[_b_.object],$infos:{__module__:"builtins",__name__:"VfsPathFinder"},load_vfs:function(self){try{var code=$download_module({__name__:"<VFS>"},self.path)}
catch(e){self.vfs=undefined
throw new _b_.ImportError.$factory(e.$message ||e.message)}
eval(code)
code=null
try{self.vfs=$vfs}
catch(e){throw new _b_.ImportError.$factory("Expecting $vfs var in VFS file")}
$B.path_importer_cache[self.path+"/"]=self},find_spec:function(self,fullname,module){if(self.vfs===undefined){try{vfs_hook.load_vfs(self)}
catch(e){console.log("Could not load VFS while importing '"+
fullname+"'")
return _b_.None}}
self.__class__.vfs=self.vfs
var stored=self.vfs[fullname]
if(stored===undefined){return _b_.None}
var is_package=stored[2]
return new_spec({name :fullname,loader:finder_VFS,
origin :self.path+'#'+fullname,
submodule_search_locations:is_package?[self.path]:
_b_.None,loader_state:{stored:stored},
cached:_b_.None,parent:is_package ? fullname :parent_package(fullname),has_location:_b_.True})},invalidate_caches:function(self){self.vfs=undefined}}
vfs_hook.$factory=function(path){if(path.substr(-1)=='/'){path=path.slice(0,-1)}
var ext=path.substr(-7)
if(ext !='.vfs.js'){throw _b_.ImportError.$factory('VFS file URL must end with .vfs.js extension');}
self={__class__:vfs_hook,path:path}
return self}
$B.set_func_names(vfs_hook,"<import>")
var url_hook={__class__:_b_.type,__mro__:[_b_.object],__repr__:function(self){return "<UrlPathFinder"+(self.hint? " for '"+self.hint+"'":
"(unbound)")+" at "+self.path_entry+'>'},$infos:{__module__:"builtins",__name__:"UrlPathFinder"},find_spec :function(self,fullname,module){var loader_data={},notfound=true,hint=self.hint,base_path=self.path_entry+fullname.match(/[^.]+$/g)[0],modpaths=[]
var tryall=hint===undefined
if(tryall ||hint=="js"){
modpaths=[[base_path+".js","js",false]]}
if(tryall ||hint=='pyc.js'){
modpaths=modpaths.concat([[base_path+".pyc.js","pyc.js",false],[base_path+"/__init__.pyc.js","pyc.js",true]])}
if(tryall ||hint=='py'){
modpaths=modpaths.concat([[base_path+".py","py",false],[base_path+"/__init__.py","py",true]])}
for(var j=0;notfound && j < modpaths.length;++j){try{var file_info=modpaths[j],module={__name__:fullname,$is_package:false}
loader_data.code=$download_module(module,file_info[0],undefined)
notfound=false
loader_data.type=file_info[1]
loader_data.is_package=file_info[2]
if(hint===undefined){self.hint=file_info[1]
$B.path_importer_cache[self.path_entry]=self}
if(loader_data.is_package){
$B.path_importer_cache[base_path+'/']=
url_hook.$factory(base_path+'/',self.hint)}
loader_data.path=file_info[0]}catch(err){}}
if(!notfound){return new_spec({name :fullname,loader:finder_path,origin :loader_data.path,
submodule_search_locations:loader_data.is_package?
[base_path]:_b_.None,loader_state:loader_data,
cached:_b_.None,parent:loader_data.is_package? fullname :
parent_package(fullname),has_location:_b_.True})}
return _b_.None},invalidate_caches :function(self){}}
url_hook.$factory=function(path_entry,hint){return{__class__:url_hook,path_entry:path_entry,hint:hint}}
$B.set_func_names(url_hook,"<import>")
$B.path_importer_cache={};
var _sys_paths=[[$B.script_dir+"/","py"],[$B.brython_path+"Lib/","py"],[$B.brython_path+"Lib/site-packages/","py"],[$B.brython_path+"libs/","js"]]
for(var i=0;i < _sys_paths.length;++i){var _path=_sys_paths[i],_type=_path[1]
_path=_path[0]
$B.path_importer_cache[_path]=url_hook.$factory(_path,_type)}
delete _path
delete _type
delete _sys_paths
function import_error(mod_name){var exc=_b_.ImportError.$factory(mod_name)
exc.name=mod_name
throw exc}
$B.$__import__=function(mod_name,globals,locals,fromlist,level){
var modobj=$B.imported[mod_name],parsed_name=mod_name.split('.')
if(modobj==_b_.None){
import_error(mod_name)}
if(modobj===undefined){
if($B.is_none(fromlist)){fromlist=[]}
for(var i=0,modsep="",_mod_name="",len=parsed_name.length-1,__path__=_b_.None;i <=len;++i){var _parent_name=_mod_name;
_mod_name+=modsep+parsed_name[i]
modsep="."
var modobj=$B.imported[_mod_name]
if(modobj==_b_.None){
import_error(_mod_name)}else if(modobj===undefined){try{$B.import_hooks(_mod_name,__path__,undefined)}catch(err){delete $B.imported[_mod_name]
throw err}
if($B.is_none($B.imported[_mod_name])){import_error(_mod_name)}else{
if(_parent_name){_b_.setattr($B.imported[_parent_name],parsed_name[i],$B.imported[_mod_name])}}}
if(i < len){try{__path__=_b_.getattr($B.imported[_mod_name],"__path__")}catch(e){
if(i==len-1 &&
$B.imported[_mod_name][parsed_name[len]]&&
$B.imported[_mod_name][parsed_name[len]].__class__===
module){return $B.imported[_mod_name][parsed_name[len]]}
import_error(_mod_name)}}}}else{if($B.imported[parsed_name[0]]&&
parsed_name.length > 1){try{$B.$setattr($B.imported[parsed_name[0]],parsed_name[1],modobj)}catch(err){console.log("error",parsed_name,modobj)
throw err}}}
if(fromlist.length > 0){
return $B.imported[mod_name]}else{
return $B.imported[parsed_name[0]]}}
$B.$import=function(mod_name,fromlist,aliases,locals){var parts=mod_name.split(".")
if(mod_name[mod_name.length-1]=="."){parts.pop()}
var norm_parts=[],prefix=true
for(var i=0,len=parts.length;i < len;i++){var p=parts[i]
if(prefix && p==""){
elt=norm_parts.pop()
if(elt===undefined){throw _b_.ImportError.$factory("Parent module '' not loaded, "+
"cannot perform relative import")}}else{prefix=false;
norm_parts.push(p.substr(0,2)=="$$" ? p.substr(2):p)}}
var mod_name=norm_parts.join(".")
if($B.$options.debug==10){console.log("$import "+mod_name)
console.log("use VFS ? "+$B.use_VFS)
console.log("use static stdlib paths ? "+$B.static_stdlib_import)}
var current_frame=$B.frames_stack[$B.frames_stack.length-1],_globals=current_frame[3],__import__=_globals["__import__"],globals=$B.obj_dict(_globals)
if(__import__===undefined){
__import__=$B.$__import__}
var importer=typeof __import__=="function" ?
__import__ :
_b_.getattr(__import__,"__call__"),modobj=importer(mod_name,globals,undefined,fromlist,0)
if(! fromlist ||fromlist.length==0){
var alias=aliases[mod_name]
if(alias){locals[alias]=$B.imported[mod_name]}else{locals[$B.to_alias(norm_parts[0])]=modobj}}else{var __all__=fromlist,thunk={}
if(fromlist && fromlist[0]=="*"){__all__=_b_.getattr(modobj,"__all__",thunk);
if(__all__ !==thunk){
aliases={}}}
if(__all__===thunk){
for(var attr in modobj){if(attr[0]!=="_"){locals[attr]=modobj[attr]}}}else{
for(var i=0,l=__all__.length;i < l;++i){var name=__all__[i]
var alias=aliases[name]||name
try{
locals[alias]=_b_.getattr(modobj,name);}catch($err1){
try{_b_.getattr(__import__,'__call__')(mod_name+'.'+name,globals,undefined,[],0);
locals[alias]=_b_.getattr(modobj,name);}catch($err3){
if(mod_name==="__future__"){
var frame=$B.last($B.frames_stack),line_info=frame[3].$line_info,line_elts=line_info.split(','),line_num=parseInt(line_elts[0])
$B.$SyntaxError(frame[2],"future feature "+name+" is not defined",current_frame[3].src,undefined,line_num)}
if($err3.$py_error){var msg=_b_.getattr($err3,"info")+"\n"+
$err3.__class__.__name__+": "+
$err3.args[0],exc=_b_.ImportError.$factory("cannot import name '"+
name+"'\n\n"+msg)
exc.name=name
throw exc}
console.log($err3)
console.log($B.last($B.frames_stack))
throw _b_.ImportError.$factory(
"cannot import name '"+name+"'")}}}}}}
$B.$path_hooks=[vfs_hook,url_hook]
$B.$meta_path=[finder_VFS,finder_stdlib_static,finder_path]
function optimize_import_for_path(path,filetype){if(path.slice(-1)!="/"){path=path+"/" }
var value=(filetype=='none')? _b_.None :
url_hook.$factory(path,filetype)
$B.path_importer_cache[path]=value}
var Loader={__class__:$B.$type,__mro__:[_b_.object],__name__ :"Loader"}
var _importlib_module={__class__ :module,__name__ :"_importlib",Loader:Loader,VFSFinder:finder_VFS,StdlibStatic:finder_stdlib_static,ImporterPath:finder_path,VFSPathFinder :vfs_hook,UrlPathFinder:url_hook,optimize_import_for_path :optimize_import_for_path}
_importlib_module.__repr__=_importlib_module.__str__=function(){return "<module '_importlib' (built-in)>"}
$B.imported["_importlib"]=_importlib_module})(__BRYTHON__)
;
;(function($B){var bltns=$B.InjectBuiltins()
eval(bltns)
var object=_b_.object
function $err(op,other){var msg="unsupported operand type(s) for "+op+
": 'float' and '"+$B.class_name(other)+"'"
throw _b_.TypeError.$factory(msg)}
var float={__class__:_b_.type,__dir__:object.__dir__,$infos:{__module__:"builtins",__name__:"float"},$is_class:true,$native:true,$descriptors:{"numerator":true,"denominator":true,"imag":true,"real":true}}
float.numerator=function(self){return self}
float.denominator=function(self){return _b_.int.$factory(1)}
float.imag=function(self){return _b_.int.$factory(0)}
float.real=function(self){return self}
float.__float__=function(self){return self}
float.as_integer_ratio=function(self){if(self.valueOf()==Number.POSITIVE_INFINITY ||
self.valueOf()==Number.NEGATIVE_INFINITY){throw _b_.OverflowError.$factory("Cannot pass infinity to "+
"float.as_integer_ratio.")}
if(! Number.isFinite(self.valueOf())){throw _b_.ValueError.$factory("Cannot pass NaN to "+
"float.as_integer_ratio.")}
var tmp=_b_.$frexp(self.valueOf()),fp=tmp[0],exponent=tmp[1]
for(var i=0;i < 300;i++){if(fp==Math.floor(fp)){break}else{fp*=2
exponent--}}
numerator=float.$factory(fp)
py_exponent=abs(exponent)
denominator=1
py_exponent=_b_.getattr(_b_.int.$factory(denominator),"__lshift__")(py_exponent)
if(exponent > 0){numerator=numerator*py_exponent}else{denominator=py_exponent}
return _b_.tuple.$factory([_b_.int.$factory(numerator),_b_.int.$factory(denominator)])}
float.__bool__=function(self){return _b_.bool.$factory(self.valueOf())}
float.__eq__=function(self,other){if(isNaN(self)&& isNaN(other)){return false}
if(isinstance(other,_b_.int)){return self==other}
if(isinstance(other,float)){
return self.valueOf()==other.valueOf()}
if(isinstance(other,_b_.complex)){if(other.$imag !=0){return false}
return self==other.$real}
return _b_.NotImplemented}
float.__floordiv__=function(self,other){if(isinstance(other,[_b_.int,float])){if(other.valueOf()==0){throw ZeroDivisionError.$factory('division by zero')}
return float.$factory(Math.floor(self/other))}
if(hasattr(other,"__rfloordiv__")){return getattr(other,"__rfloordiv__")(self)}
$err("//",other)}
float.fromhex=function(arg){
if(! isinstance(arg,_b_.str)){throw _b_.ValueError.$factory("argument must be a string")}
var value=arg.trim()
switch(value.toLowerCase()){case "+inf":
case "inf":
case "+infinity":
case "infinity":
return $FloatClass(Infinity)
case "-inf":
case "-infinity":
return $FloatClass(-Infinity)
case "+nan":
case "nan":
return $FloatClass(Number.NaN)
case "-nan":
return $FloatClass(-Number.NaN)
case "":
throw _b_.ValueError.$factory("could not convert string to float")}
var _m=/^(\d*\.?\d*)$/.exec(value)
if(_m !==null){return $FloatClass(parseFloat(_m[1]))}
var _m=/^(\+|-)?(0x)?([0-9A-F]+\.?)?(\.[0-9A-F]+)?(p(\+|-)?\d+)?$/i.exec(value)
if(_m==null){throw _b_.ValueError.$factory("invalid hexadecimal floating-point string")}
var _sign=_m[1],_int=parseInt(_m[3]||'0',16),_fraction=_m[4]||'.0',_exponent=_m[5]||'p0'
if(_sign=="-"){_sign=-1}else{_sign=1}
var _sum=_int
for(var i=1,len=_fraction.length;i < len;i++){_sum+=parseInt(_fraction.charAt(i),16)/Math.pow(16,i)}
return new Number(_sign*_sum*Math.pow(2,parseInt(_exponent.substring(1))))}
float.__getformat__=function(arg){if(arg=="double" ||arg=="float"){return "IEEE, little-endian"}
throw _b_.ValueError.$factory("__getformat__() argument 1 must be "+
"'double' or 'float'")}
function preformat(self,fmt){if(fmt.empty){return _b_.str.$factory(self)}
if(fmt.type && 'eEfFgGn%'.indexOf(fmt.type)==-1){throw _b_.ValueError.$factory("Unknown format code '"+fmt.type+
"' for object of type 'float'")}
if(isNaN(self)){if(fmt.type=="f" ||fmt.type=="g"){return "nan"}
else{return "NAN"}}
if(self==Number.POSITIVE_INFINITY){if(fmt.type=="f" ||fmt.type=="g"){return "inf"}
else{return "INF"}}
if(fmt.precision===undefined && fmt.type !==undefined){fmt.precision=6}
if(fmt.type=="%"){self*=100}
if(fmt.type=="e"){var res=self.toExponential(fmt.precision),exp=parseInt(res.substr(res.search("e")+1))
if(Math.abs(exp)< 10){res=res.substr(0,res.length-1)+"0"+
res.charAt(res.length-1)}
return res}
if(fmt.precision !==undefined){
var prec=fmt.precision
if(prec==0){return Math.round(self)+""}
var res=self.toFixed(prec),pt_pos=res.indexOf(".")
if(fmt.type !==undefined &&
(fmt.type=="%" ||fmt.type.toLowerCase()=="f")){if(pt_pos==-1){res+="."+"0".repeat(fmt.precision)}
else{var missing=fmt.precision-res.length+pt_pos+1
if(missing > 0){res+="0".repeat(missing)}}}else{var res1=self.toExponential(fmt.precision-1),exp=parseInt(res1.substr(res1.search("e")+1))
if(exp <-4 ||exp >=fmt.precision-1){res=res1
if(Math.abs(exp)< 10){res=res.substr(0,res.length-1)+"0"+
res.charAt(res.length-1)}}}}else{var res=_b_.str.$factory(self)}
if(fmt.type===undefined||"gGn".indexOf(fmt.type)!=-1){
while(res.charAt(res.length-1)=="0"){res=res.substr(0,res.length-1)}
if(res.charAt(res.length-1)=="."){if(fmt.type===undefined){res+="0"}
else{res=res.substr(0,res.length-1)}}}
if(fmt.sign !==undefined){if((fmt.sign==" " ||fmt.sign=="+" )&& self > 0){res=fmt.sign+res}}
if(fmt.type=="%"){res+="%"}
return res}
float.__format__=function(self,format_spec){var fmt=new $B.parse_format_spec(format_spec)
fmt.align=fmt.align ||">"
var raw=preformat(self,fmt).split('.'),_int=raw[0]
if(fmt.comma){var len=_int.length,nb=Math.ceil(_int.length/3),chunks=[]
for(var i=0;i < nb;i++){chunks.push(_int.substring(len-3*i-3,len-3*i))}
chunks.reverse()
raw[0]=chunks.join(",")}
return $B.format_width(raw.join("."),fmt)}
float.__hash__=function(self){if(self===undefined){return float.__hashvalue__ ||$B.$py_next_hash--}
var _v=self.valueOf()
if(_v===Infinity){return 314159}
if(_v===-Infinity){return-271828}
if(isNaN(_v)){return 0}
if(_v==Math.round(_v)){return Math.round(_v)}
var r=_b_.$frexp(_v)
r[0]*=Math.pow(2,31)
var hipart=_b_.int.$factory(r[0])
r[0]=(r[0]-hipart)*Math.pow(2,31)
var x=hipart+_b_.int.$factory(r[0])+(r[1]<< 15)
return x & 0xFFFFFFFF}
_b_.$isninf=function(x){var x1=x
if(isinstance(x,float)){x1=x.valueOf()}
return x1==-Infinity ||x1==Number.NEGATIVE_INFINITY}
_b_.$isinf=function(x){var x1=x
if(isinstance(x,float)){x1=x.valueOf()}
return x1==Infinity ||x1==-Infinity ||
x1==Number.POSITIVE_INFINITY ||x1==Number.NEGATIVE_INFINITY}
_b_.$fabs=function(x){return x > 0 ? float.$factory(x):float.$factory(-x)}
_b_.$frexp=function(x){var x1=x
if(isinstance(x,float)){x1=x.valueOf()}
if(isNaN(x1)||_b_.$isinf(x1)){return[x1,-1]}
if(x1==0){return[0,0]}
var sign=1,ex=0,man=x1
if(man < 0.){sign=-sign
man=-man}
while(man < 0.5){man*=2.0
ex--}
while(man >=1.0){man*=0.5
ex++}
man*=sign
return[man,ex]}
_b_.$ldexp=function(x,i){if(_b_.$isninf(x)){return float.$factory('-inf')}
if(_b_.$isinf(x)){return float.$factory('inf')}
var y=x
if(isinstance(x,float)){y=x.valueOf()}
if(y==0){return y}
var j=i
if(isinstance(i,float)){j=i.valueOf()}
return y*Math.pow(2,j)}
float.hex=function(self){
var DBL_MANT_DIG=53,
TOHEX_NBITS=DBL_MANT_DIG+3-(DBL_MANT_DIG+2)% 4
switch(self.valueOf()){case Infinity:
case-Infinity:
case Number.NaN:
case-Number.NaN:
return self
case-0:
return "-0x0.0p0"
case 0:
return "0x0.0p0"}
var _a=_b_.$frexp(_b_.$fabs(self.valueOf())),_m=_a[0],_e=_a[1],_shift=1-Math.max(-1021-_e,0)
_m=_b_.$ldexp(_m,_shift)
_e-=_shift
var _int2hex="0123456789ABCDEF".split(""),_s=_int2hex[Math.floor(_m)]
_s+='.'
_m-=Math.floor(_m)
for(var i=0;i <(TOHEX_NBITS-1)/4;i++){_m*=16.0
_s+=_int2hex[Math.floor(_m)]
_m-=Math.floor(_m)}
var _esign="+"
if(_e < 0){_esign="-"
_e=-_e}
if(self.value < 0){return "-0x"+_s+"p"+_esign+_e}
return "0x"+_s+"p"+_esign+_e}
float.__init__=function(self,value){self.valueOf=function(){return value.valueOf()}
self.toString=function(){return value+""}
return _b_.None}
float.__int__=function(self){return parseInt(self)}
float.is_integer=function(self){return _b_.int.$factory(self)==self}
float.__mod__=function(self,other){
if(other==0){throw ZeroDivisionError.$factory("float modulo")}
if(isinstance(other,_b_.int)){return new Number((self % other+other)% other)}
if(isinstance(other,float)){
var q=Math.floor(self/other),r=self-other*q
return new Number(r)}
if(isinstance(other,_b_.bool)){var bool_value=0
if(other.valueOf()){bool_value=1}
return new Number((self % bool_value+bool_value)% bool_value)}
if(hasattr(other,"__rmod__")){return getattr(other,"__rmod__")(self)}
$err("%",other)}
float.__mro__=[object]
float.__mul__=function(self,other){if(isinstance(other,_b_.int)){if(other.__class__==$B.long_int){return new Number(self*parseFloat(other.value))}
return new Number(self*other)}
if(isinstance(other,float)){return new Number(self*other)}
if(isinstance(other,_b_.bool)){var bool_value=0
if(other.valueOf()){bool_value=1}
return new Number(self*bool_value)}
if(isinstance(other,_b_.complex)){return $B.make_complex(float.$factory(self*other.$real),float.$factory(self*other.$imag))}
if(hasattr(other,"__rmul__")){return getattr(other,"__rmul__")(self)}
$err("*",other)}
float.__ne__=function(self,other){return ! float.__eq__(self,other)}
float.__neg__=function(self,other){return float.$factory(-self)}
float.__pos__=function(self){return self}
float.__pow__=function(self,other){var other_int=isinstance(other,_b_.int)
if(other_int ||isinstance(other,float)){if(self==1){return self}
if(other==0){return new Number(1)}
if(self==-1 &&
(! isFinite(other)||other.__class__===$B.long_int ||
! $B.is_safe_int(other))&&
! isNaN(other)){return new Number(1)}else if(self==0 && isFinite(other)&& other < 0){throw _b_.ZeroDivisionError.$factory("0.0 cannot be raised "+
"to a negative power")}else if(self==Number.NEGATIVE_INFINITY && ! isNaN(other)){if(other < 0 && other % 2==1){return new Number(-0.0)}else if(other < 0){return new Number(0)}
else if(other > 0 && other % 2==1){return Number.NEGATIVE_INFINITY}else{return Number.POSITIVE_INFINITY}}else if(self==Number.POSITIVE_INFINITY && ! isNaN(other)){return other > 0 ? self :new Number(0)}
if(other==Number.NEGATIVE_INFINITY && ! isNaN(self)){return Math.abs(self)< 1 ? Number.POSITIVE_INFINITY :
new Number(0)}else if(other==Number.POSITIVE_INFINITY && ! isNaN(self)){return Math.abs(self)< 1 ? new Number(0):
Number.POSITIVE_INFINITY}
if(self < 0 &&
! _b_.getattr(other,"__eq__")(_b_.int.$factory(other))){
return _b_.complex.__pow__($B.make_complex(self,0),other)}
return float.$factory(Math.pow(self,other))}else if(isinstance(other,_b_.complex)){var preal=Math.pow(self,other.$real),ln=Math.log(self)
return $B.make_complex(preal*Math.cos(ln),preal*Math.sin(ln))}
if(hasattr(other,"__rpow__")){return getattr(other,"__rpow__")(self)}
$err("** or pow()",other)}
float.__repr__=float.__str__=function(self){if(self===float){return "<class 'float'>"}
if(self.valueOf()==Infinity){return 'inf'}
if(self.valueOf()==-Infinity){return '-inf'}
if(isNaN(self.valueOf())){return 'nan'}
var res=self.valueOf()+""
if(res.indexOf(".")==-1){res+=".0"}
return _b_.str.$factory(res)}
float.__setattr__=function(self,attr,value){if(self.constructor===Number){if(float[attr]===undefined){throw _b_.AttributeError.$factory("'float' object has no attribute '"+
attr+"'")}else{throw _b_.AttributeError.$factory("'float' object attribute '"+
attr+"' is read-only")}}
self[attr]=value
return $N}
float.__truediv__=function(self,other){if(isinstance(other,[_b_.int,float])){if(other.valueOf()==0){throw ZeroDivisionError.$factory("division by zero")}
return float.$factory(self/other)}
if(isinstance(other,_b_.complex)){var cmod=other.$real*other.$real+other.$imag*other.$imag
if(cmod==0){throw ZeroDivisionError.$factory("division by zero")}
return $B.make_complex(float.$factory(self*other.$real/cmod),float.$factory(-self*other.$imag/cmod))}
if(hasattr(other,"__rtruediv__")){return getattr(other,"__rtruediv__")(self)}
$err("/",other)}
var $op_func=function(self,other){if(isinstance(other,_b_.int)){if(typeof other=="boolean"){return other ? self-1 :self}else if(other.__class__===$B.long_int){return float.$factory(self-parseInt(other.value))}else{return float.$factory(self-other)}}
if(isinstance(other,float)){return float.$factory(self-other)}
if(isinstance(other,_b_.bool)){var bool_value=0
if(other.valueOf()){bool_value=1}
return float.$factory(self-bool_value)}
if(isinstance(other,_b_.complex)){return $B.make_complex(self-other.$real,-other.$imag)}
if(hasattr(other,"__rsub__")){return getattr(other,"__rsub__")(self)}
$err("-",other)}
$op_func+=""
var $ops={"+":"add","-":"sub"}
for(var $op in $ops){var $opf=$op_func.replace(/-/gm,$op)
$opf=$opf.replace(/__rsub__/gm,"__r"+$ops[$op]+"__")
eval("float.__"+$ops[$op]+"__ = "+$opf)}
var $comp_func=function(self,other){if(isinstance(other,_b_.int)){if(other.__class__===$B.long_int){return self > parseInt(other.value)}
return self > other.valueOf()}
if(isinstance(other,float)){return self > other}
if(isinstance(other,_b_.bool)){return self.valueOf()> _b_.bool.__hash__(other)}
if(hasattr(other,"__int__")||hasattr(other,"__index__")){return _b_.int.__gt__(self,$B.$GetInt(other))}
var inv_op=getattr(other,"__le__",None)
if(inv_op !==None){return inv_op(self)}
throw _b_.TypeError.$factory(
"unorderable types: float() > "+$B.class_name(other)+"()")}
$comp_func+=""
for(var $op in $B.$comps){eval("float.__"+$B.$comps[$op]+"__ = "+
$comp_func.replace(/>/gm,$op).
replace(/__gt__/gm,"__"+$B.$comps[$op]+"__").
replace(/__le__/,"__"+$B.$inv_comps[$op]+"__"))}
$B.make_rmethods(float)
var $notimplemented=function(self,other){throw _b_.TypeError.$factory(
"unsupported operand types for OPERATOR: 'float' and '"+
$B.class_name(other)+"'")}
$notimplemented+=""
for(var $op in $B.$operators){
if($B.augmented_assigns[$op]===undefined){var $opfunc="__"+$B.$operators[$op]+"__"
if(float[$opfunc]===undefined){eval("float."+$opfunc+"="+
$notimplemented.replace(/OPERATOR/gm,$op))}}}
function $FloatClass(value){return new Number(value)}
function to_digits(s){
var arabic_digits="\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669",res=""
for(var i=0;i < s.length;i++){var x=arabic_digits.indexOf(s[i])
if(x >-1){res+=x}
else{res+=s[i]}}
return res}
float.$factory=function(value){switch(value){case undefined:
return $FloatClass(0.0)
case Number.MAX_VALUE:
return $FloatClass(Infinity)
case-Number.MAX_VALUE:
return $FloatClass(-Infinity)
case true:
return new Number(1)
case false:
return new Number(0)}
if(typeof value=="number"){return new Number(value)}
if(isinstance(value,float)){return value}
if(isinstance(value,bytes)){var s=getattr(value,"decode")("latin-1")
return float.$factory(getattr(value,"decode")("latin-1"))}
if(hasattr(value,"__float__")){return $FloatClass(getattr(value,"__float__")())}
if(typeof value=="string"){value=value.trim()
switch(value.toLowerCase()){case "+inf":
case "inf":
case "+infinity":
case "infinity":
return Number.POSITIVE_INFINITY
case "-inf":
case "-infinity":
return Number.NEGATIVE_INFINITY
case "+nan":
case "nan":
return Number.NaN
case "-nan":
return-Number.NaN
case "":
throw _b_.ValueError.$factory("count not convert string to float")
default:
value=value.charAt(0)+value.substr(1).replace(/_/g,"")
value=to_digits(value)
if(isFinite(value))return $FloatClass(eval(value))
else{
_b_.str.encode(value,"latin-1")
throw _b_.ValueError.$factory(
"Could not convert to float(): '"+
_b_.str.$factory(value)+"'")}}}
throw _b_.TypeError.$factory("float() argument must be a string or a "+
"number, not '"+$B.class_name(value)+"'")}
float.__new__=function(cls){if(cls===undefined){throw _b_.TypeError.$factory("float.__new__(): not enough arguments")}
return{__class__:cls}}
$B.$FloatClass=$FloatClass
$B.set_func_names(float,"builtins")
var FloatSubclass=$B.FloatSubclass={__class__:_b_.type,__mro__:[object],$infos:{__module__:"builtins",__name__:"float"},$is_class:true}
for(var $attr in float){if(typeof float[$attr]=="function"){FloatSubclass[$attr]=(function(attr){return function(){var args=[],pos=0
if(arguments.length > 0){var args=[arguments[0].valueOf()],pos=1
for(var i=1,len=arguments.length;i < len;i++){args[pos++]=arguments[i]}}
return float[attr].apply(null,args)}})($attr)}}
$B.set_func_names(FloatSubclass,"builtins")
_b_.float=float})(__BRYTHON__)
;
;(function($B){var bltns=$B.InjectBuiltins()
eval(bltns)
var object=_b_.object,$N=_b_.None
function $err(op,other){var msg="unsupported operand type(s) for "+op+
": 'int' and '"+$B.class_name(other)+"'"
throw _b_.TypeError.$factory(msg)}
function int_value(obj){
return obj.$value !==undefined ? obj.$value :obj}
var int={__class__:_b_.type,__dir__:object.__dir__,$infos:{__module__:"builtins",__name__:"int"},$is_class:true,$native:true,$descriptors:{"numerator":true,"denominator":true,"imag":true,"real":true}}
int.from_bytes=function(){var $=$B.args("from_bytes",3,{bytes:null,byteorder:null,signed:null},["bytes","byteorder","signed"],arguments,{signed:False},null,null)
var x=$.bytes,byteorder=$.byteorder,signed=$.signed,_bytes,_len
if(isinstance(x,[_b_.bytes,_b_.bytearray])){_bytes=x.source
_len=x.source.length}else{_bytes=_b_.list.$factory(x)
_len=_bytes.length
for(var i=0;i < _len;i++){_b_.bytes.$factory([_bytes[i]])}}
switch(byteorder){case "big":
var num=_bytes[_len-1]
var _mult=256
for(var i=_len-2;i >=0;i--){
num=$B.add($B.mul(_mult,_bytes[i]),num)
_mult=$B.mul(_mult,256)}
if(! signed){return num}
if(_bytes[0]< 128){return num}
return $B.sub(num,_mult)
case "little":
var num=_bytes[0]
if(num >=128){num=num-256}
var _mult=256
for(var i=1;i < _len;i++){num=$B.add($B.mul(_mult,_bytes[i]),num)
_mult=$B.mul(_mult,256)}
if(! signed){return num}
if(_bytes[_len-1]< 128){return num}
return $B.sub(num,_mult)}
throw _b_.ValueError.$factory("byteorder must be either 'little' or 'big'")}
int.to_bytes=function(){var $=$B.args("to_bytes",3,{self:null,len:null,byteorder:null},["self","len","byteorder"],arguments,{},"args","kw"),self=$.self,len=$.len,byteorder=$.byteorder,kwargs=$.kw
if(! _b_.isinstance(len,_b_.int)){throw _b_.TypeError.$factory("integer argument expected, got "+
$B.class_name(len))}
if(["little","big"].indexOf(byteorder)==-1){throw _b_.ValueError.$factory("byteorder must be either 'little' or 'big'")}
var signed=kwargs.$string_dict["signed"]||false,res=[]
if(self < 0){if(! signed){throw _b_.OverflowError.$factory("can't convert negative int to unsigned")}
self=Math.pow(256,len)+self}
var value=self
while(true){var quotient=Math.floor(value/256),rest=value-256*quotient
res.push(rest)
if(quotient==0){break}
value=quotient}
if(res.length > len){throw _b_.OverflowError.$factory("int too big to convert")}
if(byteorder=="big"){res=res.reverse()}
return{
__class__:_b_.bytes,source:res}}
int.__abs__=function(self){return abs(self)}
int.__bool__=function(self){return int_value(self).valueOf()==0 ? false :true}
int.__ceil__=function(self){return Math.ceil(int_value(self))}
int.__divmod__=function(self,other){return divmod(self,other)}
int.__eq__=function(self,other){
if(other===undefined){return self===int}
if(isinstance(other,int)){return self.valueOf()==int_value(other).valueOf()}
if(isinstance(other,_b_.float)){return self.valueOf()==other.valueOf()}
if(isinstance(other,_b_.complex)){if(other.$imag !=0){return False}
return self.valueOf()==other.$real}
return _b_.NotImplemented}
int.__float__=function(self){return new Number(self)}
function preformat(self,fmt){if(fmt.empty){return _b_.str.$factory(self)}
if(fmt.type && 'bcdoxXn'.indexOf(fmt.type)==-1){throw _b_.ValueError.$factory("Unknown format code '"+fmt.type+
"' for object of type 'int'")}
var res
switch(fmt.type){case undefined:
case "d":
res=self.toString()
break
case "b":
res=(fmt.alternate ? "0b" :"")+self.toString(2)
break
case "c":
res=_b_.chr(self)
break
case "o":
res=(fmt.alternate ? "0o" :"")+self.toString(8)
break
case "x":
res=(fmt.alternate ? "0x" :"")+self.toString(16)
break
case "X":
res=(fmt.alternate ? "0X" :"")+self.toString(16).toUpperCase()
break
case "n":
return self }
if(fmt.sign !==undefined){if((fmt.sign==" " ||fmt.sign=="+" )&& self >=0){res=fmt.sign+res}}
return res}
int.__format__=function(self,format_spec){var fmt=new $B.parse_format_spec(format_spec)
if(fmt.type && 'eEfFgG%'.indexOf(fmt.type)!=-1){
return _b_.float.__format__(self,format_spec)}
fmt.align=fmt.align ||">"
var res=preformat(self,fmt)
if(fmt.comma){var sign=res[0]=="-" ? "-" :"",rest=res.substr(sign.length),len=rest.length,nb=Math.ceil(rest.length/3),chunks=[]
for(var i=0;i < nb;i++){chunks.push(rest.substring(len-3*i-3,len-3*i))}
chunks.reverse()
res=sign+chunks.join(",")}
return $B.format_width(res,fmt)}
int.__floordiv__=function(self,other){if(other.__class__==$B.long_int){return $B.long_int.__floordiv__($B.long_int.$factory(self),other)}
if(isinstance(other,int)){other=int_value(other)
if(other==0){throw ZeroDivisionError.$factory("division by zero")}
return Math.floor(self/other)}
if(isinstance(other,_b_.float)){if(!other.valueOf()){throw ZeroDivisionError.$factory("division by zero")}
return Math.floor(self/other)}
if(hasattr(other,"__rfloordiv__")){return getattr(other,"__rfloordiv__")(self)}
$err("//",other)}
int.__hash__=function(self){if(self===undefined){return int.__hashvalue__ ||$B.$py_next_hash--}
return self.valueOf()}
int.__index__=function(self){return int_value(self)}
int.__init__=function(self,value){if(value===undefined){value=0}
self.toString=function(){return value}
return $N}
int.__int__=function(self){return self}
int.__invert__=function(self){return ~self}
int.__lshift__=function(self,other){if(isinstance(other,int)){other=int_value(other)
return int.$factory($B.long_int.__lshift__($B.long_int.$factory(self),$B.long_int.$factory(other)))}
var rlshift=getattr(other,"__rlshift__",None)
if(rlshift !==None){return rlshift(self)}
$err("<<",other)}
int.__mod__=function(self,other){
if(isinstance(other,_b_.tuple)&& other.length==1){other=other[0]}
if(other.__class__===$B.long_int){return $B.long_int.__mod__($B.long_int.$factory(self),other)}
if(isinstance(other,[int,_b_.float,bool])){other=int_value(other)
if(other===false){other=0}
else if(other===true){other=1}
if(other==0){throw _b_.ZeroDivisionError.$factory(
"integer division or modulo by zero")}
return(self % other+other)% other}
if(hasattr(other,"__rmod__")){return getattr(other,"__rmod__")(self)}
$err("%",other)}
int.__mro__=[object]
int.__mul__=function(self,other){var val=self.valueOf()
if(typeof other==="string"){return other.repeat(val)}
if(isinstance(other,int)){other=int_value(other)
var res=self*other
if(res > $B.min_int && res < $B.max_int){return res}
else{return int.$factory($B.long_int.__mul__($B.long_int.$factory(self),$B.long_int.$factory(other)))}}
if(isinstance(other,_b_.float)){return new Number(self*other)}
if(isinstance(other,_b_.bool)){if(other.valueOf()){return self}
return int.$factory(0)}
if(isinstance(other,_b_.complex)){return $B.make_complex(int.__mul__(self,other.$real),int.__mul__(self,other.$imag))}
if(isinstance(other,[_b_.list,_b_.tuple])){var res=[]
var $temp=other.slice(0,other.length)
for(var i=0;i < val;i++){res=res.concat($temp)}
if(isinstance(other,_b_.tuple)){res=_b_.tuple.$factory(res)}
return res}
if(hasattr(other,"__rmul__")){return getattr(other,"__rmul__")(self)}
$err("*",other)}
int.__neg__=function(self){return-self}
int.__new__=function(cls,value){if(cls===undefined){throw _b_.TypeError.$factory("int.__new__(): not enough arguments")}else if(! isinstance(cls,_b_.type)){throw _b_.TypeError.$factory("int.__new__(X): X is not a type object")}
if(cls===int){return int.$factory(value)}
return{
__class__:cls,__dict__:_b_.dict.$factory(),$value:value ||0}}
int.__pos__=function(self){return self}
int.__pow__=function(self,other,z){if(isinstance(other,int)){other=int_value(other)
switch(other.valueOf()){case 0:
return int.$factory(1)
case 1:
return int.$factory(self.valueOf())}
if(z !==undefined && z !==null){
if(z==1){return 0}
var result=1,base=self % z,exponent=other,long_int=$B.long_int
while(exponent > 0){if(exponent % 2==1){if(result*base > $B.max_int){result=long_int.__mul__(
long_int.$factory(result),long_int.$factory(base))
result=long_int.__mod__(result,z)}else{result=(result*base)% z}}
exponent=exponent >> 1
if(base*base > $B.max_int){base=long_int.__mul__(long_int.$factory(base),long_int.$factory(base))
base=long_int.__mod__(base,z)}else{base=(base*base)% z}}
return result}
var res=Math.pow(self.valueOf(),other.valueOf())
if(res > $B.min_int && res < $B.max_int){return res}
else if(res !==Infinity && !isFinite(res)){return res}
else{return int.$factory($B.long_int.__pow__($B.long_int.$factory(self),$B.long_int.$factory(other)))}}
if(isinstance(other,_b_.float)){if(self >=0){return new Number(Math.pow(self,other.valueOf()))}
else{
return _b_.complex.__pow__($B.make_complex(self,0),other)}}else if(isinstance(other,_b_.complex)){var preal=Math.pow(self,other.$real),ln=Math.log(self)
return $B.make_complex(preal*Math.cos(ln),preal*Math.sin(ln))}
if(hasattr(other,"__rpow__")){return getattr(other,"__rpow__")(self)}
$err("**",other)}
int.__repr__=function(self){if(self===int){return "<class 'int'>"}
return self.toString()}
int.__rshift__=function(self,other){if(isinstance(other,int)){other=int_value(other)
return int.$factory($B.long_int.__rshift__($B.long_int.$factory(self),$B.long_int.$factory(other)))}
var rrshift=getattr(other,"__rrshift__",None)
if(rrshift !==None){return rrshift(self)}
$err('>>',other)}
int.__setattr__=function(self,attr,value){if(typeof self=="number"){if(int.$factory[attr]===undefined){throw _b_.AttributeError.$factory(
"'int' object has no attribute '"+attr+"'")}else{throw _b_.AttributeError.$factory(
"'int' object attribute '"+attr+"' is read-only")}}
self[attr]=value
return $N}
int.__str__=int.__repr__
int.__truediv__=function(self,other){if(isinstance(other,int)){other=int_value(other)
if(other==0){throw ZeroDivisionError.$factory("division by zero")}
if(other.__class__===$B.long_int){return new Number(self/parseInt(other.value))}
return new Number(self/other)}
if(isinstance(other,_b_.float)){if(!other.valueOf()){throw ZeroDivisionError.$factory("division by zero")}
return new Number(self/other)}
if(isinstance(other,_b_.complex)){var cmod=other.$real*other.$real+other.$imag*other.$imag
if(cmod==0){throw ZeroDivisionError.$factory("division by zero")}
return $B.make_complex(self*other.$real/cmod,-self*other.$imag/cmod)}
if(hasattr(other,"__rtruediv__")){return getattr(other,"__rtruediv__")(self)}
$err("/",other)}
int.bit_length=function(self){s=bin(self)
s=getattr(s,"lstrip")("-0b")
return s.length }
int.numerator=function(self){return self}
int.denominator=function(self){return int.$factory(1)}
int.imag=function(self){return int.$factory(0)}
int.real=function(self){return self}
$B.max_int32=(1 << 30)*2-1
$B.min_int32=-$B.max_int32
var $op_func=function(self,other){if(isinstance(other,int)){if(other.__class__===$B.long_int){return $B.long_int.__sub__($B.long_int.$factory(self),$B.long_int.$factory(other))}
other=int_value(other)
if(self > $B.max_int32 ||self < $B.min_int32 ||
other > $B.max_int32 ||other < $B.min_int32){return $B.long_int.__sub__($B.long_int.$factory(self),$B.long_int.$factory(other))}
return self-other}
if(isinstance(other,_b_.bool)){return self-other}
if(hasattr(other,"__rsub__")){return getattr(other,"__rsub__")(self)}
$err("-",other)}
$op_func+=""
var $ops={"&":"and","|":"or","^":"xor"}
for(var $op in $ops){var opf=$op_func.replace(/-/gm,$op)
opf=opf.replace(new RegExp("sub","gm"),$ops[$op])
eval("int.__"+$ops[$op]+"__ = "+opf)}
var $op_func=function(self,other){if(isinstance(other,int)){other=int_value(other)
if(typeof other=="number"){var res=self.valueOf()-other.valueOf()
if(res > $B.min_int && res < $B.max_int){return res}
else{return $B.long_int.__sub__($B.long_int.$factory(self),$B.long_int.$factory(other))}}else if(typeof other=="boolean"){return other ? self-1 :self}else{return $B.long_int.__sub__($B.long_int.$factory(self),$B.long_int.$factory(other))}}
if(isinstance(other,_b_.float)){return new Number(self-other)}
if(isinstance(other,_b_.complex)){return $B.make_complex(self-other.$real,-other.$imag)}
if(isinstance(other,_b_.bool)){var bool_value=0;
if(other.valueOf()){bool_value=1}
return self-bool_value}
if(isinstance(other,_b_.complex)){return $B.make_complex(self.valueOf()-other.$real,other.$imag)}
var rsub=$B.$getattr(other,"__rsub__",None)
if(rsub !==None){return rsub(self)}
throw $err("-",other)}
$op_func+=""
var $ops={"+":"add","-":"sub"}
for(var $op in $ops){var opf=$op_func.replace(/-/gm,$op)
opf=opf.replace(new RegExp("sub","gm"),$ops[$op])
eval("int.__"+$ops[$op]+"__ = "+opf)}
var $comp_func=function(self,other){if(other.__class__===$B.long_int){return $B.long_int.__lt__(other,$B.long_int.$factory(self))}
if(isinstance(other,int)){other=int_value(other)
return self.valueOf()> other.valueOf()}else if(isinstance(other,_b_.float)){return self.valueOf()> other.valueOf()}else if(isinstance(other,_b_.bool)){return self.valueOf()> _b_.bool.__hash__(other)}
if(hasattr(other,"__int__")||hasattr(other,"__index__")){return int.__gt__(self,$B.$GetInt(other))}
return _b_.NotImplemented}
$comp_func+=""
for(var $op in $B.$comps){eval("int.__"+$B.$comps[$op]+"__ = "+
$comp_func.replace(/>/gm,$op).
replace(/__gt__/gm,"__"+$B.$comps[$op]+"__").
replace(/__lt__/,"__"+$B.$inv_comps[$op]+"__"))}
$B.make_rmethods(int)
var $valid_digits=function(base){var digits=""
if(base===0){return "0"}
if(base < 10){for(var i=0;i < base;i++){digits+=String.fromCharCode(i+48)}
return digits}
var digits="0123456789"
for(var i=10;i < base;i++){digits+=String.fromCharCode(i+55)}
return digits}
int.$factory=function(value,base){
if(value===undefined){return 0}
if(typeof value=="number" &&
(base===undefined ||base==10)){return parseInt(value)}
if(base !==undefined){if(! isinstance(value,[_b_.str,_b_.bytes,_b_.bytearray])){throw TypeError.$factory(
"int() can't convert non-string with explicit base")}}
if(isinstance(value,_b_.complex)){throw TypeError.$factory("can't convert complex to int")}
var $ns=$B.args("int",2,{x:null,base:null},["x","base"],arguments,{"base":10},null,null),value=$ns["x"],base=$ns["base"]
if(isinstance(value,_b_.float)&& base==10){if(value < $B.min_int ||value > $B.max_int){return $B.long_int.$from_float(value)}
else{return value > 0 ? Math.floor(value):Math.ceil(value)}}
if(!(base >=2 && base <=36)){
if(base !=0){throw _b_.ValueError.$factory("invalid base")}}
if(typeof value=="number"){if(base==10){if(value < $B.min_int ||value > $B.max_int){return $B.long_int.$factory(value)}
return value}else if(value.toString().search("e")>-1){
throw _b_.OverflowError.$factory("can't convert to base "+base)}else{var res=parseInt(value,base)
if(value < $B.min_int ||value > $B.max_int){return $B.long_int.$factory(value,base)}
return res}}
if(value===true){return Number(1)}
if(value===false){return Number(0)}
if(value.__class__===$B.long_int){var z=parseInt(value.value)
if(z > $B.min_int && z < $B.max_int){return z}
else{return value}}
base=$B.$GetInt(base)
function invalid(value,base){throw _b_.ValueError.$factory("invalid literal for int() with base "+
base+": '"+_b_.str.$factory(value)+"'")}
if(isinstance(value,_b_.str)){value=value.valueOf()}
if(typeof value=="string"){var _value=value.trim()
if(_value.length==2 && base==0 &&
(_value=="0b" ||_value=="0o" ||_value=="0x")){throw _b_.ValueError.$factory("invalid value")}
if(_value.length >2){var _pre=_value.substr(0,2).toUpperCase()
if(base==0){if(_pre=="0B"){base=2}
if(_pre=="0O"){base=8}
if(_pre=="0X"){base=16}}else if(_pre=="0X" && base !=16){invalid(_value,base)}
else if(_pre=="0O" && base !=8){invalid(_value,base)}
else if(_pre=="0B" && base !=2){invalid(_value,base)}
if(_pre=="0B" ||_pre=="0O" ||_pre=="0X"){_value=_value.substr(2)
while(_value.startsWith("_")){_value=_value.substr(1)}}}else if(base==0){
base=10}
var _digits=$valid_digits(base),_re=new RegExp("^[+-]?["+_digits+"]"+
"["+_digits+"_]*$","i"),match=_re.exec(_value)
if(match===null){invalid(value,base)}else{value=_value.replace(/_/g,"")}
if(base <=10 && ! isFinite(value)){invalid(_value,base)}
var res=parseInt(value,base)
if(res < $B.min_int ||res > $B.max_int){return $B.long_int.$factory(value,base)}
return res}
if(isinstance(value,[_b_.bytes,_b_.bytearray])){return int.$factory($B.$getattr(value,"decode")("latin-1"),base)}
if(hasattr(value,"__int__")){return getattr(value,"__int__")()}
if(hasattr(value,"__index__")){return getattr(value,"__index__")()}
if(hasattr(value,"__trunc__")){var res=getattr(value,"__trunc__")(),int_func=_b_.getattr(res,"__int__",null)
if(int_func===null){throw TypeError.$factory("__trunc__ returned non-Integral (type "+
$B.class_name(res)+")")}
var res=int_func()
if(isinstance(res,int)){return int_value(res)}
throw TypeError.$factory("__trunc__ returned non-Integral (type "+
$B.class_name(res)+")")}
throw _b_.TypeError.$factory(
"int() argument must be a string, a bytes-like "+
"object or a number, not '"+$B.class_name(value)+"'")}
$B.set_func_names(int,"builtins")
_b_.int=int
$B.$bool=function(obj){
if(obj===null ||obj===undefined ){return false}
switch(typeof obj){case "boolean":
return obj
case "number":
case "string":
if(obj){return true}
return false
default:
if(obj.$is_class){return true}
var missing={},bool_func=$B.$getattr(obj,"__bool__",missing)
if(bool_func===missing){try{return getattr(obj,"__len__")()> 0}
catch(err){return true}}else{return bool_func()}}}
var bool={__bases__:[int],__class__:_b_.type,__mro__:[int,object],$infos:{__name__:"bool",__module__:"builtins"},$is_class:true,$native:true}
bool.__add__=function(self,other){return(other ? 1 :0)+(self ? 1 :0)}
bool.__and__=function(self,other){return $B.$bool(int.__and__(self,other))}
bool.__eq__=function(self,other){if(other===self){return True}
else if(typeof other=="number"){return self ? other==1 :other==0}else if(isinstance(other,_b_.int)){return self ? other.$value==1 :other.$value==0}else if(other instanceof Number){return self ? other==1 :other==0}else{return false}}
bool.__ne__=function(self,other){return ! bool.__eq__(self,other)}
bool.__ge__=function(self,other){return _b_.int.__ge__(bool.__hash__(self),other)}
bool.__gt__=function(self,other){return _b_.int.__gt__(bool.__hash__(self),other)}
bool.__hash__=bool.__index__=bool.__int__=function(self){if(self.valueOf())return 1
return 0}
bool.__le__=function(self,other){return ! bool.__gt__(self,other)}
bool.__lshift__=function(self,other){return self.valueOf()<< other}
bool.__lt__=function(self,other){return ! bool.__ge__(self,other)}
bool.__mul__=function(self,other){return self ? other :0}
bool.__neg__=function(self){return-$B.int_or_bool(self)}
bool.__or__=function(self,other){return $B.$bool(int.__or__(self,other))}
bool.__pos__=$B.int_or_bool
bool.__repr__=bool.__str__=function(self){return self ? "True" :"False"}
bool.__setattr__=function(self,attr){if(_b_.dir(self).indexOf(attr)>-1){var msg="attribute '"+attr+"' of 'int' objects is not writable"}else{var msg="'bool' object has no attribute '"+attr+"'"}
throw _b_.AttributeError.$factory(msg)}
bool.__sub__=function(self,other){return(self ? 1 :0)-(other ? 1 :0)}
bool.__xor__=function(self,other){return self.valueOf()!=other.valueOf()}
bool.$factory=function(){
var $=$B.args("bool",1,{x:null},["x"],arguments,{x:false},null,null)
return $B.$bool($.x)}
_b_.bool=bool
$B.set_func_names(bool,"builtins")})(__BRYTHON__)
;
;(function($B){
var bltns=$B.InjectBuiltins()
eval(bltns)
var long_int={__class__:_b_.type,__mro__:[int,object],$infos:{__module__:"builtins",__name__:"int"},$is_class:true,$native:true,$descriptors:{"numerator":true,"denominator":true,"imag":true,"real":true}}
function add_pos(v1,v2){
var res="",carry=0,iself=v1.length,sv=0,x
for(var i=v2.length-1;i >=0 ;i--){iself--
if(iself < 0){sv=0}else{sv=parseInt(v1.charAt(iself))}
x=(carry+sv+parseInt(v2.charAt(i))).toString()
if(x.length==2){res=x.charAt(1)+res
carry=parseInt(x.charAt(0))}
else{res=x+res;carry=0}}
while(iself > 0){iself--
x=(carry+parseInt(v1.charAt(iself))).toString()
if(x.length==2){res=x.charAt(1)+res
carry=parseInt(x.charAt(0))}
else{res=x+res;carry=0}}
if(carry){res=carry+res}
return{__class__:long_int,value:res,pos:true}}
function check_shift(shift){
if(! isinstance(shift,long_int)){throw TypeError.$factory("shift must be int, not '"+
$B.class_name(shift)+"'")}
if(! shift.pos){throw ValueError.$factory("negative shift count")}}
function clone(obj){
var obj1={}
for(var attr in obj){obj1[attr]=obj[attr]}
return obj1}
function comp_pos(v1,v2){
if(v1.length > v2.length){return 1}
else if(v1.length < v2.length){return-1}
else{if(v1 > v2){return 1}
else if(v1 < v2){return-1}}
return 0}
function divmod_pos(v1,v2){
var quotient,mod
if(comp_pos(v1,v2)==-1){
quotient="0"
mod=long_int.$factory(v1)}else if(v2==v1){
quotient="1"
mod=long_int.$factory("0")}else{var quotient="",left=v1.substr(0,v2.length)
if(v1 < v2){left=v1.substr(0,v2.length+1)}
var right=v1.substr(left.length)
var mv2={}
while(true){
var candidate=Math.floor(parseInt(left)/parseInt(v2))+""
if(mv2[candidate]===undefined){mv2[candidate]=mul_pos(v2,candidate).value}
if(comp_pos(left,mv2[candidate])==-1){
candidate--
if(mv2[candidate]===undefined){mv2[candidate]=mul_pos(v2,candidate).value}}
quotient+=candidate
left=sub_pos(left,mv2[candidate]).value
if(right.length==0){break}
left+=right.charAt(0)
right=right.substr(1)}
mod=sub_pos(v1,mul_pos(quotient,v2).value)}
return[long_int.$factory(quotient),mod]}
function split_chunks(s,size){var nb=Math.ceil(s.length/size),chunks=[],len=s.length
for(var i=0;i < nb;i++){var pos=len-size*(i+1)
if(pos < 0){size+=pos;pos=0}
chunks.push(parseInt(s.substr(pos,size)))}
return chunks}
function mul_pos(x,y){
var chunk_size=6,cx=split_chunks(x,chunk_size),cy=split_chunks(y,chunk_size)
var products={},len=cx.length+cy.length
for(var i=0;i < len-1;i++){products[i]=0}
for(var i=0;i < cx.length;i++){for(var j=0;j < cy.length;j++){products[i+j]+=cx[i]*cy[j]}}
var nb=len-1,pos
for(var i=0;i < len-1;i++){var chunks=split_chunks(products[i].toString(),chunk_size)
for(var j=1;j < chunks.length;j++){pos=i+j
if(products[pos]===undefined){products[pos]=parseInt(chunks[j])
nb=pos}
else{products[pos]+=parseInt(chunks[j])}}
products[i]=chunks[0]}
var result="",i=0,s
while(products[i]!==undefined){s=products[i].toString()
if(products[i+1]!==undefined){s="0".repeat(chunk_size-s.length)+s}
result=s+result
i++}
return long_int.$factory(result)}
function sub_pos(v1,v2){
var res="",carry=0,i1=v1.length,sv=0,x
for(var i=v2.length-1;i >=0;i--){i1--
sv=parseInt(v1.charAt(i1))
x=(sv-carry-parseInt(v2.charAt(i)))
if(x < 0){res=(10+x)+res;carry=1}
else{res=x+res;carry=0}}
while(i1 > 0){i1--
x=(parseInt(v1.charAt(i1))-carry)
if(x < 0){res=(10+x)+res;carry=1}
else{res=x+res;carry=0}}
while(res.charAt(0)=="0" && res.length > 1){res=res.substr(1)}
return{__class__:long_int,value:res,pos:true}}
long_int.$from_float=function(value){var s=Math.abs(value).toString(),v=s
if(s.search("e")>-1){var t=/-?(\d)(\.\d+)?e([+-])(\d*)/.exec(s),n1=t[1],n2=t[2],pos=t[3],exp=t[4]
if(pos=="+"){if(n2===undefined){v=n1+"0".repeat(exp-1)}else{v=n1+n2+"0".repeat(exp-1-n2.length)}}}
return{__class__:long_int,value:v,pos:value >=0}}
long_int.__abs__=function(self){return{__class__:long_int,value:self.value,pos:true}}
long_int.__add__=function(self,other){if(isinstance(other,_b_.float)){return _b_.float.$factory(parseInt(self.value)+other.value)}
if(typeof other=="number"){other=long_int.$factory(_b_.str.$factory(other))}else if(other.__class__ !==long_int){if(isinstance(other,_b_.bool)){other=long_int.$factory(other ? 1 :0)}else if(isinstance(other,int)){
other=long_int.$factory(_b_.str.$factory(_b_.int.__index__(other)))}}
var res
if(self.pos && other.pos){
return add_pos(self.value,other.value)}else if(! self.pos && ! other.pos){
res=add_pos(self.value,other.value)
res.pos=false
return intOrLong(res)}else if(self.pos && ! other.pos){
switch(comp_pos(self.value,other.value)){case 1:
res=sub_pos(self.value,other.value)
break
case 0:
res={__class__:long_int,value:0,pos:true}
break
case-1:
res=sub_pos(other.value,self.value)
res.pos=false
break}
return intOrLong(res)}else{
switch(comp_pos(self.value,other.value)){case 1:
res=sub_pos(self.value,other.value)
res.pos=false
break
case 0:
res={__class__:ong_int,value:0,pos:true}
break
case-1:
res=sub_pos(other.value,self.value)
break}
return intOrLong(res)}}
long_int.__and__=function(self,other){if(typeof other=="number"){other=long_int.$factory(_b_.str.$factory(other))}
var v1=long_int.__index__(self),v2=long_int.__index__(other)
if(v1.length < v2.length){var temp=v2;v2=v1;v1=temp}
if(v2.charAt(0)=="1"){v2="1".repeat(v1.length-v2.length)+v2}
var start=v1.length-v2.length,res=""
for(var i=0;i < v2.length;i++){if(v1.charAt(start+i)=="1" && v2.charAt(i)=="1"){res+="1"}
else{res+="0"}}
return intOrLong(long_int.$factory(res,2))}
long_int.__divmod__=function(self,other){if(typeof other=="number"){other=long_int.$factory(_b_.str.$factory(other))}
var dm=divmod_pos(self.value,other.value)
if(self.pos !==other.pos){if(dm[0].value !="0"){dm[0].pos=false}
if(dm[1].value !="0"){
dm[0]=long_int.__sub__(dm[0],long_int.$factory("1"))
dm[1]=long_int.__add__(dm[1],long_int.$factory("1"))}}
return[intOrLong(dm[0]),intOrLong(dm[1])]}
long_int.__eq__=function(self,other){if(typeof other=="number"){other=long_int.$factory(_b_.str.$factory(other))}
return self.value==other.value && self.pos==other.pos}
long_int.__float__=function(self){return new Number(parseFloat(self.value))}
long_int.__floordiv__=function(self,other){if(isinstance(other,_b_.float)){return _b_.float.$factory(parseInt(self.value)/other)}
if(typeof other=="number"){other=long_int.$factory(_b_.str.$factory(other))}
return intOrLong(long_int.__divmod__(self,other)[0])}
long_int.__ge__=function(self,other){if(typeof other=="number"){other=long_int.$factory(_b_.str.$factory(other))}
if(self.pos !=other.pos){return ! other.pos}
if(self.value.length > other.value.length){return self.pos}
else if(self.value.length < other.value.length){return ! self.pos}
else{return self.pos ? self.value >=other.value :
self.value <=other.value}}
long_int.__gt__=function(self,other){return ! long_int.__le__(self,other)}
long_int.__index__=function(self){
var res='',temp=self.value,d
while(true){d=divmod_pos(temp,"2")
res=d[1].value+res
temp=d[0].value
if(temp=="0"){break}}
if(! self.pos){
var nres="",flag=false
for(var len=res.length-1,i=len;i >=0 ;i--){var bit=res.charAt(i)
if(bit=="0"){if(flag){nres="1"+nres}else{nres="0"+nres}}else{if(flag){nres="0"+nres}
else{flag=true;nres="1"+nres}}}
nres="1"+nres
res=nres}else{res="0"+res}
return intOrLong(res)}
long_int.__invert__=function(self){return long_int.__sub__(long_int.$factory("-1"),self)}
long_int.__le__=function(self,other){if(typeof other=="number"){other=long_int.$factory(_b_.str.$factory(other))}
if(self.pos !==other.pos){return ! self.pos}
if(self.value.length > other.value.length){return ! self.pos}
else if(self.value.length < other.value.length){return self.pos}
else{return self.pos ? self.value <=other.value :
self.value >=other.value}}
long_int.__lt__=function(self,other){return !long_int.__ge__(self,other)}
long_int.__lshift__=function(self,shift){var is_long=shift.__class__===long_int,shift_safe
if(is_long){var shift_value=parseInt(shift.value)
if(shift_value < 0){throw _b_.ValueError.$factory('negative shift count')}
if(shift_value < $B.max_int){shift_safe=true;shift=shift_value}}
if(shift_safe){if(shift_value==0){return self}}else{shift=long_int.$factory(shift)
if(shift.value=="0"){return self}}
var res=self.value
while(true){var x,carry=0,res1=""
for(var i=res.length-1;i >=0;i--){x=(carry+parseInt(res.charAt(i))*2).toString()
if(x.length==2){res1=x.charAt(1)+res1
carry=parseInt(x.charAt(0))}else{res1=x+res1
carry=0}}
if(carry){res1=carry+res1}
res=res1
if(shift_safe){shift--
if(shift==0){break}}else{shift=sub_pos(shift.value,"1")
if(shift.value=="0"){break}}}
return intOrLong({__class__:long_int,value:res,pos:self.pos})}
long_int.__mod__=function(self,other){return intOrLong(long_int.__divmod__(self,other)[1])}
long_int.__mro__=[_b_.int,_b_.object]
long_int.__mul__=function(self,other){switch(self){case Number.NEGATIVE_INFINITY:
case Number.POSITIVE_INFINITY:
if($B.rich_comp("__eq__",other,0)){return NaN}
else if(_b_.getattr(other,"__gt__")(0)){return self}
else{return-self}}
if(isinstance(other,_b_.float)){return _b_.float.$factory(parseInt(self.value)*other)}
other_value=other.value
other_pos=other.pos
if(other.__class__ !==long_int && isinstance(other,int)){
var value=int.__index__(other)
other_value=_b_.str.$factory(value)
other_pos=value > 0}
var res=mul_pos(self.value,other_value)
if(self.pos==other_pos){return intOrLong(res)}
res.pos=false
return intOrLong(res)}
long_int.__neg__=function(obj){return{__class__:long_int,value:obj.value,pos:! obj.pos}}
long_int.__or__=function(self,other){other=long_int.$factory(other)
var v1=long_int.__index__(self)
var v2=long_int.__index__(other)
if(v1.length < v2.length){var temp=v2;v2=v1;v1=temp}
var start=v1.length-v2.length
var res=v1.substr(0,start)
for(var i=0;i < v2.length;i++){if(v1.charAt(start+i)=="1" ||v2.charAt(i)=="1"){res+="1"}
else{res+="0"}}
return intOrLong(long_int.$factory(res,2))}
long_int.__pos__=function(self){return self}
long_int.__pow__=function(self,power,z){if(typeof power=="number"){power=long_int.$factory(_b_.str.$factory(power))}else if(isinstance(power,int)){
power=long_int.$factory(_b_.str.$factory(_b_.int.__index__(power)))}else if(! isinstance(power,long_int)){var msg="power must be a LongDict, not '"
throw TypeError.$factory(msg+$B.class_name(power)+"'")}
if(! power.pos){if(self.value=="1"){return self}
return long_int.$factory("0")}else if(power.value=="0"){return long_int.$factory("1")}
var res={__class__:long_int,value:self.value,pos:self.pos},pow=power.value
while(true){pow=sub_pos(pow,"1").value
if(pow=="0"){break}
res=long_int.$factory(long_int.__mul__(res,self))
if(z !==undefined){res=long_int.__mod__(res,z)}}
return intOrLong(res)}
long_int.__rshift__=function(self,shift){shift=long_int.$factory(shift)
if(shift.value=="0"){return self}
var res=self.value
while(true){res=divmod_pos(res,"2")[0].value
if(res.value=="0"){break}
shift=sub_pos(shift.value,"1")
if(shift.value=="0"){break}}
return intOrLong({__class__:long_int,value:res,pos:self.pos})}
long_int.__str__=long_int.__repr__=function(self){var res=""
if(! self.pos){res+='-'}
return res+self.value}
long_int.__sub__=function(self,other){if(isinstance(other,_b_.float)){return _b_.float.$factory(parseInt(self.value)-other.value)}
if(typeof other=="number"){other=long_int.$factory(_b_.str.$factory(other))}
var res
if(self.pos && other.pos){switch(comp_pos(self.value,other.value)){case 1:
res=sub_pos(self.value,other.value)
break
case 0:
res={__class__:long_int,value:"0",pos:true}
break
case-1:
res=sub_pos(other.value,self.value)
res.pos=false
break}
return intOrLong(res)}else if(! self.pos && ! other.pos){switch(comp_pos(self.value,other.value)){case 1:
res=sub_pos(self.value,other.value)
res.pos=false
break
case 0:
res={__class__:long_int,value:"0",pos:true}
break
case-1:
res=sub_pos(other.value,self.value)
break}
return intOrLong(res)}else if(self.pos && ! other.pos){return intOrLong(add_pos(self.value,other.value))}else{res=add_pos(self.value,other.value)
res.pos=false
return intOrLong(res)}}
long_int.__truediv__=function(self,other){if(isinstance(other,long_int)){return _b_.float.$factory(parseInt(self.value)/parseInt(other.value))}else if(isinstance(other,_b_.int)){return _b_.float.$factory(parseInt(self.value)/other)}else if(isinstance(other,_b_.float)){return _b_.float.$factory(parseInt(self.value)/other)}else{throw TypeError.$factory(
"unsupported operand type(s) for /: 'int' and '"+
$B.class_name(other)+"'")}}
long_int.__xor__=function(self,other){other=long_int.$factory(other)
var v1=long_int.__index__(self),v2=long_int.__index__(other)
if(v1.length < v2.length){var temp=v2;v2=v1;v1=temp}
var start=v1.length-v2.length
var res=v1.substr(0,start)
for(var i=0;i < v2.length;i++){if(v1.charAt(start+i)=="1" && v2.charAt(i)=="0"){res+="1"}
else if(v1.charAt(start+i)=="0" && v2.charAt(i)=="1"){res+="1"}
else{res+="0"}}
return intOrLong(long_int.$factory(res,2))}
long_int.numerator=function(self){return self}
long_int.denominator=function(self){return _b_.int.$factory(1)}
long_int.imag=function(self){return _b_.int.$factory(0)}
long_int.real=function(self){return self}
long_int.to_base=function(self,base){
var res="",v=self.value
while(v > 0){var dm=divmod_pos(v,base.toString())
res=parseInt(dm[1].value).toString(base)+res
v=dm[0].value
if(v==0){break}}
return res}
function digits(base){
var is_digits={}
for(var i=0;i < base;i++){if(i==10){break}
is_digits[i]=true}
if(base > 10){
for(var i=0;i < base-10;i++){is_digits[String.fromCharCode(65+i)]=true
is_digits[String.fromCharCode(97+i)]=true}}
return is_digits}
var MAX_SAFE_INTEGER=Math.pow(2,53)-1
var MIN_SAFE_INTEGER=-MAX_SAFE_INTEGER
function isSafeInteger(n){return(typeof n==="number" &&
Math.round(n)===n &&
MIN_SAFE_INTEGER <=n &&
n <=MAX_SAFE_INTEGER)}
function intOrLong(long){
var v=parseInt(long.value)*(long.pos ? 1 :-1)
if(v > MIN_SAFE_INTEGER && v < MAX_SAFE_INTEGER){return v}
return long}
long_int.$factory=function(value,base){if(arguments.length > 2){throw _b_.TypeError.$factory("long_int takes at most 2 arguments ("+
arguments.length+" given)")}
if(base===undefined){base=10}
else if(!isinstance(base,int)){throw TypeError.$factory("'"+$B.class_name(base)+
"' object cannot be interpreted as an integer")}
if(base < 0 ||base==1 ||base > 36){throw ValueError.$factory(
"long_int.$factory() base must be >= 2 and <= 36")}
if(isinstance(value,_b_.float)){if(value===Number.POSITIVE_INFINITY ||
value===Number.NEGATIVE_INFINITY){return value}
if(value >=0){value=new Number(Math.round(value.value))}
else{value=new Number(Math.ceil(value.value))}}else if(isinstance(value,_b_.bool)){if(value.valueOf()){return int.$factory(1)}
return int.$factory(0)}
if(typeof value=="number"){if(isSafeInteger(value)){value=value.toString()}
else if(value.constructor==Number){value=value.toString()}
else{throw ValueError.$factory(
"argument of long_int is not a safe integer")}}else if(value.__class__===long_int){return value}else if(isinstance(value,int)){
value=value.$value+""}else if(isinstance(value,_b_.bool)){value=_b_.bool.__int__(value)+""}else if(typeof value !="string"){throw ValueError.$factory(
"argument of long_int must be a string, not "+
$B.class_name(value))}
var has_prefix=false,pos=true,start=0
while(value.charAt(0)==" " && value.length){value=value.substr(1)}
while(value.charAt(value.length-1)==" " && value.length){value=value.substr(0,value.length-1)}
if(value.charAt(0)=="+"){has_prefix=true}
else if(value.charAt(0)=="-"){has_prefix=true;pos=false}
if(has_prefix){
if(value.length==1){
throw ValueError.$factory(
'long_int argument is not a valid number: "'+value+'"')}else{value=value.substr(1)}}
while(start < value.length-1 && value.charAt(start)=="0"){start++}
value=value.substr(start)
var is_digits=digits(base),point=-1
for(var i=0;i < value.length;i++){if(value.charAt(i)=="." && point==-1){point=i}
else if(! is_digits[value.charAt(i)]){throw ValueError.$factory(
'long_int argument is not a valid number: "'+value+'"')}}
if(point !=-1){value=value.substr(0,point)}
if(base !=10){
var coef="1",v10=long_int.$factory(0),ix=value.length
while(ix--){var digit_base10=parseInt(value.charAt(ix),base).toString(),digit_by_coef=mul_pos(coef,digit_base10).value
v10=add_pos(v10.value,digit_by_coef)
coef=mul_pos(coef,base.toString()).value}
return v10}
return{__class__:long_int,value:value,pos:pos}}
$B.set_func_names(long_int,"builtins")
$B.long_int=long_int})(__BRYTHON__)
;
;(function($B){var bltns=$B.InjectBuiltins()
eval(bltns)
var object=_b_.object
function $UnsupportedOpType(op,class1,class2){throw _b_.TypeError.$factory("unsupported operand type(s) for "+
op+": '"+class1+"' and '"+class2+"'")}
var complex={__class__:_b_.type,__dir__:object.__dir__,$infos:{__module__:"builtins",__name__:"complex"},$is_class:true,$native:true,$descriptors:{real:true,imag:true}}
complex.__abs__=function(self){var _rf=isFinite(self.$real),_if=isFinite(self.$imag)
if((_rf && isNaN(self.$imag))||(_if && isNaN(self.$real))||
(isNaN(self.$imag)&& isNaN(self.$real))){return NaN}
if(! _rf ||! _if){return Infinity}
var mag=Math.sqrt(Math.pow(self.$real,2)+Math.pow(self.$imag,2))
if(!isFinite(mag)&& _rf && _if){
throw _b_.OverflowError.$factory("absolute value too large")}
return mag}
complex.__bool__=function(self){return(self.$real !=0 ||self.$imag !=0)}
complex.__eq__=function(self,other){if(isinstance(other,complex)){return self.$real.valueOf()==other.$real.valueOf()&&
self.$imag.valueOf()==other.$imag.valueOf()}
if(isinstance(other,_b_.int)){if(self.$imag !=0){return False}
return self.$real==other.valueOf()}
if(isinstance(other,_b_.float)){if(self.$imag !=0){return False}
return self.$real==other.valueOf()}
$UnsupportedOpType("==","complex",$B.get_class(other))}
complex.__floordiv__=function(self,other){$UnsupportedOpType("//","complex",$B.get_class(other))}
complex.__hash__=function(self){
if(self===undefined){return complex.__hashvalue__ ||$B.$py_next_hash--}
return self.$imag*1000003+self.$real}
complex.__init__=function(){return _b_.None}
complex.__invert__=function(self){return ~self}
complex.__mod__=function(self,other){throw _b_.TypeError.$factory("TypeError: can't mod complex numbers.")}
complex.__mro__=[object]
complex.__mul__=function(self,other){if(isinstance(other,complex)){return make_complex(self.$real*other.$real-self.$imag*other.$imag,self.$imag*other.$real+self.$real*other.$imag)}else if(isinstance(other,_b_.int)){return make_complex(self.$real*other.valueOf(),self.$imag*other.valueOf())}else if(isinstance(other,_b_.float)){return make_complex(self.$real*other,self.$imag*other)}else if(isinstance(other,_b_.bool)){if(other.valueOf()){return self}
return make_complex(0,0)}
$UnsupportedOpType("*",complex,other)}
complex.__name__="complex"
complex.__ne__=function(self,other){return ! complex.__eq__(self,other)}
complex.__neg__=function(self){return make_complex(-self.$real,-self.$imag)}
complex.__new__=function(cls){if(cls===undefined){throw _b_.TypeError.$factory('complex.__new__(): not enough arguments')}
var res,missing={},args=$B.args("complex",3,{cls:null,real:null,imag:null},["cls","real","imag"],arguments,{real:0,imag:missing},null,null),$real=args.real,$imag=args.imag
if(typeof $real=="string"){if($imag !==missing){throw _b_.TypeError.$factory("complex() can't take second arg "+
"if first is a string")}else{var arg=$real
$real=$real.trim()
if($real.startsWith("(")&& $real.endsWith(")")){$real=$real.substr(1)
$real=$real.substr(0,$real.length-1)}
var complex_re=/^\s*([\+\-]*[0-9_]*\.?[0-9_]*(e[\+\-]*[0-9_]*)?)([\+\-]?)([0-9_]*\.?[0-9_]*(e[\+\-]*[0-9_]*)?)(j?)\s*$/i
var parts=complex_re.exec($real)
function to_num(s){var res=parseFloat(s.charAt(0)+s.substr(1).replace(/_/g,""))
if(isNaN(res)){throw _b_.ValueError.$factory("could not convert string "+
"to complex: '"+arg+"'")}
return res}
if(parts===null){throw _b_.ValueError.$factory("complex() arg is a malformed string")}else if(parts[_real]=="." ||parts[_imag]=="." ||
parts[_real]==".e" ||parts[_imag]==".e" ||
parts[_real]=="e" ||parts[_imag]=="e"){throw _b_.ValueError.$factory("complex() arg is a malformed string")}else if(parts[_j]!=""){if(parts[_sign]==""){$real=0
if(parts[_real]=="+" ||parts[_real]==""){$imag=1}else if(parts[_real]=='-'){$imag=-1}else{$imag=to_num(parts[_real])}}else{$real=to_num(parts[_real])
$imag=parts[_imag]=="" ? 1 :to_num(parts[_imag])
$imag=parts[_sign]=="-" ?-$imag :$imag}}else{$real=to_num(parts[_real])
$imag=0}
res={__class__:complex,$real:$real ||0,$imag:$imag ||0}
return res}}
$imag=$imag===missing ? 0 :$imag
if(arguments.length==1 && $real.__class__===complex && $imag==0){return $real}
if((isinstance($real,_b_.float)||isinstance($real,_b_.int))&&
(isinstance($imag,_b_.float)||isinstance($imag,_b_.int))){res={__class__:complex,$real:$real,$imag:$imag}
return res}
for(var i=0;i < type_conversions.length;i++){if(hasattr($real,type_conversions[i])){}}
$real=_convert($real)
$imag=_convert($imag)
if(! isinstance($real,_b_.float)&& ! isinstance($real,_b_.int)&&
! isinstance($real,_b_.complex)){throw _b_.TypeError.$factory("complex() argument must be a string "+
"or a number")}
if(typeof $imag=="string"){throw _b_.TypeError.$factory("complex() second arg can't be a string")}
if(! isinstance($imag,_b_.float)&& ! isinstance($imag,_b_.int)&&
! isinstance($imag,_b_.complex)&& $imag !==missing){throw _b_.TypeError.$factory("complex() argument must be a string "+
"or a number")}
$imag=complex.__mul__(complex.$factory("1j"),$imag)
return complex.__add__($imag,$real)}
complex.__pos__=function(self){return self}
function complex2expo(cx){var norm=Math.sqrt((cx.$real*cx.$real)+(cx.$imag*cx.$imag)),sin=cx.$imag/norm,cos=cx.$real/norm,angle
if(cos==0){angle=sin==1 ? Math.PI/2 :3*Math.PI/2}
else if(sin==0){angle=cos==1 ? 0 :Math.PI}
else{angle=Math.atan(sin/cos)}
return{norm:norm,angle:angle}}
complex.__pow__=function(self,other){
var exp=complex2expo(self),angle=exp.angle,res=Math.pow(exp.norm,other)
if(_b_.isinstance(other,[_b_.int,_b_.float])){return make_complex(res*Math.cos(angle*other),res*Math.sin(angle*other))}else if(_b_.isinstance(other,complex)){
var x=other.$real,y=other.$imag
var pw=Math.pow(exp.norm,x)*Math.pow(Math.E,-y*angle),theta=y*Math.log(exp.norm)-x*angle
return make_complex(pw*Math.cos(theta),pw*Math.sin(theta))}else{throw _b_.TypeError.$factory("unsupported operand type(s) "+
"for ** or pow(): 'complex' and '"+
$B.class_name(other)+"'")}}
complex.__str__=complex.__repr__=function(self){if(self.$real==0){if(1/self.$real < 0){if(self.$imag < 0){return "(-0"+self.$imag+"j)"}else if(self.$imag==0 && 1/self.$imag < 0){return "(-0-"+self.$imag+"j)"}else return "(-0+"+self.$imag+"j)"}else{if(self.$imag==0 && 1/self.$imag < 0){return "-"+self.$imag+"j"}else{return self.$imag+"j"}}}
if(self.$imag > 0){return "("+self.$real+"+"+self.$imag+"j)"}
if(self.$imag==0){if(1/self.$imag < 0){return "("+self.$real+"-"+self.$imag+"j)"}
return "("+self.$real+"+"+self.$imag+"j)"}
return "("+self.$real+"-"+(-self.$imag)+"j)"}
complex.__sqrt__=function(self){if(self.$imag==0){return complex(Math.sqrt(self.$real))}
var r=self.$real,i=self.$imag,_a=Math.sqrt((r+sqrt)/2),_b=Number.sign(i)*Math.sqrt((-r+sqrt)/2)
return make_complex(_a,_b)}
complex.__truediv__=function(self,other){if(isinstance(other,complex)){if(other.$real==0 && other.$imag==0){throw ZeroDivisionError.$factory("division by zero")}
var _num=self.$real*other.$real+self.$imag*other.$imag,_div=other.$real*other.$real+other.$imag*other.$imag
var _num2=self.$imag*other.$real-self.$real*other.$imag
return make_complex(_num/_div,_num2/_div)}
if(isinstance(other,_b_.int)){if(! other.valueOf()){throw ZeroDivisionError.$factory('division by zero')}
return complex.__truediv__(self,complex.$factory(other.valueOf()))}
if(isinstance(other,_b_.float)){if(! other.valueOf()){throw ZeroDivisionError.$factory("division by zero")}
return complex.__truediv__(self,complex.$factory(other.valueOf()))}
$UnsupportedOpType("//","complex",other.__class__)}
complex.conjugate=function(self){return make_complex(self.$real,-self.$imag)}
var $op_func=function(self,other){throw _b_.TypeError.$factory("TypeError: unsupported operand type(s) "+
"for -: 'complex' and '"+$B.class_name(other)+"'")}
$op_func+=""
var $ops={"&":"and","|":"ior","<<":"lshift",">>":"rshift","^":"xor"}
for(var $op in $ops){eval("complex.__"+$ops[$op]+"__ = "+$op_func.replace(/-/gm,$op))}
complex.__ior__=complex.__or__
var $op_func=function(self,other){if(isinstance(other,complex)){return make_complex(self.$real-other.$real,self.$imag-other.$imag)}
if(isinstance(other,_b_.int)){return make_complex($B.sub(self.$real,other.valueOf()),self.$imag)}
if(isinstance(other,_b_.float)){return make_complex(self.$real-other.valueOf(),self.$imag)}
if(isinstance(other,_b_.bool)){var bool_value=0
if(other.valueOf()){bool_value=1}
return make_complex(self.$real-bool_value,self.$imag)}
throw _b_.TypeError.$factory("unsupported operand type(s) for -: "+
self.__repr__()+" and '"+$B.class_name(other)+"'")}
complex.__sub__=$op_func
$op_func+=''
$op_func=$op_func.replace(/-/gm,"+").replace(/sub/gm,"add")
eval("complex.__add__ = "+$op_func)
var $comp_func=function(self,other){if(other===undefined ||other==_b_.None){return _b_.NotImplemented}
throw _b_.TypeError.$factory("TypeError: no ordering relation "+
"is defined for complex numbers")}
$comp_func+=''
for(var $op in $B.$comps){eval("complex.__"+$B.$comps[$op]+"__ = "+
$comp_func.replace(/>/gm,$op))}
$B.make_rmethods(complex)
complex.real=function(self){return new Number(self.$real)}
complex.real.setter=function(){throw _b_.AttributeError.$factory("readonly attribute")}
complex.imag=function(self){return new Number(self.$imag)}
complex.imag.setter=function(){throw _b_.AttributeError.$factory("readonly attribute")}
var _real=1,_real_mantissa=2,_sign=3,_imag=4,_imag_mantissa=5,_j=6
var type_conversions=["__complex__","__float__","__int__"]
var _convert=function(num){for(var i=0;i < type_conversions.length;i++){if(hasattr(num,type_conversions[i])){return getattr(num,type_conversions[i])()}}
return num}
var make_complex=$B.make_complex=function(real,imag){return{
__class__:complex,$real:real,$imag:imag}}
complex.$factory=function(){return complex.__new__(complex,...arguments)}
$B.set_func_names(complex,"builtins")
_b_.complex=complex})(__BRYTHON__)
;
;(function($B){
var bltns=$B.InjectBuiltins()
eval(bltns)
var DEFAULT_MIN_MERGE=32
var DEFAULT_MIN_GALLOPING=7
var DEFAULT_TMP_STORAGE_LENGTH=256
var POWERS_OF_TEN=[1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9]
function log10(x){if(x < 1e5){if(x < 1e2){return x < 1e1 ? 0 :1}
if(x < 1e4){return x < 1e3 ? 2 :3}
return 4}
if(x < 1e7){return x < 1e6 ? 5 :6}
if(x < 1e9){return x < 1e8 ? 7 :8}
return 9}
function alphabeticalCompare(a,b){if(a===b){return 0}
if(~~a===a && ~~b===b){if(a===0 ||b===0){return a < b ?-1 :1}
if(a < 0 ||b < 0){if(b >=0){return-1}
if(a >=0){return 1}
a=-a
b=-b}
al=log10(a)
bl=log10(b)
var t=0
if(al < bl){a*=POWERS_OF_TEN[bl-al-1]
b/=10
t=-1}else if(al > bl){b*=POWERS_OF_TEN[al-bl-1]
a/=10;
t=1;}
if(a===b){return t}
return a < b ?-1 :1}
var aStr=String(a)
var bStr=String(b)
if(aStr===bStr){return 0}
return aStr < bStr ?-1 :1}
function minRunLength(n){var r=0
while(n >=DEFAULT_MIN_MERGE){r |=(n & 1)
n >>=1}
return n+r}
function makeAscendingRun(array,lo,hi,compare){var runHi=lo+1
if(runHi===hi){return 1;}
if(compare(array[runHi++],array[lo])< 0){while(runHi < hi && compare(array[runHi],array[runHi-1])< 0){runHi++}
reverseRun(array,lo,runHi)}else{while(runHi < hi && compare(array[runHi],array[runHi-1])>=0){runHi++}}
return runHi-lo}
function reverseRun(array,lo,hi){hi--
while(lo < hi){var t=array[lo]
array[lo++]=array[hi]
array[hi--]=t}}
function binaryInsertionSort(array,lo,hi,start,compare){if(start===lo){start++}
for(;start < hi;start++){var pivot=array[start]
var left=lo
var right=start
while(left < right){var mid=(left+right)>>> 1
if(compare(pivot,array[mid])< 0){right=mid}else{left=mid+1}}
var n=start-left
switch(n){case 3:
array[left+3]=array[left+2]
case 2:
array[left+2]=array[left+1]
case 1:
array[left+1]=array[left]
break;
default:
while(n > 0){array[left+n]=array[left+n-1]
n--;}}
array[left]=pivot}}
function gallopLeft(value,array,start,length,hint,compare){var lastOffset=0,maxOffset=0,offset=1
if(compare(value,array[start+hint])> 0){maxOffset=length-hint
while(offset < maxOffset && compare(value,array[start+hint+offset])> 0){lastOffset=offset
offset=(offset << 1)+1
if(offset <=0){offset=maxOffset}}
if(offset > maxOffset){offset=maxOffset}
lastOffset+=hint
offset+=hint}else{maxOffset=hint+1
while(offset < maxOffset && compare(value,array[start+hint-offset])<=0){lastOffset=offset
offset=(offset << 1)+1
if(offset <=0){offset=maxOffset}}
if(offset > maxOffset){offset=maxOffset}
var tmp=lastOffset
lastOffset=hint-offset
offset=hint-tmp}
lastOffset++
while(lastOffset < offset){var m=lastOffset+((offset-lastOffset)>>> 1)
if(compare(value,array[start+m])> 0){lastOffset=m+1}else{offset=m}}
return offset}
function gallopRight(value,array,start,length,hint,compare){var lastOffset=0,maxOffset=0,offset=1
if(compare(value,array[start+hint])< 0){maxOffset=hint+1
while(offset < maxOffset && compare(value,array[start+hint-offset])< 0){lastOffset=offset
offset=(offset << 1)+1
if(offset <=0){offset=maxOffset}}
if(offset > maxOffset){offset=maxOffset}
var tmp=lastOffset
lastOffset=hint-offset
offset=hint-tmp}else{maxOffset=length-hint
while(offset < maxOffset && compare(value,array[start+hint+offset])>=0){lastOffset=offset
offset=(offset << 1)+1
if(offset <=0){offset=maxOffset}}
if(offset > maxOffset){offset=maxOffset}
lastOffset+=hint
offset+=hint}
lastOffset++
while(lastOffset < offset){var m=lastOffset+((offset-lastOffset)>>> 1)
if(compare(value,array[start+m])< 0){offset=m}else{lastOffset=m+1}}
return offset}
var TIM_SORT_ASSERTION="TimSortAssertion"
var TimSortAssertion=function(message){this.name=TIM_SORT_ASSERTION
this.message=message}
var TimSort=function(array,compare){var self={array:array,compare:compare,minGallop:DEFAULT_MIN_GALLOPING,length :array.length,tmpStorageLength:DEFAULT_TMP_STORAGE_LENGTH,stackLength:0,runStart:null,runLength:null,stackSize:0,
pushRun:function(runStart,runLength){this.runStart[this.stackSize]=runStart
this.runLength[this.stackSize]=runLength
this.stackSize+=1},
mergeRuns:function(){while(this.stackSize > 1){var n=this.stackSize-2
if((n >=1 && this.runLength[n-1]<=
this.runLength[n]+this.runLength[n+1])||
(n >=2 && this.runLength[n-2]<=
this.runLength[n]+this.runLength[n-1])){if(this.runLength[n-1]< this.runLength[n+1]){n--}}else if(this.runLength[n]> this.runLength[n+1]){break}
this.mergeAt(n)}},
forceMergeRuns:function(){while(this.stackSize > 1){var n=this.stackSize-2
if(n > 0 && this.runLength[n-1]< this.runLength[n+1]){n--}
this.mergeAt(n)}},
mergeAt:function(i){var compare=this.compare,array=this.array,start1=this.runStart[i],length1=this.runLength[i],start2=this.runStart[i+1],length2=this.runLength[i+1]
this.runLength[i]=length1+length2
if(i===this.stackSize-3){this.runStart[i+1]=this.runStart[i+2]
this.runLength[i+1]=this.runLength[i+2]}
this.stackSize--;
var k=gallopRight(array[start2],array,start1,length1,0,compare)
start1+=k
length1-=k
if(length1===0){return}
length2=gallopLeft(array[start1+length1-1],array,start2,length2,length2-1,compare)
if(length2===0){return}
if(length1 <=length2){this.mergeLow(start1,length1,start2,length2)}else{this.mergeHigh(start1,length1,start2,length2)}},
mergeLow:function(start1,length1,start2,length2){var compare=this.compare,array=this.array,tmp=this.tmp,i=0
for(var i=0;i < length1;i++){tmp[i]=array[start1+i]}
var cursor1=0,cursor2=start2,dest=start1
array[dest++]=array[cursor2++]
if(--length2===0){for(var i=0;i < length1;i++){array[dest+i]=tmp[cursor1+i]}
return}
if(length1===1){for(var i=0;i < length2;i++){array[dest+i]=array[cursor2+i]}
array[dest+length2]=tmp[cursor1]
return}
var minGallop=this.minGallop
while(true){var count1=0,count2=0,exit=false
do{if(compare(array[cursor2],tmp[cursor1])< 0){array[dest++]=array[cursor2++]
count2++
count1=0
if(--length2===0){exit=true
break}}else{array[dest++]=tmp[cursor1++]
count1++
count2=0
if(--length1===1){exit=true
break}}}while((count1 |count2)< minGallop)
if(exit){break}
do{
count1=gallopRight(array[cursor2],tmp,cursor1,length1,0,compare)
if(count1 !==0){for(var i=0;i < count1;i++){array[dest+i]=tmp[cursor1+i]}
dest+=count1
cursor1+=count1
length1-=count1
if(length1 <=1){exit=true
break}}
array[dest++]=array[cursor2++]
if(--length2===0){exit=true
break}
count2=gallopLeft(tmp[cursor1],array,cursor2,length2,0,compare)
if(count2 !==0){for(var i=0;i < count2;i++){array[dest+i]=array[cursor2+i]}
dest+=count2
cursor2+=count2
length2-=count2
if(length2===0){exit=true
break}}
array[dest++]=tmp[cursor1++]
if(--length1===1){exit=true
break}
minGallop--;}while(count1 >=DEFAULT_MIN_GALLOPING ||
count2 >=DEFAULT_MIN_GALLOPING);
if(exit){break}
if(minGallop < 0){minGallop=0}
minGallop+=2}
this.minGallop=minGallop
if(minGallop < 1){this.minGallop=1}
if(length1===1){for(var i=0;i < length2;i++){array[dest+i]=array[cursor2+i]}
array[dest+length2]=tmp[cursor1]}else if(length1===0){throw new TimSortAssertion('mergeLow preconditions were not respected')}else{for(var i=0;i < length1;i++){array[dest+i]=tmp[cursor1+i]}}},
mergeHigh:function(start1,length1,start2,length2){var compare=this.compare,array=this.array,tmp=this.tmp,i=0
for(var i=0;i < length2;i++){tmp[i]=array[start2+i]}
var cursor1=start1+length1-1,cursor2=length2-1,dest=start2+length2-1,customCursor=0,customDest=0
array[dest--]=array[cursor1--]
if(--length1===0){customCursor=dest-(length2-1)
for(var i=0;i < length2;i++){array[customCursor+i]=tmp[i]}
return}
if(length2===1){dest-=length1
cursor1-=length1
customDest=dest+1
customCursor=cursor1+1
for(var i=length1-1;i >=0;i--){array[customDest+i]=array[customCursor+i]}
array[dest]=tmp[cursor2]
return}
var minGallop=this.minGallop
while(true){var count1=0,count2=0,exit=false
do{if(compare(tmp[cursor2],array[cursor1])< 0){array[dest--]=array[cursor1--]
count1++
count2=0
if(--length1===0){exit=true
break}}else{array[dest--]=tmp[cursor2--]
count2++
count1=0
if(--length2===1){exit=true
break}}}while((count1 |count2)< minGallop)
if(exit){break}
do{count1=length1-gallopRight(tmp[cursor2],array,start1,length1,length1-1,compare)
if(count1 !==0){dest-=count1
cursor1-=count1
length1-=count1
customDest=dest+1
customCursor=cursor1+1
for(var i=count1-1;i >=0;i--){array[customDest+i]=array[customCursor+i]}
if(length1===0){exit=true
break}}
array[dest--]=tmp[cursor2--]
if(--length2===1){exit=true
break}
count2=length2-gallopLeft(array[cursor1],tmp,0,length2,length2-1,compare)
if(count2 !==0){dest-=count2
cursor2-=count2
length2-=count2
customDest=dest+1
customCursor=cursor2+1
for(var i=0;i < count2;i++){array[customDest+i]=tmp[customCursor+i]}
if(length2 <=1){exit=true
break}}
array[dest--]=array[cursor1--]
if(--length1===0){exit=true
break}
minGallop--}while(count1 >=DEFAULT_MIN_GALLOPING ||
count2 >=DEFAULT_MIN_GALLOPING)
if(exit){break}
if(minGallop < 0){minGallop=0}
minGallop+=2}
this.minGallop=minGallop
if(minGallop < 1){this.minGallop=1}
if(length2===1){dest-=length1
cursor1-=length1
customDest=dest+1
customCursor=cursor1+1
for(var i=length1-1;i >=0;i--){array[customDest+i]=array[customCursor+i]}
array[dest]=tmp[cursor2]}else if(length2==0){throw new TimSortAssertion("mergeHigh preconditions were not respected")}else{customCursor=dest-(length2-1)
for(var i=0;i < length2;i++){array[customCursor+i]=tmp[i]}}}}
if(self.length < 2*DEFAULT_TMP_STORAGE_LENGTH){self.tmpStorageLength=self.length >>> 1}
self.tmp=new Array(self.tmpStorageLength)
self.stackLength=
(self.length < 120 ? 5 :
self.length < 1542 ? 10 :
self.length < 119151 ? 19 :40)
self.runStart=new Array(self.stackLength)
self.runLength=new Array(self.stackLength)
return self}
function tim_sort(array,compare,lo,hi){if(!Array.isArray(array)){throw TypeError.$factory("Can only sort arrays")}
if(!compare){compare=alphabeticalCompare}else if(typeof compare !=="function"){hi=lo
lo=compare
compare=alphabeticalCompare}
if(!lo){lo=0}
if(!hi){hi=array.length}
var remaining=hi-lo
if(remaining < 2){return}
var runLength=0
if(remaining < DEFAULT_MIN_MERGE){runLength=makeAscendingRun(array,lo,hi,compare)
binaryInsertionSort(array,lo,hi,lo+runLength,compare)
return}
var ts=new TimSort(array,compare)
var minRun=minRunLength(remaining)
do{runLength=makeAscendingRun(array,lo,hi,compare)
if(runLength < minRun){var force=remaining
if(force > minRun){force=minRun}
binaryInsertionSort(array,lo,lo+force,lo+runLength,compare)
runLength=force}
ts.pushRun(lo,runLength)
ts.mergeRuns()
remaining-=runLength
lo+=runLength}while(remaining !==0)
ts.forceMergeRuns()}
function tim_sort_safe(array,compare){
try{
tim_sort(array,compare,0,array.length)}catch(e){if(e.name==TIM_SORT_ASSERTION){array.sort(compare);}else{
throw e;}}}
$B.$TimSort=tim_sort_safe
$B.$AlphabeticalCompare=alphabeticalCompare})(__BRYTHON__)
;
;(function($B){var bltns=$B.InjectBuiltins()
eval(bltns)
var object=_b_.object,$N=_b_.None
function check_not_tuple(self,attr){if(self.__class__===tuple){throw _b_.AttributeError.$factory(
"'tuple' object has no attribute '"+attr+"'")}}
function $list(){
return list.$factory.apply(null,arguments)}
var list={__class__:_b_.type,__mro__:[object],$infos:{__module__:"builtins",__name__:"list"},$is_class:true,$native:true,__dir__:object.__dir__}
list.__add__=function(self,other){if($B.get_class(self)!==$B.get_class(other)){var radd=getattr(other,"__radd__",NotImplemented)
if(radd !==NotImplemented){return radd(self)}
throw TypeError.$factory('can only concatenate list (not "'+
$B.class_name(other)+'") to list')}
var res=self.valueOf().concat(other.valueOf())
if(isinstance(self,tuple)){res=tuple.$factory(res)}
return res}
list.__contains__=function(self,item){var $=$B.args("__contains__",2,{self:null,item:null},["self","item"],arguments,{},null,null),self=$.self,item=$.item
var _eq=function(other){return $B.rich_comp("__eq__",item,other)}
var i=0
while(i < self.length){if(_eq(self[i])){return true}
i++}
return false}
list.__delitem__=function(self,arg){if(isinstance(arg,_b_.int)){var pos=arg
if(arg < 0){pos=self.length+pos}
if(pos >=0 && pos < self.length){self.splice(pos,1)
return $N}
throw _b_.IndexError.$factory("list index out of range")}
if(isinstance(arg,_b_.slice)){var step=arg.step
if(step===None){step=1}
var start=arg.start
if(start===None){start=step > 0 ? 0 :self.length}
var stop=arg.stop
if(stop===None){stop=step > 0 ? self.length :0}
if(start < 0){start=self.length+start}
if(stop < 0){stop=self.length+stop}
var res=[],i=null,pos=0
if(step > 0){if(stop > start){for(var i=start;i < stop;i+=step){if(self[i]!==undefined){res[pos++]=i}}}}else{if(stop < start){for(var i=start;i > stop;i+=step){if(self[i]!==undefined){res[pos++]=i}}
res.reverse()}}
var i=res.length
while(i--){self.splice(res[i],1)}
return $N}
if(hasattr(arg,"__int__")||hasattr(arg,"__index__")){list.__delitem__(self,_b_.int.$factory(arg))
return $N}
throw _b_.TypeError.$factory("list indices must be integer, not "+
_b_.str.$factory(arg.__class__))}
list.__eq__=function(self,other){if(isinstance(self,list)){var klass=list}else{var klass=tuple}
if(isinstance(other,klass)){if(other.length==self.length){var i=self.length
while(i--){if(! $B.rich_comp("__eq__",self[i],other[i])){return false}}
return true}}
return _b_.NotImplemented}
list.__getitem__=function(self,arg){var $=$B.args("__getitem__",2,{self:null,key:null},["self","key"],arguments,{},null,null),self=$.self,key=$.key
var factory=$B.get_class(self).$factory
if(isinstance(key,_b_.int)){var items=self.valueOf(),pos=key
if(key < 0){pos=items.length+pos}
if(pos >=0 && pos < items.length){return items[pos]}
throw _b_.IndexError.$factory("list index out of range")}
if(isinstance(key,_b_.slice)){
var s=_b_.slice.$conv_for_seq(key,self.length)
var res=[],i=null,items=self.valueOf(),pos=0,start=s.start,stop=s.stop,step=s.step
if(step > 0){if(stop <=start){return factory(res)}
for(var i=start;i < stop;i+=step){res[pos++]=items[i]}
return factory(res)}else{if(stop > start){return factory(res)}
for(var i=start;i > stop;i+=step){res[pos++]=items[i]}
return factory(res)}}
if(hasattr(key,"__int__")||hasattr(key,"__index__")){return list.__getitem__(self,_b_.int.$factory(key))}
throw _b_.TypeError.$factory("list indices must be integer, not "+
$B.class_name(key))}
list.__ge__=function(self,other){if(! isinstance(other,[list,_b_.tuple])){throw _b_.TypeError.$factory("unorderable types: list() >= "+
$B.class_name(other)+"()")}
var i=0
while(i < self.length){if(i >=other.length){return true}
if($B.rich_comp("__eq__",self[i],other[i])){i++}
else{res=getattr(self[i],"__ge__")(other[i])
if(res===_b_.NotImplemented){throw _b_.TypeError.$factory("unorderable types: "+
$B.class_name(self[i])+"() >= "+
$B.class_name(other[i])+"()")}else{return res}}}
return other.length==self.length}
list.__gt__=function(self,other){if(! isinstance(other,[list,_b_.tuple])){throw _b_.TypeError.$factory("unorderable types: list() > "+
$B.class_name(other)+"()")}
var i=0
while(i < self.length){if(i >=other.length){return true}
if($B.rich_comp("__eq__",self[i],other[i])){i++}
else{res=getattr(self[i],"__gt__")(other[i])
if(res===_b_.NotImplemented){throw _b_.TypeError.$factory("unorderable types: "+
$B.class_name(self[i])+"() > "+
$B.class_name(other[i])+"()")}else return res}}
return false}
list.__hash__=None
list.__iadd__=function(){var $=$B.args("__iadd__",2,{self:null,x:null},["self","x"],arguments,{},null,null)
var radd=getattr($.x,"__radd__",NotImplemented)
if(radd !==NotImplemented){return radd($.self)}
var x=list.$factory($B.$iter($.x))
for(var i=0;i < x.length;i++){$.self.push(x[i])}
return $.self}
list.__imul__=function(){var $=$B.args("__imul__",2,{self:null,x:null},["self","x"],arguments,{},null,null),x=$B.$GetInt($.x),len=$.self.length,pos=len
if(x==0){list.clear($.self);return $.self}
for(var i=1;i < x;i++){for(j=0;j < len;j++){$.self[pos++]=$.self[j]}}
return $.self}
list.__init__=function(self,arg){var len_func=$B.$call(getattr(self,"__len__")),pop_func=getattr(self,"pop",_b_.None)
if(pop_func !==_b_.None){pop_func=$B.$call(pop_func)
while(len_func()){pop_func()}}
if(arg===undefined){return $N}
var arg=$B.$iter(arg),next_func=$B.$call(getattr(arg,"__next__")),pos=len_func()
while(1){try{var res=next_func()
self[pos++]=res}catch(err){if(err.__class__===_b_.StopIteration){break}
else{throw err}}}
return $N}
var $list_iterator=$B.$iterator_class("list_iterator")
$list_iterator.__reduce__=$list_iterator.__reduce_ex__=function(self){return $B.fast_tuple([_b_.iter,$B.fast_tuple([list.$factory(self)]),0])}
list.__iter__=function(self){return $B.$iterator(self,$list_iterator)}
list.__le__=function(self,other){return ! list.__gt__(self,other)}
list.__len__=function(self){return self.length}
list.__lt__=function(self,other){if(! isinstance(other,[list,_b_.tuple])){throw _b_.TypeError.$factory("unorderable types: list() >= "+
$B.class_name(other)+"()")}
var i=0
while(i < self.length){if(i >=other.length){return true}
if($B.rich_comp("__eq__",self[i],other[i])){i++}else{res=getattr(self[i],"__lt__")(other[i])
if(res===_b_.NotImplemented){throw _b_.TypeError.$factory("unorderable types: "+
$B.class_name(self[i])+"() >= "+
$B.class_name(other[i])+"()")}else{return res}}}
return other.length > self.length}
list.__mul__=function(self,other){if(isinstance(other,_b_.int)){
var res=[],$temp=self.slice(),len=$temp.length
for(var i=0;i < other;i++){for(var j=0;j < len;j++){res.push($temp[j])}}
res.__class__=self.__class__
return res}
if(hasattr(other,"__int__")||hasattr(other,"__index__")){return list.__mul__(self,_b_.int.$factory(other))}
var rmul=$B.$getattr(other,"__rmul__",NotImplemented)
if(rmul !==NotImplemented){return rmul(self)}
throw _b_.TypeError.$factory(
"can't multiply sequence by non-int of type '"+
$B.class_name(other)+"'")}
list.__new__=function(cls,...args){if(cls===undefined){throw _b_.TypeError.$factory("list.__new__(): not enough arguments")}
var res=[]
res.__class__=cls
res.__brython__=true
return res}
list.__repr__=function(self){if(self===undefined){return "<class 'list'>"}
var _r=[]
for(var i=0;i < self.length;i++){if(self[i]===self){_r.push('[...]')}
else{_r.push(_b_.repr(self[i]))}}
if(self.__class__===tuple){if(self.length==1){return "("+_r[0]+",)"}
return "("+_r.join(", ")+")"}
return "["+_r.join(", ")+"]"}
list.__setattr__=function(self,attr,value){if(self.__class__===list){if(list.hasOwnProperty(attr)){throw _b_.AttributeError.$factory("'list' object attribute '"+
attr+"' is read-only")}else{throw _b_.AttributeError.$factory(
"'list' object has no attribute '"+attr+"'")}}
self[attr]=value
return $N}
list.__setitem__=function(){var $=$B.args("__setitem__",3,{self:null,key:null,value:null},["self","key","value"],arguments,{},null,null),self=$.self,arg=$.key,value=$.value
list.$setitem(self,arg,value)}
list.$setitem=function(self,arg,value){
if(typeof arg=="number" ||isinstance(arg,_b_.int)){var pos=arg
if(arg < 0){pos=self.length+pos}
if(pos >=0 && pos < self.length){self[pos]=value}
else{throw _b_.IndexError.$factory("list index out of range")}
return $N}
if(isinstance(arg,_b_.slice)){var s=_b_.slice.$conv_for_seq(arg,self.length)
if(arg.step===null){$B.set_list_slice(self,s.start,s.stop,value)}
else{$B.set_list_slice_step(self,s.start,s.stop,s.step,value)}
return $N}
if(hasattr(arg,"__int__")||hasattr(arg,"__index__")){list.__setitem__(self,_b_.int.$factory(arg),value)
return $N}
throw _b_.TypeError.$factory("list indices must be integer, not "+
$B.class_name(arg))}
$B.make_rmethods(list)
var _ops=["add","sub"]
list.append=function(){var $=$B.args("append",2 ,{self:null,x:null},["self","x"],arguments,{},null,null)
$.self[$.self.length]=$.x
return $N}
list.clear=function(){var $=$B.args("clear",1,{self:null},["self"],arguments,{},null,null)
while($.self.length){$.self.pop()}
return $N}
list.copy=function(){var $=$B.args("copy",1,{self:null},["self"],arguments,{},null,null)
return $.self.slice()}
list.count=function(){var $=$B.args("count",2,{self:null,x:null},["self","x"],arguments,{},null,null)
var res=0,_eq=function(other){return $B.rich_comp("__eq__",$.x,other)},i=$.self.length
while(i--){if(_eq($.self[i])){res++}}
return res}
list.extend=function(){var $=$B.args("extend",2,{self:null,t:null},["self","t"],arguments,{},null,null)
var other=list.$factory($B.$iter($.t))
for(var i=0;i < other.length;i++){$.self.push(other[i])}
return $N}
list.index=function(){var $=$B.args("index",4,{self:null,x:null,start:null,stop:null},["self","x","start" ,"stop"],arguments,{start:null,stop:null},null,null),self=$.self,start=$.start,stop=$.stop
var _eq=function(other){return $B.rich_comp("__eq__",$.x,other)}
if(start===null){start=0}
else{if(start.__class__===$B.long_int){start=parseInt(start.value)*(start.pos ? 1 :-1)}
if(start < 0){start=Math.max(0,start+self.length)}}
if(stop===null){stop=self.length}
else{if(stop.__class__===$B.long_int){stop=parseInt(stop.value)*(stop.pos ? 1 :-1)}
if(stop < 0){stop=Math.min(self.length,stop+self.length)}}
for(var i=start;i < stop;i++){if(_eq(self[i])){return i}}
throw _b_.ValueError.$factory(_b_.str.$factory($.x)+" is not in list")}
list.insert=function(){var $=$B.args("insert",3,{self:null,i:null,item:null},["self","i","item"],arguments,{},null,null)
$.self.splice($.i,0,$.item)
return $N}
list.pop=function(){var $=$B.args("pop",2,{self:null,pos:null},["self","pos"],arguments,{pos:null},null,null),self=$.self,pos=$.pos
check_not_tuple(self,"pop")
if(pos===null){pos=self.length-1}
pos=$B.$GetInt(pos)
if(pos < 0){pos+=self.length}
var res=self[pos]
if(res===undefined){throw _b_.IndexError.$factory("pop index out of range")}
self.splice(pos,1)
return res}
list.remove=function(){var $=$B.args("remove",2,{self:null,x:null},["self","x"],arguments,{},null,null)
for(var i=0,len=$.self.length;i < len;i++){if($B.rich_comp("__eq__",$.self[i],$.x)){$.self.splice(i,1)
return $N}}
throw _b_.ValueError.$factory(_b_.str.$factory($.x)+" is not in list")}
list.reverse=function(self){var $=$B.args("reverse",1,{self:null},["self"],arguments,{},null,null),_len=$.self.length-1,i=parseInt($.self.length/2)
while(i--){var buf=$.self[i]
$.self[i]=$.self[_len-i]
$.self[_len-i]=buf}
return $N}
function $partition(arg,array,begin,end,pivot)
{var piv=array[pivot]
array=swap(array,pivot,end-1)
var store=begin
if(arg===null){if(array.$cl !==false){
var le_func=_b_.getattr(array.$cl,"__le__")
for(var ix=begin;ix < end-1;++ix){if(le_func(array[ix],piv)){array=swap(array,store,ix);
++store}}}else{for(var ix=begin;ix < end-1;++ix){if(getattr(array[ix],"__le__")(piv)){array=swap(array,store,ix)
++store}}}}else{var len=array.length
for(var ix=begin;ix < end-1;++ix){var x=arg(array[ix])
if(array.length !==len){throw ValueError.$factory("list modified during sort")}
if(getattr(x,"__le__")(arg(piv))){array=swap(array,store,ix)
++store}}}
array=swap(array,end-1,store)
return store}
function swap(_array,a,b){var tmp=_array[a]
_array[a]=_array[b]
_array[b]=tmp
return _array}
function $qsort(arg,array,begin,end){if(end-1 > begin){var pivot=begin+Math.floor(Math.random()*(end-begin))
pivot=$partition(arg,array,begin,end,pivot)
$qsort(arg,array,begin,pivot)
$qsort(arg,array,pivot+1,end)}}
function $elts_class(self){
if(self.length==0){return null}
var cl=$B.get_class(self[0]),i=self.length
while(i--){if($B.get_class(self[i])!==cl){return false}}
return cl}
list.sort=function(self){var $=$B.args("sort",1,{self:null},["self"],arguments,{},null,"kw")
check_not_tuple(self,"sort")
var func=_b_.None,reverse=false,kw_args=$.kw,keys=_b_.list.$factory(_b_.dict.$$keys(kw_args))
for(var i=0;i < keys.length;i++){if(keys[i]=="key"){func=kw_args.$string_dict[keys[i]]}
else if(keys[i]=="reverse"){reverse=kw_args.$string_dict[keys[i]]}
else{throw _b_.TypeError.$factory("'"+keys[i]+
"' is an invalid keyword argument for this function")}}
if(self.length==0){return}
if(func !==_b_.None){func=$B.$call(func)}
self.$cl=$elts_class(self)
var cmp=null;
if(func===_b_.None && self.$cl===_b_.str){if(reverse){cmp=function(b,a){return $B.$AlphabeticalCompare(a,b)}}else{cmp=function(a,b){return $B.$AlphabeticalCompare(a,b)}}}else if(func===_b_.None && self.$cl===_b_.int){if(reverse){cmp=function(b,a){return a-b}}else{cmp=function(a,b){return a-b}}}else{if(func===_b_.None){if(reverse){cmp=function(b,a){res=getattr(a,"__le__")(b)
if(res===_b_.NotImplemented){throw _b_.TypeError.$factory("unorderable types: "+
$B.class_name(b)+"() <="+
$B.class_name(a)+"()")}
if(res){if(a==b){return 0}
return-1}
return 1}}else{cmp=function(a,b){res=getattr(a,"__le__")(b)
if(res===_b_.NotImplemented){throw _b_.TypeError.$factory("unorderable types: "+
$B.class_name(a)+"() <="+
$B.class_name(b)+"()")}
if(res){if(a==b){return 0}
return-1}
return 1}}}else{if(reverse){cmp=function(b,a){var _a=func(a),_b=func(b)
res=getattr(_a,"__le__")(_b)
if(res===_b_.NotImplemented){throw _b_.TypeError.$factory("unorderable types: "+
$B.class_name(b)+"() <="+
$B.class_name(a)+"()")}
if(res){if(_a==_b){return 0}
return-1}
return 1}}else{cmp=function(a,b){var _a=func(a),_b=func(b)
res=$B.$getattr(_a,"__lt__")(_b)
if(res===_b_.NotImplemented){throw _b_.TypeError.$factory("unorderable types: "+
$B.class_name(a)+"() <="+
$B.class_name(b)+"()")}
if(res){if(_a==_b){return 0}
return-1}
return 1}}}}
$B.$TimSort(self,cmp)
return(self.__brython__ ? $N :self)}
$B.$list=function(t){t.__brython__=true
return t}
list.$factory=function(){if(arguments.length==0){return[]}
var $=$B.args("list",1,{obj:null},["obj"],arguments,{},null,null),obj=$.obj
if(Array.isArray(obj)){
obj=obj.slice()
obj.__brython__=true;
if(obj.__class__==tuple){var res=obj.slice()
res.__class__=list
return res}
return obj}
var res=[],pos=0,arg=$B.$iter(obj),next_func=$B.$call(getattr(arg,"__next__"))
while(1){try{res[pos++]=next_func()}
catch(err){if(!isinstance(err,_b_.StopIteration)){throw err}
break}}
res.__brython__=true
return res}
$B.set_func_names(list,"builtins")
var JSArray=$B.JSArray=$B.make_class("JSArray",function(array){return{
__class__:JSArray,js:array}}
)
JSArray.__repr__=JSArray.__str__=function(){return "<JSArray object>"}
function make_args(args){var res=[args[0].js]
for(var i=1,len=args.length;i < len;i++){res.push(args[i])}
return res}
for(var attr in list){if($B.JSArray[attr]!==undefined){continue}
if(typeof list[attr]=="function"){$B.JSArray[attr]=(function(fname){return function(){return $B.$JS2Py(list[fname].apply(null,make_args(arguments)))}})(attr)}}
$B.set_func_names($B.JSArray,"builtins")
function $tuple(arg){return arg}
var tuple={__class__:_b_.type,__mro__:[object],$infos:{__module__:"builtins",__name__:"tuple"},$is_class:true,$native:true}
tuple.__iter__=function(self){return $B.$iterator(self,$tuple_iterator)}
var $tuple_iterator=$B.$iterator_class("tuple_iterator")
tuple.$factory=function(){var obj=list.$factory(...arguments)
obj.__class__=tuple
return obj}
$B.fast_tuple=function(array){array.__class__=tuple
array.__brython__=true
return array}
for(var attr in list){switch(attr){case "__delitem__":
case "__iadd__":
case "__imul__":
case "__setitem__":
case "append":
case "extend":
case "insert":
case "remove":
case "reverse":
break
default:
if(tuple[attr]===undefined){if(typeof list[attr]=="function"){tuple[attr]=(function(x){return function(){return list[x].apply(null,arguments)}})(attr)}else{}}}}
tuple.__eq__=function(self,other){
if(other===undefined){return self===tuple}
return list.__eq__(self,other)}
function c_mul(a,b){s=((parseInt(a)*b)& 0xFFFFFFFF).toString(16)
return parseInt(s.substr(0,s.length-1),16)}
tuple.__hash__=function(self){
var x=0x3456789
for(var i=0,len=self.length;i < len;i++){var y=_b_.hash(self[i])
x=c_mul(1000003,x)^ y & 0xFFFFFFFF}
return x}
tuple.__init__=function(){
return $N}
tuple.__new__=function(cls,...args){if(cls===undefined){throw _b_.TypeError.$factory("list.__new__(): not enough arguments")}
var self=[]
self.__class__=cls
self.__brython__=true
var arg=$B.$iter(args[0]),next_func=$B.$call(getattr(arg,"__next__"))
while(1){try{var item=next_func()
self.push(item)}
catch(err){if(err.__class__===_b_.StopIteration){break}
else{throw err}}}
return self}
$B.set_func_names(tuple,"builtins")
_b_.list=list
_b_.tuple=tuple
_b_.object.__bases__=tuple.$factory()})(__BRYTHON__)
;
;(function($B){var bltns=$B.InjectBuiltins()
eval(bltns)
if(!String.prototype.trim){
String.prototype.trim=function(){var c
for(var i=0;i < this.length;i++){c=this.charCodeAt(i)
if([32,10,13,9,12,11,160,5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,65279].indexOf(c)>-1){continue}else{break}}
for(var j=this.length-1;j >=i;j--){c=this.charCodeAt(j)
if([32,10,13,9,12,11,160,5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,65279].indexOf(c)>-1){continue}else{break}}
return this.substring(i,j+1);}}
if(!String.prototype.trimLeft){
String.prototype.trimLeft=function(){var c
for(var i=0;i < this.length;i++){c=this.charCodeAt(i)
if([32,10,13,9,12,11,160,5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,65279].indexOf(c)>-1){continue}else{break}}
return this.substring(i)}}
if(!String.prototype.trimRight){String.prototype.trimRight=function(){
var c
for(var j=this.length-1;j >=0;j--){c=this.charCodeAt(j)
if([32,10,13,9,12,11,160,5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288,65279].indexOf(c)>-1){continue}else{break}}
return this.substring(0,j+1)}}
var object=_b_.object
var str={__class__:_b_.type,__dir__:object.__dir__,$infos:{__module__:"builtins",__name__:"str"},$is_class:true,$native:true}
function normalize_start_end($){if($.start===null ||$.start===_b_.None){$.start=0}
else if($.start < 0){$.start+=$.self.length
$.start=Math.max(0,$.start)}
if($.end===null ||$.end===_b_.None){$.end=$.self.length}
else if($.end < 0){$.end+=$.self.length
$.end=Math.max(0,$.end)}
if(! isinstance($.start,_b_.int)||! isinstance($.end,_b_.int)){throw _b_.TypeError.$factory("slice indices must be integers "+
"or None or have an __index__ method")}}
function reverse(s){
return s.split("").reverse().join("")}
function check_str(obj){if(! _b_.isinstance(obj,str)){throw _b_.TypeError.$factory("can't convert '"+
$B.class_name(obj)+"' object to str implicitly")}}
str.__add__=function(self,other){if(!(typeof other==="string")){try{return getattr(other,"__radd__")(self)}
catch(err){throw _b_.TypeError.$factory("Can't convert "+
$B.class_name(other)+" to str implicitly")}}
return self+other}
str.__contains__=function(self,item){if(!(typeof item=="string")){throw _b_.TypeError.$factory("'in <string>' requires "+
"string as left operand, not "+item.__class__)}
var nbcar=item.length
if(nbcar==0){return true}
if(self.length==0){return nbcar==0}
for(var i=0,len=self.length;i < len;i++){if(self.substr(i,nbcar)==item){return true}}
return false}
str.__delitem__=function(){throw _b_.TypeError.$factory("'str' object doesn't support item deletion")}
str.__dir__=object.__dir__
str.__eq__=function(self,other){if(other===undefined){
return self===str}
if(_b_.isinstance(other,_b_.str)){return other.valueOf()==self.valueOf()}
return _b_.NotImplemented}
function preformat(self,fmt){if(fmt.empty){return _b_.str.$factory(self)}
if(fmt.type && fmt.type !="s"){throw _b_.ValueError.$factory("Unknown format code '"+fmt.type+
"' for object of type 'str'")}
return self}
str.__format__=function(self,format_spec){var fmt=new $B.parse_format_spec(format_spec)
if(fmt.sign !==undefined){throw _b_.ValueError.$factory(
"Sign not allowed in string format specifier")}
fmt.align=fmt.align ||"<"
return $B.format_width(preformat(self,fmt),fmt)}
str.__getitem__=function(self,arg){if(isinstance(arg,_b_.int)){var pos=arg
if(arg < 0){pos+=self.length}
if(pos >=0 && pos < self.length){return self.charAt(pos)}
throw _b_.IndexError.$factory("string index out of range")}
if(isinstance(arg,slice)){var s=_b_.slice.$conv_for_seq(arg,self.length),start=s.start,stop=s.stop,step=s.step
var res="",i=null
if(step > 0){if(stop <=start){return ""}
for(var i=start;i < stop;i+=step){res+=self.charAt(i)}}else{if(stop >=start){return ''}
for(var i=start;i > stop;i+=step){res+=self.charAt(i)}}
return res}
if(isinstance(arg,_b_.bool)){return self.__getitem__(_b_.int.$factory(arg))}
throw _b_.TypeError.$factory("string indices must be integers")}
var prefix=2,suffix=3,mask=(2**32-1)
function fnv(p){if(p.length==0){return 0}
var x=prefix
x=(x ^(p.charCodeAt(0)<< 7))& mask
for(var i=0,len=p.length;i < len;i++){x=((1000003*x)^ p.charCodeAt(i))& mask}
x=(x ^ p.length)& mask
x=(x ^ suffix)& mask
if(x==-1){x=-2}
return x}
str.__hash__=function(self){return fnv(self)}
str.__init__=function(self,arg){self.valueOf=function(){return arg}
self.toString=function(){return arg}
return _b_.None}
var $str_iterator=$B.$iterator_class("str_iterator")
str.__iter__=function(self){var items=self.split("")
return $B.$iterator(items,$str_iterator)}
str.__len__=function(self){return self.length}
var kwarg_key=new RegExp("([^\\)]*)\\)")
var NotANumber=function(){this.name="NotANumber"}
var number_check=function(s){if(! isinstance(s,[_b_.int,_b_.float])){throw new NotANumber()}}
var get_char_array=function(size,char){if(size <=0){return ""}
return new Array(size+1).join(char)}
var format_padding=function(s,flags,minus_one){var padding=flags.padding
if(! padding){
return s}
s=s.toString()
padding=parseInt(padding,10)
if(minus_one){
padding-=1}
if(! flags.left){return get_char_array(padding-s.length,flags.pad_char)+s}else{
return s+get_char_array(padding-s.length,flags.pad_char)}}
var format_int_precision=function(val,flags){var precision=flags.precision
if(!precision){return val.toString()}
precision=parseInt(precision,10)
var s
if(val.__class__===$B.long_int){s=$B.long_int.to_base(val,10)}else{s=val.toString()}
if(s[0]==="-"){return "-"+get_char_array(precision-s.length+1,"0")+s.slice(1)}
return get_char_array(precision-s.length,"0")+s}
var format_float_precision=function(val,upper,flags,modifier){var precision=flags.precision
if(isFinite(val)){return modifier(val,precision,flags,upper)}
if(val===Infinity){val="inf"}else if(val===-Infinity){val="-inf"}else{val="nan"}
if(upper){return val.toUpperCase()}
return val}
var format_sign=function(val,flags){if(flags.sign){if(val >=0){return "+"}}else if(flags.space){if(val >=0){return " "}}
return ""}
var str_format=function(val,flags){
flags.pad_char=" "
return format_padding(str.$factory(val),flags)}
var num_format=function(val,flags){number_check(val)
if(val.__class__===$B.long_int){val=$B.long_int.to_base(val,10)}else{val=parseInt(val)}
var s=format_int_precision(val,flags)
if(flags.pad_char==="0"){if(val < 0){s=s.substring(1)
return "-"+format_padding(s,flags,true)}
var sign=format_sign(val,flags)
if(sign !==""){return sign+format_padding(s,flags,true)}}
return format_padding(format_sign(val,flags)+s,flags)}
var repr_format=function(val,flags){flags.pad_char=" "
return format_padding(repr(val),flags)}
var ascii_format=function(val,flags){flags.pad_char=" "
return format_padding(ascii(val),flags)}
var _float_helper=function(val,flags){number_check(val)
if(! flags.precision){if(! flags.decimal_point){flags.precision=6}else{flags.precision=0}}else{flags.precision=parseInt(flags.precision,10)
validate_precision(flags.precision)}
return parseFloat(val)}
var trailing_zeros=/(.*?)(0+)([eE].*)/,leading_zeros=/\.(0*)/,trailing_dot=/\.$/
var validate_precision=function(precision){
if(precision > 20){precision=20}}
var floating_point_format=function(val,upper,flags){val=_float_helper(val,flags),v=val.toString(),v_len=v.length,dot_idx=v.indexOf('.')
if(dot_idx < 0){dot_idx=v_len}
if(val < 1 && val >-1){var zeros=leading_zeros.exec(v),numzeros
if(zeros){numzeros=zeros[1].length}else{numzeros=0}
if(numzeros >=4){val=format_sign(val,flags)+format_float_precision(val,upper,flags,_floating_g_exp_helper)
if(!flags.alternate){var trl=trailing_zeros.exec(val)
if(trl){val=trl[1].replace(trailing_dot,"")+trl[3]}}else{if(flags.precision <=1){val=val[0]+"."+val.substring(1)}}
return format_padding(val,flags)}
flags.precision=(flags.precision ||0)+numzeros
return format_padding(format_sign(val,flags)+
format_float_precision(val,upper,flags,function(val,precision){return val.toFixed(min(precision,v_len-dot_idx)+
numzeros)}),flags
)}
if(dot_idx > flags.precision){val=format_sign(val,flags)+format_float_precision(val,upper,flags,_floating_g_exp_helper)
if(! flags.alternate){var trl=trailing_zeros.exec(val)
if(trl){val=trl[1].replace(trailing_dot,"")+trl[3]}}else{if(flags.precision <=1){val=val[0]+"."+val.substring(1)}}
return format_padding(val,flags)}
return format_padding(format_sign(val,flags)+
format_float_precision(val,upper,flags,function(val,precision){if(!flags.decimal_point){precision=min(v_len-1,6)}else if(precision > v_len){if(! flags.alternate){precision=v_len}}
if(precision < dot_idx){precision=dot_idx}
return val.toFixed(precision-dot_idx)}),flags
)}
var _floating_g_exp_helper=function(val,precision,flags,upper){if(precision){--precision}
val=val.toExponential(precision)
var e_idx=val.lastIndexOf("e")
if(e_idx > val.length-4){val=val.substring(0,e_idx+2)+"0"+val.substring(e_idx+2)}
if(upper){return val.toUpperCase()}
return val}
var floating_point_decimal_format=function(val,upper,flags){val=_float_helper(val,flags)
return format_padding(format_sign(val,flags)+
format_float_precision(val,upper,flags,function(val,precision,flags){val=val.toFixed(precision)
if(precision===0 && flags.alternate){val+='.'}
return val}),flags
)}
var _floating_exp_helper=function(val,precision,flags,upper){val=val.toExponential(precision)
var e_idx=val.lastIndexOf("e")
if(e_idx > val.length-4){val=val.substring(0,e_idx+2)+"0"+val.substring(e_idx+2)}
if(upper){return val.toUpperCase()}
return val}
var floating_point_exponential_format=function(val,upper,flags){val=_float_helper(val,flags)
return format_padding(format_sign(val,flags)+
format_float_precision(val,upper,flags,_floating_exp_helper),flags)}
var signed_hex_format=function(val,upper,flags){var ret
number_check(val)
if(val.__class__===$B.long_int){ret=$B.long_int.to_base(val,16)}else{ret=parseInt(val)
ret=ret.toString(16)}
ret=format_int_precision(ret,flags)
if(upper){ret=ret.toUpperCase()}
if(flags.pad_char==="0"){if(val < 0){ret=ret.substring(1)
ret="-"+format_padding(ret,flags,true)}
var sign=format_sign(val,flags)
if(sign !==""){ret=sign+format_padding(ret,flags,true)}}
if(flags.alternate){if(ret.charAt(0)==="-"){if(upper){ret="-0X"+ret.slice(1)}
else{ret="-0x"+ret.slice(1)}}else{if(upper){ret="0X"+ret}
else{ret="0x"+ret}}}
return format_padding(format_sign(val,flags)+ret,flags)}
var octal_format=function(val,flags){number_check(val)
var ret
if(val.__class__===$B.long_int){ret=$B.long_int.to_base(8)}else{ret=parseInt(val)
ret=ret.toString(8)}
ret=format_int_precision(ret,flags)
if(flags.pad_char==="0"){if(val < 0){ret=ret.substring(1)
ret="-"+format_padding(ret,flags,true)}
var sign=format_sign(val,flags)
if(sign !==""){ret=sign+format_padding(ret,flags,true)}}
if(flags.alternate){if(ret.charAt(0)==="-"){ret="-0o"+ret.slice(1)}
else{ret="0o"+ret}}
return format_padding(ret,flags)}
var single_char_format=function(val,flags){if(isinstance(val,str)&& val.length==1)return val
try{val=_b_.int.$factory(val)}catch(err){throw _b_.TypeError.$factory("%c requires int or char")}
return format_padding(chr(val),flags)}
var num_flag=function(c,flags){if(c==="0" && ! flags.padding && ! flags.decimal_point && ! flags.left){flags.pad_char="0"
return}
if(!flags.decimal_point){flags.padding=(flags.padding ||"")+c}else{flags.precision=(flags.precision ||"")+c}}
var decimal_point_flag=function(val,flags){if(flags.decimal_point){
throw new UnsupportedChar()}
flags.decimal_point=true}
var neg_flag=function(val,flags){flags.pad_char=" "
flags.left=true}
var space_flag=function(val,flags){flags.space=true}
var sign_flag=function(val,flags){flags.sign=true}
var alternate_flag=function(val,flags){flags.alternate=true}
var char_mapping={"s":str_format,"d":num_format,"i":num_format,"u":num_format,"o":octal_format,"r":repr_format,"a":ascii_format,"g":function(val,flags){return floating_point_format(val,false,flags)},"G":function(val,flags){return floating_point_format(val,true,flags)},"f":function(val,flags){return floating_point_decimal_format(val,false,flags)},"F":function(val,flags){return floating_point_decimal_format(val,true,flags)},"e":function(val,flags){return floating_point_exponential_format(val,false,flags)},"E":function(val,flags){return floating_point_exponential_format(val,true,flags)},"x":function(val,flags){return signed_hex_format(val,false,flags)},"X":function(val,flags){return signed_hex_format(val,true,flags)},"c":single_char_format,"0":function(val,flags){return num_flag("0",flags)},"1":function(val,flags){return num_flag("1",flags)},"2":function(val,flags){return num_flag("2",flags)},"3":function(val,flags){return num_flag("3",flags)},"4":function(val,flags){return num_flag("4",flags)},"5":function(val,flags){return num_flag("5",flags)},"6":function(val,flags){return num_flag("6",flags)},"7":function(val,flags){return num_flag("7",flags)},"8":function(val,flags){return num_flag("8",flags)},"9":function(val,flags){return num_flag("9",flags)},"-":neg_flag," ":space_flag,"+":sign_flag,".":decimal_point_flag,"#":alternate_flag}
var UnsupportedChar=function(){this.name="UnsupportedChar"}
str.__mod__=function(self,args){var length=self.length,pos=0 |0,argpos=null,getitem
if(_b_.isinstance(args,_b_.tuple)){argpos=0 |0}else{getitem=_b_.getattr(args,"__getitem__",_b_.None)}
var ret=''
var $get_kwarg_string=function(s){
++pos
var rslt=kwarg_key.exec(s.substring(newpos))
if(! rslt){throw _b_.ValueError.$factory("incomplete format key")}
var key=rslt[1]
newpos+=rslt[0].length
try{var self=getitem(key)}catch(err){if(err.name==="KeyError"){throw err}
throw _b_.TypeError.$factory("format requires a mapping")}
return get_string_value(s,self)}
var $get_arg_string=function(s){
var self
if(argpos===null){
self=args}else{self=args[argpos++]
if(self===undefined){throw _b_.TypeError.$factory(
"not enough arguments for format string")}}
return get_string_value(s,self)}
var get_string_value=function(s,self){
var flags={"pad_char":" "}
do{var func=char_mapping[s[newpos]]
try{if(func===undefined){throw new UnsupportedChar()}else{var ret=func(self,flags)
if(ret !==undefined){return ret}
++newpos}}catch(err){if(err.name=="UnsupportedChar"){invalid_char=s[newpos]
if(invalid_char===undefined){throw _b_.ValueError.$factory("incomplete format")}
throw _b_.ValueError.$factory(
"unsupported format character '"+invalid_char+
"' (0x"+invalid_char.charCodeAt(0).toString(16)+
") at index "+newpos)}else if(err.name==="NotANumber"){var try_char=s[newpos],cls=self.__class__
if(!cls){if(typeof(self)==="string"){cls="str"}else{cls=typeof(self)}}else{cls=cls.$infos.__name__}
throw _b_.TypeError.$factory("%"+try_char+
" format: a number is required, not "+cls)}else{throw err}}}while(true)}
var nbph=0
do{var newpos=self.indexOf("%",pos)
if(newpos < 0){ret+=self.substring(pos)
break}
ret+=self.substring(pos,newpos)
++newpos
if(newpos < length){if(self[newpos]==="%"){ret+="%"}else{nbph++
if(self[newpos]==="("){++newpos
ret+=$get_kwarg_string(self)}else{ret+=$get_arg_string(self)}}}else{
throw _b_.ValueError.$factory("incomplete format")}
pos=newpos+1}while(pos < length)
if(argpos !==null){if(args.length > argpos){throw _b_.TypeError.$factory(
"not enough arguments for format string")}else if(args.length < argpos){throw _b_.TypeError.$factory(
"not all arguments converted during string formatting")}}else if(nbph==0){throw _b_.TypeError.$factory(
"not all arguments converted during string formatting")}
return ret}
str.__mro__=[object]
str.__mul__=function(){var $=$B.args("__mul__",2,{self:null,other:null},["self","other"],arguments,{},null,null)
if(! isinstance($.other,_b_.int)){throw _b_.TypeError.$factory(
"Can't multiply sequence by non-int of type '"+
$B.class_name($.other)+"'")}
var $res=""
for(var i=0;i< $.other;i++){$res+=$.self.valueOf()}
return $res}
str.__ne__=function(self,other){return other !==self.valueOf()}
str.__repr__=function(self){var res=self
res=self.replace(/\\/g,"\\\\")
res=res.replace(new RegExp("\u0007","g"),"\\x07").
replace(new RegExp("\b","g"),"\\x08").
replace(new RegExp("\f","g"),"\\x0c").
replace(new RegExp("\n","g"),"\\n").
replace(new RegExp("\r","g"),"\\r").
replace(new RegExp("\t","g"),"\\t")
if(res.search('"')==-1 && res.search("'")==-1){return "'"+res+"'"}else if(self.search('"')==-1){return '"'+res+'"'}
var qesc=new RegExp("'","g")
res="'"+res.replace(qesc,"\\'")+"'"
return res}
str.__setitem__=function(self,attr,value){throw _b_.TypeError.$factory(
"'str' object does not support item assignment")}
str.__str__=function(self){return self}
str.toString=function(){return "string!"}
var $comp_func=function(self,other){if(typeof other !=="string"){throw _b_.TypeError.$factory(
"unorderable types: 'str' > "+$B.class_name(other)+"()")}
return self > other}
$comp_func+=""
var $comps={">":"gt",">=":"ge","<":"lt","<=":"le"}
for(var $op in $comps){eval("str.__"+$comps[$op]+'__ = '+$comp_func.replace(/>/gm,$op))}
$B.make_rmethods(str)
var $notimplemented=function(self,other){throw NotImplementedError.$factory(
"OPERATOR not implemented for class str")}
var from_unicode=["title","capitalize","casefold","islower","isupper","istitle","isspace","isalpha","isalnum","isdecimal","isdigit","isnumeric","isidentifier","isprintable","lower","swapcase","upper"
]
from_unicode.forEach(function(name){str[name]=unicode[name]})
str.center=function(){var $=$B.args("center",3,{self:null,width:null,fillchar:null},["self","width","fillchar"],arguments,{fillchar:" "},null,null),self=$.self
if($.width <=self.length){return self}
var pad=parseInt(($.width-self.length)/2),res=$.fillchar.repeat(pad)
res+=self+res
if(res.length < $.width){res+=$.fillchar}
return res}
str.count=function(){var $=$B.args("count",4,{self:null,sub:null,start:null,stop:null},["self","sub","start","stop"],arguments,{start:null,stop:null},null,null)
if(!(typeof $.sub=="string")){throw _b_.TypeError.$factory(
"Can't convert '"+$B.class_name($.sub)+
"' object to str implicitly")}
var substr=$.self
if($.start !==null){var _slice
if($.stop !==null){_slice=_b_.slice.$factory($.start,$.stop)}
else{_slice=_b_.slice.$factory($.start,$.self.length)}
substr=str.__getitem__.apply(null,[$.self].concat(_slice))}else{if($.self.length+$.sub.length==0){return 1}}
if($.sub.length==0){if($.start==$.self.length){return 1}
else if(substr.length==0){return 0}
return substr.length+1}
var n=0,pos=0
while(pos < substr.length){pos=substr.indexOf($.sub,pos)
if(pos >=0){n++;pos+=$.sub.length}
else{break}}
return n}
str.encode=function(self,encoding){if(encoding===undefined){encoding="utf-8"}
if(encoding=="rot13" ||encoding=="rot_13"){
var res=""
for(var i=0,len=self.length;i < len ;i++){var char=self.charAt(i)
if(("a" <=char && char <="m")||("A" <=char && char <="M")){res+=String.fromCharCode(String.charCodeAt(char)+13)}else if(("m" < char && char <="z")||
("M" < char && char <="Z")){res+=String.fromCharCode(String.charCodeAt(char)-13)}else{res+=char}}
return res}
return _b_.bytes.$factory(self,encoding)}
str.endswith=function(){
var $=$B.args("endswith",4,{self:null,suffix:null,start:null,end:null},["self","suffix","start","end"],arguments,{start:0,end:null},null,null)
normalize_start_end($)
var suffixes=$.suffix
if(! isinstance(suffixes,_b_.tuple)){suffixes=[suffixes]}
var s=$.self.substring($.start,$.end)
for(var i=0,len=suffixes.length;i < len;i++){var suffix=suffixes[i]
if(! _b_.isinstance(suffix,str)){throw _b_.TypeError.$factory(
"endswith first arg must be str or a tuple of str, not int")}
if(suffix.length <=s.length &&
s.substr(s.length-suffix.length)==suffix){return true}}
return false}
str.expandtabs=function(self,tabsize){var $=$B.args("expandtabs",2,{self:null,tabsize:null},["self","tabsize"],arguments,{tabsize:8},null,null)
var s=$B.$GetInt($.tabsize),col=0,pos=0,res=""
if(s==1){return self.replace(/\t/g," ")}
while(pos < self.length){var car=self.charAt(pos)
switch(car){case "\t":
while(col % s > 0){res+=" ";col++}
break
case "\r":
case "\n":
res+=car
col=0
break
default:
res+=car
col++
break}
pos++}
return res}
str.find=function(){
var $=$B.args("str.find",4,{self:null,sub:null,start:null,end:null},["self","sub","start","end"],arguments,{start:0,end:null},null,null)
check_str($.sub)
normalize_start_end($)
if(!isinstance($.start,_b_.int)||!isinstance($.end,_b_.int)){throw _b_.TypeError.$factory("slice indices must be "+
"integers or None or have an __index__ method")}
var s=$.self.substring($.start,$.end)
if($.sub.length==0 && $.start==$.self.length){return $.self.length}
if(s.length+$.sub.length==0){return-1}
var last_search=s.length-$.sub.length
for(var i=0;i <=last_search;i++){if(s.substr(i,$.sub.length)==$.sub){return $.start+i}}
return-1}
$B.parse_format=function(fmt_string){
var elts=fmt_string.split(":"),name,conv,spec,name_ext=[]
if(elts.length==1){
name=fmt_string}else{
name=elts[0]
spec=elts.splice(1).join(":")}
var elts=name.split("!")
if(elts.length > 1){name=elts[0]
conv=elts[1]}
if(name !==undefined){
function name_repl(match){name_ext.push(match)
return ""}
var name_ext_re=/\.[_a-zA-Z][_a-zA-Z0-9]*|\[[_a-zA-Z][_a-zA-Z0-9]*\]|\[[0-9]+\]/g
name=name.replace(name_ext_re,name_repl)}
return{name:name,name_ext:name_ext,conv:conv,spec:spec ||"",string:fmt_string}}
$B.split_format=function(self){
var pos=0,_len=self.length,car,text="",parts=[],rank=0
while(pos < _len){car=self.charAt(pos)
if(car=="{" && self.charAt(pos+1)=="{"){
text+="{"
pos+=2}else if(car=="}" && self.charAt(pos+1)=="}"){
text+="}"
pos+=2}else if(car=="{"){
parts.push(text)
var end=pos+1,nb=1
while(end < _len){if(self.charAt(end)=="{"){nb++;end++}
else if(self.charAt(end)=="}"){nb--;end++
if(nb==0){
var fmt_string=self.substring(pos+1,end-1)
var fmt_obj=$B.parse_format(fmt_string)
fmt_obj.raw_name=fmt_obj.name
fmt_obj.raw_spec=fmt_obj.spec
if(!fmt_obj.name){fmt_obj.name=rank+""
rank++}
if(fmt_obj.spec !==undefined){
function replace_nested(name,key){if(key==""){
return "{"+rank+++"}"}
return "{"+key+"}"}
fmt_obj.spec=fmt_obj.spec.replace(/\{(.*?)\}/g,replace_nested)}
parts.push(fmt_obj)
text=""
break}}else{end++}}
if(nb > 0){throw ValueError.$factory("wrong format "+self)}
pos=end}else{text+=car;pos++}}
if(text){parts.push(text)}
return parts}
str.format=function(self){var $=$B.args("format",1,{self:null},["self"],arguments,{},"$args","$kw")
var parts=$B.split_format($.self)
var res="",fmt
for(var i=0;i < parts.length;i++){
if(typeof parts[i]=="string"){res+=parts[i];continue}
fmt=parts[i]
if(fmt.spec !==undefined){
function replace_nested(name,key){if(/\d+/.exec(key)){
return _b_.tuple.__getitem__($.$args,parseInt(key))}else{
return _b_.dict.__getitem__($.$kw,key)}}
fmt.spec=fmt.spec.replace(/\{(.*?)\}/g,replace_nested)}
if(fmt.name.charAt(0).search(/\d/)>-1){
var pos=parseInt(fmt.name),value=_b_.tuple.__getitem__($.$args,pos)}else{
var value=_b_.dict.__getitem__($.$kw,fmt.name)}
for(var j=0;j < fmt.name_ext.length;j++){var ext=fmt.name_ext[j]
if(ext.charAt(0)=="."){
value=_b_.getattr(value,ext.substr(1))}else{
var key=ext.substr(1,ext.length-2)
if(key.charAt(0).search(/\d/)>-1){key=parseInt(key)}
value=_b_.getattr(value,"__getitem__")(key)}}
if(fmt.conv=="a"){value=_b_.ascii(value)}
else if(fmt.conv=="r"){value=_b_.repr(value)}
else if(fmt.conv=="s"){value=_b_.str.$factory(value)}
if(value.$is_class ||value.$factory){
res+=value.__class__.__format__(value,fmt.spec)}else{res+=_b_.getattr(value,"__format__")(fmt.spec)}}
return res}
str.format_map=function(self){throw NotImplementedError.$factory(
"function format_map not implemented yet")}
str.index=function(self){
var res=str.find.apply(null,arguments)
if(res===-1){throw _b_.ValueError.$factory("substring not found")}
return res}
str.join=function(){var $=$B.args("join",2,{self:null,iterable:null},["self","iterable"],arguments,{},null,null)
var iterable=_b_.iter($.iterable),res=[],count=0
while(1){try{var obj2=_b_.next(iterable)
if(! isinstance(obj2,str)){throw _b_.TypeError.$factory(
"sequence item "+count+": expected str instance, "+
$B.class_name(obj2)+" found")}
res.push(obj2)}catch(err){if(_b_.isinstance(err,_b_.StopIteration)){break}
else{throw err}}}
return res.join($.self)}
str.ljust=function(self){var $=$B.args("ljust",3,{self:null,width:null,fillchar:null},["self","width","fillchar"],arguments,{fillchar:" "},null,null)
if($.width <=self.length){return self}
return self+$.fillchar.repeat($.width-self.length)}
str.lstrip=function(self,x){var $=$B.args("lstrip",2,{self:null,chars:null},["self","chars"],arguments,{chars:_b_.None},null,null)
if($.chars===_b_.None){return $.self.trimLeft()}
for(var i=0;i < $.self.length;i++){if($.chars.indexOf($.self.charAt(i))===-1){return $.self.substring(i)}}
return ""}
str.maketrans=function(){var $=$B.args("maketrans",3,{x:null,y:null,z:null},["x","y","z"],arguments,{y:null,z:null},null,null)
var _t=_b_.dict.$factory()
if($.y===null && $.z===null){
if(! _b_.isinstance($.x,_b_.dict)){throw _b_.TypeError.$factory(
"maketrans only argument must be a dict")}
var items=_b_.list.$factory(_b_.dict.items($.x))
for(var i=0,len=items.length;i < len;i++){var k=items[i][0],v=items[i][1]
if(! _b_.isinstance(k,_b_.int)){if(_b_.isinstance(k,_b_.str)&& k.length==1){k=_b_.ord(k)}else{throw _b_.TypeError.$factory("dictionary key "+k+
" is not int or 1-char string")}}
if(v !==_b_.None && ! _b_.isinstance(v,[_b_.int,_b_.str])){throw _b_.TypeError.$factory("dictionary value "+v+
" is not None, integer or string")}
_b_.dict.$setitem(_t,k,v)}
return _t}else{
if(!(_b_.isinstance($.x,_b_.str)&& _b_.isinstance($.y,_b_.str))){throw _b_.TypeError.$factory("maketrans arguments must be strings")}else if($.x.length !==$.y.length){throw _b_.TypeError.$factory(
"maketrans arguments must be strings or same length")}else{var toNone={}
if($.z !==null){
if(! _b_.isinstance($.z,_b_.str)){throw _b_.TypeError.$factory(
"maketrans third argument must be a string")}
for(var i=0,len=$.z.length;i < len;i++){toNone[_b_.ord($.z.charAt(i))]=true}}
for(var i=0,len=$.x.length;i < len;i++){var key=_b_.ord($.x.charAt(i)),value=$.y.charAt(i)
_b_.dict.$setitem(_t,key,value)}
for(var k in toNone){_b_.dict.$setitem(_t,parseInt(k),_b_.None)}
return _t}}}
str.partition=function(){var $=$B.args("partition",2,{self:null,sep:null},["self","sep"],arguments,{},null,null)
if($.sep==""){throw _b_.ValueError.$factory("empty separator")}
check_str($.sep)
var i=$.self.indexOf($.sep)
if(i==-1){return _b_.tuple.$factory([$.self,"",""])}
return _b_.tuple.$factory([$.self.substring(0,i),$.sep,$.self.substring(i+$.sep.length)])}
function $re_escape(str){var specials="[.*+?|()$^"
for(var i=0,len=specials.length;i < len;i++){var re=new RegExp("\\"+specials.charAt(i),"g")
str=str.replace(re,"\\"+specials.charAt(i))}
return str}
str.replace=function(self,old,_new,count){
var $=$B.args("replace",4,{self:null,old:null,$$new:null,count:null},["self","old","$$new","count"],arguments,{count:-1},null,null),count=$.count,self=$.self,old=$.old,_new=$.$$new
check_str(old)
check_str(_new)
if(! isinstance(count,[_b_.int,_b_.float])){throw _b_.TypeError.$factory("'"+$B.class_name(count)+
"' object cannot be interpreted as an integer")}else if(isinstance(count,_b_.float)){throw _b_.TypeError.$factory("integer argument expected, got float")}
if(count==0){return self}
if(count.__class__==$B.long_int){count=parseInt(count.value)}
if(old==""){if(_new==""){return self}
if(self==""){return _new}
var elts=self.split("")
if(count >-1 && elts.length >=count){var rest=elts.slice(count).join("")
return _new+elts.slice(0,count).join(_new)+rest}else{return _new+elts.join(_new)+_new}}else{var elts=str.split(self,old,count)}
var res=self,pos=-1
if(old.length==0){var res=_new
for(var i=0;i < elts.length;i++){res+=elts[i]+_new}
return res+rest}
if(count < 0){count=res.length}
while(count > 0){pos=res.indexOf(old,pos)
if(pos < 0){break}
res=res.substr(0,pos)+_new+res.substr(pos+old.length)
pos=pos+_new.length
count--}
return res}
str.rfind=function(self){
var $=$B.args("rfind",4,{self:null,sub:null,start:null,end:null},["self","sub","start","end"],arguments,{start:0,end:null},null,null)
normalize_start_end($)
check_str($.sub)
if($.sub.length==0){if($.start > $.self.length){return-1}
else{return $.self.length}}
var sublen=$.sub.length
for(var i=$.end-sublen;i >=$.start;i--){if($.self.substr(i,sublen)==$.sub){return i}}
return-1}
str.rindex=function(){
var res=str.rfind.apply(null,arguments)
if(res==-1){throw _b_.ValueError.$factory("substring not found")}
return res}
str.rjust=function(self){var $=$B.args("rjust",3,{self:null,width:null,fillchar:null},["self","width","fillchar"],arguments,{fillchar:" "},null,null)
if($.width <=self.length){return self}
return $.fillchar.repeat($.width-self.length)+self}
str.rpartition=function(self,sep){var $=$B.args("rpartition",2,{self:null,sep:null},["self","sep"],arguments,{},null,null)
check_str($.sep)
var self=reverse($.self),sep=reverse($.sep)
var items=str.partition(self,sep).reverse()
for(var i=0;i < items.length;i++){items[i]=items[i].split("").reverse().join("")}
return items}
str.rsplit=function(self){var $=$B.args("rsplit",3,{self:null,sep:null,maxsplit:null},["self","sep","maxsplit"],arguments,{sep:_b_.None,maxsplit:-1},null,null),sep=$.sep
var rev_str=reverse($.self),rev_sep=sep===_b_.None ? sep :reverse($.sep),rev_res=str.split(rev_str,rev_sep,$.maxsplit)
rev_res.reverse()
for(var i=0;i < rev_res.length;i++){rev_res[i]=reverse(rev_res[i])}
return rev_res}
str.rstrip=function(self,x){var $=$B.args("rstrip",2,{self:null,chars:null},["self","chars"],arguments,{chars:_b_.None},null,null)
if($.chars===_b_.None){return $.self.trimRight()}
for(var j=$.self.length-1;j >=0;j--){if($.chars.indexOf($.self.charAt(j))==-1){return $.self.substring(0,j+1)}}
return ""}
str.split=function(){var $=$B.args("split",3,{self:null,sep:null,maxsplit:null},["self","sep","maxsplit"],arguments,{sep:_b_.None,maxsplit:-1},null,null),sep=$.sep,maxsplit=$.maxsplit,self=$.self,pos=0
if(maxsplit.__class__===$B.long_int){maxsplit=parseInt(maxsplit.value)}
if(sep==""){throw _b_.ValueError.$factory("empty separator")}
if(sep===_b_.None){var res=[]
while(pos < self.length && self.charAt(pos).search(/\s/)>-1){pos++}
if(pos===self.length-1){return[self]}
var name=""
while(1){if(self.charAt(pos).search(/\s/)==-1){if(name==""){name=self.charAt(pos)}
else{name+=self.charAt(pos)}}else{if(name !==""){res.push(name)
if(maxsplit !==-1 && res.length==maxsplit+1){res.pop()
res.push(name+self.substr(pos))
return res}
name=""}}
pos++
if(pos > self.length-1){if(name){res.push(name)}
break}}
return res}else{var res=[],s="",seplen=sep.length
if(maxsplit==0){return[self]}
while(pos < self.length){if(self.substr(pos,seplen)==sep){res.push(s)
pos+=seplen
if(maxsplit >-1 && res.length >=maxsplit){res.push(self.substr(pos))
return res}
s=""}else{s+=self.charAt(pos)
pos++}}
res.push(s)
return res}}
str.splitlines=function(self){var $=$B.args("splitlines",2,{self:null,keepends:null},["self","keepends"],arguments,{keepends:false},null,null)
if(! _b_.isinstance($.keepends,[_b_.bool,_b_.int])){throw _b_.TypeError.$factory("integer argument expected, got "+
$B.get_class($.keepends).__name)}
var keepends=_b_.int.$factory($.keepends)
if(keepends){var res=[],start=pos,pos=0,self=$.self
while(pos < self.length){if(self.substr(pos,2)=="\r\n"){res.push(self.substring(start,pos+2))
start=pos+2
pos=start}else if(self.charAt(pos)=="\r" ||self.charAt(pos)=="\n"){res.push(self.substring(start,pos+1))
start=pos+1
pos=start}else{pos++}}
var rest=self.substr(start)
if(rest){res.push(rest)}
return res}else{var self=$.self.replace(/[\r\n]$/,"")
return self.split(/\n|\r\n|\r/)}}
str.startswith=function(){
var $=$B.args("startswith",4,{self:null,prefix:null,start:null,end:null},["self","prefix","start","end"],arguments,{start:0,end:null},null,null)
normalize_start_end($)
var prefixes=$.prefix
if(! isinstance(prefixes,_b_.tuple)){prefixes=[prefixes]}
var s=$.self.substring($.start,$.end)
for(var i=0,len=prefixes.length;i < len;i++){var prefix=prefixes[i]
if(! _b_.isinstance(prefix,str)){throw _b_.TypeError.$factory(
"endswith first arg must be str or a tuple of str, not int")}
if(s.substr(0,prefix.length)==prefix){return true}}
return false}
str.strip=function(){var $=$B.args("strip",2,{self:null,chars:null},["self","chars"],arguments,{chars:_b_.None},null,null)
if($.chars===_b_.None){return $.self.trim()}
for(var i=0;i < $.self.length;i++){if($.chars.indexOf($.self.charAt(i))==-1){break}}
for(var j=$.self.length-1;j >=i;j--){if($.chars.indexOf($.self.charAt(j))==-1){break}}
return $.self.substring(i,j+1)}
str.translate=function(self,table){var res=[],getitem=$B.$getattr(table,"__getitem__")
for(var i=0,len=self.length;i < len;i++){try{var repl=getitem(self.charCodeAt(i))
if(repl !==_b_.None){res.push(repl)}}catch(err){res.push(self.charAt(i))}}
return res.join("")}
str.zfill=function(self,width){var $=$B.args("zfill",2,{self:null,width:null},["self","width"],arguments,{},null,null)
if($.width <=self.length){return self}
switch(self.charAt(0)){case "+":
case "-":
return self.charAt(0)+
"0".repeat($.width-self.length)+self.substr(1)
default:
return "0".repeat(width-self.length)+self}}
str.$factory=function(arg,encoding,errors){if(arg===undefined){console.log("undef");return "<undefined>"}
switch(typeof arg){case "string":
return arg
case "number":
if(isFinite(arg)){return arg.toString()}}
try{if(arg.$is_class ||arg.$factory){
var func=$B.$getattr(arg.__class__,"__str__")
return func(arg)}
if(arg.__class__ && arg.__class__===_b_.bytes &&
encoding !==undefined){
return _b_.bytes.decode(arg,encoding ||"utf-8",errors ||"strict")}
var f=$B.$getattr(arg,"__str__",null)
if(f===null ||
(arg.__class__ && arg.__class__ !==_b_.object &&
f.$infos && f.$infos.__func__===_b_.object.__str__)){var f=$B.$getattr(arg,"__repr__")}}
catch(err){console.log("no __str__ for",arg)
console.log("err ",err)
if($B.debug > 1){console.log(err)}
console.log("Warning - no method __str__ or __repr__, "+
"default to toString",arg)
return arg.toString()}
return $B.$call(f)()}
str.__new__=function(cls){if(cls===undefined){throw _b_.TypeError.$factory("str.__new__(): not enough arguments")}
return{__class__:cls}}
$B.set_func_names(str,"builtins")
var StringSubclass=$B.StringSubclass={__class__:_b_.type,__mro__:[object],$infos:{__module__:"builtins",__name__:"str"},$is_class:true}
for(var $attr in str){if(typeof str[$attr]=="function"){StringSubclass[$attr]=(function(attr){return function(){var args=[],pos=0
if(arguments.length > 0){var args=[arguments[0].valueOf()],pos=1
for(var i=1,len=arguments.length;i < len;i++){args[pos++]=arguments[i]}}
return str[attr].apply(null,args)}})($attr)}}
StringSubclass.__new__=function(cls){return{__class__:cls}}
$B.set_func_names(StringSubclass,"builtins")
_b_.str=str
$B.parse_format_spec=function(spec){if(spec==""){this.empty=true}
else{var pos=0,aligns="<>=^",digits="0123456789",types="bcdeEfFgGnosxX%",align_pos=aligns.indexOf(spec.charAt(0))
if(align_pos !=-1){if(spec.charAt(1)&& aligns.indexOf(spec.charAt(1))!=-1){
this.fill=spec.charAt(0)
this.align=spec.charAt(1)
pos=2}else{
this.align=aligns[align_pos]
this.fill=" "
pos++}}else{align_pos=aligns.indexOf(spec.charAt(1))
if(spec.charAt(1)&& align_pos !=-1){
this.align=aligns[align_pos]
this.fill=spec.charAt(0)
pos=2}}
var car=spec.charAt(pos)
if(car=="+" ||car=="-" ||car==" "){this.sign=car
pos++
car=spec.charAt(pos)}
if(car=="#"){this.alternate=true;pos++;car=spec.charAt(pos)}
if(car=="0"){
this.fill="0"
this.align="="
pos++
car=spec.charAt(pos)}
while(car && digits.indexOf(car)>-1){if(this.width===undefined){this.width=car}
else{this.width+=car}
pos++
car=spec.charAt(pos)}
if(this.width !==undefined){this.width=parseInt(this.width)}
if(this.width===undefined && car=="{"){
var end_param_pos=spec.substr(pos).search("}")
this.width=spec.substring(pos,end_param_pos)
console.log("width","["+this.width+"]")
pos+=end_param_pos+1}
if(car==","){this.comma=true;pos++;car=spec.charAt(pos)}
if(car=="."){if(digits.indexOf(spec.charAt(pos+1))==-1){throw _b_.ValueError.$factory(
"Missing precision in format spec")}
this.precision=spec.charAt(pos+1)
pos+=2
car=spec.charAt(pos)
while(car && digits.indexOf(car)>-1){this.precision+=car
pos++
car=spec.charAt(pos)}
this.precision=parseInt(this.precision)}
if(car && types.indexOf(car)>-1){this.type=car
pos++
car=spec.charAt(pos)}
if(pos !==spec.length){throw _b_.ValueError.$factory("Invalid format specifier: "+spec)}}
this.toString=function(){return(this.fill===undefined ? "" :_b_.str.$factory(this.fill))+
(this.align ||"")+
(this.sign ||"")+
(this.alternate ? "#" :"")+
(this.sign_aware ? "0" :"")+
(this.width ||"")+
(this.comma ? "," :"")+
(this.precision ? "."+this.precision :"")+
(this.type ||"")}}
$B.format_width=function(s,fmt){if(fmt.width && s.length < fmt.width){var fill=fmt.fill ||" ",align=fmt.align ||"<",missing=fmt.width-s.length
switch(align){case "<":
return s+fill.repeat(missing)
case ">":
return fill.repeat(missing)+s
case "=":
if("+-".indexOf(s.charAt(0))>-1){return s.charAt(0)+fill.repeat(missing)+s.substr(1)}else{return fill.repeat(missing)+s}
case "^":
var left=parseInt(missing/2)
return fill.repeat(left)+s+fill.repeat(missing-left)}}
return s}
function fstring_expression(){this.type="expression"
this.expression=""
this.conversion=null
this.fmt=null}
$B.parse_fstring=function(string){
var elts=[],pos=0,current="",ctype=null,nb_braces=0,car
while(pos < string.length){if(ctype===null){car=string.charAt(pos)
if(car=="{"){if(string.charAt(pos+1)=="{"){ctype="string"
current="{"
pos+=2}else{ctype="expression"
nb_braces=1
pos++}}else if(car=="}"){if(string.charAt(pos+1)==car){ctype="string"
current="}"
pos+=2}else{throw Error(" f-string: single '}' is not allowed")}}else{ctype="string"
current=car
pos++}}else if(ctype=="string"){
var i=pos
while(i < string.length){car=string.charAt(i)
if(car=="{"){if(string.charAt(i+1)=="{"){current+="{"
i+=2}else{elts.push(current)
ctype="expression"
pos=i+1
break}}else if(car=="}"){if(string.charAt(i+1)==car){current+=car
i+=2}else{throw Error(" f-string: single '}' is not allowed")}}else{current+=car
i++}}
pos=i+1}else{
var i=pos,nb_braces=1,nb_paren=0,current=new fstring_expression()
while(i < string.length){car=string.charAt(i)
if(car=="{" && nb_paren==0){nb_braces++
current.expression+=car
i++}else if(car=="}" && nb_paren==0){nb_braces-=1
if(nb_braces==0){
elts.push(current)
ctype=null
current=""
pos=i+1
break}
current.expression+=car
i++}else if(car=="\\"){
throw Error("f-string expression part cannot include a"+
" backslash")}else if(nb_paren==0 && car=="!" && current.fmt===null &&
":}".indexOf(string.charAt(i+2))>-1){if(current.expression.length==0){throw Error("f-string: empty expression not allowed")}
if("ars".indexOf(string.charAt(i+1))==-1){throw Error("f-string: invalid conversion character:"+
" expected 's', 'r', or 'a'")}else{current.conversion=string.charAt(i+1)
i+=2}}else if(car=="("){nb_paren++
current.expression+=car
i++}else if(car==")"){nb_paren--
current.expression+=car
i++}else if(car=='"'){
if(string.substr(i,3)=='"""'){var end=string.indexOf('"""',i+3)
if(end==-1){throw Error("f-string: unterminated string")}else{var trs=string.substring(i,end+3)
trs=trs.replace("\n","\\n\\")
current.expression+=trs
i=end+3}}else{var end=string.indexOf('"',i+1)
if(end==-1){throw Error("f-string: unterminated string")}else{current.expression+=string.substring(i,end+1)
i=end+1}}}else if(nb_paren==0 && car==":"){current.fmt=true
current.expression+=car
i++}else{current.expression+=car
i++}}
if(nb_braces > 0){throw Error("f-string: expected '}'")}}}
if(current.length > 0){elts.push(current)}
return elts}})(__BRYTHON__)
;
;(function($B){var bltns=$B.InjectBuiltins()
eval(bltns)
var object=_b_.object,str_hash=_b_.str.__hash__,$N=_b_.None
function $DictClass($keys,$values){this.iter=null
this.__class__=dict
dict.clear(this)
var setitem=dict.__setitem__,i=$keys.length
while(i--){setitem($keys[i],$values[i])}}
var dict={__class__:_b_.type,__mro__:[object],$infos:{__module__:"builtins",__name__:"dict"},$is_class:true,$native:true}
var $key_iterator=function(d){this.d=d
this.current=0
this.iter=new $item_generator(d)}
$key_iterator.prototype.length=function(){return this.iter.items.length}
$key_iterator.prototype.next=function(){return this.iter.next()[0]}
var $value_iterator=function(d){this.d=d
this.current=0
this.iter=new $item_generator(d)}
$value_iterator.prototype.length=function(){return this.iter.items.length}
$value_iterator.prototype.next=function(){return this.iter.next()[1]}
var $item_generator=function(d){this.i=0
if(d.$jsobj){this.items=[]
for(var attr in d.$jsobj){if(attr.charAt(0)!="$"){var val=d.$jsobj[attr]
if(val===undefined){val=_b_.NotImplemented}
else if(val===null){val=$N}
this.items.push([attr,val])}}
return}
var items=[]
for(var k in d.$numeric_dict){items.push([parseFloat(k),d.$numeric_dict[k]])}
for(var k in d.$string_dict){items.push([k,d.$string_dict[k]])}
for(var k in d.$object_dict){d.$object_dict[k].forEach(function(item){items.push(item)})}
this.items=items}
$item_generator.prototype.next=function(){if(this.i < this.items.length){return this.items[this.i++]}
throw _b_.StopIteration.$factory("StopIteration")}
$item_generator.prototype.as_list=function(){return this.items}
var $item_iterator=function(d){this.d=d
this.current=0
this.iter=new $item_generator(d)}
$item_iterator.prototype.length=function(){return this.iter.items.length}
$item_iterator.prototype.next=function(){return _b_.tuple.$factory(this.iter.next())}
var $copy_dict=function(left,right){var _l=new $item_generator(right).as_list(),si=dict.$setitem,i=_l.length
right.$version=right.$version ||0
var right_version=right.$version ||0
while(i--){si(left,_l[i][0],_l[i][1])
if(right.$version !=right_version){throw _b_.RuntimeError.$factory("dict mutated during update")}}}
function toSet(items){
var res=[]
while(true){try{res.push(items.next())}
catch(err){break}}
return _b_.set.$factory(res)}
var $iterator_wrapper=function(items,klass){var res={__class__:klass,__eq__:function(other){
return $B.rich_comp("__eq__",_b_.set.$factory(res),_b_.set.$factory(other))},__iter__:function(){items.iter.i=0;return res},__len__:function(){return items.length()},__next__:function(){return items.next()},__repr__:function(){var s=[]
items.iter.i=0
for(var i=0,len=items.length();i < len;i++){s.push(_b_.repr(items.next()))}
return klass.$infos.__name__+"(["+s.join(",")+"])"},}
res.__str__=res.__repr__
klass.__reduce_ex__=klass.__reduce__=function(self){return _b_.tuple.$factory([_b_.iter,_b_.tuple.$factory([_b_.list.$factory(self)])])}
return res}
function rank(self,hash,key){
var pairs=self.$object_dict[hash]
if(pairs !==undefined){for(var i=0,len=pairs.length;i < len;i++){if($B.rich_comp("__eq__",key,pairs[i][0])){return i}}}
return-1}
dict.__bool__=function(){var $=$B.args("__bool__",1,{self:null},["self"],arguments,{},null,null)
return dict.__len__($.self)> 0}
dict.__contains__=function(){var $=$B.args("__contains__",2,{self:null,key:null},["self","key"],arguments,{},null,null),self=$.self,key=$.key
if(self.$jsobj){return self.$jsobj[key]!==undefined}
switch(typeof key){case "string":
return self.$string_dict[key]!==undefined
case "number":
return self.$numeric_dict[key]!==undefined}
var hash=_b_.hash(key)
if(self.$str_hash[hash]!==undefined &&
$B.rich_comp("__eq__",key,self.$str_hash[hash])){return true}
if(self.$numeric_dict[hash]!==undefined &&
$B.rich_comp("__eq__",key,hash)){return true}
return rank(self,hash,key)>-1}
dict.__delitem__=function(){var $=$B.args("__eq__",2,{self:null,arg:null},["self","arg"],arguments,{},null,null),self=$.self,arg=$.arg
if(self.$jsobj){if(self.$jsobj[arg]===undefined){throw KeyError.$factory(arg)}
delete self.$jsobj[arg]
return $N}
switch(typeof arg){case "string":
if(self.$string_dict[arg]===undefined){throw KeyError.$factory(_b_.str.$factory(arg))}
delete self.$string_dict[arg]
delete self.$str_hash[str_hash(arg)]
self.$version++
return $N
case "number":
if(self.$numeric_dict[arg]===undefined){throw KeyError.$factory(_b_.str.$factory(arg))}
delete self.$numeric_dict[arg]
self.$version++
return $N}
var hash=_b_.hash(arg),ix
if((ix=rank(self,hash,arg))>-1){self.$object_dict[hash].splice(ix,1)}else{throw KeyError.$factory(_b_.str.$factory(arg))}
self.$version++
return $N}
dict.__eq__=function(){var $=$B.args("__eq__",2,{self:null,other:null},["self","other"],arguments,{},null,null),self=$.self,other=$.other
if(! isinstance(other,dict)){return false}
if(self.$jsobj){self=jsobj2dict(self.$jsobj)}
if(other.$jsobj){other=jsobj2dict(other.$jsobj)}
if(dict.__len__(self)!=dict.__len__(other)){return false}
if(self.$string_dict.length !=other.$string_dict.length){return false}
for(var k in self.$numeric_dict){if(other.$numeric_dict.hasOwnProperty(k)){if(!$B.rich_comp("__eq__",other.$numeric_dict[k],self.$numeric_dict[k])){return false}}else if(other.$object_dict.hasOwnProperty(k)){var pairs=other.$object_dict[k],flag=false
for(var i=0,len=pairs.length;i < len;i++){if($B.rich_comp("__eq__",k,pairs[i][0])&&
$B.rich_comp("__eq__",self.$numeric_dict[k],pairs[i][1])){flag=true
break}}
if(! flag){return false}}else{return false}}
for(var k in self.$string_dict){if(!other.$string_dict.hasOwnProperty(k)||
!$B.rich_comp("__eq__",other.$string_dict[k],self.$string_dict[k])){return false}}
for(var hash in self.$object_dict){var pairs=self.$object_dict[hash]
var other_pairs=[]
if(other.$numeric_dict[hash]!==undefined){other_pairs.push([hash,other.$numeric_dict[hash]])}
if(other.$object_dict[hash]!==undefined){other_pairs=other_pairs.concat(other.$object_dict[hash])}
if(other_pairs.length==0){return false}
for(var i=0,len_i=pairs.length;i < len_i;i++){var flag=false
var key=pairs[i][0],value=pairs[i][1]
for(var j=0,len_j=other_pairs.length;j < len_j;j++){if($B.rich_comp("__eq__",key,other_pairs[j][0])&&
$B.rich_comp("__eq__",value,other_pairs[j][1])){flag=true
break}}
if(! flag){return false}}}
return true}
dict.__getitem__=function(){var $=$B.args("__getitem__",2,{self:null,arg:null},["self","arg"],arguments,{},null,null),self=$.self,arg=$.arg
if(self.$jsobj){if(!self.$jsobj.hasOwnProperty(arg)){throw _b_.KeyError.$factory(str.$factory(arg))}else if(self.$jsobj[arg]===undefined){return _b_.NotImplemented}else if(self.$jsobj[arg]===null){return $N}
return self.$jsobj[arg]}
switch(typeof arg){case "string":
if(self.$string_dict[arg]!==undefined){return self.$string_dict[arg]}
break
case "number":
if(self.$numeric_dict[arg]!==undefined){return self.$numeric_dict[arg]}
break}
var hash=_b_.hash(arg),_eq=function(other){return $B.rich_comp("__eq__",arg,other)}
arg.$hash=hash
var sk=self.$str_hash[hash]
if(sk !==undefined && _eq(sk)){return self.$string_dict[sk]}
if(self.$numeric_dict[hash]!==undefined && _eq(hash)){return self.$numeric_dict[hash]}
if(isinstance(arg,_b_.str)){
var res=self.$string_dict[arg.valueOf()]
if(res !==undefined){return res}}
var ix=rank(self,hash,arg)
if(ix >-1){return self.$object_dict[hash][ix][1]}
if(self.__class__ !==dict){try{var missing_method=getattr(self.__class__,"__missing__",_b_.None)}catch(err){console.log(err)}
if(missing_method !==_b_.None){return missing_method(self,arg)}}
throw KeyError.$factory(arg)}
dict.__hash__=None
function init_from_list(self,args){var i=-1,stop=args.length-1,si=dict.__setitem__
while(i++< stop){var item=args[i]
switch(typeof item[0]){case 'string':
self.$string_dict[item[0]]=item[1]
self.$str_hash[str_hash(item[0])]=item[0]
break
case 'number':
self.$numeric_dict[item[0]]=item[1]
break
default:
si(self,item[0],item[1])
break}}}
dict.__init__=function(self,first,second){var $
if(first===undefined){return $N}
if(second===undefined){if(first.__class__===$B.JSObject){self.$jsobj=first.js
return $N}else if(first.$jsobj){self.$jsobj={}
for(var attr in first.$jsobj){self.$jsobj[attr]=first.$jsobj[attr]}
return $N}else if(Array.isArray(first)){init_from_list(self,first)
return $N}}
$=$ ||$B.args("dict",1,{self:null},["self"],arguments,{},"first","second")
var args=$.first
if(args.length > 1){throw _b_.TypeError.$factory("dict expected at most 1 argument"+
", got 2")}else if(args.length==1){args=args[0]
if(args.__class__===dict){['$string_dict','$str_hash','$numeric_dict','$object_dict'].
forEach(function(d){for(key in args[d]){self[d][key]=args[d][key]}})}else if(isinstance(args,dict)){$copy_dict(self,args)}else{var keys=$B.$getattr(args,"keys",null)
if(keys !==null){var gi=$B.$getattr(args,"__getitem__",null)
if(gi !==null){
gi=$B.$call(gi)
var kiter=_b_.iter($B.$call(keys)())
while(true){try{var key=_b_.next(kiter),value=gi(key)
dict.__setitem__(self,key,value)}catch(err){if(err.__class__===_b_.StopIteration){break}
throw err}}
return $N}}
if(! Array.isArray(args)){args=_b_.list.$factory(args)}
init_from_list(self,args)}}
var kw=$.second.$string_dict
for(var attr in kw){switch(typeof attr){case "string":
self.$string_dict[attr]=kw[attr]
self.$str_hash[str_hash(attr)]=attr
break
case "number":
self.$numeric_dict[attr]=kw[attr]
break
default:
si(self,attr,kw[attr])
break}}
return $N}
var $dict_iterator=$B.$iterator_class("dict iterator")
dict.__iter__=function(self){return dict.$$keys(self)}
dict.__len__=function(self){var _count=0
if(self.$jsobj){for(var attr in self.$jsobj){if(attr.charAt(0)!="$"){_count++}}
return _count}
for(var k in self.$numeric_dict){_count++}
for(var k in self.$string_dict){_count++}
for(var hash in self.$object_dict){_count+=self.$object_dict[hash].length}
return _count}
dict.__ne__=function(self,other){return ! dict.__eq__(self,other)}
dict.__new__=function(cls){if(cls===undefined){throw _b_.TypeError.$factory("int.__new__(): not enough arguments")}
var instance={__class__:cls,$numeric_dict :{},$object_dict :{},$string_dict :{},$str_hash:{},$version:0}
if(cls !==dict){instance.__dict__=_b_.dict.$factory()}
return instance}
dict.__next__=function(self){if(self.$iter==null){self.$iter=new $item_generator(self)}
try{return self.$iter.next()}catch(err){if(err.__name__ !=="StopIteration"){throw err}}}
dict.__repr__=function(self){if(self.$jsobj){
return dict.__repr__(jsobj2dict(self.$jsobj))}
var res=[],items=new $item_generator(self).as_list()
items.forEach(function(item){if((!self.$jsobj && item[1]===self)||
(self.$jsobj && item[1]===self.$jsobj)){res.push(repr(item[0])+": {...}")}else{res.push(repr(item[0])+": "+repr(item[1]))}})
return "{"+res.join(", ")+"}"}
dict.__setitem__=function(self,key,value){var $=$B.args("__setitem__",3,{self:null,key:null,value:null},["self","key","value"],arguments,{},null,null)
return dict.$setitem($.self,$.key,$.value)}
dict.$setitem=function(self,key,value,$hash){
if(self.$jsobj){if(self.$from_js){
value=$B.pyobj2jsobj(value)}
if(self.$jsobj.__class__===_b_.type){self.$jsobj[key]=value
if(key=="__init__" ||key=="__new__"){
self.$jsobj.$factory=$B.$instance_creator(self.$jsobj)}}else{self.$jsobj[key]=value}
return $N}
switch(typeof key){case "string":
self.$string_dict[key]=value
self.$str_hash[str_hash(key)]=key
self.$version++
return $N
case "number":
self.$numeric_dict[key]=value
self.$version++
return $N}
var hash=$hash===undefined ? _b_.hash(key):$hash,_eq=function(other){return $B.rich_comp("__eq__",key,other)}
if(self.$numeric_dict[hash]!==undefined && _eq(hash)){self.$numeric_dict[hash]=value
self.$version++
return $N}
var sk=self.$str_hash[hash]
if(sk !==undefined && _eq(sk)){self.$string_dict[sk]=value
self.$version++
return $N}
if($hash){if(self.$object_dict[$hash]!==undefined){self.$object_dict[$hash].push([key,value])}else{self.$object_dict[$hash]=[[key,value]]}
self.$version++
return $N}
var ix=rank(self,hash,key)
if(ix >-1){
self.$object_dict[hash][ix][1]=value
return $N}else if(self.$object_dict.hasOwnProperty(hash)){self.$object_dict[hash].push([key,value])}else{self.$object_dict[hash]=[[key,value]]}
self.$version++
return $N}
dict.__str__=function(){return dict.__repr__.apply(null,arguments)}
$B.make_rmethods(dict)
dict.clear=function(){
var $=$B.args("clear",1,{self:null},["self"],arguments,{},null,null),self=$.self
self.$numeric_dict={}
self.$string_dict={}
self.$str_hash={}
self.$object_dict={}
if(self.$jsobj){for(var attr in self.$jsobj){if(attr.charAt(0)!=="$" && attr !=="__class__"){delete self.$jsobj[attr]}}}
self.$version++
return $N}
dict.copy=function(self){
var $=$B.args("copy",1,{self:null},["self"],arguments,{},null,null),self=$.self,res=_b_.dict.$factory()
$copy_dict(res,self)
return res}
dict.fromkeys=function(){var $=$B.args("fromkeys",3,{cls:null,keys:null,value:null},["cls","keys","value"],arguments,{value:_b_.None},null,null),keys=$.keys,value=$.value
var klass=$.cls,res=$B.$call(klass)(),keys_iter=$B.$iter(keys)
while(1){try{var key=_b_.next(keys_iter)
if(klass===dict){dict.$setitem(res,key,value)}
else{$B.$getattr(res,"__setitem__")(key,value)}}catch(err){if($B.is_exc(err,[_b_.StopIteration])){return res}
throw err}}}
dict.get=function(){var $=$B.args("get",3,{self:null,key:null,_default:null},["self","key","_default"],arguments,{_default:$N},null,null)
try{return dict.__getitem__($.self,$.key)}
catch(err){if(_b_.isinstance(err,_b_.KeyError)){return $._default}
else{throw err}}}
var $dict_itemsDict=$B.$iterator_class("dict_items")
dict.items=function(self){if(arguments.length > 1){var _len=arguments.length-1,_msg="items() takes no arguments ("+_len+" given)"
throw _b_.TypeError.$factory(_msg)}
return $iterator_wrapper(new $item_iterator(self),$dict_itemsDict)}
var $dict_keysDict=$B.$iterator_class("dict_keys")
dict.$$keys=function(self){if(arguments.length > 1){var _len=arguments.length-1,_msg="keys() takes no arguments ("+_len+" given)"
throw _b_.TypeError.$factory(_msg)}
return $iterator_wrapper(new $key_iterator(self),$dict_keysDict)}
dict.pop=function(){var missing={},$=$B.args("pop",3,{self:null,key:null,_default:null},["self","key","_default"],arguments,{_default:missing},null,null),self=$.self,key=$.key,_default=$._default
try{var res=dict.__getitem__(self,key)
dict.__delitem__(self,key)
return res}catch(err){if(err.__class__===_b_.KeyError){if(_default !==missing){return _default}
throw err}
throw err}}
dict.popitem=function(self){try{var itm=new $item_iterator(self).next()
dict.__delitem__(self,itm[0])
return _b_.tuple.$factory(itm)}catch(err){if(err.__class__==_b_.StopIteration){throw KeyError.$factory("'popitem(): dictionary is empty'")}}}
dict.setdefault=function(){var $=$B.args("setdefault",3,{self:null,key:null,_default:null},["self","key","_default"],arguments,{_default:$N},null,null),self=$.self,key=$.key,_default=$._default
try{return dict.__getitem__(self,key)}
catch(err){if(err.__class__ !==_b_.KeyError){throw err}
if(_default===undefined){_default=$N}
var hash=key.$hash
key.$hash=undefined
dict.$setitem(self,key,_default,hash)
return _default}}
dict.update=function(self){var $=$B.args("update",1,{"self":null},["self"],arguments,{},"args","kw"),self=$.self,args=$.args,kw=$.kw
if(args.length > 0){var o=args[0]
if(isinstance(o,dict)){if(o.$jsobj){o=jsobj2dict(o.$jsobj)}
$copy_dict(self,o)}else if(hasattr(o,"keys")){var _keys=_b_.list.$factory($B.$call($B.$getattr(o,"keys"))()),i=_keys.length
while(i--){var _value=getattr(o,"__getitem__")(_keys[i])
dict.$setitem(self,_keys[i],_value)}}else{var it=_b_.iter(o),i=0
while(true){try{var item=_b_.next(it)}catch(err){if(err.__class__===_b_.StopIteration){break}
throw err}
try{key_value=_b_.list.$factory(item)}catch(err){throw _b_.TypeError.$factory("cannot convert dictionary"+
" update sequence element #"+i+" to a sequence")}
if(key_value.length !==2){throw _b_.ValueError.$factory("dictionary update "+
"sequence element #"+i+" has length "+
key_value.length+"; 2 is required")}
dict.$setitem(self,key_value[0],key_value[1])
i++}}}
$copy_dict(self,kw)
self.$version++
return $N}
var $dict_valuesDict=$B.$iterator_class("dict_values")
dict.values=function(self){if(arguments.length > 1){var _len=arguments.length-1,_msg="values() takes no arguments ("+_len+" given)"
throw _b_.TypeError.$factory(_msg)}
return $iterator_wrapper(new $value_iterator(self),$dict_valuesDict)}
dict.$factory=function(){var res=dict.__new__(dict)
var args=[res]
for(var i=0,len=arguments.length;i < len ;i++){args.push(arguments[i])}
dict.__init__.apply(null,args)
return res}
_b_.dict=dict
$B.set_func_names(dict,"builtins")
dict.fromkeys=_b_.classmethod.$factory(dict.fromkeys)
$B.$dict_iterator=function(d){return new $item_generator(d)}
$B.$dict_length=dict.__len__
$B.$dict_getitem=dict.__getitem__
$B.$dict_get=dict.get
$B.$dict_set=dict.__setitem__
$B.$dict_contains=dict.__contains__
$B.$dict_items=function(d){return new $item_generator(d).as_list()}
$B.$copy_dict=$copy_dict
$B.$dict_get_copy=dict.copy
var mappingproxy=$B.mappingproxy=$B.make_class("mappingproxy",function(obj){if(_b_.isinstance(obj,dict)){
var res=$B.obj_dict(obj.$string_dict)}else{var res=$B.obj_dict(obj)}
res.__class__=mappingproxy
return res}
)
mappingproxy.__setitem__=function(){throw _b_.TypeError.$factory("'mappingproxy' object does not support "+
"item assignment")}
for(var attr in dict){if(mappingproxy[attr]!==undefined ||
["__class__","__mro__","__new__","__init__","__delitem__","clear","fromkeys","pop","popitem","setdefault","update"].indexOf(attr)>-1){continue}
if(typeof dict[attr]=="function"){mappingproxy[attr]=(function(key){return function(){return dict[key].apply(null,arguments)}})(attr)}else{mappingproxy[attr]=dict[attr]}}
$B.set_func_names(mappingproxy,"builtins")
function jsobj2dict(x){var d=dict.$factory()
for(var attr in x){if(attr.charAt(0)!="$" && attr !=="__class__"){if(x[attr]===undefined){continue}else if(x[attr].$jsobj===x){d.$string_dict[attr]=d}else{d.$string_dict[attr]=x[attr]}}}
return d}
$B.obj_dict=function(obj,from_js){var klass=obj.__class__ ||$B.get_class(obj)
if(klass !==undefined && klass.$native){throw _b_.AttributeError.$factory(klass.__name__+
" has no attribute '__dict__'")}
var res=dict.$factory()
res.$jsobj=obj
res.$from_js=from_js
return res}})(__BRYTHON__)
;
;(function($B){
var _b_=$B.builtins;
var object=_b_.object
var JSObject=$B.JSObject
var _window=self;
function $getMouseOffset(target,ev){ev=ev ||_window.event;
var docPos=$getPosition(target);
var mousePos=$mouseCoords(ev);
return{x:mousePos.x-docPos.x,y:mousePos.y-docPos.y};}
function $getPosition(e){var left=0,top=0,width=e.width ||e.offsetWidth,height=e.height ||e.offsetHeight
while(e.offsetParent){left+=e.offsetLeft
top+=e.offsetTop
e=e.offsetParent}
left+=e.offsetLeft ||0
top+=e.offsetTop ||0
if(e.parentElement){
var parent_pos=$getPosition(e.parentElement)
left+=parent_pos.left
top+=parent_pos.top}
return{left:left,top:top,width:width,height:height}}
function $mouseCoords(ev){var posx=0,posy=0
if(!ev){var ev=_window.event}
if(ev.pageX ||ev.pageY){posx=ev.pageX
posy=ev.pageY}else if(ev.clientX ||ev.clientY){posx=ev.clientX+document.body.scrollLeft+
document.documentElement.scrollLeft
posy=ev.clientY+document.body.scrollTop+
document.documentElement.scrollTop}
var res={}
res.x=_b_.int.$factory(posx)
res.y=_b_.int.$factory(posy)
res.__getattr__=function(attr){return this[attr]}
res.__class__="MouseCoords"
return res}
var $DOMNodeAttrs=["nodeName","nodeValue","nodeType","parentNode","childNodes","firstChild","lastChild","previousSibling","nextSibling","attributes","ownerDocument"]
$B.$isNode=function(o){
return(
typeof Node==="object" ? o instanceof Node :
o && typeof o==="object" && typeof o.nodeType==="number" &&
typeof o.nodeName==="string"
)}
$B.$isNodeList=function(nodes){
try{var result=Object.prototype.toString.call(nodes)
var re=new RegExp("^\\[object (HTMLCollection|NodeList)\\]$")
return(typeof nodes==="object" &&
re.exec(result)!==null &&
nodes.length !==undefined &&
(nodes.length==0 ||
(typeof nodes[0]==="object" && nodes[0].nodeType > 0))
)}catch(err){return false}}
var $DOMEventAttrs_W3C=["NONE","CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE","type","target","currentTarget","eventPhase","bubbles","cancelable","timeStamp","stopPropagation","preventDefault","initEvent"]
var $DOMEventAttrs_IE=["altKey","altLeft","button","cancelBubble","clientX","clientY","contentOverflow","ctrlKey","ctrlLeft","data","dataFld","dataTransfer","fromElement","keyCode","nextPage","offsetX","offsetY","origin","propertyName","reason","recordset","repeat","screenX","screenY","shiftKey","shiftLeft","source","srcElement","srcFilter","srcUrn","toElement","type","url","wheelDelta","x","y"]
$B.$isEvent=function(obj){var flag=true
for(var i=0;i < $DOMEventAttrs_W3C.length;i++){if(obj[$DOMEventAttrs_W3C[i]]===undefined){flag=false;break}}
if(flag){return true}
for(var i=0;i < $DOMEventAttrs_IE.length;i++){if(obj[$DOMEventAttrs_IE[i]]===undefined){return false}}
return true}
var $NodeTypes={1:"ELEMENT",2:"ATTRIBUTE",3:"TEXT",4:"CDATA_SECTION",5:"ENTITY_REFERENCE",6:"ENTITY",7:"PROCESSING_INSTRUCTION",8:"COMMENT",9:"DOCUMENT",10:"DOCUMENT_TYPE",11:"DOCUMENT_FRAGMENT",12:"NOTATION"}
var Attributes=$B.make_class("Attributes",function(elt){return{__class__:Attributes,elt:elt}}
)
Attributes.__contains__=function(){var $=$B.args("__getitem__",2,{self:null,key:null},["self","key"],arguments,{},null,null)
if($.self.elt instanceof SVGElement){return $.self.elt.hasAttributeNS(null,$.key)}else if(typeof $.self.elt.hasAttribute=="function"){return $.self.elt.hasAttribute($.key)}
return false}
Attributes.__delitem__=function(){var $=$B.args("__getitem__",2,{self:null,key:null},["self","key"],arguments,{},null,null)
if(!Attributes.__contains__($.self,$.key)){throw _b_.KeyError.$factory($.key)}
if($.self.elt instanceof SVGElement){$.self.elt.removeAttributeNS(null,$.key)
return _b_.None}else if(typeof $.self.elt.hasAttribute=="function"){$.self.elt.removeAttribute($.key)
return _b_.None}}
Attributes.__getitem__=function(){var $=$B.args("__getitem__",2,{self:null,key:null},["self","key"],arguments,{},null,null)
if($.self.elt instanceof SVGElement &&
$.self.elt.hasAttributeNS(null,$.key)){return $.self.elt.getAttributeNS(null,$.key)}else if(typeof $.self.elt.hasAttribute=="function" &&
$.self.elt.hasAttribute($.key)){return $.self.elt.getAttribute($.key)}
throw _b_.KeyError.$factory($.key)}
Attributes.__iter__=function(self){self.$counter=0
var attrs=self.elt.attributes,items=[]
for(var i=0;i < attrs.length;i++){items.push(attrs[i].name)}
self.$items=items
return self}
Attributes.__next__=function(){var $=$B.args("__next__",1,{self:null},["self"],arguments,{},null,null)
if($.self.$counter < $.self.$items.length){var res=$.self.$items[$.self.$counter]
$.self.$counter++
return res}else{throw _b_.StopIteration.$factory("")}}
Attributes.__setitem__=function(){var $=$B.args("__setitem__",3,{self:null,key:null,value:null},["self","key","value"],arguments,{},null,null)
if($.self.elt instanceof SVGElement &&
typeof $.self.elt.setAttributeNS=="function"){$.self.elt.setAttributeNS(null,$.key,$.value)
return _b_.None}else if(typeof $.self.elt.setAttribute=="function"){$.self.elt.setAttribute($.key,$.value)
return _b_.None}
throw _b_.TypeError.$factory("Can't set attributes on element")}
Attributes.get=function(){var $=$B.args("get",3,{self:null,key:null,deflt:null},["self","key","deflt"],arguments,{deflt:_b_.None},null,null)
try{return Attributes.__getitem__($.self,$.key)}catch(err){if(err.__class__===_b_.KeyError){return $B.deflt}else{throw err}}}
Attributes.keys=function(){return Attributes.__iter__.apply(null,arguments)}
Attributes.items=function(){var $=$B.args("values",1,{self:null},["self"],arguments,{},null,null),attrs=$.self.elt.attributes,values=[]
for(var i=0;i < attrs.length;i++){values.push([attrs[i].name,attrs[i].value])}
return _b_.list.__iter__(values)}
Attributes.values=function(){var $=$B.args("values",1,{self:null},["self"],arguments,{},null,null),attrs=$.self.elt.attributes,values=[]
for(var i=0;i < attrs.length;i++){values.push(attrs[i].value)}
return _b_.list.__iter__(values)}
$B.set_func_names(Attributes,"<dom>")
var DOMEvent=$B.DOMEvent={__class__:_b_.type,__mro__:[object],$infos:{__name__:"DOMEvent"}}
DOMEvent.__new__=function(cls,evt_name){var ev=new Event(evt_name)
ev.__class__=DOMEvent
if(ev.preventDefault===undefined){ev.preventDefault=function(){ev.returnValue=false}}
if(ev.stopPropagation===undefined){ev.stopPropagation=function(){ev.cancelBubble=true}}
return ev}
DOMEvent.__getattribute__=function(self,attr){switch(attr){case '__repr__':
case '__str__':
return function(){return '<DOMEvent object>'}
case 'x':
return $mouseCoords(self).x
case 'y':
return $mouseCoords(self).y
case 'data':
if(self.dataTransfer !==undefined){return Clipboard.$factory(self.dataTransfer)}
return self['data']
case 'target':
if(self.target !==undefined){return DOMNode.$factory(self.target)}
case 'char':
return String.fromCharCode(self.which)}
var res=self[attr]
if(res !==undefined){if(typeof res=="function"){var func=function(){var args=[]
for(var i=0;i < arguments.length;i++){args.push($B.pyobj2jsobj(arguments[i]))}
return res.apply(self,arguments)}
func.$infos={__name__:res.toString().substr(9,res.toString().search("{"))}
return func}
return $B.$JS2Py(res)}
throw _b_.AttributeError.$factory("object DOMEvent has no attribute '"+
attr+"'")}
DOMEvent.$factory=function(evt_name){
return DOMEvent.__new__(DOMEvent,evt_name)}
var $DOMEvent=$B.$DOMEvent=function(ev){ev.__class__=DOMEvent
if(ev.preventDefault===undefined){ev.preventDefault=function(){ev.returnValue=false}}
if(ev.stopPropagation===undefined){ev.stopPropagation=function(){ev.cancelBubble=true}}
return ev}
$B.set_func_names(DOMEvent,"<dom>")
var Clipboard={__class__:_b_.type,$infos:{__module__:"<pydom>",__name__:"Clipboard"}}
Clipboard.__getitem__=function(self,name){return self.data.getData(name)}
Clipboard.__mro__=[object]
Clipboard.__setitem__=function(self,name,value){self.data.setData(name,value)}
Clipboard.$factory=function(data){
return{
__class__ :Clipboard,__dict__:_b_.dict.$factory(),data :data}}
$B.set_func_names(Clipboard,"<dom>")
function $EventsList(elt,evt,arg){
this.elt=elt
this.evt=evt
if(isintance(arg,list)){this.callbacks=arg}
else{this.callbacks=[arg]}
this.remove=function(callback){var found=false
for(var i=0;i < this.callbacks.length;i++){if(this.callbacks[i]===callback){found=true
this.callback.splice(i,1)
this.elt.removeEventListener(this.evt,callback,false)
break}}
if(! found){throw _b_.KeyError.$factory("not found")}}}
var OpenFile=$B.OpenFile={__class__:_b_.type,
__mro__:[object],$infos:{__module__:"<pydom>",__name__:"OpenFile"}}
OpenFile.$factory=function(file,mode,encoding){var res={__class__:$OpenFileDict,file:file,reader:new FileReader()}
if(mode==="r"){res.reader.readAsText(file,encoding)}else if(mode==="rb"){res.reader.readAsBinaryString(file)}
return res}
OpenFile.__getattr__=function(self,attr){if(self["get_"+attr]!==undefined){return self["get_"+attr]}
return self.reader[attr]}
OpenFile.__setattr__=function(self,attr,value){var obj=self.reader
if(attr.substr(0,2)=="on"){
var callback=function(ev){return value($DOMEvent(ev))}
obj.addEventListener(attr.substr(2),callback)}else if("set_"+attr in obj){return obj["set_"+attr](value)}else if(attr in obj){obj[attr]=value}else{setattr(obj,attr,value)}}
$B.set_func_names(OpenFile,"<dom>")
var dom={File :function(){},FileReader :function(){}}
dom.File.__class__=_b_.type
dom.File.__str__=function(){return "<class 'File'>"}
dom.FileReader.__class__=_b_.type
dom.FileReader.__str__=function(){return "<class 'FileReader'>"}
var Options={__class__:_b_.type,__delitem__:function(self,arg){self.parent.options.remove(arg.elt)},__getitem__:function(self,key){return DOMNode.$factory(self.parent.options[key])},__len__:function(self){return self.parent.options.length},__mro__:[object],__setattr__:function(self,attr,value){self.parent.options[attr]=value},__setitem__:function(self,attr,value){self.parent.options[attr]=$B.$JS2Py(value)},__str__:function(self){return "<object Options wraps "+self.parent.options+">"},append:function(self,element){self.parent.options.add(element.elt)},insert:function(self,index,element){if(index===undefined){self.parent.options.add(element.elt)}
else{self.parent.options.add(element.elt,index)}},item:function(self,index){return self.parent.options.item(index)},namedItem:function(self,name){return self.parent.options.namedItem(name)},remove:function(self,arg){self.parent.options.remove(arg.elt)},$infos:{__module__:"<pydom>",__name__:"Options"}}
Options.$factory=function(parent){return{
__class__:Options,parent:parent}}
$B.set_func_names(Options,"<dom>")
var DOMNode={__class__ :_b_.type,__mro__:[object],$infos:{__module__:"<pydom>",__name__:"DOMNode"}}
DOMNode.$factory=function(elt,fromtag){if(elt.__class__===DOMNode){return elt}
if(typeof elt=="number" ||typeof elt=="boolean" ||
typeof elt=="string"){return elt}
if(fromtag===undefined){if(DOMNode.tags !==undefined){
var tdict=DOMNode.tags.$string_dict
if(tdict !==undefined){var klass=tdict[elt.tagName]
if(klass !==undefined){
klass.$elt_wrap=elt
return klass.$factory()}}}}
if(elt["$brython_id"]===undefined ||elt.nodeType==9){
elt.$brython_id="DOM-"+$B.UUID()}
return{
__class__:DOMNode,elt:elt}}
DOMNode.__add__=function(self,other){
var res=TagSum.$factory()
res.children=[self],pos=1
if(_b_.isinstance(other,TagSum)){res.children=res.children.concat(other.children)}else if(_b_.isinstance(other,[_b_.str,_b_.int,_b_.float,_b_.list,_b_.dict,_b_.set,_b_.tuple])){res.children[pos++]=DOMNode.$factory(
document.createTextNode(_b_.str.$factory(other)))}else if(_b_.isinstance(other,DOMNode)){res.children[pos++]=other}else{
try{res.children=res.children.concat(_b_.list.$factory(other))}
catch(err){throw _b_.TypeError.$factory("can't add '"+
$B.class_name(other)+"' object to DOMNode instance")}}
return res}
DOMNode.__bool__=function(self){return true}
DOMNode.__contains__=function(self,key){
if(self.elt.nodeType==9 && typeof key=="string"){return document.getElementById(key)!==null}
key=key.elt !==undefined ? key.elt :key
if(self.elt.length !==undefined && typeof self.elt.item=="function"){for(var i=0,len=self.elt.length;i < len;i++){if(self.elt.item(i)===key){return true}}}
return false}
DOMNode.__del__=function(self){
if(!self.elt.parentNode){throw _b_.ValueError.$factory("can't delete "+_b_.str.$factory(self.elt))}
self.elt.parentNode.removeChild(self.elt)}
DOMNode.__delitem__=function(self,key){if(self.elt.nodeType==9){
var res=self.elt.getElementById(key)
if(res){res.parentNode.removeChild(res)}
else{throw _b_.KeyError.$factory(key)}}else{
self.elt.parentNode.removeChild(self.elt)}}
DOMNode.__dir__=function(self){var res=[]
for(var attr in self.elt){if(attr.charAt(0)!="$"){res.push(attr)}}
for(var attr in DOMNode){if(attr.charAt(0)!="$" && res.indexOf(attr)==-1){res.push(attr)}}
return res}
DOMNode.__eq__=function(self,other){return self.elt==other.elt}
DOMNode.__getattribute__=function(self,attr){if(attr.substr(0,2)=="$$"){attr=attr.substr(2)}
switch(attr){case "attrs":
return Attributes.$factory(self.elt)
case "class_name":
case "html":
case "id":
case "parent":
case "query":
case "text":
return DOMNode[attr](self)
case "height":
case "left":
case "top":
case "width":
if(self.elt.tagName=="CANVAS" && self.elt[attr]){return self.elt[attr]}
if(self.elt instanceof SVGElement){return self.elt[attr].baseVal.value}
if(self.elt.style[attr]){return parseInt(self.elt.style[attr])}else{throw _b_.AttributeError.$factory("style."+attr+
" is not set for "+_b_.str.$factory(self))}
case "clear":
case "closest":
return function(){return DOMNode[attr](self,arguments[0])}
case "headers":
if(self.elt.nodeType==9){
var req=new XMLHttpRequest();
req.open("GET",document.location,false)
req.send(null);
var headers=req.getAllResponseHeaders()
headers=headers.split("\r\n")
var res=_b_.dict.$factory()
for(var i=0;i < headers.length;i++){var header=headers[i]
if(header.strip().length==0){continue}
var pos=header.search(":")
res.__setitem__(header.substr(0,pos),header.substr(pos+1).lstrip())}
return res}
break
case "$$location":
attr="location"
break}
if(attr=="select" && self.elt.nodeType==1 &&
["INPUT","TEXTAREA"].indexOf(self.elt.tagName.toUpperCase())>-1){return function(selector){if(selector===undefined){self.elt.select();return _b_.None}
return DOMNode.select(self,selector)}}
var property=self.elt[attr]
if(property===undefined && $B.aliased_names[attr]){property=self.elt["$$"+attr]}
if(property===undefined){return object.__getattribute__(self,attr)}
var res=property
if(res !==undefined){if(res===null){return _b_.None}
if(typeof res==="function"){var func=(function(f,elt){return function(){var args=[],pos=0
for(var i=0;i < arguments.length;i++){var arg=arguments[i]
if(typeof arg=="function"){var f1=function(dest_fn){return function(){try{return dest_fn.apply(null,arguments)}
catch(err){console.log(dest_fn,typeof dest_fn,err)
if(err.__class__ !==undefined){var msg=$B.$getattr(err,'info')+
'\n'+$B.class_name(err)
if(err.args){msg+=': '+err.args[0]}
try{$B.$getattr($B.stderr,"write")(msg)}
catch(err){console.log(msg)}}else{try{$B.$getattr($B.stderr,"write")(err)}
catch(err1){console.log(err)}}
throw err}}}(arg)
args[pos++]=f1}
else if(_b_.isinstance(arg,JSObject)){args[pos++]=arg.js}else if(_b_.isinstance(arg,DOMNode)){args[pos++]=arg.elt}else if(arg===_b_.None){args[pos++]=null}else{args[pos++]=arg}}
var result=f.apply(elt,args)
return $B.$JS2Py(result)}})(res,self.elt)
func.$infos={__name__ :attr}
func.$is_func=true
return func}
if(attr=='options'){return Options.$factory(self.elt)}
if(attr=='style'){return $B.JSObject.$factory(self.elt[attr])}
if(Array.isArray(res)){return res}
return $B.$JS2Py(res)}
return object.__getattribute__(self,attr)}
DOMNode.__getitem__=function(self,key){if(self.elt.nodeType==9){
if(typeof key=="string"){var res=self.elt.getElementById(key)
if(res){return DOMNode.$factory(res)}
throw _b_.KeyError.$factory(key)}else{try{var elts=self.elt.getElementsByTagName(key.$infos.__name__),res=[]
for(var i=0;i < elts.length;i++){res.push(DOMNode.$factory(elts[i]))}
return res}catch(err){throw _b_.KeyError.$factory(_b_.str.$factory(key))}}}else{if((typeof key=="number" ||typeof key=="boolean")&&
typeof self.elt.item=="function"){var key_to_int=_b_.int.$factory(key)
if(key_to_int < 0){key_to_int+=self.elt.length}
var res=DOMNode.$factory(self.elt.item(key_to_int))
if(res===undefined){throw _b_.KeyError.$factory(key)}
return res}else if(typeof key=="string" &&
self.elt.attributes &&
typeof self.elt.attributes.getNamedItem=="function"){var attr=self.elt.attributes.getNamedItem(key)
if(!!attr){return attr.value}
throw _b_.KeyError.$factory(key)}}}
DOMNode.__iter__=function(self){
if(self.elt.length !==undefined && typeof self.elt.item=="function"){var items=[]
for(var i=0,len=self.elt.length;i < len;i++){items.push(DOMNode.$factory(self.elt.item(i)))}}else if(self.elt.childNodes !==undefined){var items=[]
for(var i=0,len=self.elt.childNodes.length;i < len;i++){items.push(DOMNode.$factory(self.elt.childNodes[i]))}}
return $B.$iter(items)}
DOMNode.__le__=function(self,other){
var elt=self.elt
if(self.elt.nodeType==9){elt=self.elt.body}
if(_b_.isinstance(other,TagSum)){for(var i=0;i < other.children.length;i++){elt.appendChild(other.children[i].elt)}}else if(typeof other=="string" ||typeof other=="number"){var $txt=document.createTextNode(other.toString())
elt.appendChild($txt)}else if(_b_.isinstance(other,DOMNode)){
elt.appendChild(other.elt)}else{try{
var items=_b_.list.$factory(other)
items.forEach(function(item){DOMNode.__le__(self,item)})}catch(err){throw _b_.TypeError.$factory("can't add '"+
$B.class_name(other)+"' object to DOMNode instance")}}}
DOMNode.__len__=function(self){return self.elt.length}
DOMNode.__mul__=function(self,other){if(_b_.isinstance(other,_b_.int)&& other.valueOf()> 0){var res=TagSum.$factory()
var pos=res.children.length
for(var i=0;i < other.valueOf();i++){res.children[pos++]=DOMNode.clone(self)()}
return res}
throw _b_.ValueError.$factory("can't multiply "+self.__class__+
"by "+other)}
DOMNode.__ne__=function(self,other){return ! DOMNode.__eq__(self,other)}
DOMNode.__next__=function(self){self.$counter++
if(self.$counter < self.elt.childNodes.length){return DOMNode.$factory(self.elt.childNodes[self.$counter])}
throw _b_.StopIteration.$factory("StopIteration")}
DOMNode.__radd__=function(self,other){
var res=TagSum.$factory()
var txt=DOMNode.$factory(document.createTextNode(other))
res.children=[txt,self]
return res}
DOMNode.__str__=DOMNode.__repr__=function(self){var proto=Object.getPrototypeOf(self.elt)
if(proto){var name=proto.constructor.name
if(name===undefined){
var proto_str=proto.constructor.toString()
name=proto_str.substring(8,proto_str.length-1)}
return "<"+name+" object>"}
var res="<DOMNode object type '"
return res+$NodeTypes[self.elt.nodeType]+"' name '"+
self.elt.nodeName+"'>"}
DOMNode.__setattr__=function(self,attr,value){
if(attr.substr(0,2)=="on"){
if(!$B.$bool(value)){
DOMNode.unbind(self,attr.substr(2))}else{
DOMNode.bind(self,attr.substr(2),value)}}else{switch(attr){case "left":
case "top":
case "width":
case "height":
if(_b_.isinstance(value,_b_.int)&& self.elt.nodeType==1){self.elt.style[attr]=value+"px"
return _b_.None}else{throw _b_.ValueError.$factory(attr+" value should be"+
" an integer, not "+$B.class_name(value))}
break}
if(DOMNode["set_"+attr]!==undefined){return DOMNode["set_"+attr](self,value)}
function warn(msg){console.log(msg)
var frame=$B.last($B.frames_stack)
if($B.debug > 0){var info=frame[1].$line_info.split(",")
console.log("module",info[1],"line",info[0])
if($B.$py_src.hasOwnProperty(info[1])){var src=$B.$py_src[info[1]]
console.log(src.split("\n")[parseInt(info[0])-1])}}else{console.log("module",frame[2])}}
var proto=Object.getPrototypeOf(self.elt),nb=0
while(!!proto && proto !==Object.prototype && nb++< 10){var descriptors=Object.getOwnPropertyDescriptors(proto)
if(!!descriptors &&
typeof descriptors.hasOwnProperty=="function"){if(descriptors.hasOwnProperty(attr)){if(!descriptors[attr].writable &&
descriptors[attr].set===undefined){warn("Warning: property '"+attr+
"' is not writable. Use element.attrs['"+
attr+"'] instead.")}
break}}else{break}
proto=Object.getPrototypeOf(proto)}
if(self.elt.style && self.elt.style[attr]!==undefined){warn("Warning: '"+attr+"' is a property of element.style")}
self.elt[attr]=value
return _b_.None}}
DOMNode.__setitem__=function(self,key,value){if(typeof key=="number"){self.elt.childNodes[key]=value}else if(typeof key=="string"){if(self.elt.attributes){if(self.elt instanceof SVGElement){self.elt.setAttributeNS(null,key,value)}else if(typeof self.elt.setAttribute=="function"){self.elt.setAttribute(key,value)}}}}
DOMNode.abs_left={__get__:function(self){return $getPosition(self.elt).left},__set__:function(){throw _b_.AttributeError.$factory("'DOMNode' objectattribute "+
"'abs_left' is read-only")}}
DOMNode.abs_top={__get__:function(self){return $getPosition(self.elt).top},__set__:function(){throw _b_.AttributeError.$factory("'DOMNode' objectattribute "+
"'abs_top' is read-only")}}
DOMNode.bind=function(self,event){
if(arguments.length==2){
return(function(obj,evt){function f(callback){DOMNode.bind(obj,evt,callback)
return callback}
return f})(self,event)}
for(var i=2;i < arguments.length;i++){var func=arguments[i]
var callback=(function(f){return function(ev){try{return f($DOMEvent(ev))}catch(err){if(err.__class__ !==undefined){var msg=$B.$getattr(err,"info")+
"\n"+$B.class_name(err)
if(err.args){msg+=": "+err.args[0]}
try{$B.$getattr($B.stderr,"write")(msg)}
catch(err){console.log(msg)}}else{try{$B.$getattr($B.stderr,"write")(err)}
catch(err1){console.log(err)}}}}}
)(func)
callback.$infos=func.$infos
callback.$attrs=func.$attrs ||{}
callback.$func=func
self.elt.addEventListener(event,callback,false)
self.elt.$events=self.elt.$events ||{}
self.elt.$events[event]=self.elt.$events[event]||[]
self.elt.$events[event].push([func,callback])}
return self}
DOMNode.children=function(self){var res=[],elt=self.elt
console.log(elt,elt.childNodes)
if(elt.nodeType==9){elt=elt.body}
elt.childNodes.forEach(function(child){res.push(DOMNode.$factory(child))})
return res}
DOMNode.clear=function(self){
var elt=self.elt
if(elt.nodeType==9){elt=elt.body}
while(elt.firstChild){elt.removeChild(elt.firstChild)}}
DOMNode.Class=function(self){if(self.elt.className !==undefined){return self.elt.className}
return _b_.None}
DOMNode.class_name=function(self){return DOMNode.Class(self)}
DOMNode.clone=function(self){var res=DOMNode.$factory(self.elt.cloneNode(true))
var events=self.elt.$events ||{}
for(var event in events){var evt_list=events[event]
evt_list.forEach(function(evt){var func=evt[0]
DOMNode.bind(res,event,func)})}
return res}
DOMNode.closest=function(self,tagName){
var res=self.elt,tagName=tagName.toLowerCase()
while(res.tagName.toLowerCase()!=tagName){res=res.parentNode
if(res===undefined ||res.tagName===undefined){throw _b_.KeyError.$factory("no parent of type "+tagName)}}
return DOMNode.$factory(res)}
DOMNode.events=function(self,event){self.elt.$events=self.elt.$events ||{}
var evt_list=self.elt.$events[event]=self.elt.$events[event]||[],callbacks=[]
evt_list.forEach(function(evt){callbacks.push(evt[1])})
return callbacks}
DOMNode.focus=function(self){return(function(obj){return function(){
setTimeout(function(){obj.focus()},10)}})(self.elt)}
function make_list(node_list){var res=[]
for(var i=0;i < node_list.length;i++){res.push(DOMNode.$factory(node_list[i]))}
return res}
DOMNode.get=function(self){
var obj=self.elt,args=[]
for(var i=1;i < arguments.length;i++){args.push(arguments[i])}
var $ns=$B.args("get",0,{},[],args,{},null,"kw"),$dict={},items=_b_.list.$factory(_b_.dict.items($ns["kw"]))
items.forEach(function(item){$dict[item[0]]=item[1]})
if($dict["name"]!==undefined){if(obj.getElementsByName===undefined){throw _b_.TypeError.$factory("DOMNode object doesn't support "+
"selection by name")}
return make_list(obj.getElementsByName($dict['name']))}
if($dict["tag"]!==undefined){if(obj.getElementsByTagName===undefined){throw _b_.TypeError.$factory("DOMNode object doesn't support "+
"selection by tag name")}
return make_list(obj.getElementsByTagName($dict["tag"]))}
if($dict["classname"]!==undefined){if(obj.getElementsByClassName===undefined){throw _b_.TypeError.$factory("DOMNode object doesn't support "+
"selection by class name")}
return make_list(obj.getElementsByClassName($dict['classname']))}
if($dict["id"]!==undefined){if(obj.getElementById===undefined){throw _b_.TypeError.$factory("DOMNode object doesn't support "+
"selection by id")}
var id_res=document.getElementById($dict['id'])
if(! id_res){return[]}
return[DOMNode.$factory(id_res)]}
if($dict["selector"]!==undefined){if(obj.querySelectorAll===undefined){throw _b_.TypeError.$factory("DOMNode object doesn't support "+
"selection by selector")}
return make_list(obj.querySelectorAll($dict['selector']))}
return res}
DOMNode.getContext=function(self){
if(!("getContext" in self.elt)){throw _b_.AttributeError.$factory("object has no attribute 'getContext'")}
var obj=self.elt
return function(ctx){return JSObject.$factory(obj.getContext(ctx))}}
DOMNode.getSelectionRange=function(self){
if(self.elt["getSelectionRange"]!==undefined){return self.elt.getSelectionRange.apply(null,arguments)}}
DOMNode.html=function(self){var res=self.elt.innerHTML
if(res===undefined){if(self.elt.nodeType==9){res=self.elt.body.innerHTML}
else{res=_b_.None}}
return res}
DOMNode.id=function(self){if(self.elt.id !==undefined){return self.elt.id}
return _b_.None}
DOMNode.index=function(self,selector){var items
if(selector===undefined){items=self.elt.parentElement.childNodes}else{items=self.elt.parentElement.querySelectorAll(selector)}
var rank=-1
for(var i=0;i < items.length;i++){if(items[i]===self.elt){rank=i;break}}
return rank}
DOMNode.inside=function(self,other){
other=other.elt
var elt=self.elt
while(true){if(other===elt){return true}
elt=elt.parentElement
if(! elt){return false}}}
DOMNode.options=function(self){
return new $OptionsClass(self.elt)}
DOMNode.parent=function(self){if(self.elt.parentElement){return DOMNode.$factory(self.elt.parentElement)}
return _b_.None}
DOMNode.reset=function(self){
return function(){self.elt.reset()}}
DOMNode.select=function(self,selector){
if(self.elt.querySelectorAll===undefined){throw _b_.TypeError.$factory("DOMNode object doesn't support "+
"selection by selector")}
return make_list(self.elt.querySelectorAll(selector))}
DOMNode.select_one=function(self,selector){
if(self.elt.querySelector===undefined){throw _b_.TypeError.$factory("DOMNode object doesn't support "+
"selection by selector")}
var res=self.elt.querySelector(selector)
if(res===null){return _b_.None}
return DOMNode.$factory(res)}
DOMNode.style=function(self){
self.elt.style.float=self.elt.style.cssFloat ||self.style.styleFloat
return $B.JSObject.$factory(self.elt.style)}
DOMNode.setSelectionRange=function(self){
if(this["setSelectionRange"]!==undefined){return(function(obj){return function(){return obj.setSelectionRange.apply(obj,arguments)}})(this)}else if(this["createTextRange"]!==undefined){return(function(obj){return function(start_pos,end_pos){if(end_pos==undefined){end_pos=start_pos}
var range=obj.createTextRange()
range.collapse(true)
range.moveEnd("character",start_pos)
range.moveStart("character",end_pos)
range.select()}})(this)}}
DOMNode.set_class_name=function(self,arg){self.elt.setAttribute("class",arg)}
DOMNode.set_html=function(self,value){var elt=self.elt
if(elt.nodeType==9){elt=elt.body}
elt.innerHTML=_b_.str.$factory(value)}
DOMNode.set_style=function(self,style){
if(!_b_.isinstance(style,_b_.dict)){throw TypeError.$factory("style must be dict, not "+
$B.class_name(style))}
var items=_b_.list.$factory(_b_.dict.items(style))
for(var i=0;i < items.length;i++){var key=items[i][0],value=items[i][1]
if(key.toLowerCase()=="float"){self.elt.style.cssFloat=value
self.elt.style.styleFloat=value}else{switch(key){case "top":
case "left":
case "width":
case "borderWidth":
if(_b_.isinstance(value,_b_.int)){value=value+"px"}}
self.elt.style[key]=value}}}
DOMNode.set_text=function(self,value){var elt=self.elt
if(elt.nodeType==9){elt=elt.body}
elt.innerText=_b_.str.$factory(value)
elt.textContent=_b_.str.$factory(value)}
DOMNode.set_value=function(self,value){self.elt.value=_b_.str.$factory(value)}
DOMNode.submit=function(self){
return function(){self.elt.submit()}}
DOMNode.text=function(self){var elt=self.elt
if(elt.nodeType==9){elt=elt.body}
var res=elt.innerText ||elt.textContent
if(res===null){res=_b_.None}
return res}
DOMNode.toString=function(self){if(self===undefined){return 'DOMNode'}
return self.elt.nodeName}
DOMNode.trigger=function(self,etype){
if(self.elt.fireEvent){self.elt.fireEvent("on"+etype)}else{var evObj=document.createEvent("Events")
evObj.initEvent(etype,true,false)
self.elt.dispatchEvent(evObj)}}
DOMNode.unbind=function(self,event){
self.elt.$events=self.elt.$events ||{}
if(self.elt.$events==={}){return _b_.None}
if(event===undefined){for(var event in self.elt.$events){DOMNode.unbind(self,event)}
return _b_.None}
if(self.elt.$events[event]===undefined ||
self.elt.$events[event].length==0){return _b_.None}
var events=self.elt.$events[event]
if(arguments.length==2){
for(var i=0;i < events.length;i++){var callback=events[i][1]
self.elt.removeEventListener(event,callback,false)}
self.elt.$events[event]=[]
return _b_.None}
for(var i=2;i < arguments.length;i++){var callback=arguments[i],flag=false,func=callback.$func
if(func===undefined){
var found=false
for(var j=0;j < events.length;j++){if(events[j][0]===callback){var func=callback,found=true
break}}
if(!found){throw _b_.TypeError.$factory("function is not an event callback")}}
for(var j=0;j < events.length;j++){if($B.$getattr(func,'__eq__')(events[j][0])){var callback=events[j][1]
self.elt.removeEventListener(event,callback,false)
events.splice(j,1)
flag=true
break}}
if(!flag){throw _b_.KeyError.$factory('missing callback for event '+event)}}}
$B.set_func_names(DOMNode,"<dom>")
var Query={__class__:_b_.type,$infos:{__name__:"query"}}
Query.__contains__=function(self,key){return self._keys.indexOf(key)>-1}
Query.__getitem__=function(self,key){
var result=self._values[key]
if(result===undefined){throw _b_.KeyError.$factory(key)}
if(result.length==1){return result[0]}
return result}
var Query_iterator=$B.$iterator_class("query string iterator")
Query.__iter__=function(self){return $B.$iterator(self._keys,Query_iterator)}
Query.__mro__=[object]
Query.getfirst=function(self,key,_default){
var result=self._values[key]
if(result===undefined){if(_default===undefined){return _b_.None}
return _default}
return result[0]}
Query.getlist=function(self,key){
var result=self._values[key]
if(result===undefined){return[]}
return result}
Query.getvalue=function(self,key,_default){try{return Query.__getitem__(self,key)}
catch(err){if(_default===undefined){return _b_.None}
return _default}}
Query.keys=function(self){return self._keys}
DOMNode.query=function(self){var res={__class__:Query,_keys :[],_values :{}}
var qs=location.search.substr(1).split('&')
for(var i=0;i < qs.length;i++){var pos=qs[i].search("="),elts=[qs[i].substr(0,pos),qs[i].substr(pos+1)],key=decodeURIComponent(elts[0]),value=decodeURIComponent(elts[1])
if(res._keys.indexOf(key)>-1){res._values[key].push(value)}
else{res._keys.push(key)
res._values[key]=[value]}}
return res}
var TagSum={__class__ :_b_.type,__mro__:[object],$infos:{__module__:"<pydom>",__name__:"TagSum"}}
TagSum.appendChild=function(self,child){self.children.push(child)}
TagSum.__add__=function(self,other){if($B.get_class(other)===TagSum){self.children=self.children.concat(other.children)}else if(_b_.isinstance(other,[_b_.str,_b_.int,_b_.float,_b_.dict,_b_.set,_b_.list])){self.children=self.children.concat(
DOMNode.$factory(document.createTextNode(other)))}else{self.children.push(other)}
return self}
TagSum.__radd__=function(self,other){var res=TagSum.$factory()
res.children=self.children.concat(
DOMNode.$factory(document.createTextNode(other)))
return res}
TagSum.__repr__=function(self){var res="<object TagSum> "
for(var i=0;i < self.children.length;i++){res+=self.children[i]
if(self.children[i].toString()=="[object Text]"){res+=" ["+self.children[i].textContent+"]\n"}}
return res}
TagSum.__str__=TagSum.toString=TagSum.__repr__
TagSum.clone=function(self){var res=TagSum.$factory()
for(var i=0;i < self.children.length;i++){res.children.push(self.children[i].cloneNode(true))}
return res}
TagSum.$factory=function(){return{
__class__:TagSum,children:[],toString:function(){return "(TagSum)"}}}
$B.set_func_names(TagSum,"<dom>")
$B.TagSum=TagSum
var win=JSObject.$factory(_window)
win.get_postMessage=function(msg,targetOrigin){if(_b_.isinstance(msg,dict)){var temp={__class__:"dict"},items=_b_.list.$factory(_b_.dict.items(msg))
items.forEach(function(item){temp[item[0]]=item[1]})
msg=temp}
return _window.postMessage(msg,targetOrigin)}
$B.DOMNode=DOMNode
$B.win=win})(__BRYTHON__)
;
;(function($B){
var _b_=$B.builtins
var bltns=$B.InjectBuiltins()
eval(bltns)
function rstrip(s,strip_chars){var _chars=strip_chars ||" \t\n";
var nstrip=0,len=s.length;
while(nstrip < len && _chars.indexOf(s.charAt(len-1-nstrip))>-1 )nstrip++;
return s.substr(0,len-nstrip)}
function jscode_namespace(iter_name,action,parent_id){var _clean='';
if(action==='store'){_clean=' = {}'}
var res='for(var attr in this.blocks){'+
'eval("var " + attr + " = this.blocks[attr]")'+
'};'+
'var $locals_'+iter_name+' = this.env'+_clean+', '+
'$local_name = "'+iter_name+'", '+
'$locals = $locals_'+iter_name+';'
if(parent_id){res+='$locals.$parent = $locals_'+parent_id.replace(/\./g,"_")+
';'}
return res}
function make_node(top_node,node){
if(node.type==="marker")return
if(node.C.$genjs){var ctx_js=node.C.$genjs}else{var ctx_js=node.C.$genjs=node.C.to_js()}
var is_cond=false,is_except=false,is_else=false,is_continue
if(node.locals_def){var parent_id=node.func_node.parent_block.id
if(node.func_node.ntype=="generator"){
var iter_name=top_node.iter_id
ctx_js=jscode_namespace(iter_name,'store',parent_id)}else{ctx_js+="$locals.$parent = $locals_"+parent_id+";"}}
if(node.is_catch){is_except=true;is_cond=true}
if(node.is_except){is_except=true}
if(node.C.type=="node"){var ctx=node.C.tree[0]
var ctype=ctx.type
switch(ctx.type){case "except":
is_except=true
is_cond=true
break
case "single_kw":
is_cond=true
if(ctx.token=="else"){is_else=true}
if(ctx.token=="finally"){is_except=true}
break
case "condition":
if(ctx.token=="elif"){is_else=true;is_cond=true}
if(ctx.token=="if"){is_cond=true}}}
if(ctx_js){
var new_node=new $B.genNode(ctx_js)
new_node.line_num=node.line_num
if(ctype=="yield"){
var yield_node_id=top_node.yields.length
ctx_js=rstrip(ctx_js,';')
var res="return ["+ctx_js+", "+yield_node_id+"]"
new_node.data=res
top_node.yields.push(new_node)}else if(node.is_set_yield_value){
var yield_node_id=top_node.yields.length
var js="var sent_value = this.sent_value === undefined ? "+
"None : this.sent_value;"
js+="if(sent_value.__class__ === $B.$GeneratorSendError)"+
"{throw sent_value.err}"
js+="var $yield_value"+ctx_js+" = sent_value;"
js+="this.sent_value = None"
new_node.data=js}else if(ctype=="break" ||ctype=="continue"){
new_node["is_"+ctype]=true
new_node.loop_num=node.C.tree[0].loop_ctx.loop_num}
new_node.is_yield=(ctype=="yield" ||ctype=="return")
new_node.is_cond=is_cond
new_node.is_except=is_except
new_node.is_if=ctype=="condition" && ctx.token=="if"
new_node.is_try=node.is_try
new_node.is_else=is_else
new_node.loop_start=node.loop_start
new_node.is_set_yield_value=node.is_set_yield_value
for(var i=0,len=node.children.length;i < len;i++){var nd=make_node(top_node,node.children[i])
if(nd !==undefined){new_node.addChild(nd)}}}
return new_node}
$B.genNode=function(data,parent){this.data=data
this.parent=parent
this.children=[]
this.has_child=false
if(parent===undefined){this.nodes={}
this.num=0}
this.addChild=function(child){if(child===undefined){console.log("child of "+this+" undefined")}
this.children[this.children.length]=child
this.has_child=true
child.parent=this
child.rank=this.children.length-1}
this.clone=function(){var res=new $B.genNode(this.data)
res.has_child=this.has_child
res.is_cond=this.is_cond
res.is_except=this.is_except
res.is_if=this.is_if
res.is_try=this.is_try
res.is_else=this.is_else
res.loop_num=this.loop_num
res.loop_start=this.loop_start
res.is_yield=this.is_yield
res.line_num=this.line_num
return res}
this.clone_tree=function(exit_node,head){
var res=new $B.genNode(this.data)
if(this.replaced && ! in_loop(this)){
console.log("already replaced",this)
res.data="void(0)"}
if(this===exit_node &&(this.parent.is_cond ||! in_loop(this))){
if(! exit_node.replaced){
console.log("replace by void(0)",this)
res=new $B.genNode("void(0)")}else{res=new $B.genNode(exit_node.data)}
exit_node.replaced=true}
if(head &&(this.is_break ||this.is_continue)){var loop=in_loop(this)
if(loop.has("yield")){res.data=""
if(this.is_break){res.data+='$locals["$no_break'+this.loop_num+
'"] = false;'}
res.data+='var err = new Error("break"); '+
"err.__class__ = $B.GeneratorBreak; throw err;"
res.is_break=this.is_break}else{res.is_break=this.is_break}}
res.is_continue=this.is_continue
res.has_child=this.has_child
res.is_cond=this.is_cond
res.is_except=this.is_except
res.is_try=this.is_try
res.is_else=this.is_else
res.loop_num=this.loop_num
res.loop_start=this.loop_start
res.no_break=true
res.is_yield=this.is_yield
res.line_num=this.line_num
for(var i=0,len=this.children.length;i < len;i++){
res.addChild(this.children[i].clone_tree(exit_node,head))
if(this.children[i].is_break){res.no_break=false}}
return res}
this.has=function(keyword){
if(this["is_"+keyword]){return true}
else{for(var i=0,len=this.children.length;i < len;i++){if(this.children[i].has(keyword)){return true}}}
return false}
this.indent_src=function(indent){return " ".repeat(indent*indent)}
this.src=function(indent){
indent=indent ||0
var res=[this.indent_src(indent)+this.data],pos=1
if(this.has_child){res[pos++]="{"}
res[pos++]="\n"
for(var i=0,len=this.children.length;i < len;i++){res[pos++]=this.children[i].src(indent+1)
if(this.children[i].is_yield){break}}
if(this.has_child){res[pos++]="\n"+this.indent_src(indent)+"}\n"}
return res.join("")}
this.toString=function(){return "<Node "+this.data+">"}}
$B.GeneratorBreak=$B.make_class("GeneratorBreak")
$B.$GeneratorSendError={}
var $GeneratorReturn={}
$B.generator_return=function(value){return{__class__:$GeneratorReturn,value:value}}
function in_loop(node){
while(node){if(node.loop_start !==undefined){return node}
node=node.parent}
return false}
function in_try(node){
var tries=[],pnode=node.parent,pos=0
while(pnode){if(pnode.is_try){tries[pos++]=pnode}
pnode=pnode.parent}
return tries}
var $BRGeneratorDict={__class__:_b_.type,$infos:{__name__:"generator",__module__:"builtins"},$is_class:true}
$B.gen_counter=0
function remove_line_nums(node){
for(var i=0;i < node.children.length;i++){if(node.children[i].is_line_num){node.children.splice(i,1)}else{remove_line_nums(node.children[i])}}}
$B.$BRgenerator=function(func_name,blocks,def_id,def_node){
var def_ctx=def_node.C.tree[0]
var module=def_node.module,
iter_id=def_id
if($B.debug > 0){
$B.$add_line_num(def_node,def_ctx.rank)}
var func_root=new $B.genNode(def_ctx.to_js())
remove_line_nums(def_node.parent)
func_root.module=module
func_root.yields=[]
func_root.loop_ends={}
func_root.def_id=def_id
func_root.iter_id=iter_id
for(var i=0,len=def_node.children.length;i < len;i++){var nd=make_node(func_root,def_node.children[i])
if(nd===undefined){continue}
func_root.addChild(nd)}
var obj={__class__ :$BRGeneratorDict,blocks:blocks,def_ctx:def_ctx,def_id:def_id,func_name:func_name,func_root:func_root,module:module,gi_running:false,iter_id:iter_id,id:iter_id,num:0}
var src=func_root.src(),
raw_src=src.substr(src.search("function"))
raw_src+="return "+def_ctx.name+def_ctx.num+"}"
var funcs=[raw_src]
obj.parent_block=def_node
for(var i=0;i < func_root.yields.length;i++){funcs.push(make_next(obj,i))}
return funcs}
function make_next(self,yield_node_id){
var exit_node=self.func_root.yields[yield_node_id]
exit_node.replaced=false
var root=new $B.genNode(self.def_ctx.to_js())
var fnode=self.func_root.clone()
root.addChild(fnode)
var parent_scope=self.func_root
var js=jscode_namespace(self.iter_id,'restore')
fnode.addChild(new $B.genNode(js))
js='var $top_frame = ["'+self.iter_id+'",$locals,"'+self.module+
'",$locals_'+self.module.replace(/\./g,'_')+'];'+
'$B.frames_stack.push($top_frame); var $stack_length = '+
'$B.frames_stack.length;'
fnode.addChild(new $B.genNode(js))
while(1){
var exit_parent=exit_node.parent,rest=[],pos=0,has_break,has_continue
var start=exit_node.rank+1
if(exit_node.loop_start !==undefined){
start=exit_node.rank}else if(exit_node.is_cond){
while(start < exit_parent.children.length &&
(exit_parent.children[start].is_except ||
exit_parent.children[start].is_else)){start++}}else if(exit_node.is_try ||exit_node.is_except){
while(start < exit_parent.children.length &&
(exit_parent.children[start].is_except ||
exit_parent.children[start].is_else)){start++}}
for(var i=start,len=exit_parent.children.length;i < len;i++){var clone=exit_parent.children[i].clone_tree(null,true)
if(clone.has("continue")){has_continue=true;}
rest[pos++]=clone
if(clone.has("break")){has_break=true}}
if((has_break ||has_continue)&& rest.length > 0){
var rest_try=new $B.genNode("try")
for(var i=0,len=rest.length;i < len;i++){rest_try.addChild(rest[i])}
var catch_test="catch(err)"+
"{if(err.__class__ !== $B.GeneratorBreak){throw err}}"
catch_test=new $B.genNode(catch_test)
rest=[rest_try,catch_test]}
var tries=in_try(exit_node)
if(tries.length==0){
for(var i=0;i < rest.length;i++){fnode.addChild(rest[i])}}else{
var tree=[],pos=0
for(var i=0;i < tries.length;i++){var try_node=tries[i],try_clone=try_node.clone()
if(i==0){for(var j=0;j < rest.length;j++){try_clone.addChild(rest[j])}}
var children=[try_clone],cpos=1
for(var j=try_node.rank+1;
j < try_node.parent.children.length;j++){if(try_node.parent.children[j].is_except){children[cpos++]=
try_node.parent.children[j].clone_tree(null,true)}else{break}}
tree[pos++]=children}
var parent=fnode
while(tree.length){children=tree.pop()
children.forEach(function(child){parent.addChild(child)})
parent=children[0]}}
exit_node=exit_parent
if(exit_node===self.func_root){break}}
var src=root.children[0].src(),next_src=src.substr(src.search("function"))
next_src=next_src.substr(10)
next_src=next_src.substr(next_src.search("function"))
return next_src}
var generator={__class__:_b_.type,__mro__:[_b_.object],$infos:{__module__:"builtins",__name__:"generator"}}
generator.__enter__=function(self){console.log("generator.__enter__ called")}
generator.__exit__=function(self){console.log("generator.__exit__ called")}
generator.__str__=function(self){return "<generator object "+self.__name__+">"}
generator.__iter__=function(self){return self}
generator.__next__=function(self){if(self.$finished){throw _b_.StopIteration.$factory(_b_.None)}
if(self.gi_running===true){throw ValueError.$factory("generator already executing")}
self.gi_running=true
if(self.next===undefined){self.$finished=true
throw _b_.StopIteration.$factory(_b_.None)}
try{var res=self.next.apply(self,self.args)}catch(err){
self.$finished=true
throw err}finally{
self.gi_running=false
$B.leave_frame(self.iter_id)}
if(res===undefined){throw _b_.StopIteration.$factory(_b_.None)}
else if(res[0].__class__===$GeneratorReturn){
self.$finished=true
throw StopIteration.$factory(res[0].value)}
self.next=self.nexts[res[1]]
self.gi_running=false
return res[0]}
generator.close=function(self,value){self.sent_value=_b_.GeneratorExit.$factory()
try{var res=generator.__next__(self)
if(res !==_b_.None){throw _b_.RuntimeError.$factory("closed generator returned a value")}}catch(err){if($B.is_exc(err,[_b_.StopIteration,_b_.GeneratorExit])){return _b_.None}
throw err}}
generator.send=function(self,value){self.sent_value=value
return generator.__next__(self)}
generator.$$throw=function(self,type,value,traceback){var exc=type
if(value !==undefined){exc=$B.$call(exc)(value)}
if(traceback !==undefined){exc.$traceback=traceback}
self.sent_value={__class__:$B.$GeneratorSendError,err:exc}
return generator.__next__(self)}
generator.$factory=$B.genfunc=function(name,blocks,funcs,$defaults){
if(name.startsWith("__ge")){
for(var block_id in blocks){if(block_id=="$locals_"+name){continue}
for(var attr in blocks[block_id]){blocks["$locals_"+name][attr]=blocks[block_id][attr]}}}
return function(){var iter_id="$gen"+$B.gen_counter++,gfuncs=[]
gfuncs.push(funcs[0]($defaults))
for(var i=1;i < funcs.length;i++){gfuncs.push(funcs[i])}
var res={__class__:generator,__name__:name,args:Array.prototype.slice.call(arguments),blocks:blocks,env:{},name:name,nexts:gfuncs.slice(1),next:gfuncs[0],iter_id:iter_id,gi_running:false,$started:false,$defaults:$defaults}
return res}}
$B.set_func_names(generator,"builtins")})(__BRYTHON__)
;
 ;(function($B){var _b_=$B.builtins
var update=function(mod,data){for(attr in data){mod[attr]=data[attr]}}
var _window=self;
var modules={}
var browser={$package:true,$is_package:true,__initialized__:true,__package__:'browser',__file__:$B.brython_path.replace(/\/*$/g,'')+
'/Lib/browser/__init__.py',console:$B.JSObject.$factory(self.console),win:$B.win,$$window:$B.win,}
browser.__path__=browser.__file__
if(! $B.isa_web_worker ){update(browser,{$$alert:function(message){window.alert($B.builtins.str.$factory(message))},bind:function(){
var $=$B.args("bind",2,{elt:null,evt:null},["elt","evt"],arguments,{},null,null)
return function(callback){if($.elt.__class__===$B.JSObject){
$B.$call($B.$getattr($.elt,"bind"))($.evt,callback)
return callback}else if(_b_.isinstance($.elt,$B.DOMNode)){
$B.DOMNode.bind($.elt,$.evt,callback)
return callback}else if(_b_.isinstance($.elt,_b_.str)){
var items=document.querySelectorAll($.elt)
for(var i=0;i < items.length;i++){$B.DOMNode.bind($B.DOMNode.$factory(items[i]),$.evt,callback)}
return callback}
try{var it=$B.$iter($.elt)
while(true){try{var elt=_b_.next(it)
$B.DOMNode.bind(elt,$.evt,callback)}catch(err){if(_b_.isinstance(err,_b_.StopIteration)){break}
throw err}}}catch(err){if(_b_.isinstance(err,_b_.AttributeError)){$B.DOMNode.bind($.elt,$.evt,callback)}
throw err}
return callback}},confirm:$B.JSObject.$factory(window.confirm),$$document:$B.DOMNode.$factory(document),doc:$B.DOMNode.$factory(document),
DOMEvent:$B.DOMEvent,DOMNode:$B.DOMNode.$factory,load:function(script_url){
var file_obj=$B.builtins.open(script_url)
var content=$B.builtins.getattr(file_obj,'read')()
eval(content)},mouseCoords:function(ev){return $B.JSObject.$factory($mouseCoords(ev))},prompt:function(message,default_value){return $B.JSObject.$factory(window.prompt(message,default_value||''))},reload:function(){
var scripts=document.getElementsByTagName('script'),js_scripts=[]
scripts.forEach(function(script){if(script.type===undefined ||
script.type=='text/javascript'){js_scripts.push(script)
if(script.src){console.log(script.src)}}})
console.log(js_scripts)
for(var mod in $B.imported){if($B.imported[mod].$last_modified){console.log('check',mod,$B.imported[mod].__file__,$B.imported[mod].$last_modified)}else{console.log('no date for mod',mod)}}},run_script:function(){var $=$B.args("run_script",2,{src:null,name:null},["src","name"],arguments,{name:"script_"+$B.UUID()},null,null)
$B.run_script($.src,$.name,true)},URLParameter:function(name){name=name.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");
var regex=new RegExp("[\\?&]"+name+"=([^&#]*)"),results=regex.exec(location.search);
results=results===null ? "" :
decodeURIComponent(results[1].replace(/\+/g," "));
return $B.builtins.str.$factory(results);}})
modules['browser.html']=(function($B){var _b_=$B.builtins
var TagSum=$B.TagSum
function makeTagDict(tagName){
var dict={__class__:_b_.type,$infos:{__name__:tagName,__module__:"browser.html"}}
dict.__init__=function(){var $ns=$B.args('pow',1,{self:null},['self'],arguments,{},'args','kw'),self=$ns['self'],args=$ns['args']
if(args.length==1){var first=args[0]
if(_b_.isinstance(first,[_b_.str,_b_.int,_b_.float])){
self.elt.innerHTML=_b_.str.$factory(first)}else if(first.__class__===TagSum){for(var i=0,len=first.children.length;i < len;i++){self.elt.appendChild(first.children[i].elt)}}else{if(_b_.isinstance(first,$B.DOMNode)){self.elt.appendChild(first.elt)}else{try{
var items=_b_.list.$factory(first)
items.forEach(function(item){$B.DOMNode.__le__(self,item)})}catch(err){console.log(err)
console.log("first",first)
throw _b_.ValueError.$factory(
'wrong element '+first)}}}}
var items=_b_.list.$factory(_b_.dict.items($ns['kw']))
for(var i=0,len=items.length;i < len;i++){
var arg=items[i][0],value=items[i][1]
if(arg.toLowerCase().substr(0,2)=="on"){
var js='$B.DOMNode.bind(self,"'+
arg.toLowerCase().substr(2)
eval(js+'",function(){'+value+'})')}else if(arg.toLowerCase()=="style"){$B.DOMNode.set_style(self,value)}else{if(value !==false){
try{arg=arg.replace('_','-')
self.elt.setAttribute(arg,value)}catch(err){throw _b_.ValueError.$factory(
"can't set attribute "+arg)}}}}}
dict.__mro__=[$B.DOMNode,$B.builtins.object]
dict.__new__=function(cls){
if(cls.$elt_wrap !==undefined){
var elt=cls.$elt_wrap
cls.$elt_wrap=undefined
var res=$B.DOMNode.$factory(elt,true)
res._wrapped=true }else{var res=$B.DOMNode.$factory(document.createElement(tagName),true)
res._wrapped=false }
res.__class__=cls
res.__dict__=_b_.dict.$factory()
return res}
$B.set_func_names(dict,"browser.html")
return dict}
function makeFactory(klass){var factory=function(){if(klass.$elt_wrap !==undefined){
var elt=klass.$elt_wrap
klass.$elt_wrap=undefined
var res=$B.DOMNode.$factory(elt,true)
res._wrapped=true }else{if(klass.$infos.__name__=='SVG'){var res=$B.DOMNode.$factory(document.createElementNS("http://www.w3.org/2000/svg","svg"),true)}else{var res=$B.DOMNode.$factory(document.createElement(klass.$infos.__name__),true)}
res._wrapped=false }
res.__class__=klass
klass.__init__(res,...arguments)
return res}
return factory}
var tags=['A','ABBR','ACRONYM','ADDRESS','APPLET','AREA','B','BASE','BASEFONT','BDO','BIG','BLOCKQUOTE','BODY','BR','BUTTON','CAPTION','CENTER','CITE','CODE','COL','COLGROUP','DD','DEL','DFN','DIR','DIV','DL','DT','EM','FIELDSET','FONT','FORM','FRAME','FRAMESET','H1','H2','H3','H4','H5','H6','HEAD','HR','HTML','I','IFRAME','IMG','INPUT','INS','ISINDEX','KBD','LABEL','LEGEND','LI','LINK','MAP','MENU','META','NOFRAMES','NOSCRIPT','OBJECT','OL','OPTGROUP','OPTION','P','PARAM','PRE','Q','S','SAMP','SCRIPT','SELECT','SMALL','SPAN','STRIKE','STRONG','STYLE','SUB','SUP','SVG','TABLE','TBODY','TD','TEXTAREA','TFOOT','TH','THEAD','TITLE','TR','TT','U','UL','VAR',
'ARTICLE','ASIDE','AUDIO','BDI','CANVAS','COMMAND','DATA','DATALIST','EMBED','FIGCAPTION','FIGURE','FOOTER','HEADER','KEYGEN','MAIN','MARK','MATH','METER','NAV','OUTPUT','PROGRESS','RB','RP','RT','RTC','RUBY','SECTION','SOURCE','TEMPLATE','TIME','TRACK','VIDEO','WBR',
'DETAILS','DIALOG','MENUITEM','PICTURE','SUMMARY']
var obj={tags:_b_.dict.$factory()},dicts={}
$B.DOMNode.tags=obj.tags
function maketag(tag){if(!(typeof tag=='string')){throw _b_.TypeError.$factory("html.maketag expects a string as argument")}
var klass=dicts[tag]=makeTagDict(tag)
klass.$factory=makeFactory(klass)
obj.tags.$string_dict[tag]=klass
return klass}
tags.forEach(function(tag){obj[tag]=maketag(tag)})
obj.maketag=maketag
return obj})(__BRYTHON__)}
modules['browser']=browser
modules['javascript']={
$$this:function(){
if($B.js_this===undefined){return $B.builtins.None}
return $B.JSObject.$factory($B.js_this)},JSObject:function(){console.log('"javascript.JSObject" is deprecrated. '+
'Use window.<jsobject name> instead.')
return $B.JSObject.$factory(...arguments)},JSConstructor:function(){console.log('"javascript.JSConstructor" is deprecrated. '+
'Use window.<js constructor name>.new() instead.')
return $B.JSConstructor.$factory.apply(null,arguments)},load:function(script_url){console.log('"javascript.load" is deprecrated. '+
'Use browser.load instead.')
var file_obj=$B.builtins.open(script_url)
var content=$B.builtins.getattr(file_obj,'read')()
eval(content)},NULL:null,py2js:function(src,module_name){if(module_name===undefined){module_name='__main__'+$B.UUID()}
return $B.py2js(src,module_name,module_name,$B.builtins_scope).to_js()},pyobj2jsobj:function(obj){return $B.pyobj2jsobj(obj)},jsobj2pyobj:function(obj){return $B.jsobj2pyobj(obj)},UNDEFINED:undefined}
var _b_=$B.builtins
modules['_sys']={
Getframe :function(depth){return $B._frame.$factory($B.frames_stack,depth)},exc_info:function(){for(var i=$B.frames_stack.length-1;i >=0;i--){var frame=$B.frames_stack[i],exc=frame[1].$current_exception
if(exc){return _b_.tuple.$factory([exc.__class__,exc,$B.$getattr(exc,"traceback")])}}
return _b_.tuple.$factory([_b_.None,_b_.None,_b_.None])},modules:{__get__:function(){return $B.obj_dict($B.imported)},__set__:function(self,obj,value){throw _b_.TypeError.$factory("Read only property 'sys.modules'")}},path:{__get__:function(){return $B.path},__set__:function(self,obj,value){$B.path=value;}},meta_path:{__get__:function(){return $B.meta_path},__set__:function(self,obj,value){$B.meta_path=value }},path_hooks:{__get__:function(){return $B.path_hooks},__set__:function(self,obj,value){$B.path_hooks=value }},path_importer_cache:{__get__:function(){return _b_.dict.$factory($B.JSObject.$factory($B.path_importer_cache))},__set__:function(self,obj,value){throw _b_.TypeError.$factory("Read only property"+
" 'sys.path_importer_cache'")}},stderr:{__get__:function(){return $B.stderr},__set__:function(self,obj,value){$B.stderr=value},write:function(data){_b_.getattr($B.stderr,"write")(data)}},stdout:{__get__:function(){return $B.stdout},__set__:function(self,obj,value){$B.stdout=value},write:function(data){_b_.getattr($B.stdout,"write")(data)}},stdin :$B.stdin,vfs:{__get__:function(){if($B.hasOwnProperty("VFS")){return $B.obj_dict($B.VFS)}
else{return _b_.None}},__set__:function(){throw _b_.TypeError.$factory("Read only property 'sys.vfs'")}}}
function load(name,module_obj){
module_obj.__class__=$B.module
module_obj.__name__=name
$B.imported[name]=module_obj
for(var attr in module_obj){if(typeof module_obj[attr]=='function'){var name=attr
while(name.charAt(0)=='$'){name=name.substr(1)}
module_obj[attr].$infos={__name__:name}}}}
for(var attr in modules){load(attr,modules[attr])}
if(! $B.isa_web_worker){modules['browser'].html=modules['browser.html']}
var _b_=$B.builtins
_b_.__builtins__=$B.module.$factory('__builtins__','Python builtins')
for(var attr in _b_){_b_.__builtins__[attr]=_b_[attr]
$B.builtins_scope.binding[attr]=true}
_b_.__builtins__.__setattr__=function(attr,value){_b_[attr]=value}
$B.method_descriptor.__getattribute__=$B.Function.__getattribute__
$B.wrapper_descriptor.__getattribute__=$B.Function.__getattribute__
for(var name in _b_){if(_b_[name].__class__===_b_.type){$B.builtin_classes.push(_b_[name])
for(var key in _b_[name]){var value=_b_[name][key]
if(value===undefined){continue}
else if(value.__class__){continue}
else if(typeof value !="function"){continue}
else if(key=="__new__"){value.__class__=$B.builtin_function}else if(key.startsWith("__")){value.__class__=$B.wrapper_descriptor}else{value.__class__=$B.method_descriptor}
value.__objclass__=_b_[name]}}}
for(var attr in $B){if(Array.isArray($B[attr])){$B[attr].__class__=_b_.list}}
$B.cell=$B.make_class("cell",function(value){return{
__class__:$B.cell,$cell_contents:value}}
)
$B.cell.cell_contents=$B.$call(_b_.property)(
function(self){if(self.$cell_contents===null){throw _b_.ValueError.$factory("empty cell")}
return self.$cell_contents},function(self,value){self.$cell_contents=value}
)
var $comps=["gt","ge","lt","le","eq","ne"]
$comps.forEach(function(comp){var op="__"+comp+"__"
$B.cell[op]=(function(op){return function(self,other){if(! _b_.isinstance(other,$B.cell)){return NotImplemented}
if(self.$cell_contents===null){if(other.$cell_contents===null){return op=="__eq__"}else{return["__ne__","__lt__","__le__"].indexOf(op)>-1}}else if(other.$cell_contents===null){return["__ne__","__gt__","__ge__"].indexOf(op)>-1}
return $B.rich_comp(op,self.$cell_contents,other.$cell_contents)}})(op)})
$B.set_func_names($B.cell,"builtins")})(__BRYTHON__)
;
;(function($B){var _b_=$B.builtins
function import_hooks(mod_name,_path,module,blocking){
if($B.is_none(module)){module=undefined}
var _meta_path=$B.meta_path,_sys_modules=$B.imported,_loader,spec
for(var i=0,len=_meta_path.length;i < len;i++){var _finder=_meta_path[i],find_spec=$B.$getattr(_finder,"find_spec",_b_.None)
if(find_spec==_b_.None){
var find_module=$B.$getattr(_finder,"find_module",_b_.None)
if(find_module !==_b_.None){_loader=find_module(mod_name,_path)
var load_module=$B.$getattr(_loader,"load_module")
module=$B.$call(load_module)(mod_name)
_sys_modules[mod_name]=module
return module}}else{spec=find_spec(mod_name,_path,undefined,blocking)
if(!$B.is_none(spec)){spec.blocking=blocking
_loader=_b_.getattr(spec,"loader",_b_.None)
break}}}
if(_loader===undefined){
var exc=_b_.ImportError.$factory("No module named "+mod_name)
exc.name=mod_name
throw exc}
if($B.is_none(module)){var _spec_name=_b_.getattr(spec,"name")
if(!$B.is_none(_loader)){var create_module=_b_.getattr(_loader,"create_module",_b_.None)
if(!$B.is_none(create_module)){module=$B.$call(create_module)(spec)}}
if(module===undefined){throw _b_.ImportError.$factory(mod_name)}
if($B.is_none(module)){
module=$B.module.$factory(mod_name)
var mod_desc=_b_.getattr(spec,"origin")
if(_b_.getattr(spec,"has_location")){mod_desc="from '"+mod_desc+"'"}else{mod_desc="("+mod_desc+")"}}}
module.__name__=_spec_name
module.__loader__=_loader
module.__package__=_b_.getattr(spec,"parent","")
module.__spec__=spec
var locs=_b_.getattr(spec,"submodule_search_locations")
if(module.$is_package=!$B.is_none(locs)){module.__path__=locs}
if(_b_.getattr(spec,"has_location")){module.__file__=_b_.getattr(spec,"origin")
$B.$py_module_path[module.__name__]=module.__file__}
var cached=_b_.getattr(spec,"cached")
if(! $B.is_none(cached)){module.__cached__=cached}
if($B.is_none(_loader)){if(!$B.is_none(locs)){_sys_modules[_spec_name]=module}else{throw _b_.ImportError.$factory(mod_name)}}else{var exec_module=_b_.getattr(_loader,"exec_module",_b_.None)
if($B.is_none(exec_module)){
module=_b_.getattr(_loader,"load_module")(_spec_name)}else{_sys_modules[_spec_name]=module
try{exec_module(module,blocking)}
catch(e){delete _sys_modules[_spec_name]
throw e}}}
return _sys_modules[_spec_name]}
$B.import_hooks=import_hooks})(__BRYTHON__)
;
;(function($B){var _b_=$B.builtins
var coroutine=$B.coroutine=$B.make_class("coroutine")
var future=$B.make_class("future")
coroutine.close=function(self){}
coroutine.send=function(self){var res=self.$func.apply(null,self.$args)
return res}
$B.set_func_names(coroutine,"builtins")
$B.make_async=function(func){var f=function(){var args=arguments
return{
__class__:coroutine,$args:args,$func:func}}
f.$infos=func.$infos
return f}
$B.promise=function(obj){if(obj.__class__===$B.JSObject){return obj.js}else if(obj.__class__===coroutine){var res=coroutine.send(obj)
return res}
if(typeof obj=="function"){return obj()}
return obj}
$B.awaitable=function(obj){if(obj instanceof Response){return $B.JSObject.$factory(obj)}
return obj}})(__BRYTHON__)
;

__BRYTHON__.VFS_timestamp = 1557109953242
__BRYTHON__.use_VFS = true
__BRYTHON__.VFS = {"math": [".js", "var $module = (function($B){\n\nvar _b_ = $B.builtins,\n    $s = [],\n    i\nfor(var $b in _b_){$s.push('var ' + $b +' = _b_[\"'+$b+'\"]')}\neval($s.join(';'))\n\n//for(var $py_builtin in _b_){eval(\"var \"+$py_builtin+\"=_b_[$py_builtin]\")}\n\nvar float_check = function(x) {\n    if(x.__class__ === $B.long_int){return parseInt(x.value)}\n    return _b_.float.$factory(x)\n}\n\nvar isWholeNumber = function(x){return (x * 10) % 10 == 0}\n\nvar isOdd = function(x) {return isWholeNumber(x) && 2 * Math.floor(x / 2) != x}\n\nvar isLargeNumber = function(x) {return x > Math.pow(2, 32)}\n\n// Big number Library from jsfromhell.com\n// This library helps with producing \"correct\" results from\n// mathematic operations\n\n//+ Jonas Raoni Soares Silva\n//@ http://jsfromhell.com/classes/bignumber [rev. #4]\n\n\nvar BigNumber = function(n, p, r){\n    var o = this, i\n    if(n instanceof BigNumber){\n        for(i in {precision: 0, roundType: 0, _s: 0, _f: 0}){o[i] = n[i]}\n        o._d = n._d.slice()\n        return\n    }\n    o.precision = isNaN(p = Math.abs(p)) ? BigNumber.defaultPrecision : p\n    o.roundType = isNaN(r = Math.abs(r)) ? BigNumber.defaultRoundType : r\n    o._s = (n += \"\").charAt(0) == \"-\"\n    o._f = ((n = n.replace(/[^\\d.]/g, \"\").split(\".\", 2))[0] =\n        n[0].replace(/^0+/, \"\") || \"0\").length\n    for(i = (n = o._d = (n.join(\"\") || \"0\").split(\"\")).length; i;\n        n[--i] = +n[i]){}\n    o.round()\n}\nwith({$: BigNumber, o: BigNumber.prototype}){\n    $.ROUND_HALF_EVEN = ($.ROUND_HALF_DOWN = ($.ROUND_HALF_UP =\n        ($.ROUND_FLOOR = ($.ROUND_CEIL = ($.ROUND_DOWN = ($.ROUND_UP = 0) + 1) +\n            1) + 1) + 1) + 1) + 1\n    $.defaultPrecision = 40\n    $.defaultRoundType = $.ROUND_HALF_UP\n    o.add = function(n){\n        if(this._s != (n = new BigNumber(n))._s){\n            return n._s ^= 1, this.subtract(n)\n        }\n        var o = new BigNumber(this),\n            a = o._d,\n            b = n._d,\n            la = o._f,\n            lb = n._f,\n            n = Math.max(la, lb),\n            i,\n            r\n        la != lb && ((lb = la - lb) > 0 ? o._zeroes(b, lb, 1) :\n            o._zeroes(a, -lb, 1))\n        i = (la = a.length) == (lb = b.length) ? a.length :\n            ((lb = la - lb) > 0 ? o._zeroes(b, lb) : o._zeroes(a, -lb)).length\n        for(r = 0; i; r = (a[--i] = a[i] + b[i] + r) / 10 >>> 0, a[i] %= 10){}\n        return r && ++n && a.unshift(r), o._f = n, o.round()\n    };\n    o.subtract = function(n){\n        if(this._s != (n = new BigNumber(n))._s)\n            return n._s ^= 1, this.add(n);\n        var o = new BigNumber(this),\n            c = o.abs().compare(n.abs()) + 1,\n            a = c ? o : n,\n            b = c ? n : o,\n            la = a._f,\n            lb = b._f,\n            d = la,\n            i,\n            j;\n        a = a._d, b = b._d, la != lb && ((lb = la - lb) > 0 ? o._zeroes(b, lb, 1) : o._zeroes(a, -lb, 1));\n        for(i = (la = a.length) == (lb = b.length) ? a.length : ((lb = la - lb) > 0 ? o._zeroes(b, lb) : o._zeroes(a, -lb)).length; i;){\n            if(a[--i] < b[i]){\n                for(j = i; j && !a[--j]; a[j] = 9);\n                --a[j], a[i] += 10;\n            }\n            b[i] = a[i] - b[i];\n        }\n        return c || (o._s ^= 1), o._f = d, o._d = b, o.round();\n    };\n    o.multiply = function(n){\n        var o = new BigNumber(this), r = o._d.length >= (n = new BigNumber(n))._d.length, a = (r ? o : n)._d,\n        b = (r ? n : o)._d, la = a.length, lb = b.length, x = new BigNumber, i, j, s;\n        for(i = lb; i; r && s.unshift(r), x.set(x.add(new BigNumber(s.join(\"\")))))\n            for(s = (new Array(lb - --i)).join(\"0\").split(\"\"), r = 0, j = la; j; r += a[--j] * b[i], s.unshift(r % 10), r = (r / 10) >>> 0);\n        return o._s = o._s != n._s, o._f = ((r = la + lb - o._f - n._f) >= (j = (o._d = x._d).length) ? this._zeroes(o._d, r - j + 1, 1).length : j) - r, o.round();\n    };\n    o.divide = function(n){\n        if((n = new BigNumber(n)) == \"0\")\n            throw new Error(\"Division by 0\");\n        else if(this == \"0\")\n            return new BigNumber;\n        var o = new BigNumber(this), a = o._d, b = n._d, la = a.length - o._f,\n        lb = b.length - n._f, r = new BigNumber, i = 0, j, s, l, f = 1, c = 0, e = 0;\n        r._s = o._s != n._s, r.precision = Math.max(o.precision, n.precision),\n        r._f = +r._d.pop(), la != lb && o._zeroes(la > lb ? b : a, Math.abs(la - lb));\n        n._f = b.length, b = n, b._s = false, b = b.round();\n        for(n = new BigNumber; a[0] == \"0\"; a.shift());\n        out:\n        do{\n            for(l = c = 0, n == \"0\" && (n._d = [], n._f = 0); i < a.length && n.compare(b) == -1; ++i){\n                (l = i + 1 == a.length, (!f && ++c > 1 || (e = l && n == \"0\" && a[i] == \"0\")))\n                && (r._f == r._d.length && ++r._f, r._d.push(0));\n                (a[i] == \"0\" && n == \"0\") || (n._d.push(a[i]), ++n._f);\n                if(e)\n                    break out;\n                if((l && n.compare(b) == -1 && (r._f == r._d.length && ++r._f, 1)) || (l = 0))\n                    while(r._d.push(0), n._d.push(0), ++n._f, n.compare(b) == -1);\n            }\n            if(f = 0, n.compare(b) == -1 && !(l = 0))\n                while(l ? r._d.push(0) : l = 1, n._d.push(0), ++n._f, n.compare(b) == -1);\n            for(s = new BigNumber, j = 0; n.compare(y = s.add(b)) + 1 && ++j; s.set(y));\n            n.set(n.subtract(s)), !l && r._f == r._d.length && ++r._f, r._d.push(j);\n        }\n        while((i < a.length || n != \"0\") && (r._d.length - r._f) <= r.precision);\n        return r.round();\n    };\n    o.mod = function(n){\n        return this.subtract(this.divide(n).intPart().multiply(n));\n    };\n    o.pow = function(n){\n        var o = new BigNumber(this), i;\n        if((n = (new BigNumber(n)).intPart()) == 0) return o.set(1);\n        for(i = Math.abs(n); --i; o.set(o.multiply(this)));\n        return n < 0 ? o.set((new BigNumber(1)).divide(o)) : o;\n    };\n    o.set = function(n){\n        return this.constructor(n), this;\n    };\n    o.compare = function(n){\n        var a = this, la = this._f, b = new BigNumber(n), lb = b._f, r = [-1, 1], i, l;\n        if(a._s != b._s)\n            return a._s ? -1 : 1;\n        if(la != lb)\n            return r[(la > lb) ^ a._s];\n        for(la = (a = a._d).length, lb = (b = b._d).length, i = -1, l = Math.min(la, lb); ++i < l;)\n            if(a[i] != b[i])\n                return r[(a[i] > b[i]) ^ a._s];\n        return la != lb ? r[(la > lb) ^ a._s] : 0;\n    };\n    o.negate = function(){\n        var n = new BigNumber(this); return n._s ^= 1, n;\n    };\n    o.abs = function(){\n        var n = new BigNumber(this); return n._s = 0, n;\n    };\n    o.intPart = function(){\n        return new BigNumber((this._s ? \"-\" : \"\") + (this._d.slice(0, this._f).join(\"\") || \"0\"));\n    };\n    o.valueOf = o.toString = function(){\n        var o = this;\n        return (o._s ? \"-\" : \"\") + (o._d.slice(0, o._f).join(\"\") || \"0\") + (o._f != o._d.length ? \".\" + o._d.slice(o._f).join(\"\") : \"\");\n    };\n    o._zeroes = function(n, l, t){\n        var s = [\"push\", \"unshift\"][t || 0];\n        for(++l; --l;  n[s](0));\n        return n;\n    };\n    o.round = function(){\n        if(\"_rounding\" in this) return this;\n        var $ = BigNumber, r = this.roundType, b = this._d, d, p, n, x;\n        for(this._rounding = true; this._f > 1 && !b[0]; --this._f, b.shift());\n        for(d = this._f, p = this.precision + d, n = b[p]; b.length > d && !b[b.length -1]; b.pop());\n        x = (this._s ? \"-\" : \"\") + (p - d ? \"0.\" + this._zeroes([], p - d - 1).join(\"\") : \"\") + 1;\n        if(b.length > p){\n            n && (r == $.DOWN ? false : r == $.UP ? true : r == $.CEIL ? !this._s\n            : r == $.FLOOR ? this._s : r == $.HALF_UP ? n >= 5 : r == $.HALF_DOWN ? n > 5\n            : r == $.HALF_EVEN ? n >= 5 && b[p - 1] & 1 : false) && this.add(x);\n            b.splice(p, b.length - p);\n        }\n        return delete this._rounding, this;\n    };\n}\n\nvar isNegZero = function(x) {return x === 0 && Math.atan2(x,x) < 0}\n\nvar _mod = {\n    __getattr__ : function(attr){\n        var res = this[attr]\n        if(res === undefined){$raise('AttributeError',\n            'module math has no attribute ' + attr)}\n        return res\n    },\n    acos: function(x) {return float.$factory(Math.acos(float_check(x)))},\n    acosh: function(x) {\n        if(_b_.$isinf(x)){return float.$factory('inf')}\n        var y = float_check(x)\n        return float.$factory(Math.log(y + Math.sqrt(y * y - 1)))\n    },\n    asin: function(x) {return float.$factory(Math.asin(float_check(x)))},\n    asinh: function(x) {\n        if(_b_.$isninf(x)){return float.$factory('-inf')}\n        if(_b_.$isinf(x)){return float.$factory('inf')}\n        var y = float_check(x)\n        return float.$factory(Math.log(y + Math.sqrt(y * y + 1)))\n    },\n    atan: function(x) {\n        if(_b_.$isninf(x)){return float.$factory(-Math.PI / 2)}\n        if(_b_.$isinf(x)){return float.$factory(Math.PI / 2)}\n        return float.$factory(Math.atan(float_check(x)))},\n    atan2: function(y, x) {\n        return float.$factory(Math.atan2(float_check(y), float_check(x)))\n    },\n    atanh: function(x) {\n       var y = float_check(x)\n       if(y == 0){return 0}\n       return float.$factory(0.5 * Math.log((1 / y + 1)/(1 / y - 1)));\n    },\n    ceil: function(x) {\n       try{return getattr(x, '__ceil__')()}catch(err){}\n\n       if(_b_.$isninf(x)){return float.$factory('-inf')}\n       if(_b_.$isinf(x)){return float.$factory('inf')}\n       if(isNaN(x)){return float.$factory('nan')}\n\n       var y = float_check(x)\n       if(! isNaN(parseFloat(y)) && isFinite(y)){\n           return int.$factory(Math.ceil(y))\n       }\n\n       $raise('ValueError',\n           'object is not a number and does not contain __ceil__')\n    },\n    copysign: function(x,y) {\n        var x1 = Math.abs(float_check(x))\n        var y1 = float_check(y)\n        var sign = y1 ? y1 < 0 ? -1 : 1 : 1\n        if(isNegZero(y1)){sign = -1}   // probably need to work on adding a check for -0\n        return float.$factory(x1 * sign)\n    },\n    cos : function(x){return float.$factory(Math.cos(float_check(x)))},\n    cosh: function(x){\n        if(_b_.$isinf(x)) {return float.$factory('inf')}\n        var y = float_check(x)\n        if(Math.cosh !== undefined){return float.$factory(Math.cosh(y))}\n        return float.$factory((Math.pow(Math.E, y) + Math.pow(Math.E, -y)) / 2)\n    },\n    degrees: function(x){return float.$factory(float_check(x) * 180 / Math.PI)},\n    e: float.$factory(Math.E),\n    erf: function(x) {\n        // inspired from\n        // http://stackoverflow.com/questions/457408/is-there-an-easily-available-implementation-of-erf-for-python\n        var y = float_check(x)\n        var t = 1.0 / (1.0 + 0.5 * Math.abs(y))\n        var ans = 1 - t * Math.exp( -y * y - 1.26551223 +\n                     t * ( 1.00002368 +\n                     t * ( 0.37409196 +\n                     t * ( 0.09678418 +\n                     t * (-0.18628806 +\n                     t * ( 0.27886807 +\n                     t * (-1.13520398 +\n                     t * ( 1.48851587 +\n                     t * (-0.82215223 +\n                     t * 0.17087277)))))))))\n        if(y >= 0.0){return ans}\n        return -ans\n    },\n\n    erfc: function(x) {\n        // inspired from\n        // http://stackoverflow.com/questions/457408/is-there-an-easily-available-implementation-of-erf-for-python\n        var y = float_check(x)\n        var t = 1.0 / (1.0 + 0.5 * Math.abs(y))\n        var ans = 1 - t * Math.exp( -y * y - 1.26551223 +\n                     t * ( 1.00002368 +\n                     t * ( 0.37409196 +\n                     t * ( 0.09678418 +\n                     t * (-0.18628806 +\n                     t * ( 0.27886807 +\n                     t * (-1.13520398 +\n                     t * ( 1.48851587 +\n                     t * (-0.82215223 +\n                     t * 0.17087277)))))))))\n        if(y >= 0.0){return 1 - ans}\n        return 1 + ans\n    },\n    exp: function(x){\n         if(_b_.$isninf(x)){return float.$factory(0)}\n         if(_b_.$isinf(x)){return float.$factory('inf')}\n         var _r = Math.exp(float_check(x))\n         if(_b_.$isinf(_r)){throw OverflowError(\"math range error\")}\n         return float.$factory(_r)\n    },\n    expm1: function(x){return float.$factory(Math.exp(float_check(x)) - 1)},\n    //fabs: function(x){ return x>0?float.$factory(x):float.$factory(-x)},\n    fabs: function(x){return _b_.$fabs(x)}, //located in py_float.js\n    factorial: function(x) {\n         //using code from http://stackoverflow.com/questions/3959211/fast-factorial-function-in-javascript\n         var y = float_check(x),\n             r = 1\n         for(var i = 2; i <= y; i++){r *= i}\n         return r\n    },\n    floor: function(x){return Math.floor(float_check(x))},\n    fmod: function(x,y){return float.$factory(float_check(x) % float_check(y))},\n    frexp: function(x){\n        var _l = _b_.$frexp(x)\n        return _b_.tuple.$factory([float.$factory(_l[0]), _l[1]])\n    },\n    fsum: function(x){\n        /* Translation into Javascript of the function msum in an Active\n           State Cookbook recipe : https://code.activestate.com/recipes/393090/\n           by Raymond Hettinger\n        */\n        var partials = [],\n            res = new Number(),\n            _it = _b_.iter(x)\n        while(true){\n            try{\n                var x = _b_.next(_it),\n                    i = 0\n                for(var j = 0, len = partials.length; j < len; j++){\n                    var y = partials[j]\n                    if(Math.abs(x) < Math.abs(y)){\n                        var z = x\n                        x = y\n                        y = z\n                    }\n                    var hi = x + y,\n                        lo = y - (hi - x)\n                    if(lo){\n                        partials[i] = lo\n                        i++\n                    }\n                    x = hi\n                }\n                partials = partials.slice(0, i).concat([x])\n            }catch(err){\n                if(_b_.isinstance(err, _b_.StopIteration)){break}\n                throw err\n            }\n        }\n        var res = new Number(0)\n        for(var i = 0; i < partials.length; i++){\n            res += new Number(partials[i])\n        }\n        return new Number(res)\n    },\n    gamma: function(x){\n         //using code from http://stackoverflow.com/questions/3959211/fast-factorial-function-in-javascript\n         // Lanczos Approximation of the Gamma Function\n         // As described in Numerical Recipes in C (2nd ed. Cambridge University Press, 1992)\n         var y = float_check(x)\n         var z = y + 1\n         var d1 = Math.sqrt(2 * Math.PI) / z\n\n         var d2 = 1.000000000190015;\n         d2 +=  76.18009172947146 / (z + 1)\n         d2 += -86.50532032941677 / (z + 2)\n         d2 +=  24.01409824083091 / (z + 3)\n         d2 += -1.231739572450155 / (z + 4)\n         d2 +=  1.208650973866179E-3 / (z + 5)\n         d2 += -5.395239384953E-6 / (z + 6)\n\n         return d1 * d2 * Math.pow(z + 5.5, z + 0.5) * Math.exp(-(z + 5.5))\n    },\n    gcd: function(){\n        var $ = $B.args(\"gcd\", 2, {a: null, b: null}, ['a', 'b'],\n                arguments, {}, null, null),\n            a = $B.PyNumber_Index($.a),\n            b = $B.PyNumber_Index($.b)\n        if(a == 0 && b == 0){return 0}\n        // https://stackoverflow.com/questions/17445231/js-how-to-find-the-greatest-common-divisor\n        a = Math.abs(a);\n        b = Math.abs(b);\n        if(b > a){var temp = a; a = b; b = temp;}\n        while(true){\n            if(b == 0){return a}\n            a %= b\n            if(a == 0){return b}\n            b %= a\n        }\n    },\n    hypot: function(x,y){\n       if(_b_.$isinf(x) || _b_.$isinf(y)){return float.$factory('inf')}\n       var x1 = float_check(x),\n           y1 = float_check(y)\n       return float.$factory(Math.sqrt(x1 * x1 + y1 * y1))},\n    inf: float.$factory('inf'),\n    isclose:function(){\n        var $ns = $B.args(\"isclose\",\n                          4,\n                          {a: null, b: null, rel_tol: null, abs_tol: null},\n                          ['a', 'b', 'rel_tol', 'abs_tol'],\n                          arguments,\n                          {rel_tol: 1e-09, abs_tol: 0.0},\n                          null,\n                          null)\n        var a = $ns['a'],\n            b = $ns['b'],\n            rel_tol = $ns['rel_tol'],\n            abs_tol = $ns['abs_tol']\n        if(rel_tol < 0.0 || abs_tol < 0.0){\n            throw ValueError('tolerances must be non-negative')\n        }\n        if(a == b){return True}\n        if(_b_.$isinf(a) || _b_.$isinf(b)){return false}\n        var diff = _b_.$fabs(b - a)\n        var result = (\n            (diff <= _b_.$fabs(rel_tol * b)) ||\n                (diff <= _b_.$fabs(rel_tol * a))\n            ) || (diff <= _b_.$fabs(abs_tol)\n        )\n        return result\n    },\n    isfinite: function(x){return isFinite(float_check(x))},\n    isinf: function(x){return _b_.$isinf(float_check(x))},\n    isnan: function(x){return isNaN(float_check(x))},\n    ldexp: function(x, i){return _b_.$ldexp(x, i)},   //located in py_float.js\n    lgamma: function(x){\n         // see gamma function for sources\n         var y = float_check(x),\n             z = y + 1,\n             d1 = Math.sqrt(2 * Math.PI) / z\n\n         var d2 = 1.000000000190015\n         d2 +=  76.18009172947146 / (z + 1)\n         d2 += -86.50532032941677 / (z + 2)\n         d2 +=  24.01409824083091 / (z + 3)\n         d2 += -1.231739572450155 / (z + 4)\n         d2 +=  1.208650973866179E-3 / (z + 5)\n         d2 += -5.395239384953E-6 / (z + 6)\n\n         return float.$factory(Math.log(Math.abs(d1 * d2 *\n             Math.pow(z + 5.5, z + 0.5) * Math.exp(-(z + 5.5)))))\n    },\n    log: function(x, base){\n         var x1 = float_check(x)\n         if(base === undefined){return float.$factory(Math.log(x1))}\n         return float.$factory(Math.log(x1) / Math.log(float_check(base)))\n    },\n    log1p: function(x){return float.$factory(Math.log(1.0 + float_check(x)))},\n    log2: function(x){\n        if(isNaN(x)){return float.$factory('nan')}\n        if(_b_.$isninf(x)) {throw ValueError('')}\n        var x1 = float_check(x)\n        if(x1 < 0.0){throw ValueError('')}\n        return float.$factory(Math.log(x1) / Math.LN2)\n    },\n    log10: function(x) {\n        return float.$factory(Math.log(float_check(x)) / Math.LN10)\n    },\n    modf: function(x) {\n       if(_b_.$isninf(x)){\n           return _b_.tuple.$factory([0.0, float.$factory('-inf')])\n       }\n       if(_b_.$isinf(x)){\n           return _b_.tuple.$factory([0.0, float.$factory('inf')])\n       }\n       if(isNaN(x)){\n           return _b_.tuple.$factory([float.$factory('nan'),\n               float.$factory('nan')])\n       }\n\n       var x1 = float_check(x)\n       if(x1 > 0){\n          var i = float.$factory(x1 - Math.floor(x1))\n          return _b_.tuple.$factory([i, float.$factory(x1 - i)])\n       }\n\n       var x2 = Math.ceil(x1)\n       var i = float.$factory(x1 - x2)\n       return _b_.tuple.$factory([i, float.$factory(x2)])\n    },\n    nan: float.$factory('nan'),\n    pi : float.$factory(Math.PI),\n    pow: function(x,y) {\n        var x1 = float_check(x)\n        var y1 = float_check(y)\n        if(y1 == 0){return float.$factory(1)}\n        if(x1 == 0 && y1 < 0){throw _b_.ValueError('')}\n\n        if(isNaN(y1)){\n            if(x1 == 1){return float.$factory(1)}\n            return float.$factory('nan')\n        }\n        if(x1 == 0){return float.$factory(0)}\n\n        if(_b_.$isninf(y)){\n            if(x1 == 1 || x1 == -1){return float.$factory(1)}\n            if(x1 < 1 && x1 > -1){return float.$factory('inf')}\n            return float.$factory(0)\n        }\n        if(_b_.$isinf(y)){\n            if(x1 == 1 || x1 == -1){return float.$factory(1)}\n            if(x1 < 1 && x1 > -1){return float.$factory(0)}\n            return float.$factory('inf')\n        }\n\n        if(isNaN(x1)){return float.$factory('nan')}\n        if(_b_.$isninf(x)){\n            if(y1 > 0 && isOdd(y1)){return float.$factory('-inf')}\n            if(y1 > 0){return float.$factory('inf')}  // this is even or a float\n            if(y1 < 0){return float.$factory(0)}\n            return float.$factory(1)\n        }\n\n        if(_b_.$isinf(x)){\n            if(y1 > 0){return float.$factory('inf')}\n            if(y1 < 0){return float.$factory(0)}\n            return float.$factory(1)\n        }\n\n        var r\n        if(isLargeNumber(x1) || isLargeNumber(y1)){\n           var x = new BigNumber(x1),\n               y = new BigNumber(y1)\n           r = x.pow(y)\n        }else{\n           r = Math.pow(x1,y1)\n        }\n\n        if(isNaN(r)){return float.$factory('nan')}\n        if(_b_.$isninf(r)){return float.$factory('-inf')}\n        if(_b_.$isinf(r)){return float.$factory('inf')}\n\n        return r\n    },\n    radians: function(x){\n        return float.$factory(float_check(x) * Math.PI / 180)\n    },\n    sin : function(x){return float.$factory(Math.sin(float_check(x)))},\n    sinh: function(x) {\n        //if (_b_.$isinf(x)) return float.$factory('inf');\n        var y = float_check(x)\n        if(Math.sinh !== undefined){return float.$factory(Math.sinh(y))}\n        return float.$factory(\n            (Math.pow(Math.E, y) - Math.pow(Math.E, -y)) / 2)\n    },\n    sqrt : function(x){\n      var y = float_check(x)\n      if(y < 0){throw ValueError(\"math range error\")}\n      if(_b_.$isinf(y)){return float.$factory('inf')}\n      var _r = Math.sqrt(y)\n      if(_b_.$isinf(_r)){throw OverflowError(\"math range error\")}\n      return float.$factory(_r)\n    },\n    tan: function(x) {\n        var y = float_check(x)\n        return float.$factory(Math.tan(y))\n    },\n    tanh: function(x) {\n        var y = float_check(x)\n        if(Math.tanh !== undefined){return float.$factory(Math.tanh(y))}\n        return float.$factory((Math.pow(Math.E, y) - Math.pow(Math.E, -y))/\n             (Math.pow(Math.E, y) + Math.pow(Math.E, -y)))\n    },\n    trunc: function(x) {\n       try{return getattr(x, '__trunc__')()}catch(err){}\n       var x1 = float_check(x)\n       if(!isNaN(parseFloat(x1)) && isFinite(x1)){\n          if(Math.trunc !== undefined){return int.$factory(Math.trunc(x1))}\n          if(x1 > 0){return int.$factory(Math.floor(x1))}\n          return int.$factory(Math.ceil(x1))  // x1 < 0\n       }\n       $raise('ValueError',\n           'object is not a number and does not contain __trunc__')\n    }\n}\n\nfor(var $attr in _mod){\n    if(typeof _mod[$attr] === 'function'){\n        _mod[$attr].__repr__ = (function(func){\n            return function(){return '<built-in function ' + func + '>'}\n        })($attr)\n        _mod[$attr].__str__ = (function(func){\n            return function(){return '<built-in function ' + func + '>'}\n        })($attr)\n    }\n}\n\nreturn _mod\n\n})(__BRYTHON__)\n"], "sys": [".py", "\nfrom _sys import *\n\n_getframe=Getframe\nfrom javascript import JSObject\nfrom browser import window\n\nabiflags=0\n\nbrython_debug_mode=__BRYTHON__.debug\n\nbase_exec_prefix=__BRYTHON__.brython_path\n\nbase_prefix=__BRYTHON__.brython_path\n\nbuiltin_module_names=__BRYTHON__.builtin_module_names\n\nbyteorder='little'\n\nexec_prefix=__BRYTHON__.brython_path\n\nexecutable=__BRYTHON__.brython_path+'/brython.js'\n\nargv=__BRYTHON__.__ARGV\n\ndef exit(i=None ):\n raise SystemExit('')\n \nclass flag_class:\n\n def __init__(self):\n  self.debug=0\n  self.inspect=0\n  self.interactive=0\n  self.optimize=0\n  self.dont_write_bytecode=0\n  self.no_user_site=0\n  self.no_site=0\n  self.ignore_environment=0\n  self.verbose=0\n  self.bytes_warning=0\n  self.quiet=0\n  self.hash_randomization=1\n  \nflags=flag_class()\n\nclass float_info:\n mant_dig=53\n max=window.Number.MAX_VALUE\n min=window.Number.MIN_VALUE\n radix=2\n \ndef getfilesystemencoding(*args,**kw):\n ''\n\n \n return 'utf-8'\n \ndef getfilesystemencodeerrors():\n return \"utf-8\"\n \ndef getrecursionlimit():\n return 200\n \ndef intern(string):\n return string\n \nmaxsize=2 **63 -1\n\nmaxunicode=1114111\n\nplatform=\"brython\"\n\nprefix=__BRYTHON__.brython_path\n\ndef settrace(tracefunc):\n print(\"set trace\")\n \nversion='.'.join(str(x)for x in __BRYTHON__.version_info[:3])\nversion +=\" (default, %s) \\n[Javascript 1.5] on Brython\"\\\n%__BRYTHON__.compiled_date\nhexversion=0x03070000\n\nclass _version_info:\n\n def __init__(self,version_info):\n  self.version_info=version_info\n  self.major=version_info[0]\n  self.minor=version_info[1]\n  self.micro=version_info[2]\n  self.releaselevel=version_info[3]\n  self.serial=version_info[4]\n  \n def __getitem__(self,index):\n  if isinstance(self.version_info[index],list):\n   return tuple(self.version_info[index])\n  return self.version_info[index]\n  \n def hexversion(self):\n  try :\n   return '0%d0%d0%d'%(self.major,self.minor,self.micro)\n  finally :\n   return '0%d0000'%(self.major)\n   \n def __str__(self):\n  _s=\"sys.version(major=%d, minor=%d, micro=%d, releaselevel='%s', \"\\\n  \"serial=%d)\"\n  return _s %(self.major,self.minor,self.micro,\n  self.releaselevel,self.serial)\n  \n def __eq__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)==other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __ge__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)>=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __gt__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)>other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __le__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)<=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __lt__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)<other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __ne__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)!=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n  \n  \nversion_info=_version_info(__BRYTHON__.version_info)\n\nclass _implementation:\n\n def __init__(self):\n  self.name='brython'\n  self.version=_version_info(__BRYTHON__.implementation)\n  self.hexversion=self.version.hexversion()\n  self.cache_tag=None\n  \n def __repr__(self):\n  return \"namespace(name='%s' version=%s hexversion='%s')\"%(self.name,\n  self.version,self.hexversion)\n  \n def __str__(self):\n  return \"namespace(name='%s' version=%s hexversion='%s')\"%(self.name,\n  self.version,self.hexversion)\n  \nimplementation=_implementation()\n\nclass _hash_info:\n\n def __init__(self):\n  self.width=32,\n  self.modulus=2147483647\n  self.inf=314159\n  self.nan=0\n  self.imag=1000003\n  self.algorithm='siphash24'\n  self.hash_bits=64\n  self.seed_bits=128\n  cutoff=0\n  \n def __repr__(self):\n \n  return \"sys.hash_info(width=32, modulus=2147483647, inf=314159, \"\\\n  \"nan=0, imag=1000003, algorithm='siphash24', hash_bits=64, \"\\\n  \"seed_bits=128, cutoff=0)\"\n  \nhash_info=_hash_info()\n\nclass _float_info:\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n def __init__(self):\n  _number=window.Number\n  self.dig=15\n  self.epsilon=2 **-52\n  self.mant_dig=53\n  self.max=_number.MAX_VALUE\n  self.max_exp=2 **10\n  self.max_10_exp=308\n  self.min=2 **(-1022)\n  self.min_exp=-1021\n  self.min_10_exp=-307\n  self.radix=2\n  self.rounds=1\n  self._tuple=(self.max,self.max_exp,self.max_10_exp,self.min,\n  self.min_exp,self.min_10_exp,self.dig,self.mant_dig,self.epsilon,\n  self.radix,self.rounds)\n  \n def __getitem__(self,k):\n  return self._tuple[k]\n  \n def __iter__(self):\n  return iter(self._tuple)\n  \nfloat_info=_float_info()\n\nwarnoptions=[]\n\ndef getfilesystemencoding():\n return 'utf-8'\n \n \n__stdout__=__BRYTHON__.stdout\n__stderr__=__BRYTHON__.stderr\n__stdin__=__BRYTHON__.stdin\n\n", ["_sys", "browser", "javascript"]], "linecache": [".py", "''\n\n\n\n\n\n\n\n\n\n\n\n__all__=[\"getline\",\"clearcache\",\"checkcache\"]\n\ndef getline(filename,lineno,module_globals=None ):\n lines=getlines(filename,module_globals)\n if 1 <=lineno <=len(lines):\n  return lines[lineno -1]\n else :\n  return ''\n  \n  \n  \n  \n  \n  \ncache={}\n\n\ndef clearcache():\n ''\n \n global cache\n cache={}\n \n \ndef getlines(filename,module_globals=None ):\n ''\n \n \n if filename in cache:\n  entry=cache[filename]\n  if len(entry)!=1:\n   return cache[filename][2]\n   \n try :\n  return updatecache(filename,module_globals)\n except MemoryError:\n  clearcache()\n  return []\n  \n  \ndef checkcache(filename=None ):\n ''\n \n pass\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndef updatecache(filename,module_globals=None ):\n ''\n\n \n \n if filename in cache:\n  if len(cache[filename])!=1:\n   del cache[filename]\n if not filename or (filename.startswith('<')and filename.endswith('>')):\n  return []\n  \n fullname=filename\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n try :\n  with open(fullname,'r')as fp:\n   lines=fp.readlines()\n except OSError:\n  return []\n if lines and not lines[-1].endswith('\\n'):\n  lines[-1]+='\\n'\n  \n cache[filename]=len(lines),None ,lines,fullname\n return lines\n \n \ndef lazycache(filename,module_globals):\n ''\n\n\n\n\n\n\n\n\n\n\n \n if filename in cache:\n  if len(cache[filename])==1:\n   return True\n  else :\n   return False\n if not filename or (filename.startswith('<')and filename.endswith('>')):\n  return False\n  \n if module_globals and '__loader__'in module_globals:\n  name=module_globals.get('__name__')\n  loader=module_globals['__loader__']\n  get_source=getattr(loader,'get_source',None )\n  \n  if name and get_source:\n   get_lines=lambda :get_source(name)\n   cache[filename]=(get_lines,)\n   return True\n return False\n", []], "random": [".js", "// Javascript implementation of the random module\n// Based on Ian Bicking's implementation of the Mersenne twister\n\nvar $module = (function($B){\n\nvar _b_ = $B.builtins,\n    i\n\nvar VERSION = 3\n\n// Code copied from https://github.com/ianb/whrandom/blob/master/mersenne.js\n// by Ian Bicking\n\n// this program is a JavaScript version of Mersenne Twister,\n// a straight conversion from the original program, mt19937ar.c,\n// translated by y. okada on july 17, 2006.\n// and modified a little at july 20, 2006, but there are not any substantial differences.\n// modularized by Ian Bicking, March 25, 2013 (found original version at http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/VERSIONS/JAVASCRIPT/java-script.html)\n// in this program, procedure descriptions and comments of original source code were not removed.\n// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.\n// lines commented with /* and */ are original comments.\n// lines commented with // are additional comments in this JavaScript version.\n/*\n   A C-program for MT19937, with initialization improved 2002/1/26.\n   Coded by Takuji Nishimura and Makoto Matsumoto.\n\n   Before using, initialize the state by using init_genrand(seed)\n   or init_by_array(init_key, key_length).\n\n   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n   All rights reserved.\n\n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions\n   are met:\n\n     1. Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n\n     2. Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n\n     3. The names of its contributors may not be used to endorse or promote\n        products derived from this software without specific prior written\n        permission.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n   Any feedback is very welcome.\n   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\n   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\n*/\n\nfunction RandomStream(seed) {\n\n    /*jshint bitwise:false */\n    /* Period parameters */\n    //c//#define N 624\n    //c//#define M 397\n    //c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */\n    //c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */\n    //c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */\n    var N = 624\n    var M = 397\n    var MATRIX_A = 0x9908b0df   /* constant vector a */\n    var UPPER_MASK = 0x80000000 /* most significant w-r bits */\n    var LOWER_MASK = 0x7fffffff /* least significant r bits */\n    //c//static unsigned long mt[N]; /* the array for the state vector  */\n    //c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */\n    var mt = new Array(N)   /* the array for the state vector  */\n    var mti = N + 1           /* mti==N+1 means mt[N] is not initialized */\n\n    function unsigned32(n1){\n        // returns a 32-bits unsiged integer from an operand to which applied a\n        // bit operator.\n        return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1\n    }\n\n    function subtraction32(n1, n2){\n    // emulates lowerflow of a c 32-bits unsiged integer variable, instead of\n    // the operator -. these both arguments must be non-negative integers\n    // expressible using unsigned 32 bits.\n        return n1 < n2 ? unsigned32((0x100000000 - (n2 - n1)) & 0xffffffff) :\n          n1 - n2\n    }\n\n    function addition32(n1, n2){\n        // emulates overflow of a c 32-bits unsiged integer variable, instead of\n        // the operator +. these both arguments must be non-negative integers\n        // expressible using unsigned 32 bits.\n        return unsigned32((n1 + n2) & 0xffffffff)\n    }\n\n    function multiplication32(n1, n2){\n        // emulates overflow of a c 32-bits unsiged integer variable, instead of the\n        // operator *. these both arguments must be non-negative integers\n        // expressible using unsigned 32 bits.\n        var sum = 0\n        for (var i = 0; i < 32; ++i){\n            if((n1 >>> i) & 0x1){\n                sum = addition32(sum, unsigned32(n2 << i))\n            }\n        }\n        return sum\n    }\n\n    /* initializes mt[N] with a seed */\n    //c//void init_genrand(unsigned long s)\n    function init_genrand(s) {\n        //c//mt[0]= s & 0xffffffff;\n        mt[0] = unsigned32(s & 0xffffffff)\n        for(mti = 1; mti < N; mti++){\n            mt[mti] =\n                //c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);\n                addition32(multiplication32(1812433253,\n                    unsigned32(mt[mti - 1] ^ (mt[mti - 1] >>> 30))), mti)\n            /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n            /* In the previous versions, MSBs of the seed affect   */\n            /* only MSBs of the array mt[].                        */\n            /* 2002/01/09 modified by Makoto Matsumoto             */\n            //c//mt[mti] &= 0xffffffff;\n            mt[mti] = unsigned32(mt[mti] & 0xffffffff);\n            /* for >32 bit machines */\n        }\n    }\n\n    /* initialize by an array with array-length */\n    /* init_key is the array for initializing keys */\n    /* key_length is its length */\n    /* slight change for C++, 2004/2/26 */\n    //c//void init_by_array(unsigned long init_key[], int key_length)\n    function init_by_array(init_key, key_length) {\n        //c//int i, j, k;\n        var i, j, k\n        init_genrand(19650218)\n        i = 1\n        j = 0\n        k = (N > key_length ? N : key_length)\n        for(; k; k--){\n          //c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))\n          //c// + init_key[j] + j; /* non linear */\n          mt[i] = addition32(\n              addition32(unsigned32(mt[i] ^\n                  multiplication32(unsigned32(mt[i - 1] ^ (mt[i - 1] >>> 30)),\n                  1664525)),\n              init_key[j]), j)\n          mt[i] =\n              //c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */\n              unsigned32(mt[i] & 0xffffffff)\n          i++\n          j++\n          if(i >= N){mt[0] = mt[N - 1]; i = 1}\n          if(j >= key_length){j = 0}\n        }\n        for(k = N - 1; k; k--){\n            //c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))\n            //c//- i; /* non linear */\n            mt[i] = subtraction32(\n                unsigned32(\n                    (mt[i]) ^\n                        multiplication32(\n                            unsigned32(mt[i - 1] ^ (mt[i - 1] >>> 30)),\n                    1566083941)),\n                i\n            )\n            //c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */\n            mt[i] = unsigned32(mt[i] & 0xffffffff)\n            i++\n            if(i >= N){mt[0] = mt[N - 1]; i = 1}\n        }\n        mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\n    }\n\n    /* generates a random number on [0,0xffffffff]-interval */\n    //c//unsigned long genrand_int32(void)\n    function genrand_int32() {\n        //c//unsigned long y;\n        //c//static unsigned long mag01[2]={0x0UL, MATRIX_A};\n        var y;\n        var mag01 = [0x0, MATRIX_A];\n        /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n        if(mti >= N){ /* generate N words at one time */\n            //c//int kk;\n            var kk\n\n            if(mti == N + 1){   /* if init_genrand() has not been called, */\n              init_genrand(Date.now()) /* a default initial seed is used */\n            }\n\n            for(kk = 0; kk < N - M; kk++){\n              //c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);\n              //c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];\n              y = unsigned32((mt[kk]&UPPER_MASK) | (mt[kk + 1]&LOWER_MASK))\n              mt[kk] = unsigned32(mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1])\n            }\n            for(;kk < N - 1; kk++){\n              //c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);\n              //c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];\n              y = unsigned32((mt[kk]&UPPER_MASK) | (mt[kk + 1]&LOWER_MASK))\n              mt[kk] = unsigned32(mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1])\n            }\n            //c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);\n            //c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];\n            y = unsigned32((mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK))\n            mt[N - 1] = unsigned32(mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1])\n            mti = 0\n        }\n\n        y = mt[mti++]\n\n        /* Tempering */\n        //c//y ^= (y >> 11);\n        //c//y ^= (y << 7) & 0x9d2c5680;\n        //c//y ^= (y << 15) & 0xefc60000;\n        //c//y ^= (y >> 18);\n        y = unsigned32(y ^ (y >>> 11))\n        y = unsigned32(y ^ ((y << 7) & 0x9d2c5680))\n        y = unsigned32(y ^ ((y << 15) & 0xefc60000))\n        y = unsigned32(y ^ (y >>> 18))\n\n        return y\n    }\n\n    /* generates a random number on [0,0x7fffffff]-interval */\n    //c//long genrand_int31(void)\n    function genrand_int31(){\n        //c//return (genrand_int32()>>1);\n        return (genrand_int32()>>>1)\n    }\n\n    /* generates a random number on [0,1]-real-interval */\n    //c//double genrand_real1(void)\n    function genrand_real1(){\n        return genrand_int32()*(1.0/4294967295.0)\n        /* divided by 2^32-1 */\n    }\n\n    /* generates a random number on [0,1)-real-interval */\n    //c//double genrand_real2(void)\n    function genrand_real2(){\n        return genrand_int32() * (1.0 / 4294967296.0)\n        /* divided by 2^32 */\n    }\n\n    /* generates a random number on (0,1)-real-interval */\n    //c//double genrand_real3(void)\n    function genrand_real3() {\n        return ((genrand_int32()) + 0.5) * (1.0 / 4294967296.0)\n        /* divided by 2^32 */\n    }\n\n    /* generates a random number on [0,1) with 53-bit resolution*/\n    //c//double genrand_res53(void)\n    function genrand_res53() {\n        //c//unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6;\n        var a = genrand_int32() >>> 5,\n            b = genrand_int32() >>> 6\n        return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0)\n    }\n    /* These real versions are due to Isaku Wada, 2002/01/09 added */\n\n    var random = genrand_res53\n\n    random.seed = function(seed){\n        if(! seed){seed = Date.now()}\n        if(typeof seed != \"number\"){seed = parseInt(seed, 10)}\n        if((seed !== 0 && ! seed) || isNaN(seed)){throw \"Bad seed\"}\n        init_genrand(seed)\n    }\n\n    random.seed(seed)\n\n    random.int31 = genrand_int31\n    random.real1 = genrand_real1\n    random.real2 = genrand_real2\n    random.real3 = genrand_real3\n    random.res53 = genrand_res53\n\n    // Added for compatibility with Python\n    random.getstate = function(){return [VERSION, mt, mti]}\n\n    random.setstate = function(state){\n        mt = state[1]\n        mti = state[2]\n    }\n\n    return random\n\n}\n\n// magic constants\n\nvar NV_MAGICCONST = 4 * Math.exp(-0.5)/Math.sqrt(2),\n    gauss_next = null,\n    NV_MAGICCONST = 1.71552776992141,\n    TWOPI = 6.28318530718,\n    LOG4 = 1.38629436111989,\n    SG_MAGICCONST = 2.50407739677627,\n    VERSION = VERSION\n\nvar Random = $B.make_class(\"Random\",\n    function(){\n        return {\n            __class__: Random,\n            _random: RandomStream()\n        }\n    }\n)\n\nRandom._randbelow = function(self, x){\n    return Math.floor(x * self._random())\n}\n\nRandom._urandom = function(self, n){\n    /*\n    urandom(n) -> str\n    Return n random bytes suitable for cryptographic use.\n    */\n\n    var randbytes = []\n    for(i = 0; i < n; i++){randbytes.push(parseInt(self._random() * 256))}\n    return _b_.bytes.$factory(randbytes)\n}\n\nRandom.betavariate = function(){\n    /* Beta distribution.\n\n    Conditions on the parameters are alpha > 0 and beta > 0.\n    Returned values range between 0 and 1.\n\n\n    # This version due to Janne Sinkkonen, and matches all the std\n    # texts (e.g., Knuth Vol 2 Ed 3 pg 134 \"the beta distribution\").\n    */\n\n    var $ = $B.args('betavariate', 3, {self: null, alpha:null, beta:null},\n            ['self', 'alpha', 'beta'], arguments, {}, null, null),\n        self = $.self,\n        alpha = $.alpha,\n        beta = $.beta\n\n    var y = Random.gammavariate(self, alpha, 1)\n    if(y == 0){return _b_.float.$factory(0)}\n    else{return y / (y + Random.gammavariate(self, beta, 1))}\n}\n\nRandom.choice = function(){\n    var $ = $B.args(\"choice\", 2,\n        {self: null, seq:null},[\"self\", \"seq\"],arguments, {}, null, null),\n        self = $.self,\n        seq = $.seq\n    var len, rank\n    if(Array.isArray(seq)){len = seq.length}\n    else{len = _b_.getattr(seq,\"__len__\")()}\n    if(len == 0){\n        throw _b_.IndexError.$factory(\"Cannot choose from an empty sequence\")\n    }\n    rank = parseInt(self._random() * len)\n    if(Array.isArray(seq)){return seq[rank]}\n    else{return _b_.getattr(seq, \"__getitem__\")(rank)}\n}\n\nRandom.expovariate = function(self, lambd){\n    /*\n    Exponential distribution.\n\n    lambd is 1.0 divided by the desired mean.  It should be\n    nonzero.  (The parameter would be called \"lambda\", but that is\n    a reserved word in Python.)  Returned values range from 0 to\n    positive infinity if lambd is positive, and from negative\n    infinity to 0 if lambd is negative.\n\n    */\n    // lambd: rate lambd = 1/mean\n    // ('lambda' is a Python reserved word)\n\n    // we use 1-random() instead of random() to preclude the\n    // possibility of taking the log of zero.\n    return -Math.log(1.0 - self._random()) / lambd\n}\n\nRandom.gammavariate = function(self, alpha, beta){\n    /* Gamma distribution.  Not the gamma function!\n\n    Conditions on the parameters are alpha > 0 and beta > 0.\n\n    The probability distribution function is:\n\n                x ** (alpha - 1) * math.exp(-x / beta)\n      pdf(x) =  --------------------------------------\n                  math.gamma(alpha) * beta ** alpha\n\n    */\n\n    // alpha > 0, beta > 0, mean is alpha*beta, variance is alpha*beta**2\n\n    // Warning: a few older sources define the gamma distribution in terms\n    // of alpha > -1.0\n\n    var $ = $B.args('gammavariate', 3,\n            {self: null, alpha:null, beta:null},\n            ['self', 'alpha', 'beta'],\n            arguments, {}, null, null),\n        self = $.self,\n        alpha = $.alpha,\n        beta = $.beta,\n        LOG4 = Math.log(4),\n        SG_MAGICCONST = 1.0 + Math.log(4.5)\n\n    if(alpha <= 0.0 || beta <= 0.0){\n        throw _b_.ValueError.$factory('gammavariate: alpha and beta must be > 0.0')\n    }\n\n    if(alpha > 1.0){\n\n        // Uses R.C.H. Cheng, \"The generation of Gamma\n        // variables with non-integral shape parameters\",\n        // Applied Statistics, (1977), 26, No. 1, p71-74\n\n        var ainv = Math.sqrt(2.0 * alpha - 1.0),\n            bbb = alpha - LOG4,\n            ccc = alpha + ainv\n\n        while(true){\n            var u1 = self._random()\n            if(!((1e-7 < u1) && (u1 < .9999999))){\n                continue\n            }\n            var u2 = 1.0 - self._random(),\n                v = Math.log(u1 / (1.0 - u1)) / ainv,\n                x = alpha * Math.exp(v),\n                z = u1 * u1 * u2,\n                r = bbb + ccc * v - x\n            if((r + SG_MAGICCONST - 4.5 * z >= 0.0) || r >= Math.log(z)){\n                return x * beta\n            }\n        }\n    }else if(alpha == 1.0){\n        // expovariate(1)\n        var u = self._random()\n        while(u <= 1e-7){u = self._random()}\n        return -Math.log(u) * beta\n    }else{\n        // alpha is between 0 and 1 (exclusive)\n\n        // Uses ALGORITHM GS of Statistical Computing - Kennedy & Gentle\n\n        while(true){\n            var u = self._random(),\n                b = (Math.E + alpha)/Math.E,\n                p = b*u,\n                x\n            if(p <= 1.0){x = Math.pow(p, (1.0/alpha))}\n            else{x = -Math.log((b-p)/alpha)}\n            var u1 = self._random()\n            if(p > 1.0){\n                if(u1 <= Math.pow(x, alpha - 1.0)){\n                    break\n                }\n            }else if(u1 <= Math.exp(-x)){\n                break\n            }\n        }\n        return x * beta\n    }\n}\n\nRandom.gauss = function(){\n\n    /* Gaussian distribution.\n\n    mu is the mean, and sigma is the standard deviation.  This is\n    slightly faster than the normalvariate() function.\n\n    Not thread-safe without a lock around calls.\n\n    # When x and y are two variables from [0, 1), uniformly\n    # distributed, then\n    #\n    #    cos(2*pi*x)*sqrt(-2*log(1-y))\n    #    sin(2*pi*x)*sqrt(-2*log(1-y))\n    #\n    # are two *independent* variables with normal distribution\n    # (mu = 0, sigma = 1).\n    # (Lambert Meertens)\n    # (corrected version; bug discovered by Mike Miller, fixed by LM)\n\n    # Multithreading note: When two threads call this function\n    # simultaneously, it is possible that they will receive the\n    # same return value.  The window is very small though.  To\n    # avoid this, you have to use a lock around all calls.  (I\n    # didn't want to slow this down in the serial case by using a\n    # lock here.)\n    */\n\n    var $ = $B.args('gauss', 3, {self: null, mu:null, sigma:null},\n            ['self', 'mu', 'sigma'], arguments, {}, null, null),\n        self = $.self,\n        mu = $.mu,\n        sigma = $.sigma\n\n    var z = gauss_next\n    gauss_next = null\n    if(z === null){\n        var x2pi = self._random() * Math.PI * 2,\n            g2rad = Math.sqrt(-2.0 * Math.log(1.0 - self._random())),\n            z = Math.cos(x2pi) * g2rad\n        gauss_next = Math.sin(x2pi) * g2rad\n    }\n    return mu + z*sigma\n}\n\nRandom.getrandbits = function(){\n    var $ = $B.args(\"getrandbits\", 2,\n        {self: null, k:null},[\"self\", \"k\"],arguments, {}, null, null),\n        self = $.self,\n        k = $B.$GetInt($.k)\n    // getrandbits(k) -> x.  Generates a long int with k random bits.\n    if(k <= 0){\n        throw _b_.ValueError.$factory('number of bits must be greater than zero')\n    }\n    if(k != _b_.int.$factory(k)){\n        throw _b_.TypeError.$factory('number of bits should be an integer')\n    }\n    var numbytes = (k + 7), // bits / 8 and rounded up\n        x = _b_.int.from_bytes(Random._urandom(self, numbytes), 'big')\n    return _b_.getattr(x, '__rshift__')(\n        _b_.getattr(numbytes*8,'__sub__')(k))\n}\n\nRandom.getstate = function(){\n    // Return internal state; can be passed to setstate() later.\n    var $ = $B.args('getstate', 1, {self: null},\n        [\"self\"], arguments, {}, null, null)\n    return $.self._random.getstate()\n}\n\nRandom.lognormvariate = function(){\n    /*\n    Log normal distribution.\n\n    If you take the natural logarithm of this distribution, you'll get a\n    normal distribution with mean mu and standard deviation sigma.\n    mu can have any value, and sigma must be greater than zero.\n\n    */\n    return Math.exp(Random.normalvariate.apply(null, arguments))\n}\n\nRandom.normalvariate = function(){\n    /*\n    Normal distribution.\n\n    mu is the mean, and sigma is the standard deviation.\n\n    */\n\n    // mu = mean, sigma = standard deviation\n\n    // Uses Kinderman and Monahan method. Reference: Kinderman,\n    // A.J. and Monahan, J.F., \"Computer generation of random\n    // variables using the ratio of uniform deviates\", ACM Trans\n    // Math Software, 3, (1977), pp257-260.\n\n    var $ = $B.args(\"normalvariate\", 3,\n        {self: null, mu:null, sigma:null}, [\"self\", \"mu\", \"sigma\"],\n        arguments, {}, null, null),\n        self = $.self,\n        mu = $.mu,\n        sigma = $.sigma\n\n    while(true){\n        var u1 = self._random(),\n            u2 = 1.0 - self._random(),\n            z = NV_MAGICCONST * (u1 - 0.5) / u2,\n            zz = z * z / 4.0\n        if(zz <= -Math.log(u2)){break}\n    }\n    return mu + z * sigma\n}\n\nRandom.paretovariate = function(){\n    /* Pareto distribution.  alpha is the shape parameter.*/\n    // Jain, pg. 495\n\n    var $ = $B.args(\"paretovariate\", 2, {self: null, alpha:null},\n        [\"self\", \"alpha\"], arguments, {}, null, null)\n\n    var u = 1 - $.self._random()\n    return 1 / Math.pow(u, 1 / $.alpha)\n}\n\nRandom.randint = function(self, a, b){\n    var $ = $B.args('randint', 3,\n        {self: null, a:null, b:null},\n        ['self', 'a', 'b'],\n        arguments, {}, null, null)\n    return Random.randrange($.self, $.a, $.b + 1)\n}\n\nRandom.random = function(self){\n    return self._random()\n}\n\nRandom.randrange = function(){\n    var $ = $B.args('randrange', 4,\n        {self: null, x:null, stop:null, step:null},\n        ['self', 'x', 'stop', 'step'],\n        arguments, {stop:null, step:null}, null, null),\n        self = $.self,\n        _random = self._random\n        //console.log(\"randrange\", $)\n\n    if($.stop === null){\n        var start = 0, stop = $.x, step = 1\n    }else{\n        var start = $.x, stop = $.stop,\n            step = $.step === null ? 1 : $.step\n        if(step == 0){throw _b_.ValueError.$factory('step cannot be 0')}\n    }\n    if((step > 0 && start > stop) || (step < 0 && start < stop)){\n        throw _b_.ValueError.$factory(\"empty range for randrange() (\" +\n            start + \", \" + stop + \", \" + step + \")\")\n    }\n    if(typeof start == 'number' && typeof stop == 'number' &&\n        typeof step == 'number'){\n        return start + step * Math.floor(_random() *\n            Math.ceil((stop - start) / step))\n    }else{\n        var d = _b_.getattr(stop, '__sub__')(start)\n        d = _b_.getattr(d, '__floordiv__')(step)\n        // Force d to be a LongInt\n        d = $B.long_int.$factory(d)\n        // d is a long integer with n digits ; to choose a random number\n        // between 0 and d the most simple is to take a random digit\n        // at each position, except the first one\n        var s = d.value,\n            _len = s.length,\n            res = Math.floor(_random() * (parseInt(s.charAt(0)) +\n                (_len == 1 ? 0 : 1))) + ''\n        var same_start = res.charAt(0) == s.charAt(0)\n        for(var i = 1; i < _len; i++){\n            if(same_start){\n                // If it's the last digit, don't allow stop as valid\n                if(i == _len - 1){\n                    res += Math.floor(_random() * parseInt(s.charAt(i))) + ''\n                }else{\n                    res += Math.floor(_random() *\n                        (parseInt(s.charAt(i)) + 1)) + ''\n                    same_start = res.charAt(i) == s.charAt(i)\n                }\n            }else{\n                res += Math.floor(_random() * 10) + ''\n            }\n        }\n        var offset = {__class__: $B.long_int, value: res,\n            pos: true}\n        d = _b_.getattr(step, '__mul__')(offset)\n        d = _b_.getattr(start, '__add__')(d)\n        return _b_.int.$factory(d)\n    }\n}\n\nRandom.sample = function(){\n    /*\n    Chooses k unique random elements from a population sequence or set.\n\n    Returns a new list containing elements from the population while\n    leaving the original population unchanged.  The resulting list is\n    in selection order so that all sub-slices will also be valid random\n    samples.  This allows raffle winners (the sample) to be partitioned\n    into grand prize and second place winners (the subslices).\n\n    Members of the population need not be hashable or unique.  If the\n    population contains repeats, then each occurrence is a possible\n    selection in the sample.\n\n    To choose a sample in a range of integers, use range as an argument.\n    This is especially fast and space efficient for sampling from a\n    large population:   sample(range(10000000), 60)\n\n    # Sampling without replacement entails tracking either potential\n    # selections (the pool) in a list or previous selections in a set.\n\n    # When the number of selections is small compared to the\n    # population, then tracking selections is efficient, requiring\n    # only a small set and an occasional reselection.  For\n    # a larger number of selections, the pool tracking method is\n    # preferred since the list takes less space than the\n    # set and it doesn't suffer from frequent reselections.'\n\n    */\n    var $ = $B.args('sample', 3, {self: null, population: null,k: null},\n        ['self', 'population','k'], arguments, {}, null, null),\n        self = $.self,\n        population = $.population,\n        k = $.k\n\n    if(!_b_.hasattr(population, '__len__')){\n        throw _b_.TypeError.$factory(\"Population must be a sequence or set. \" +\n            \"For dicts, use list(d).\")\n    }\n    var n = _b_.getattr(population, '__len__')()\n\n    if(k < 0 || k > n){\n        throw _b_.ValueError.$factory(\"Sample larger than population\")\n    }\n    var result = [],\n        setsize = 21        // size of a small set minus size of an empty list\n    if(k > 5){\n        setsize += Math.pow(4, Math.ceil(Math.log(k * 3, 4))) // table size for big sets\n    }\n    if(n <= setsize){\n        // An n-length list is smaller than a k-length set\n        if(Array.isArray(population)){\n            var pool = population.slice()\n        }else{var pool = _b_.list.$factory(population)}\n        for(var i = 0; i < k; i++){ //invariant:  non-selected at [0,n-i)\n            var j = Random._randbelow(self, n - i)\n            result[i] = pool[j]\n            pool[j] = pool[n - i - 1]   // move non-selected item into vacancy\n        }\n    }else{\n        selected = {}\n        for(var i = 0; i < k; i++){\n            var j = Random._randbelow(self, n)\n            while(selected[j] !== undefined){\n                j = Random._randbelow(self, n)\n            }\n            selected[j] = true\n            result[i] = Array.isArray(population) ? population[j] :\n                            _b_.getattr(population, '__getitem__')(j)\n        }\n    }\n    return result\n}\n\nRandom.seed = function(){\n    /*\n    Initialize internal state from hashable object.\n\n    None or no argument seeds from current time or from an operating\n    system specific randomness source if available.\n\n    If *a* is an int, all bits are used.\n    */\n    var $ = $B.args('seed', 3, {self: null, a: null, version: null},\n        ['self', 'a', 'version'],\n        arguments, {a: new Date(), version: 2}, null, null),\n        self = $.self,\n        a = $.a,\n        version = $.version\n\n    if(version == 1){a = _b_.hash(a)}\n    else if(version == 2){\n        if(_b_.isinstance(a, _b_.str)){\n            a = _b_.int.from_bytes(_b_.bytes.$factory(a, 'utf-8'), 'big')\n        }else if(_b_.isinstance(a, [_b_.bytes, _b_.bytearray])){\n            a = _b_.int.from_bytes(a, 'big')\n        }else if(!_b_.isinstance(a, _b_.int)){\n            throw _b_.TypeError.$factory('wrong argument')\n        }\n        if(a.__class__ === $B.long_int){\n            // In this implementation, seed() only accepts safe integers\n            // Generate a random one from the underlying string value,\n            // using an arbitrary seed (99) to always return the same\n            // integer\n            var numbers = a.value,\n                res = '',\n                pos\n            self._random.seed(99)\n            for(var i = 0; i < 17; i++){\n                pos = parseInt(self._random() * numbers.length)\n                res += numbers.charAt(pos)\n            }\n            a = parseInt(res)\n        }\n    }else{\n        throw ValueError.$factory('version can only be 1 or 2')\n    }\n\n    self._random.seed(a)\n    gauss_next = null\n}\n\nRandom.setstate = function(state){\n    // Restore internal state from object returned by getstate().\n    var $ = $B.args('setstate', 2, {self: null, state:null}, ['self', 'state'],\n        arguments, {}, null, null),\n        self = $.self\n    var state = self._random.getstate()\n    if(! Array.isArray($.state)){\n        throw _b_.TypeError.$factory('state must be a list, not ' +\n            $B.class_name($.state))\n    }\n    if($.state.length < state.length){\n        throw _b_.ValueError.$factory(\"need more than \" + $.state.length +\n            \" values to unpack\")\n    }else if($.state.length > state.length){\n        throw _b_.ValueError.$factory(\"too many values to unpack (expected \" +\n            state.length + \")\")\n    }\n    if($.state[0] != 3){\n        throw _b_.ValueError.$factory(\"ValueError: state with version \" +\n            $.state[0] + \" passed to Random.setstate() of version 3\")\n    }\n    var second = _b_.list.$factory($.state[1])\n    if(second.length !== state[1].length){\n        throw _b_.ValueError.$factory('state vector is the wrong size')\n    }\n    for(var i = 0; i < second.length; i++){\n        if(typeof second[i] != 'number'){\n            throw _b_.ValueError.$factory('state vector items must be integers')\n        }\n    }\n    self._random.setstate($.state)\n}\n\nRandom.shuffle = function(x, random){\n    /*\n    x, random = random.random -> shuffle list x in place; return None.\n\n    Optional arg random is a 0-argument function returning a random\n    float in [0.0, 1.0); by default, the standard random.random.\n    */\n\n    var $ = $B.args('shuffle', 3, {self: null, x: null, random: null},\n        ['self', 'x','random'],\n        arguments, {random: null}, null, null),\n        self = $.self,\n        x = $.x,\n        random = $.random\n\n    if(random === null){random = self._random}\n\n    if(Array.isArray(x)){\n        for(var i = x.length - 1; i >= 0;i--){\n            var j = Math.floor(random() * (i + 1)),\n                temp = x[j]\n            x[j] = x[i]\n            x[i] = temp\n        }\n    }else{\n        var len = _b_.getattr(x, '__len__')(), temp,\n            x_get = _b_.getattr(x, '__getitem__'),\n            x_set = _b_.getattr(x, '__setitem__')\n\n        for(i = len - 1; i >= 0; i--){\n            var j = Math.floor(random() * (i + 1)),\n                temp = x_get(j)\n            x_set(j, x_get(i))\n            x_set(i, temp)\n        }\n    }\n}\n\nRandom.triangular = function(){\n    /*\n    Triangular distribution.\n\n    Continuous distribution bounded by given lower and upper limits,\n    and having a given mode value in-between.\n\n    http://en.wikipedia.org/wiki/Triangular_distribution\n    */\n    var $ = $B.args('triangular', 4,\n        {self: null, low: null, high: null, mode: null},\n        ['self', 'low', 'high', 'mode'],\n        arguments, {low: 0, high: 1, mode: null}, null, null),\n        low = $.low,\n        high = $.high,\n        mode = $.mode\n\n    var u = $.self._random(),\n        c = mode === null ? 0.5 : (mode - low) / (high - low)\n    if(u > c){\n        u = 1 - u\n        c = 1 - c\n        var temp = low\n        low = high\n        high = temp\n    }\n    return low + (high - low) * Math.pow(u * c, 0.5)\n}\n\nRandom.uniform = function(){\n    var $ = $B.args('uniform', 3, {self: null, a: null, b: null},\n        ['self', 'a', 'b'], arguments, {}, null, null),\n        a = $B.$GetInt($.a),\n        b = $B.$GetInt($.b)\n\n    return a + (b - a) * $.self._random()\n}\n\nRandom.vonmisesvariate = function(){\n    /* Circular data distribution.\n\n    mu is the mean angle, expressed in radians between 0 and 2*pi, and\n    kappa is the concentration parameter, which must be greater than or\n    equal to zero.  If kappa is equal to zero, this distribution reduces\n    to a uniform random angle over the range 0 to 2*pi.\n\n    */\n    // mu:    mean angle (in radians between 0 and 2*pi)\n    // kappa: concentration parameter kappa (>= 0)\n    // if kappa = 0 generate uniform random angle\n\n    // Based upon an algorithm published in: Fisher, N.I.,\n    // \"Statistical Analysis of Circular Data\", Cambridge\n    // University Press, 1993.\n\n    // Thanks to Magnus Kessler for a correction to the\n    // implementation of step 4.\n\n    var $ = $B.args('vonmisesvariate', 3,\n            {self: null, mu: null, kappa:null}, ['self', 'mu', 'kappa'],\n            arguments, {}, null, null),\n        self = $.self,\n        mu = $.mu,\n        kappa = $.kappa,\n        TWOPI = 2*Math.PI\n\n    if(kappa <= 1e-6){return TWOPI * self._random()}\n\n    var s = 0.5 / kappa,\n        r = s + Math.sqrt(1.0 + s * s)\n\n    while(true){\n        var u1 = self._random(),\n            z = Math.cos(Math.PI * u1),\n            d = z / (r + z),\n            u2 = self._random()\n        if((u2 < 1.0 - d * d) ||\n            (u2 <= (1.0 - d) * Math.exp(d))){\n                break\n        }\n    }\n    var q = 1.0 / r,\n        f = (q + z) / (1.0 + q * z),\n        u3 = self._random()\n    if(u3 > 0.5){var theta = (mu + Math.acos(f)) % TWOPI}\n    else{var theta = (mu - Math.acos(f)) % TWOPI}\n    return theta\n}\n\nRandom.weibullvariate = function(){\n    /*Weibull distribution.\n\n    alpha is the scale parameter and beta is the shape parameter.\n\n    */\n    // Jain, pg. 499; bug fix courtesy Bill Arms\n    var $ = $B.args(\"weibullvariate\", 3,\n        {self: null, alpha: null, beta: null},\n        [\"self\", \"alpha\", \"beta\"], arguments, {}, null, null)\n\n    var u = 1 - $.self._random()\n    return $.alpha * Math.pow(-Math.log(u), 1 / $.beta)\n}\n\n$B.set_func_names(Random, \"random\")\n\nvar $module = Random.$factory()\nfor(var attr in Random){\n    $module[attr] = (function(x){\n        return function(){return Random[x]($module, ...arguments)}\n    })(attr)\n    $module[attr].$infos = Random[attr].$infos\n}\n\n$module.Random = Random\n\nvar SystemRandom = $B.make_class(\"SystemRandom\",\n    function(){\n        return {__class__: SystemRandom}\n    }\n)\nSystemRandom.__getattribute__ = function(){\n    throw $B.builtins.NotImplementedError.$factory()\n}\n\n$module.SystemRandom = SystemRandom\n\nreturn $module\n\n})(__BRYTHON__)\n\n"], "hashlib": [".js", "var $module=(function($B){\n\nvar _b_ = $B.builtins\n\nvar $s = []\nfor(var $b in _b_){$s.push('var ' + $b +' = _b_[\"'+$b+'\"]')}\neval($s.join(';'))\n\nvar $mod = {\n\n    __getattr__ : function(attr){\n        if(attr == 'new'){return hash.$factory}\n        return this[attr]\n    },\n    md5: function(obj){return hash.$factory('md5', obj)},\n    sha1: function(obj){return hash.$factory('sha1', obj)},\n    sha224: function(obj){return hash.$factory('sha224', obj)},\n    sha256: function(obj){return hash.$factory('sha256', obj)},\n    sha384: function(obj){return hash.$factory('sha384', obj)},\n    sha512: function(obj){return hash.$factory('sha512', obj)},\n\n    algorithms_guaranteed: ['md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512'],\n    algorithms_available:  ['md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512']\n}\n\n//todo: eventually move this function to a \"utility\" file or use ajax module?\nfunction $get_CryptoJS_lib(alg){\n    if($B.VFS !== undefined){\n        // use file in brython_stdlib.js\n        var lib = $B.VFS[\"crypto_js.rollups.\" + alg]\n        if (lib===undefined){\n            throw _b_.ImportError.$factory(\"can't import hashlib.\" + alg)\n        }\n        var res = lib[1]\n        try{\n            eval(res + \"; $B.CryptoJS = CryptoJS;\")\n            return\n        }catch(err){\n            throw Error(\"JS Eval Error\",\n                \"Cannot eval CryptoJS algorithm '\" + alg + \"' : error:\" + err)\n        }\n    }\n\n    var module = {__name__: 'CryptoJS', $is_package: false}\n    var res = $B.$download_module(module, $B.brython_path + 'libs/crypto_js/rollups/' + alg + '.js');\n\n    try{\n        eval(res + \"; $B.CryptoJS = CryptoJS;\")\n    }catch(err){\n        throw Error(\"JS Eval Error\",\n            \"Cannot eval CryptoJS algorithm '\" + alg + \"' : error:\" + err)\n    }\n}\n\nfunction bytes2WordArray(obj){\n    // Transform a bytes object into an instance of class WordArray\n    // defined in CryptoJS\n    if(!_b_.isinstance(obj, _b_.bytes)){\n        throw _b_.TypeError(\"expected bytes, got \" + $B.class_name(obj))\n    }\n\n    var words = []\n    for(var i = 0; i < obj.source.length; i += 4){\n        var word = obj.source.slice(i, i + 4)\n        while(word.length < 4){word.push(0)}\n        var w = word[3] + (word[2] << 8) + (word[1] << 16) + (word[0] << 24)\n        words.push(w)\n    }\n    return {words: words, sigBytes: obj.source.length}\n}\n\nvar hash = {\n    __class__: _b_.type,\n    __mro__: [_b_.object],\n    $infos:{\n        __name__: 'hash'\n    }\n}\n\nhash.update = function(self, msg){\n    self.hash.update(bytes2WordArray(msg))\n}\n\nhash.copy = function(self){\n    return self.hash.clone()\n}\n\nhash.digest = function(self){\n    var obj = self.hash.clone().finalize().toString(),\n        res = []\n    for(var i = 0; i < obj.length; i += 2){\n        res.push(parseInt(obj.substr(i, 2), 16))\n    }\n    return _b_.bytes.$factory(res)\n}\n\nhash.hexdigest = function(self) {\n    return self.hash.clone().finalize().toString()\n}\n\nhash.$factory = function(alg, obj) {\n    var res = {\n        __class__: hash\n    }\n\n    switch(alg) {\n      case 'md5':\n      case 'sha1':\n      case 'sha224':\n      case 'sha256':\n      case 'sha384':\n      case 'sha512':\n        var ALG = alg.toUpperCase()\n        if($B.Crypto === undefined ||\n            $B.CryptoJS.algo[ALG] === undefined){$get_CryptoJS_lib(alg)}\n\n        res.hash = $B.CryptoJS.algo[ALG].create()\n        if(obj !== undefined){\n            res.hash.update(bytes2WordArray(obj))\n        }\n        break\n      default:\n        throw $B.builtins.AttributeError.$factory('Invalid hash algorithm: ' + alg)\n    }\n\n    return res\n}\n\nreturn $mod\n\n})(__BRYTHON__)\n"], "time": [".py", "import _locale\n\nfrom browser import window\n\n\ndate=window.Date.new\n\nnow=window.Date.now\n\n\n\n\n\n\n\n_STRUCT_TM_ITEMS=9\n\n\n\n\n\ndef _get_day_of_year(arg):\n ''\n\n\n\n\n\n\n\n\n\n \n ml=[31,28,31,30,31,30,31,31,30,31,30,31]\n if arg[0]%4 ==0:\n  ml[1]+=1\n i=1\n yday=0\n while i <arg[1]:\n  yday +=ml[i -1]\n  i +=1\n yday +=arg[2]\n return yday\n \ndef _get_week_of_year(arg):\n ''\n\n\n\n\n\n\n\n\n\n\n \n d1=date(arg[0],arg[1]-1,arg[2])\n d0=date(arg[0],0,1)\n firstday=d0.getDay()\n if firstday ==0:\n  firstday=7\n firstweek=8 -firstday\n doy=arg[7]\n if firstday !=1:\n  doy=doy -firstweek\n if doy %7 ==0:\n  week_number=doy //7\n else :\n  week_number=doy //7+1\n return week_number\n \ndef _check_struct_time(t):\n mm=t[1]\n if mm ==0:\n  mm=1\n if -1 >mm >13:\n  raise ValueError(\"month out of range\")\n  \n dd=t[2]\n if dd ==0:dd=1\n if -1 >dd >32:\n  raise ValueError(\"day of month out of range\")\n  \n hh=t[3]\n if -1 >hh >24:\n  raise ValueError(\"hour out of range\")\n  \n minu=t[4]\n if -1 >minu >60:\n  raise ValueError(\"minute out of range\")\n  \n ss=t[5]\n if -1 >ss >62:\n  raise ValueError(\"seconds out of range\")\n  \n wd=t[6]%7\n if wd <-2:\n  raise ValueError(\"day of week out of range\")\n  \n dy=t[7]\n if dy ==0:dy=1\n if -1 >dy >367:\n  raise ValueError(\"day of year out of range\")\n  \n return t[0],mm,dd,hh,minu,ss,wd,dy,t[-1]\n \n \ndef _is_dst(secs=None ):\n ''\n d=date()\n if secs is not None :\n  d=date(secs *1000)\n  \n  \n  \n jan=date(d.getFullYear(),0,1)\n jul=date(d.getFullYear(),6,1)\n dst=int(d.getTimezoneOffset()<max(abs(jan.getTimezoneOffset()),\n abs(jul.getTimezoneOffset())))\n return dst\n \ndef _get_tzname():\n ''\n d=date()\n d=d.toTimeString()\n try :\n  d=d.split('(')[1].split(')')[0]\n  return (d,'NotAvailable')\n except :\n  return ('','')\n  \ndef _set_altzone():\n d=date()\n jan=date(d.getFullYear(),0,1)\n jul=date(d.getFullYear(),6,1)\n result=timezone -(jan.getTimezoneOffset()-jul.getTimezoneOffset())*60\n return result\n \ndef _check_input(t):\n if t and isinstance(t,struct_time)and len(t.args)==9:\n  t=t.args\n elif t and isinstance(t,tuple)and len(t)==9:\n  t=t\n elif t and isinstance(t,struct_time)and len(t.args)!=9:\n  raise TypeError(\"function takes exactly 9 arguments ({} given)\".format(len(t.args)))\n elif t and isinstance(t,tuple)and len(t)!=9:\n  raise TypeError(\"function takes exactly 9 arguments ({} given)\".format(len(t)))\n elif t and not isinstance(t,(tuple,struct_time)):\n  raise TypeError(\"Tuple or struct_time argument required\")\n else :\n  t=localtime().args\n return t\n \n \n \n \n \ndaylight=_is_dst()\ntimezone=date().getTimezoneOffset()*60\ntzname=_get_tzname()\naltzone=_set_altzone()if daylight else timezone\n\n\ndef asctime(t=None ):\n weekdays={i:day for (i,day)in\n enumerate(\"Mon Tue Wed Thu Fri Sat Sun\".split())\n }\n \n months={i+1:month for (i,month)in\n enumerate(\"Jan Fev Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split())\n }\n \n t=_check_input(t)\n t=_check_struct_time(t)\n \n result=\"%s %s %2d %02d:%02d:%02d %d\"%(\n weekdays[t[6]],months[t[1]],t[2],t[3],t[4],t[5],t[0])\n return result\n \ndef ctime(timestamp=None ):\n return asctime(localtime(timestamp))\n \ndef gmtime(secs=None ):\n d=date()\n if secs is not None :\n  d=date(secs *1000)\n wday=d.getUTCDay()-1 if d.getUTCDay()-1 >=0 else 6\n tmp=struct_time([d.getUTCFullYear(),\n d.getUTCMonth()+1,d.getUTCDate(),\n d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),\n wday,0,0])\n tmp.args[7]=_get_day_of_year(tmp.args)\n return tmp\n \ndef localtime(secs=None ):\n d=date()\n if secs is not None :\n  d=date(secs *1000)\n dst=_is_dst(secs)\n wday=d.getDay()-1 if d.getDay()-1 >=0 else 6\n tmp=struct_time([d.getFullYear(),\n d.getMonth()+1,d.getDate(),\n d.getHours(),d.getMinutes(),d.getSeconds(),\n wday,0,dst])\n tmp.args[7]=_get_day_of_year(tmp.args)\n return tmp\n \ndef mktime(t):\n if isinstance(t,struct_time):\n  d1=date(t.tm_year,t.tm_mon -1,t.tm_mday,\n  t.tm_hour,t.tm_min,t.tm_sec,0).getTime()\n elif isinstance(t,tuple):\n  d1=date(t[0],t[1]-1,t[2],t[3],t[4],t[5],0).getTime()\n else :\n  raise ValueError(\"Tuple or struct_time argument required\")\n d2=date(0).getTime()\n return (d1 -d2)/1000.\n \ndef monotonic():\n return now()/1000.\n \ndef perf_counter():\n return now()/1000.\n \ndef process_time():\n return now()/1000.\n \ndef time():\n return float(date().getTime()/1000)\n \ndef sleep(secs):\n ''\n\n \n raise NotImplementedError(\"Blocking functions like time.sleep() are not \"\n \"supported in the browser. Use functions in module browser.timer \"\n \"instead.\")\n \ndef strftime(_format,t=None ):\n def ns(t,nb):\n \n  res=str(t)\n  while len(res)<nb:\n   res='0'+res\n  return res\n  \n t=_check_input(t)\n t=_check_struct_time(t)\n \n YY=ns(t[0],4)\n yy=ns(t[0],4)[2:]\n mm=ns(t[1],2)\n dd=ns(t[2],2)\n HH=t[3]\n HH24=ns(HH,2)\n HH12=ns(HH %12,2)\n if HH12 ==0:\n  HH12=12\n AMPM='AM'if 0 <=HH <12 else 'PM'\n MM=ns(t[4],2)\n SS=ns(t[5],2)\n DoY=ns(t[7],3)\n w=t[6]+1 if t[6]<6 else 0\n W=ns(_get_week_of_year(t),2)\n \n abb_weekdays=['Sun','Mon','Tue','Wed','Thu','Fri','Sat']\n full_weekdays=['Sunday','Monday','Tuesday','Wednesday',\n 'Thursday','Friday','Saturday']\n abb_months=['Jan','Feb','Mar','Apr','May','Jun',\n 'Jul','Aug','Sep','Oct','Nov','Dec']\n full_months=['January','February','March','April','May','June',\n 'July','August','September','October','November','December']\n \n res=_format\n if __BRYTHON__.locale ==\"C\":\n  res=res.replace(\"%c\",abb_weekdays[w]+' '+abb_months[int(mm)-1]+\n  ' '+dd+' '+HH24+':'+MM+':'+SS+' '+YY)\n  res=res.replace(\"%x\",mm+'/'+dd+'/'+yy)\n  res=res.replace(\"%X\",HH24+':'+MM+':'+SS)\n else :\n  formatter=_locale._date_format\n  c_format=formatter(\"x\")+\" \"+formatter(\"X\")\n  res=res.replace(\"%c\",c_format)\n  x_format=formatter(\"x\")\n  res=res.replace(\"%x\",x_format)\n  X_format=formatter(\"X\")\n  res=res.replace(\"%X\",X_format)\n  \n res=res.replace(\"%H\",HH24)\n res=res.replace(\"%I\",HH12)\n res=res.replace(\"%i\",HH12.lstrip(\"0\"))\n res=res.replace(\"%p\",AMPM)\n res=res.replace(\"%M\",MM)\n res=res.replace(\"%S\",SS)\n res=res.replace(\"%Y\",YY)\n res=res.replace(\"%y\",yy)\n res=res.replace(\"%m\",mm)\n res=res.replace(\"%d\",dd)\n res=res.replace(\"%a\",abb_weekdays[w])\n res=res.replace(\"%A\",full_weekdays[w])\n res=res.replace(\"%b\",abb_months[int(mm)-1])\n res=res.replace(\"%B\",full_months[int(mm)-1])\n res=res.replace(\"%j\",DoY)\n res=res.replace(\"%w\",str(w))\n res=res.replace(\"%W\",W)\n res=res.replace(\"%%\",'%')\n \n return res\n \nclass struct_time:\n\n def __init__(self,*args,**kw):\n \n  time_tuple=args[0]\n  if len(time_tuple)!=9:\n   raise TypeError(\"time.struct_time() takes a 9-sequence (%s-sequence given)\"%len(args))\n   \n  self.args=time_tuple\n  \n @property\n def tm_year(self):\n  return self.args[0]\n  \n @property\n def tm_mon(self):\n  return self.args[1]\n  \n @property\n def tm_mday(self):\n  return self.args[2]\n  \n @property\n def tm_hour(self):\n  return self.args[3]\n  \n @property\n def tm_min(self):\n  return self.args[4]\n  \n @property\n def tm_sec(self):\n  return self.args[5]\n  \n @property\n def tm_wday(self):\n  return self.args[6]\n  \n @property\n def tm_yday(self):\n  return self.args[7]\n  \n @property\n def tm_isdst(self):\n  return self.args[8]\n  \n def __eq__(self,other):\n  return self.args ==other.args\n  \n def __getitem__(self,i):\n  return self.args[i]\n  \n def __iter__(self):\n  return iter(self.args)\n  \n def __reduce_ex__(self,protocol):\n  return (struct_time,(self.args,{}))\n  \n def __repr__(self):\n  return (\"time.structime(tm_year={}, tm_mon={}, tm_day={}, \"+\\\n  \"tm_hour={}, tm_min={}, tm_sec={}, tm_wday={}, \"+\\\n  \"tm_yday={}, tm_isdst={})\").format(*self.args)\n  \n def __str__(self):\n  return self.__repr__()\n  \ndef to_struct_time(*arg):\n arg=list(arg)\n \n \n ml=[31,28,31,30,31,30,31,31,30,31,30,31]\n if arg[0]%4 ==0:\n  ml[1]+=1\n  \n i=1\n yday=0\n while i <arg[1]:\n  yday +=ml[i -1]\n  i +=1\n yday +=arg[2]\n arg.append(yday)\n arg.append(-1)\n return struct_time(tuple(arg))\n \ndef wait(secs):\n\n pass\n \ndef strptime(string,_format):\n import _strptime\n return _strptime._strptime_datetime(to_struct_time,string,_format)\n \n \n \n_clock_msg=\"\"\"Browser cannot access CPU. See '%s'\"\"\"\ndef _clock_xx(url):\n raise NotImplementedError(_clock_msg %url)\nclock=time\nclock_getres=lambda :_clock_xx(\"https://docs.python.org/3/library/time.html#time.clock_getres\")\nclock_gettime=lambda :_clock_xx(\"https://docs.python.org/3/library/time.html#time.clock_gettime\")\nclock_settime=lambda :_clock_xx(\"https://docs.python.org/3/library/time.html#time.clock_settime\")\nCLOCK_HIGHRES=_clock_msg %\"https://docs.python.org/3/library/time.html#time.CLOCK_HIGHRES\"\nCLOCK_MONOTONIC=_clock_msg %\"https://docs.python.org/3/library/time.html#time.CLOCK_MONOTONIC\"\nCLOCK_MONOTONIC_RAW=_clock_msg %\"https://docs.python.org/3/library/time.html#time.CLOCK_MONOTONIC_RAW\"\nCLOCK_PROCESS_CPUTIME_ID=_clock_msg %\"https://docs.python.org/3/library/time.html#time.CLOCK_PROCESS_CPUTIME_ID\"\nCLOCK_REALTIME=_clock_msg %\"https://docs.python.org/3/library/time.html#time.CLOCK_REALTIME\"\nCLOCK_THREAD_CPUTIME_ID=_clock_msg %\"https://docs.python.org/3/library/time.html#time.CLOCK_THREAD_CPUTIME_ID\"\n\n\ndef get_clock_info(cl):\n from collections import namedtuple\n ClockInfo=namedtuple('ClockInfo',\n ['adjustable','implementation','monotonic','resolution'])\n \n if cl =='monotonic':\n  return ClockInfo(adjustable=False ,\n  implementation='window.performance.now',\n  monotonic=True ,\n  resolution=0.000001)\n elif cl =='perf_counter'or cl =='process_time':\n  return ClockInfo(adjustable=False ,\n  implementation='date.getTime',\n  monotonic=False ,\n  resolution=0.001)\n else :\n  _clock_xx(\"https://docs.python.org/3/library/time.html#time.get_clock_info\")\n  \ndef tzset():\n pass\n", ["_locale", "_strptime", "browser", "collections"]], "traceback": [".py", "''\n\n\n\nimport linecache\nimport sys\n\n__all__=['extract_stack','extract_tb','format_exception',\n'format_exception_only','format_list','format_stack',\n'format_tb','print_exc','format_exc','print_exception',\n'print_last','print_stack','print_tb','clear_frames',\n'FrameSummary','StackSummary','TracebackException',\n'walk_stack','walk_tb']\n\n\n\n\n\ndef print_list(extracted_list,file=None ):\n ''\n \n if file is None :\n  file=sys.stderr\n for item in StackSummary.from_list(extracted_list).format():\n  print(item,file=file,end=\"\")\n  \ndef format_list(extracted_list):\n ''\n\n\n\n\n\n\n\n \n return StackSummary.from_list(extracted_list).format()\n \n \n \n \n \ndef print_tb(tb,limit=None ,file=None ):\n ''\n\n\n\n\n\n \n print_list(extract_tb(tb,limit=limit),file=file)\n \ndef format_tb(tb,limit=None ):\n ''\n return extract_tb(tb,limit=limit).format()\n \ndef extract_tb(tb,limit=None ):\n ''\n\n\n\n\n\n\n\n\n \n return StackSummary.extract(walk_tb(tb),limit=limit)\n \n \n \n \n \n_cause_message=(\n\"\\nThe above exception was the direct cause \"\n\"of the following exception:\\n\\n\")\n\n_context_message=(\n\"\\nDuring handling of the above exception, \"\n\"another exception occurred:\\n\\n\")\n\n\ndef print_exception(etype,value,tb,limit=None ,file=None ,chain=True ):\n ''\n\n\n\n\n\n\n\n\n \n \n \n \n if file is None :\n  file=sys.stderr\n for line in TracebackException(\n type(value),value,tb,limit=limit).format(chain=chain):\n  print(line,file=file,end=\"\")\n  \n  \ndef format_exception(etype,value,tb,limit=None ,chain=True ):\n ''\n\n\n\n\n\n\n \n \n \n \n return list(TracebackException(\n type(value),value,tb,limit=limit).format(chain=chain))\n \n \ndef format_exception_only(etype,value):\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n return list(TracebackException(etype,value,None ).format_exception_only())\n \n \n \n \ndef _format_final_exc_line(etype,value):\n valuestr=_some_str(value)\n if value is None or not valuestr:\n  line=\"%s\\n\"%etype\n else :\n  line=\"%s: %s\\n\"%(etype,valuestr)\n return line\n \ndef _some_str(value):\n try :\n  return str(value)\n except :\n  return '<unprintable %s object>'%type(value).__name__\n  \n  \n  \ndef print_exc(limit=None ,file=None ,chain=True ):\n ''\n print_exception(*sys.exc_info(),limit=limit,file=file,chain=chain)\n \ndef format_exc(limit=None ,chain=True ):\n ''\n return \"\".join(format_exception(*sys.exc_info(),limit=limit,chain=chain))\n \ndef print_last(limit=None ,file=None ,chain=True ):\n ''\n \n if not hasattr(sys,\"last_type\"):\n  raise ValueError(\"no last exception\")\n print_exception(sys.last_type,sys.last_value,sys.last_traceback,\n limit,file,chain)\n \n \n \n \n \ndef print_stack(f=None ,limit=None ,file=None ):\n ''\n\n\n\n\n \n if f is None :\n  f=sys._getframe().f_back\n print_list(extract_stack(f,limit=limit),file=file)\n \n \ndef format_stack(f=None ,limit=None ):\n ''\n if f is None :\n  f=sys._getframe().f_back\n return format_list(extract_stack(f,limit=limit))\n \n \ndef extract_stack(f=None ,limit=None ):\n ''\n\n\n\n\n\n\n \n if f is None :\n  f=sys._getframe().f_back\n stack=StackSummary.extract(walk_stack(f),limit=limit)\n stack.reverse()\n return stack\n \n \ndef clear_frames(tb):\n ''\n while tb is not None :\n  try :\n   tb.tb_frame.clear()\n  except RuntimeError:\n  \n   pass\n  tb=tb.tb_next\n  \n  \nclass FrameSummary:\n ''\n\n\n\n\n\n\n\n\n\n\n \n \n __slots__=('filename','lineno','name','_line','locals')\n \n def __init__(self,filename,lineno,name,*,lookup_line=True ,\n locals=None ,line=None ):\n  ''\n\n\n\n\n\n\n\n  \n  self.filename=filename\n  self.lineno=lineno\n  self.name=name\n  self._line=line\n  if lookup_line:\n   self.line\n  self.locals={k:repr(v)for k,v in locals.items()}if locals else None\n  \n def __eq__(self,other):\n  if isinstance(other,FrameSummary):\n   return (self.filename ==other.filename and\n   self.lineno ==other.lineno and\n   self.name ==other.name and\n   self.locals ==other.locals)\n  if isinstance(other,tuple):\n   return (self.filename,self.lineno,self.name,self.line)==other\n  return NotImplemented\n  \n def __getitem__(self,pos):\n  return (self.filename,self.lineno,self.name,self.line)[pos]\n  \n def __iter__(self):\n  return iter([self.filename,self.lineno,self.name,self.line])\n  \n def __repr__(self):\n  return \"<FrameSummary file {filename}, line {lineno} in {name}>\".format(\n  filename=self.filename,lineno=self.lineno,name=self.name)\n  \n @property\n def line(self):\n  if self._line is None :\n   self._line=linecache.getline(self.filename,self.lineno).strip()\n  return self._line\n  \n  \ndef walk_stack(f):\n ''\n\n\n\n \n if f is None :\n  f=sys._getframe().f_back.f_back\n while f is not None :\n  yield f,f.f_lineno\n  f=f.f_back\n  \n  \ndef walk_tb(tb):\n ''\n\n\n\n \n while tb is not None :\n  yield tb.tb_frame,tb.tb_lineno\n  tb=tb.tb_next\n  \n  \nclass StackSummary(list):\n ''\n \n @classmethod\n def extract(klass,frame_gen,*,limit=None ,lookup_lines=True ,\n capture_locals=False ):\n  ''\n\n\n\n\n\n\n\n\n\n  \n  if limit is None :\n   limit=getattr(sys,'tracebacklimit',None )\n   if limit is not None and limit <0:\n    limit=0\n    \n    \n    \n    \n    \n    \n  result=klass()\n  fnames=set()\n  for f,lineno in frame_gen:\n   co=f.f_code\n   filename=co.co_filename\n   name=co.co_name\n   \n   fnames.add(filename)\n   linecache.lazycache(filename,f.f_globals)\n   \n   if capture_locals:\n    f_locals=f.f_locals\n   else :\n    f_locals=None\n   result.append(FrameSummary(\n   filename,lineno,name,lookup_line=False ,locals=f_locals))\n  for filename in fnames:\n   linecache.checkcache(filename)\n   \n  if lookup_lines:\n   for f in result:\n    f.line\n  return result\n  \n @classmethod\n def from_list(klass,a_list):\n  ''\n\n\n\n  \n  \n  \n  \n  \n  result=StackSummary()\n  for frame in a_list:\n   if isinstance(frame,FrameSummary):\n    result.append(frame)\n   else :\n    filename,lineno,name,line=frame\n    result.append(FrameSummary(filename,lineno,name,line=line))\n  return result\n  \n def format(self):\n  ''\n\n\n\n\n\n\n\n\n\n  \n  result=[]\n  last_file=None\n  last_line=None\n  last_name=None\n  count=0\n  for frame in self:\n   if (last_file is not None and last_file ==frame.filename and\n   last_line is not None and last_line ==frame.lineno and\n   last_name is not None and last_name ==frame.name):\n    count +=1\n   else :\n    if count >3:\n     result.append(f'  [Previous line repeated {count-3} more times]\\n')\n    last_file=frame.filename\n    last_line=frame.lineno\n    last_name=frame.name\n    count=0\n   if count >=3:\n    continue\n   row=[]\n   row.append('  File \"{}\", line {}, in {}\\n'.format(\n   frame.filename,frame.lineno,frame.name))\n   if frame.line:\n    row.append('    {}\\n'.format(frame.line.strip()))\n   if frame.locals:\n    for name,value in sorted(frame.locals.items()):\n     row.append('    {name} = {value}\\n'.format(name=name,value=value))\n   result.append(''.join(row))\n  if count >3:\n   result.append(f'  [Previous line repeated {count-3} more times]\\n')\n  return result\n  \n  \nclass TracebackException:\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n def __init__(self,exc_type,exc_value,exc_traceback,*,limit=None ,\n lookup_lines=True ,capture_locals=False ,_seen=None ):\n \n \n \n \n  if _seen is None :\n   _seen=set()\n  _seen.add(id(exc_value))\n  \n  \n  if (exc_value and exc_value.__cause__ is not None\n  and id(exc_value.__cause__)not in _seen):\n   cause=TracebackException(\n   type(exc_value.__cause__),\n   exc_value.__cause__,\n   exc_value.__cause__.__traceback__,\n   limit=limit,\n   lookup_lines=False ,\n   capture_locals=capture_locals,\n   _seen=_seen)\n  else :\n   cause=None\n  if (exc_value and exc_value.__context__ is not None\n  and id(exc_value.__context__)not in _seen):\n   context=TracebackException(\n   type(exc_value.__context__),\n   exc_value.__context__,\n   exc_value.__context__.__traceback__,\n   limit=limit,\n   lookup_lines=False ,\n   capture_locals=capture_locals,\n   _seen=_seen)\n  else :\n   context=None\n  self.exc_traceback=exc_traceback\n  self.__cause__=cause\n  self.__context__=context\n  self.__suppress_context__=\\\n  exc_value.__suppress_context__ if exc_value else False\n  \n  self.stack=StackSummary.extract(\n  walk_tb(exc_traceback),limit=limit,lookup_lines=lookup_lines,\n  capture_locals=capture_locals)\n  self.exc_type=exc_type\n  \n  \n  self._str=_some_str(exc_value)\n  if exc_type and issubclass(exc_type,SyntaxError):\n  \n   self.filename=exc_value.filename\n   self.lineno=str(exc_value.lineno)\n   self.text=exc_value.text\n   self.offset=exc_value.offset\n   self.msg=exc_value.msg\n  if lookup_lines:\n   self._load_lines()\n   \n @classmethod\n def from_exception(cls,exc,*args,**kwargs):\n  ''\n  return cls(type(exc),exc,exc.__traceback__,*args,**kwargs)\n  \n def _load_lines(self):\n  ''\n  for frame in self.stack:\n   frame.line\n  if self.__context__:\n   self.__context__._load_lines()\n  if self.__cause__:\n   self.__cause__._load_lines()\n   \n def __eq__(self,other):\n  return self.__dict__ ==other.__dict__\n  \n def __str__(self):\n  return self._str\n  \n def format_exception_only(self):\n  ''\n\n\n\n\n\n\n\n\n\n\n  \n  if self.exc_type is None :\n   yield _format_final_exc_line(None ,self._str)\n   return\n   \n  stype=self.exc_type.__qualname__\n  smod=self.exc_type.__module__\n  if smod not in (\"__main__\",\"builtins\"):\n   stype=smod+'.'+stype\n   \n  if not issubclass(self.exc_type,SyntaxError):\n   yield _format_final_exc_line(stype,self._str)\n   return\n   \n   \n  filename=self.filename or \"<string>\"\n  lineno=str(self.lineno)or '?'\n  yield '  File \"{}\", line {}\\n'.format(filename,lineno)\n  \n  badline=self.text\n  offset=self.offset\n  if badline is not None :\n   yield '    {}\\n'.format(badline.strip())\n   if offset is not None :\n    caretspace=badline.rstrip('\\n')\n    offset=min(len(caretspace),offset)-1\n    caretspace=caretspace[:offset].lstrip()\n    \n    caretspace=((c.isspace()and c or ' ')for c in caretspace)\n    yield '    {}^\\n'.format(''.join(caretspace))\n  msg=self.msg or \"<no detail available>\"\n  yield \"{}: {}\\n\".format(stype,msg)\n  \n def format(self,*,chain=True ):\n  ''\n\n\n\n\n\n\n\n\n\n  \n  if chain:\n   if self.__cause__ is not None :\n    yield from self.__cause__.format(chain=chain)\n    yield _cause_message\n   elif (self.__context__ is not None and\n   not self.__suppress_context__):\n    yield from self.__context__.format(chain=chain)\n    yield _context_message\n  if self.exc_traceback is not None :\n   yield 'Traceback (most recent call last):\\n'\n  yield from self.stack.format()\n  yield from self.format_exception_only()\n", ["linecache", "sys"]], "cmu_graphics_bry": [".py", "# pylint: disable= too-few-public-methods, missing-docstring, superfluous-parens, invalid-name, too-many-arguments, broad-except, bare-except, len-as-condition, too-many-instance-attributes\n\nfrom random import random, randrange, choice, seed  # pylint: disable=unused-import\nimport traceback\n\nfrom browser import window  # pylint: disable=import-error\nCMU_GRAPHICS_IMPORT_LINE = (\n    '''from cmu_graphics_bry import %s\ntry:\n    from cmu_graphics_bry import assertEqual\nexcept:\n    pass\n''' % ', '.join([\n    'almostEqual',\n    'angleTo',\n    'app',\n    'Arc',\n    'choice',\n    'Circle',\n    'distance',\n    'fromPythonAngle',\n    'getPointInDir',\n    'gradient',\n    'Group',\n    'Image',\n    'input',\n    'Label',\n    'Line',\n    'makeList',\n    'Oval',\n    'onCheckpointResult',\n    'onSteps',\n    'onKeyHolds',\n    'Polygon',\n    'print',\n    'pythonRound',\n    'random',\n    'randrange',\n    'Rect',\n    'registerGlobals',\n    'RegularPolygon',\n    'rgb',\n    'round',\n    'rounded',\n    'seed',\n    'Star',\n    'toPythonAngle',\n    ]))\nCMU_GRAPHICS_IMPORT_LINE_COUNT = len(CMU_GRAPHICS_IMPORT_LINE.split('\\n')) - 1\n\n\nclass CMUGraphicsAssertion(Exception): pass\n\n\ndef assertEqual(actual, expected):\n    if actual != expected:\n        raise CMUGraphicsAssertion(f'{actual} != {expected}')\n\n\ndef makeList(rows, cols, value=None):\n    if rows < 0 or cols < 0:\n        raise Exception('Both rows and cols must be >= 0')\n    return [[value for _ in range(cols)] for _ in range(rows)]\n\n\ndef compilePyCode(code):\n    return window.__BRYTHON__.python_to_js(\n        CMU_GRAPHICS_IMPORT_LINE\n        + code\n        + \"\\n\\n\" + \"registerGlobals(globals())\",\n        \"__main_soln__\")\n\nAPP_STATES = {} # canvasId: AppState\nCURRENT_APP_STATE = None\n\ntry:\n    # slight speedup storing these in globals:\n    jsSet = window.jsSet; jsGet = window.jsGet; jsNew = window.jsNew\n    jsApply = window.jsApply; jsInitShape = window.jsInitShape\n    rgb = window.rgb; distance = window.distance\n    toPythonAngle = window.toPythonAngle; fromPythonAngle = window.fromPythonAngle\n    angleTo = window.angleTo; getPointInDir = window.getPointInDir\nexcept AttributeError as e:\n    # Catch this error so that this module can be imported to call compilePyCode()\n    # without setting up all the JS helper functions.\n    print('Ok (ignoring error setting up js globals):', e)\n\ndef makeTopLevelGroup():\n    return Group()\nwindow.makeTopLevelGroup = makeTopLevelGroup\n\npythonRound = round\n\n\nEPSILON = 10e-7\ndef almostEqual(x, y, epsilon=EPSILON):\n    return abs(x - y) <= epsilon\n\ndef rounded(d):\n    sign = 1 if (d >= 0) else -1\n    d = abs(d)\n    n = int(d)\n    if (d - n >= 0.5): n += 1\n    return sign * n\n\ndef round(*args):\n    raise Exception(\"Use our rounded(n) instead of Python 3's round(n)\\n\"\n                    \"  Python 3's round(n) does not work as one might expect!\\n\"\n                    \"  If you still want Python 3's round, use pythonRound\")\n\ndef input(*args, **kwargs):\n    raise Exception(\"Sorry, you cannot use Python's input function in CMU CS Academy\")\n\ndef gradient(*colors, start=None):\n    return window.gradient(colors, 'center' if start is None else start)\n\nclass Shape(object):\n    def __init__(self, clsName, argNames, args, kwargs):\n        self._shape = jsInitShape(clsName, argNames, args, kwargs)\n        self._shape.brythonShape = self\n\n    def __setattr__(self, attr, val):\n        if (attr[0] == '_'):\n            self.__dict__[attr] = val\n        else:\n            jsSet(self._shape, attr, val)\n        return val\n\n    def __getattr__(self, attr):\n        return jsGet(self._shape, attr)\n\n    def __repr__(self): return self._toString()\n\nclass Rect(Shape):\n    def __init__(self, *args, **kwargs):\n        super().__init__('Rect', ['left', 'top', 'width', 'height'], args, kwargs)\n\nclass Image(Shape):\n    def __init__(self, *args, **kwargs):\n        super().__init__('Image', ['url', 'left', 'top'], args, kwargs)\n\nclass Oval(Shape):\n    def __init__(self, *args, **kwargs):\n        super().__init__('Oval', ['centerX', 'centerY', 'width', 'height'], args, kwargs)\n\nclass Circle(Shape):\n    def __init__(self, *args, **kwargs):\n        super().__init__('Circle', ['centerX', 'centerY', 'radius'], args, kwargs)\n\nclass RegularPolygon(Shape):\n    def __init__(self, *args, **kwargs):\n        super().__init__('RegularPolygon', ['centerX', 'centerY', 'radius', 'points'], args, kwargs)\n\nclass Star(Shape):\n    def __init__(self, *args, **kwargs):\n        super().__init__('Star', ['centerX', 'centerY', 'radius', 'points'], args, kwargs)\n\nclass Line(Shape):\n    def __init__(self, *args, **kwargs):\n        super().__init__('Line', ['x1', 'y1', 'x2', 'y2'], args, kwargs)\n\nclass Polygon(Shape):\n    def __init__(self, *args, **kwargs):\n        super().__init__('Polygon', [ 'initialPoints' ], [args], kwargs)\n\nclass Arc(Shape):\n    def __init__(self, *args, **kwargs):\n        super().__init__('Arc', ['centerX', 'centerY', 'width', 'height',\n                                 'startAngle', 'sweepAngle'], args, kwargs)\n\nclass Label(Shape):\n    def __init__(self, *args, **kwargs):\n        super().__init__('Label', ['value', 'centerX', 'centerY'], args, kwargs)\n\nclass Group(Shape):\n    def __init__(self, *args, **kwargs):\n        super().__init__('Group', [ ], [ ], kwargs)\n        for shape in args: self.add(shape)\n\ndef registerGlobals(globalVars):\n    for name in globalVars:\n        CURRENT_APP_STATE.userGlobals[name] = globalVars[name]\n\ndef onSteps(n):\n    for _ in range(n):\n        callUserFn('onStep')\n\ndef onKeyHolds(keys, n):\n    assert isinstance(keys, list), 'keys must be a list'\n    for _ in range(n):\n        callUserFn('onKeyHold', keys)\n\n\ndef print(*args, end=None, sep=None):\n    printLine(*args, end=end, sep=sep)\n\nclass App(object):\n    def __init__(self):\n        self.left = self.top = 0\n        self.centerX = self.centerY = 200\n        self.right = self.width = self.bottom = self.height = 400\n        self._stepsPerSecond = 30\n        self._allKeysDown = set()\n        window.jsSetAppProperty('stopped', True)\n        self.paused = False\n        self.textInputs = []\n\n    def getTextInput(self, promptText=''):\n        if self.textInputs:\n            return self.textInputs.pop(0)\n        return window.jsGetTextInput(promptText)\n\n    def setTextInputs(self, *args):\n        for arg in args:\n            if not isinstance(arg, str):\n                raise Exception('Arguments to setTextInputs must be strings. %r is not a string.' % arg)\n        self.textInputs = list(args)\n\n    def getStepsPerSecond(self):\n        return self._stepsPerSecond\n    def setStepsPerSecond(self, value):\n        self._stepsPerSecond = value\n        stopTimerEvents()\n        startTimerEvents(CURRENT_APP_STATE)\n    stepsPerSecond = property(getStepsPerSecond, setStepsPerSecond)\n\n    def getGroup(self):\n        return window.jsGetAppGroup()\n    def setGroup(self, _):\n        raise Exception('App.group is readonly')\n    group = property(getGroup, setGroup)\n\n    def getPaused(self):\n        return window.jsGetAppProperty('paused')\n    def setPaused(self, value):\n        window.jsSetAppProperty('paused', value)\n        if not self.stopped:\n            window.sendJSEvent('frameworkPaused' if value else 'frameworkUnpaused')\n    paused = property(getPaused, setPaused)\n\n    def getBackground(self):\n        return window.jsGetBackground()\n    def setBackground(self, value):\n        window.jsSetBackground(value)\n    background = property(getBackground, setBackground)\n\n    def getStopped(self):\n        return window.jsGetAppProperty('stopped')\n    def setStopped(self, _):\n        raise Exception('App.stopped is readonly')\n    stopped = property(getStopped, setStopped)\n\n    def getMaxShapeCount(self):\n        return window.jsGetAppProperty('maxShapeCount')\n    def setMaxShapeCount(self, value):\n        return window.jsSetAppProperty('maxShapeCount', value)\n    maxShapeCount = property(getMaxShapeCount, setMaxShapeCount)\n\n    def stop(self):\n        stopCode(notifyIDE=True)\n\n    def step(self):\n        onStepButton()\n\nclass AppState(object):\n    def __init__(self, canvasId):\n        self.canvasId = canvasId\n        self.code = None\n        self.currentTimer = None\n        self.app = App()\n        self.userGlobals = {}\n\nclass Snippet(object):\n    def __init__(self, code, mode):\n        self.code = code\n        self.mode = mode\n\ndef dbprint(*args):\n    window.console.log('py dbprint:', *args)\n\ndef printLine(*args, end=None, sep=None):\n    if end is None:\n        end = '\\n'\n    if sep is None:\n        sep = ' '\n    line = sep.join(map(str, args)) + end\n    window.printToTextArea(line)\n\ndef printException(e, code):\n    args = e.args\n    lineOffset = CMU_GRAPHICS_IMPORT_LINE_COUNT if code.startswith(CMU_GRAPHICS_IMPORT_LINE) else 0\n    if (isinstance(e, SyntaxError)):\n        (desc, module, line, offset, lineCode) = (args[0], args[1], args[2],\n                                                  args[3], args[4])\n        printLine('\\nSyntaxError at line %s: %s' % (line - lineOffset, desc))\n        printLine('  ' + lineCode)\n        printLine('  ' + offset*' ' + '^')\n    else:\n        printLine('\\n%s: %s' % (e, args[0]))\n\ndef printTraceback(tb, code):\n    dbprint('printTraceback:')\n    dbprint(tb)\n    lines = tb.splitlines()\n    errorLine = lines.pop(-1)\n    if errorLine.strip() == '':\n        errorLine = lines.pop(-1)\n    stars = '*****************************'\n    printLine(stars)\n    if (lines[0].startswith('Traceback (most recent call last):')):\n        lines.pop(0)\n        printLine('An error occurred. Here is the stack trace:')\n    hadSourceLines = False\n    allLines = code.splitlines()\n\n    while (lines):\n        try:\n            line = lines.pop(0)\n            if ', in ' in line:\n                line = line[:line.index(', in ')]\n            lineNumberLineParts = line.split()\n            module = lineNumberLineParts[1]\n            lineNumber = int(lineNumberLineParts[-1])\n            lineNumberToShow = lineNumber\n            if code.startswith(CMU_GRAPHICS_IMPORT_LINE):\n                # Adjust the line number to match the code the user typed\n                lineNumberToShow = lineNumber - CMU_GRAPHICS_IMPORT_LINE_COUNT\n            if (lines and lines[0].startswith('    ')):\n                lines.pop(0)\n            if '<string>' in module:\n                codeLine = allLines[lineNumber - 1] if lineNumber <= len(allLines) else ''\n                hadSourceLines = True\n                printLine('  line %d:\\n    %s' % (lineNumberToShow, codeLine))\n        except:\n            pass\n    report = ((not hadSourceLines)\n        or ('CMUGraphicsInternalError' in errorLine)\n        or ('<Javascript' in errorLine))\n    if not hadSourceLines:\n        # Check to see if the error is that one of their callbacks has\n        # too few or too many positional arguments\n        for handlerName in ['onStep', 'onMousePress', 'onMouseRelease',\n                            'onMouseDrag', 'onMouseMove', 'onKeyPress', 'onKeyRelease',\n                            'onKeyHold']:\n            if (('%s() takes' % handlerName) in errorLine\n                    or ('%s() missing' % handlerName) in errorLine):\n                report = False\n    if report:\n        dbprint('Reporting error to Rollbar')\n        window.sendJSEvent('rollbarError', {\n            'message': 'Error with no user source',\n            'detail': tb,\n        })\n    # Remove 'cmu_graphics_bry.' from the name of any exceptions being printed\n    errorLine = errorLine.replace('cmu_graphics_bry.', '')\n    printLine(errorLine)\n    printLine(stars)\n\ndef onError(tb=None, exception=None, stopOnError=True, code=None):\n    if code is None:\n        code = CURRENT_APP_STATE.code\n    if code is None:\n        code = ''\n    try:\n        if (exception not in [None, '']):\n            printException(exception, code=code)\n        if (tb != None):\n            printTraceback(tb, code=code)\n        if (stopOnError):\n            stopCode()\n    except:\n        printLine('**** Error in onError()!!! ****')\n        window.sendJSEvent('rollbarError', {\n            'message': 'Error in onError()',\n            'detail': traceback.format_exc(),\n        })\n        traceback.print_exc()\n\ndef execCode1(code, mode, stopOnError, okCallback, errCallback):\n    try:\n        if mode == 'py':\n            code = CMU_GRAPHICS_IMPORT_LINE + code\n            CURRENT_APP_STATE.code = code\n            exec(code, CURRENT_APP_STATE.userGlobals)\n        else:\n            window.eval(code)\n        okCallback()\n        return True\n    except Exception as e:\n        if isinstance(e, SyntaxError):\n            onError(exception=e, stopOnError=stopOnError)\n        else:\n            tbLines = traceback.format_exc()\n            if (mode == 'js'):\n                window.sendJSEvent('rollbarError', {\n                    'message': 'Error executing solution code',\n                    'detail': tbLines,\n                })\n            onError(tb=tbLines, stopOnError=stopOnError)\n        errCallback(e)\n        return False\n\ndef execCode(snippets, stopOnError, okCallback, errCallback):\n    def runSnippets(i):\n        if (i >= len(snippets)):\n            okCallback()\n        else:\n            snippet = snippets[i]\n            execCode1(snippet.code, snippet.mode, stopOnError,\n                      lambda: runSnippets(i+1), errCallback)\n    runSnippets(0)\n\ndef evalOrExecCode(code, stopOnError, okCallback, errCallback):\n    if 'Polygon' not in CURRENT_APP_STATE.userGlobals:\n        exec(CMU_GRAPHICS_IMPORT_LINE, CURRENT_APP_STATE.userGlobals)\n    try:\n        printLine(repr(eval(code, CURRENT_APP_STATE.userGlobals)))\n        okCallback()\n    except Exception as e:\n        snippets = [Snippet(code, 'py')]\n        if (str(e) == 'eval() argument must be an expression'):\n            execCode(snippets, stopOnError, okCallback, errCallback)\n        else:\n            if (isinstance(e, SyntaxError)):\n                onError(exception=e, stopOnError=stopOnError, code=code)\n            else:\n                tbLines = traceback.format_exc()\n                onError(tb=tbLines, stopOnError=stopOnError, code=code)\n            errCallback(e)\n\ndef onShellInput(event):\n    def okCallback():\n        pass\n    def errCallback(err):\n        pass\n    evalOrExecCode(event.detail.input, False, okCallback, errCallback)\n\ndef makeSafeFn(fn):\n    def safeFn(*args, **kwargs):\n        try:\n            return fn(*args, **kwargs)\n        except Exception as e:\n            tbLines = traceback.format_exc()\n            if (isinstance(e, SyntaxError)):\n                onError(exception=e)\n            else:\n                onError(tb=tbLines)\n    return safeFn\n\ndef callUserFn(fnName, *args):\n    userGlobals = CURRENT_APP_STATE.userGlobals\n    if (fnName in userGlobals):\n        try:\n            userGlobals[fnName](*args)\n        except Exception as e:\n            tbLines = traceback.format_exc()\n            if (isinstance(e, SyntaxError)):\n                onError(exception=e)\n            else:\n                onError(tb=tbLines)\n\ndef resetGlobals():\n    stopTimerEvents()\n    CURRENT_APP_STATE.userGlobals = {}\n    CURRENT_APP_STATE.app = App()\n\ndef runCode(snippets, okCallback, errCallback, shouldResetGlobals=True):\n    if (shouldResetGlobals):\n        window.clearDrawing()\n        resetGlobals()\n        if app.stopped:\n            window.jsSetAppProperty('stopped', False)\n        if app.paused:\n            window.jsSetAppProperty('paused', False)\n    execCode(snippets, True, okCallback, errCallback)\n\ndef stopTimerEvents():\n    if (CURRENT_APP_STATE.currentTimer is not None):\n        window.clearInterval(CURRENT_APP_STATE.currentTimer)\n    CURRENT_APP_STATE.currentTimer = None\n\ndef startTimerEvents(appState):\n    def setIntervalFn():\n        global CURRENT_APP_STATE\n        CURRENT_APP_STATE = appState\n        window.activateDrawing(appState.canvasId)\n        if not CURRENT_APP_STATE.app.paused and not CURRENT_APP_STATE.app.stopped:\n            doStep()\n            window.doUpdate()\n    stopTimerEvents()\n    if (codeHasEventHandlers(['onStep', 'onKeyHold']) and (CURRENT_APP_STATE.app.stepsPerSecond > 0)):\n        CURRENT_APP_STATE.currentTimer = window.setInterval(\n            makeSafeFn(setIntervalFn), 1000/CURRENT_APP_STATE.app.stepsPerSecond)\n\ndef codeHasEventHandlers(handlers):\n    for handler in handlers:\n        if (handler in CURRENT_APP_STATE.userGlobals):\n            return True\n    return False\n\ndef onCompileCode(event):\n    code_to_compile = event.detail.code\n\n    try:\n        compiled_code = compilePyCode(code_to_compile)\n    except:\n        return\n\n    window.sendJSEvent('codeCompiled', {'code': compiled_code})\n\ndef onRunButton(event):\n    snippets = event.detail.snippets\n    shouldResetGlobals = ('resetGlobals' in event.detail) and event.detail.resetGlobals\n    def okCallback():\n        callUserFn('onStart')\n        if (codeHasEventHandlers(['onStep', 'onKeyHold'])):\n            startTimerEvents(CURRENT_APP_STATE)\n    def errCallback(err):\n        stopCode()\n        window.sendJSEvent('frameworkErrored')\n    runCode(snippets, okCallback, errCallback, shouldResetGlobals=shouldResetGlobals)\n\ndef stopCode(msg=None, notifyIDE=True):\n    window.jsSetAppProperty('stopped', True)\n    stopTimerEvents()\n    if (msg != None):\n        printLine(msg)\n    if (notifyIDE):\n        window.sendJSEvent('frameworkStop')\n\ndef doStep():\n    if CURRENT_APP_STATE.app._allKeysDown:\n        callUserFn('onKeyHold', list(CURRENT_APP_STATE.app._allKeysDown))\n    callUserFn('onStep')\n\ndef onStepButton(*args):\n    CURRENT_APP_STATE.app.paused = True\n    doStep()\n\ndef onPauseButton(_):\n    CURRENT_APP_STATE.app.paused = True\n\ndef onUnpauseButton(_):\n    CURRENT_APP_STATE.app.paused = False\n\ndef onStopButton(_):\n    resetGlobals()\n    window.sendJSEvent('onStopButtonComplete')\n\ndef onMouse(event):\n    assert event.detail.subtype in ['onMousePress', 'onMouseDrag', 'onMouseMove', 'onMouseRelease']\n    if CURRENT_APP_STATE.app.paused and event.detail.subtype == 'onMouseMove':\n        return\n    if CURRENT_APP_STATE.app.stopped:\n        return\n    callUserFn(event.detail.subtype, event.detail.x, event.detail.y)\n\ndef onKey(event):\n    assert event.detail.subtype in ['onKeyPress', 'onKeyRelease']\n    if CURRENT_APP_STATE.app.stopped:\n        return\n    callUserFn(event.detail.subtype, event.detail.key)\n    if event.detail.subtype == 'onKeyPress':\n        CURRENT_APP_STATE.app._allKeysDown.add(event.detail.key)\n    else:\n        CURRENT_APP_STATE.app._allKeysDown -= {event.detail.key.upper(), event.detail.key.lower()}\n\ndef onCheckpointResult(ok):\n    window.sendJSEvent('checkpointResult', {'ok': ok})\n\nEVENT_TO_HANDLER = {\n    'compileCode': onCompileCode,\n    'brythonPause': onPauseButton,\n    'brythonRunCode': onRunButton,\n    'brythonShellInput': onShellInput,\n    'brythonStep': onStepButton,\n    'brythonStop': onStopButton,\n    'brythonUnpause': onUnpauseButton,\n    'onKey': onKey,\n    'onMouse': onMouse,\n}\n\ndef makeEventHandlerFn(fn):\n    safeFn = makeSafeFn(fn)\n    def eventHandlerFn(event):\n        return safeFn(event)\n    return eventHandlerFn\n\nfor eventName in EVENT_TO_HANDLER:\n    EVENT_TO_HANDLER[eventName] = makeEventHandlerFn(EVENT_TO_HANDLER[eventName])\n\ndef handleMessage(msg):\n    global CURRENT_APP_STATE\n    if msg.type not in EVENT_TO_HANDLER:\n        print('ignoring event type %s' % msg.type)\n    else:\n        canvasId = msg.detail.canvasId\n        CURRENT_APP_STATE = APP_STATES.get(canvasId)\n        if CURRENT_APP_STATE is None:\n            CURRENT_APP_STATE = APP_STATES[canvasId] = AppState(canvasId)\n        EVENT_TO_HANDLER[msg.type](msg)\n\n\nclass AppWrapper(object):\n    def __getattr__(self, attr):\n        return getattr(CURRENT_APP_STATE.app, attr)\n\n    def __setattr__(self, attr, value):\n        setattr(CURRENT_APP_STATE.app, attr, value)\n\napp = AppWrapper()\n\n###############################\n## Exports to JS\n###############################\n\nwindow.handleMessage = handleMessage\n", ["browser", "browser.window", "random", "random.choice", "random.random", "random.randrange", "random.seed", "traceback"]]}
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.opentype={})}(this,function(E){"use strict";var e,t;String.prototype.codePointAt||(e=function(){try{var e={},t=Object.defineProperty,r=t(e,e,e)&&t}catch(e){}return r}(),t=function(e){if(null==this)throw TypeError();var t=String(this),r=t.length,a=e?Number(e):0;if(a!=a&&(a=0),!(a<0||r<=a)){var n,o=t.charCodeAt(a);return 55296<=o&&o<=56319&&a+1<r&&56320<=(n=t.charCodeAt(a+1))&&n<=57343?1024*(o-55296)+n-56320+65536:o}},e?e(String.prototype,"codePointAt",{value:t,configurable:!0,writable:!0}):String.prototype.codePointAt=t);var l=0,o=-3;function r(){this.table=new Uint16Array(16),this.trans=new Uint16Array(288)}function s(e,t){this.source=e,this.sourceIndex=0,this.tag=0,this.bitcount=0,this.dest=t,this.destLen=0,this.ltree=new r,this.dtree=new r}var i=new r,u=new r,p=new Uint8Array(30),c=new Uint16Array(30),h=new Uint8Array(30),f=new Uint16Array(30),d=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),v=new r,g=new Uint8Array(320);function a(e,t,r,a){var n,o;for(n=0;n<r;++n)e[n]=0;for(n=0;n<30-r;++n)e[n+r]=n/r|0;for(o=a,n=0;n<30;++n)t[n]=o,o+=1<<e[n]}var m=new Uint16Array(16);function y(e,t,r,a){var n,o;for(n=0;n<16;++n)e.table[n]=0;for(n=0;n<a;++n)e.table[t[r+n]]++;for(n=o=e.table[0]=0;n<16;++n)m[n]=o,o+=e.table[n];for(n=0;n<a;++n)t[r+n]&&(e.trans[m[t[r+n]]++]=n)}function b(e){e.bitcount--||(e.tag=e.source[e.sourceIndex++],e.bitcount=7);var t=1&e.tag;return e.tag>>>=1,t}function S(e,t,r){if(!t)return r;for(;e.bitcount<24;)e.tag|=e.source[e.sourceIndex++]<<e.bitcount,e.bitcount+=8;var a=e.tag&65535>>>16-t;return e.tag>>>=t,e.bitcount-=t,a+r}function x(e,t){for(;e.bitcount<24;)e.tag|=e.source[e.sourceIndex++]<<e.bitcount,e.bitcount+=8;for(var r=0,a=0,n=0,o=e.tag;a=2*a+(1&o),o>>>=1,++n,r+=t.table[n],0<=(a-=t.table[n]););return e.tag=o,e.bitcount-=n,t.trans[r+a]}function U(e,t,r){var a,n,o,s,i,l;for(a=S(e,5,257),n=S(e,5,1),o=S(e,4,4),s=0;s<19;++s)g[s]=0;for(s=0;s<o;++s){var u=S(e,3,0);g[d[s]]=u}for(y(v,g,0,19),i=0;i<a+n;){var p=x(e,v);switch(p){case 16:var c=g[i-1];for(l=S(e,2,3);l;--l)g[i++]=c;break;case 17:for(l=S(e,3,3);l;--l)g[i++]=0;break;case 18:for(l=S(e,7,11);l;--l)g[i++]=0;break;default:g[i++]=p}}y(t,g,0,a),y(r,g,a,n)}function T(e,t,r){for(;;){var a,n,o,s,i=x(e,t);if(256===i)return l;if(i<256)e.dest[e.destLen++]=i;else for(a=S(e,p[i-=257],c[i]),n=x(e,r),s=o=e.destLen-S(e,h[n],f[n]);s<o+a;++s)e.dest[e.destLen++]=e.dest[s]}}function O(e){for(var t,r;8<e.bitcount;)e.sourceIndex--,e.bitcount-=8;if((t=256*(t=e.source[e.sourceIndex+1])+e.source[e.sourceIndex])!==(65535&~(256*e.source[e.sourceIndex+3]+e.source[e.sourceIndex+2])))return o;for(e.sourceIndex+=4,r=t;r;--r)e.dest[e.destLen++]=e.source[e.sourceIndex++];return e.bitcount=0,l}!function(e,t){var r;for(r=0;r<7;++r)e.table[r]=0;for(e.table[7]=24,e.table[8]=152,e.table[9]=112,r=0;r<24;++r)e.trans[r]=256+r;for(r=0;r<144;++r)e.trans[24+r]=r;for(r=0;r<8;++r)e.trans[168+r]=280+r;for(r=0;r<112;++r)e.trans[176+r]=144+r;for(r=0;r<5;++r)t.table[r]=0;for(t.table[5]=32,r=0;r<32;++r)t.trans[r]=r}(i,u),a(p,c,4,3),a(h,f,2,1),p[28]=0,c[28]=258;var n=function(e,t){var r,a,n=new s(e,t);do{switch(r=b(n),S(n,2,0)){case 0:a=O(n);break;case 1:a=T(n,i,u);break;case 2:U(n,n.ltree,n.dtree),a=T(n,n.ltree,n.dtree);break;default:a=o}if(a!==l)throw new Error("Data error")}while(!r);return n.destLen<n.dest.length?"function"==typeof n.dest.slice?n.dest.slice(0,n.destLen):n.dest.subarray(0,n.destLen):n.dest};function k(e,t,r,a,n){return Math.pow(1-n,3)*e+3*Math.pow(1-n,2)*n*t+3*(1-n)*Math.pow(n,2)*r+Math.pow(n,3)*a}function R(){this.x1=Number.NaN,this.y1=Number.NaN,this.x2=Number.NaN,this.y2=Number.NaN}function M(){this.commands=[],this.fill="black",this.stroke=null,this.strokeWidth=1}function L(e){throw new Error(e)}function D(e,t){e||L(t)}R.prototype.isEmpty=function(){return isNaN(this.x1)||isNaN(this.y1)||isNaN(this.x2)||isNaN(this.y2)},R.prototype.addPoint=function(e,t){"number"==typeof e&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=e,this.x2=e),e<this.x1&&(this.x1=e),e>this.x2&&(this.x2=e)),"number"==typeof t&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=t,this.y2=t),t<this.y1&&(this.y1=t),t>this.y2&&(this.y2=t))},R.prototype.addX=function(e){this.addPoint(e,null)},R.prototype.addY=function(e){this.addPoint(null,e)},R.prototype.addBezier=function(e,t,r,a,n,o,s,i){var l=this,u=[e,t],p=[r,a],c=[n,o],h=[s,i];this.addPoint(e,t),this.addPoint(s,i);for(var f=0;f<=1;f++){var d=6*u[f]-12*p[f]+6*c[f],v=-3*u[f]+9*p[f]-9*c[f]+3*h[f],g=3*p[f]-3*u[f];if(0!==v){var m=Math.pow(d,2)-4*g*v;if(!(m<0)){var y=(-d+Math.sqrt(m))/(2*v);0<y&&y<1&&(0===f&&l.addX(k(u[f],p[f],c[f],h[f],y)),1===f&&l.addY(k(u[f],p[f],c[f],h[f],y)));var b=(-d-Math.sqrt(m))/(2*v);0<b&&b<1&&(0===f&&l.addX(k(u[f],p[f],c[f],h[f],b)),1===f&&l.addY(k(u[f],p[f],c[f],h[f],b)))}}else{if(0===d)continue;var S=-g/d;0<S&&S<1&&(0===f&&l.addX(k(u[f],p[f],c[f],h[f],S)),1===f&&l.addY(k(u[f],p[f],c[f],h[f],S)))}}},R.prototype.addQuad=function(e,t,r,a,n,o){var s=e+2/3*(r-e),i=t+2/3*(a-t),l=s+1/3*(n-e),u=i+1/3*(o-t);this.addBezier(e,t,s,i,l,u,n,o)},M.prototype.moveTo=function(e,t){this.commands.push({type:"M",x:e,y:t})},M.prototype.lineTo=function(e,t){this.commands.push({type:"L",x:e,y:t})},M.prototype.curveTo=M.prototype.bezierCurveTo=function(e,t,r,a,n,o){this.commands.push({type:"C",x1:e,y1:t,x2:r,y2:a,x:n,y:o})},M.prototype.quadTo=M.prototype.quadraticCurveTo=function(e,t,r,a){this.commands.push({type:"Q",x1:e,y1:t,x:r,y:a})},M.prototype.close=M.prototype.closePath=function(){this.commands.push({type:"Z"})},M.prototype.extend=function(e){if(e.commands)e=e.commands;else if(e instanceof R){var t=e;return this.moveTo(t.x1,t.y1),this.lineTo(t.x2,t.y1),this.lineTo(t.x2,t.y2),this.lineTo(t.x1,t.y2),void this.close()}Array.prototype.push.apply(this.commands,e)},M.prototype.getBoundingBox=function(){for(var e=new R,t=0,r=0,a=0,n=0,o=0;o<this.commands.length;o++){var s=this.commands[o];switch(s.type){case"M":e.addPoint(s.x,s.y),t=a=s.x,r=n=s.y;break;case"L":e.addPoint(s.x,s.y),a=s.x,n=s.y;break;case"Q":e.addQuad(a,n,s.x1,s.y1,s.x,s.y),a=s.x,n=s.y;break;case"C":e.addBezier(a,n,s.x1,s.y1,s.x2,s.y2,s.x,s.y),a=s.x,n=s.y;break;case"Z":a=t,n=r;break;default:throw new Error("Unexpected path command "+s.type)}}return e.isEmpty()&&e.addPoint(0,0),e},M.prototype.draw=function(e){e.beginPath();for(var t=0;t<this.commands.length;t+=1){var r=this.commands[t];"M"===r.type?e.moveTo(r.x,r.y):"L"===r.type?e.lineTo(r.x,r.y):"C"===r.type?e.bezierCurveTo(r.x1,r.y1,r.x2,r.y2,r.x,r.y):"Q"===r.type?e.quadraticCurveTo(r.x1,r.y1,r.x,r.y):"Z"===r.type&&e.closePath()}this.fill&&(e.fillStyle=this.fill,e.fill()),this.stroke&&(e.strokeStyle=this.stroke,e.lineWidth=this.strokeWidth,e.stroke())},M.prototype.toPathData=function(o){function e(){for(var e,t=arguments,r="",a=0;a<arguments.length;a+=1){var n=t[a];0<=n&&0<a&&(r+=" "),r+=(e=n,Math.round(e)===e?""+Math.round(e):e.toFixed(o))}return r}o=void 0!==o?o:2;for(var t="",r=0;r<this.commands.length;r+=1){var a=this.commands[r];"M"===a.type?t+="M"+e(a.x,a.y):"L"===a.type?t+="L"+e(a.x,a.y):"C"===a.type?t+="C"+e(a.x1,a.y1,a.x2,a.y2,a.x,a.y):"Q"===a.type?t+="Q"+e(a.x1,a.y1,a.x,a.y):"Z"===a.type&&(t+="Z")}return t},M.prototype.toSVG=function(e){var t='<path d="';return t+=this.toPathData(e),t+='"',this.fill&&"black"!==this.fill&&(null===this.fill?t+=' fill="none"':t+=' fill="'+this.fill+'"'),this.stroke&&(t+=' stroke="'+this.stroke+'" stroke-width="'+this.strokeWidth+'"'),t+="/>"},M.prototype.toDOMElement=function(e){var t=this.toPathData(e),r=document.createElementNS("http://www.w3.org/2000/svg","path");return r.setAttribute("d",t),r};var w={fail:L,argument:D,assert:D},C=2147483648,G={},I={},B={};function N(e){return function(){return e}}I.BYTE=function(e){return w.argument(0<=e&&e<=255,"Byte value should be between 0 and 255."),[e]},B.BYTE=N(1),I.CHAR=function(e){return[e.charCodeAt(0)]},B.CHAR=N(1),I.CHARARRAY=function(e){for(var t=[],r=0;r<e.length;r+=1)t[r]=e.charCodeAt(r);return t},B.CHARARRAY=function(e){return e.length},I.USHORT=function(e){return[e>>8&255,255&e]},B.USHORT=N(2),I.SHORT=function(e){return 32768<=e&&(e=-(65536-e)),[e>>8&255,255&e]},B.SHORT=N(2),I.UINT24=function(e){return[e>>16&255,e>>8&255,255&e]},B.UINT24=N(3),I.ULONG=function(e){return[e>>24&255,e>>16&255,e>>8&255,255&e]},B.ULONG=N(4),I.LONG=function(e){return C<=e&&(e=-(2*C-e)),[e>>24&255,e>>16&255,e>>8&255,255&e]},B.LONG=N(4),I.FIXED=I.ULONG,B.FIXED=B.ULONG,I.FWORD=I.SHORT,B.FWORD=B.SHORT,I.UFWORD=I.USHORT,B.UFWORD=B.USHORT,I.LONGDATETIME=function(e){return[0,0,0,0,e>>24&255,e>>16&255,e>>8&255,255&e]},B.LONGDATETIME=N(8),I.TAG=function(e){return w.argument(4===e.length,"Tag should be exactly 4 ASCII characters."),[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]},B.TAG=N(4),I.Card8=I.BYTE,B.Card8=B.BYTE,I.Card16=I.USHORT,B.Card16=B.USHORT,I.OffSize=I.BYTE,B.OffSize=B.BYTE,I.SID=I.USHORT,B.SID=B.USHORT,I.NUMBER=function(e){return-107<=e&&e<=107?[e+139]:108<=e&&e<=1131?[247+((e-=108)>>8),255&e]:-1131<=e&&e<=-108?[251+((e=-e-108)>>8),255&e]:-32768<=e&&e<=32767?I.NUMBER16(e):I.NUMBER32(e)},B.NUMBER=function(e){return I.NUMBER(e).length},I.NUMBER16=function(e){return[28,e>>8&255,255&e]},B.NUMBER16=N(3),I.NUMBER32=function(e){return[29,e>>24&255,e>>16&255,e>>8&255,255&e]},B.NUMBER32=N(5),I.REAL=function(e){var t=e.toString(),r=/\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(t);if(r){var a=parseFloat("1e"+((r[2]?+r[2]:0)+r[1].length));t=(Math.round(e*a)/a).toString()}for(var n="",o=0,s=t.length;o<s;o+=1){var i=t[o];n+="e"===i?"-"===t[++o]?"c":"b":"."===i?"a":"-"===i?"e":i}for(var l=[30],u=0,p=(n+=1&n.length?"f":"ff").length;u<p;u+=2)l.push(parseInt(n.substr(u,2),16));return l},B.REAL=function(e){return I.REAL(e).length},I.NAME=I.CHARARRAY,B.NAME=B.CHARARRAY,I.STRING=I.CHARARRAY,B.STRING=B.CHARARRAY,G.UTF8=function(e,t,r){for(var a=[],n=r,o=0;o<n;o++,t+=1)a[o]=e.getUint8(t);return String.fromCharCode.apply(null,a)},G.UTF16=function(e,t,r){for(var a=[],n=r/2,o=0;o<n;o++,t+=2)a[o]=e.getUint16(t);return String.fromCharCode.apply(null,a)},I.UTF16=function(e){for(var t=[],r=0;r<e.length;r+=1){var a=e.charCodeAt(r);t[t.length]=a>>8&255,t[t.length]=255&a}return t},B.UTF16=function(e){return 2*e.length};var P={"x-mac-croatian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ","x-mac-cyrillic":"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю","x-mac-gaelic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ","x-mac-greek":"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­","x-mac-icelandic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-inuit":"ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł","x-mac-ce":"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ",macintosh:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-romanian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-turkish":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ"};G.MACSTRING=function(e,t,r,a){var n=P[a];if(void 0!==n){for(var o="",s=0;s<r;s++){var i=e.getUint8(t+s);o+=i<=127?String.fromCharCode(i):n[127&i]}return o}};var A,F="function"==typeof WeakMap&&new WeakMap;function H(e){return-128<=e&&e<=127}function z(e,t,r){for(var a=0,n=e.length;t<n&&a<64&&0===e[t];)++t,++a;return r.push(128|a-1),t}function W(e,t,r){for(var a=0,n=e.length,o=t;o<n&&a<64;){var s=e[o];if(!H(s))break;if(0===s&&o+1<n&&0===e[o+1])break;++o,++a}r.push(a-1);for(var i=t;i<o;++i)r.push(e[i]+256&255);return o}function q(e,t,r){for(var a=0,n=e.length,o=t;o<n&&a<64;){var s=e[o];if(0===s)break;if(H(s)&&o+1<n&&H(e[o+1]))break;++o,++a}r.push(64|a-1);for(var i=t;i<o;++i){var l=e[i];r.push(l+65536>>8&255,l+256&255)}return o}I.MACSTRING=function(e,t){var r=function(e){if(!A)for(var t in A={},P)A[t]=new String(t);var r=A[e];if(void 0!==r){if(F){var a=F.get(r);if(void 0!==a)return a}var n=P[e];if(void 0!==n){for(var o={},s=0;s<n.length;s++)o[n.charCodeAt(s)]=s+128;return F&&F.set(r,o),o}}}(t);if(void 0!==r){for(var a=[],n=0;n<e.length;n++){var o=e.charCodeAt(n);if(128<=o&&void 0===(o=r[o]))return;a[n]=o}return a}},B.MACSTRING=function(e,t){var r=I.MACSTRING(e,t);return void 0!==r?r.length:0},I.VARDELTAS=function(e){for(var t=0,r=[];t<e.length;){var a=e[t];t=0===a?z(e,t,r):-128<=a&&a<=127?W(e,t,r):q(e,t,r)}return r},I.INDEX=function(e){for(var t=1,r=[t],a=[],n=0;n<e.length;n+=1){var o=I.OBJECT(e[n]);Array.prototype.push.apply(a,o),t+=o.length,r.push(t)}if(0===a.length)return[0,0];for(var s=[],i=1+Math.floor(Math.log(t)/Math.log(2))/8|0,l=[void 0,I.BYTE,I.USHORT,I.UINT24,I.ULONG][i],u=0;u<r.length;u+=1){var p=l(r[u]);Array.prototype.push.apply(s,p)}return Array.prototype.concat(I.Card16(e.length),I.OffSize(i),s,a)},B.INDEX=function(e){return I.INDEX(e).length},I.DICT=function(e){for(var t=[],r=Object.keys(e),a=r.length,n=0;n<a;n+=1){var o=parseInt(r[n],0),s=e[o];t=(t=t.concat(I.OPERAND(s.value,s.type))).concat(I.OPERATOR(o))}return t},B.DICT=function(e){return I.DICT(e).length},I.OPERATOR=function(e){return e<1200?[e]:[12,e-1200]},I.OPERAND=function(e,t){var r=[];if(Array.isArray(t))for(var a=0;a<t.length;a+=1)w.argument(e.length===t.length,"Not enough arguments given for type"+t),r=r.concat(I.OPERAND(e[a],t[a]));else if("SID"===t)r=r.concat(I.NUMBER(e));else if("offset"===t)r=r.concat(I.NUMBER32(e));else if("number"===t)r=r.concat(I.NUMBER(e));else{if("real"!==t)throw new Error("Unknown operand type "+t);r=r.concat(I.REAL(e))}return r},I.OP=I.BYTE,B.OP=B.BYTE;var X="function"==typeof WeakMap&&new WeakMap;function _(e,t,r){for(var a=0;a<t.length;a+=1){var n=t[a];this[n.name]=n.value}if(this.tableName=e,this.fields=t,r)for(var o=Object.keys(r),s=0;s<o.length;s+=1){var i=o[s],l=r[i];void 0!==this[i]&&(this[i]=l)}}function V(e,t,r){void 0===r&&(r=t.length);var a=new Array(t.length+1);a[0]={name:e+"Count",type:"USHORT",value:r};for(var n=0;n<t.length;n++)a[n+1]={name:e+n,type:"USHORT",value:t[n]};return a}function Y(e,t,r){var a=t.length,n=new Array(a+1);n[0]={name:e+"Count",type:"USHORT",value:a};for(var o=0;o<a;o++)n[o+1]={name:e+o,type:"TABLE",value:r(t[o],o)};return n}function j(e,t,r){var a=t.length,n=[];n[0]={name:e+"Count",type:"USHORT",value:a};for(var o=0;o<a;o++)n=n.concat(r(t[o],o));return n}function Z(e){1===e.format?_.call(this,"coverageTable",[{name:"coverageFormat",type:"USHORT",value:1}].concat(V("glyph",e.glyphs))):w.assert(!1,"Can't create coverage table format 2 yet.")}function Q(e){_.call(this,"scriptListTable",j("scriptRecord",e,function(e,t){var r=e.script,a=r.defaultLangSys;return w.assert(!!a,"Unable to write GSUB: script "+e.tag+" has no default language system."),[{name:"scriptTag"+t,type:"TAG",value:e.tag},{name:"script"+t,type:"TABLE",value:new _("scriptTable",[{name:"defaultLangSys",type:"TABLE",value:new _("defaultLangSys",[{name:"lookupOrder",type:"USHORT",value:0},{name:"reqFeatureIndex",type:"USHORT",value:a.reqFeatureIndex}].concat(V("featureIndex",a.featureIndexes)))}].concat(j("langSys",r.langSysRecords,function(e,t){var r=e.langSys;return[{name:"langSysTag"+t,type:"TAG",value:e.tag},{name:"langSys"+t,type:"TABLE",value:new _("langSys",[{name:"lookupOrder",type:"USHORT",value:0},{name:"reqFeatureIndex",type:"USHORT",value:r.reqFeatureIndex}].concat(V("featureIndex",r.featureIndexes)))}]})))}]}))}function K(e){_.call(this,"featureListTable",j("featureRecord",e,function(e,t){var r=e.feature;return[{name:"featureTag"+t,type:"TAG",value:e.tag},{name:"feature"+t,type:"TABLE",value:new _("featureTable",[{name:"featureParams",type:"USHORT",value:r.featureParams}].concat(V("lookupListIndex",r.lookupListIndexes)))}]}))}function J(e,r){_.call(this,"lookupListTable",Y("lookup",e,function(e){var t=r[e.lookupType];return w.assert(!!t,"Unable to write GSUB lookup type "+e.lookupType+" tables."),new _("lookupTable",[{name:"lookupType",type:"USHORT",value:e.lookupType},{name:"lookupFlag",type:"USHORT",value:e.lookupFlag}].concat(Y("subtable",e.subtables,t)))}))}I.CHARSTRING=function(e){if(X){var t=X.get(e);if(void 0!==t)return t}for(var r=[],a=e.length,n=0;n<a;n+=1){var o=e[n];r=r.concat(I[o.type](o.value))}return X&&X.set(e,r),r},B.CHARSTRING=function(e){return I.CHARSTRING(e).length},I.OBJECT=function(e){var t=I[e.type];return w.argument(void 0!==t,"No encoding function for type "+e.type),t(e.value)},B.OBJECT=function(e){var t=B[e.type];return w.argument(void 0!==t,"No sizeOf function for type "+e.type),t(e.value)},I.TABLE=function(e){for(var t=[],r=e.fields.length,a=[],n=[],o=0;o<r;o+=1){var s=e.fields[o],i=I[s.type];w.argument(void 0!==i,"No encoding function for field type "+s.type+" ("+s.name+")");var l=e[s.name];void 0===l&&(l=s.value);var u=i(l);"TABLE"===s.type?(n.push(t.length),t=t.concat([0,0]),a.push(u)):t=t.concat(u)}for(var p=0;p<a.length;p+=1){var c=n[p],h=t.length;w.argument(h<65536,"Table "+e.tableName+" too big."),t[c]=h>>8,t[c+1]=255&h,t=t.concat(a[p])}return t},B.TABLE=function(e){for(var t=0,r=e.fields.length,a=0;a<r;a+=1){var n=e.fields[a],o=B[n.type];w.argument(void 0!==o,"No sizeOf function for field type "+n.type+" ("+n.name+")");var s=e[n.name];void 0===s&&(s=n.value),t+=o(s),"TABLE"===n.type&&(t+=2)}return t},I.RECORD=I.TABLE,B.RECORD=B.TABLE,I.LITERAL=function(e){return e},B.LITERAL=function(e){return e.length},_.prototype.encode=function(){return I.TABLE(this)},_.prototype.sizeOf=function(){return B.TABLE(this)};var $={Table:_,Record:_,Coverage:(Z.prototype=Object.create(_.prototype)).constructor=Z,ScriptList:(Q.prototype=Object.create(_.prototype)).constructor=Q,FeatureList:(K.prototype=Object.create(_.prototype)).constructor=K,LookupList:(J.prototype=Object.create(_.prototype)).constructor=J,ushortList:V,tableList:Y,recordList:j};function ee(e,t){return e.getUint8(t)}function te(e,t){return e.getUint16(t,!1)}function re(e,t){return e.getUint32(t,!1)}function ae(e,t){return e.getInt16(t,!1)+e.getUint16(t+2,!1)/65535}var ne={byte:1,uShort:2,short:2,uLong:4,fixed:4,longDateTime:8,tag:4};function oe(e,t){this.data=e,this.offset=t,this.relativeOffset=0}oe.prototype.parseByte=function(){var e=this.data.getUint8(this.offset+this.relativeOffset);return this.relativeOffset+=1,e},oe.prototype.parseChar=function(){var e=this.data.getInt8(this.offset+this.relativeOffset);return this.relativeOffset+=1,e},oe.prototype.parseCard8=oe.prototype.parseByte,oe.prototype.parseCard16=oe.prototype.parseUShort=function(){var e=this.data.getUint16(this.offset+this.relativeOffset);return this.relativeOffset+=2,e},oe.prototype.parseSID=oe.prototype.parseUShort,oe.prototype.parseOffset16=oe.prototype.parseUShort,oe.prototype.parseShort=function(){var e=this.data.getInt16(this.offset+this.relativeOffset);return this.relativeOffset+=2,e},oe.prototype.parseF2Dot14=function(){var e=this.data.getInt16(this.offset+this.relativeOffset)/16384;return this.relativeOffset+=2,e},oe.prototype.parseOffset32=oe.prototype.parseULong=function(){var e=re(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e},oe.prototype.parseFixed=function(){var e=ae(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e},oe.prototype.parseString=function(e){var t=this.data,r=this.offset+this.relativeOffset,a="";this.relativeOffset+=e;for(var n=0;n<e;n++)a+=String.fromCharCode(t.getUint8(r+n));return a},oe.prototype.parseTag=function(){return this.parseString(4)},oe.prototype.parseLongDateTime=function(){var e=re(this.data,this.offset+this.relativeOffset+4);return e-=2082844800,this.relativeOffset+=8,e},oe.prototype.parseVersion=function(e){var t=te(this.data,this.offset+this.relativeOffset),r=te(this.data,this.offset+this.relativeOffset+2);return this.relativeOffset+=4,void 0===e&&(e=4096),t+r/e/10},oe.prototype.skip=function(e,t){void 0===t&&(t=1),this.relativeOffset+=ne[e]*t},oe.prototype.parseULongList=function(e){void 0===e&&(e=this.parseULong());for(var t=new Array(e),r=this.data,a=this.offset+this.relativeOffset,n=0;n<e;n++)t[n]=r.getUint32(a),a+=4;return this.relativeOffset+=4*e,t},oe.prototype.parseOffset16List=oe.prototype.parseUShortList=function(e){void 0===e&&(e=this.parseUShort());for(var t=new Array(e),r=this.data,a=this.offset+this.relativeOffset,n=0;n<e;n++)t[n]=r.getUint16(a),a+=2;return this.relativeOffset+=2*e,t},oe.prototype.parseShortList=function(e){for(var t=new Array(e),r=this.data,a=this.offset+this.relativeOffset,n=0;n<e;n++)t[n]=r.getInt16(a),a+=2;return this.relativeOffset+=2*e,t},oe.prototype.parseByteList=function(e){for(var t=new Array(e),r=this.data,a=this.offset+this.relativeOffset,n=0;n<e;n++)t[n]=r.getUint8(a++);return this.relativeOffset+=e,t},oe.prototype.parseList=function(e,t){t||(t=e,e=this.parseUShort());for(var r=new Array(e),a=0;a<e;a++)r[a]=t.call(this);return r},oe.prototype.parseList32=function(e,t){t||(t=e,e=this.parseULong());for(var r=new Array(e),a=0;a<e;a++)r[a]=t.call(this);return r},oe.prototype.parseRecordList=function(e,t){t||(t=e,e=this.parseUShort());for(var r=new Array(e),a=Object.keys(t),n=0;n<e;n++){for(var o={},s=0;s<a.length;s++){var i=a[s],l=t[i];o[i]=l.call(this)}r[n]=o}return r},oe.prototype.parseRecordList32=function(e,t){t||(t=e,e=this.parseULong());for(var r=new Array(e),a=Object.keys(t),n=0;n<e;n++){for(var o={},s=0;s<a.length;s++){var i=a[s],l=t[i];o[i]=l.call(this)}r[n]=o}return r},oe.prototype.parseStruct=function(e){if("function"==typeof e)return e.call(this);for(var t=Object.keys(e),r={},a=0;a<t.length;a++){var n=t[a],o=e[n];r[n]=o.call(this)}return r},oe.prototype.parseValueRecord=function(e){if(void 0===e&&(e=this.parseUShort()),0!==e){var t={};return 1&e&&(t.xPlacement=this.parseShort()),2&e&&(t.yPlacement=this.parseShort()),4&e&&(t.xAdvance=this.parseShort()),8&e&&(t.yAdvance=this.parseShort()),16&e&&(t.xPlaDevice=void 0,this.parseShort()),32&e&&(t.yPlaDevice=void 0,this.parseShort()),64&e&&(t.xAdvDevice=void 0,this.parseShort()),128&e&&(t.yAdvDevice=void 0,this.parseShort()),t}},oe.prototype.parseValueRecordList=function(){for(var e=this.parseUShort(),t=this.parseUShort(),r=new Array(t),a=0;a<t;a++)r[a]=this.parseValueRecord(e);return r},oe.prototype.parsePointer=function(e){var t=this.parseOffset16();if(0<t)return new oe(this.data,this.offset+t).parseStruct(e)},oe.prototype.parsePointer32=function(e){var t=this.parseOffset32();if(0<t)return new oe(this.data,this.offset+t).parseStruct(e)},oe.prototype.parseListOfLists=function(e){for(var t=this,r=this.parseOffset16List(),a=r.length,n=this.relativeOffset,o=new Array(a),s=0;s<a;s++){var i=r[s];if(0!==i)if(t.relativeOffset=i,e){for(var l=t.parseOffset16List(),u=new Array(l.length),p=0;p<l.length;p++)t.relativeOffset=i+l[p],u[p]=e.call(t);o[s]=u}else o[s]=t.parseUShortList();else o[s]=void 0}return this.relativeOffset=n,o},oe.prototype.parseCoverage=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort(),r=this.parseUShort();if(1===t)return{format:1,glyphs:this.parseUShortList(r)};if(2===t){for(var a=new Array(r),n=0;n<r;n++)a[n]={start:this.parseUShort(),end:this.parseUShort(),index:this.parseUShort()};return{format:2,ranges:a}}throw new Error("0x"+e.toString(16)+": Coverage format must be 1 or 2.")},oe.prototype.parseClassDef=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();if(1===t)return{format:1,startGlyph:this.parseUShort(),classes:this.parseUShortList()};if(2===t)return{format:2,ranges:this.parseRecordList({start:oe.uShort,end:oe.uShort,classId:oe.uShort})};throw new Error("0x"+e.toString(16)+": ClassDef format must be 1 or 2.")},oe.list=function(e,t){return function(){return this.parseList(e,t)}},oe.list32=function(e,t){return function(){return this.parseList32(e,t)}},oe.recordList=function(e,t){return function(){return this.parseRecordList(e,t)}},oe.recordList32=function(e,t){return function(){return this.parseRecordList32(e,t)}},oe.pointer=function(e){return function(){return this.parsePointer(e)}},oe.pointer32=function(e){return function(){return this.parsePointer32(e)}},oe.tag=oe.prototype.parseTag,oe.byte=oe.prototype.parseByte,oe.uShort=oe.offset16=oe.prototype.parseUShort,oe.uShortList=oe.prototype.parseUShortList,oe.uLong=oe.offset32=oe.prototype.parseULong,oe.uLongList=oe.prototype.parseULongList,oe.struct=oe.prototype.parseStruct,oe.coverage=oe.prototype.parseCoverage,oe.classDef=oe.prototype.parseClassDef;var se={reserved:oe.uShort,reqFeatureIndex:oe.uShort,featureIndexes:oe.uShortList};oe.prototype.parseScriptList=function(){return this.parsePointer(oe.recordList({tag:oe.tag,script:oe.pointer({defaultLangSys:oe.pointer(se),langSysRecords:oe.recordList({tag:oe.tag,langSys:oe.pointer(se)})})}))||[]},oe.prototype.parseFeatureList=function(){return this.parsePointer(oe.recordList({tag:oe.tag,feature:oe.pointer({featureParams:oe.offset16,lookupListIndexes:oe.uShortList})}))||[]},oe.prototype.parseLookupList=function(a){return this.parsePointer(oe.list(oe.pointer(function(){var e=this.parseUShort();w.argument(1<=e&&e<=9,"GPOS/GSUB lookup type "+e+" unknown.");var t=this.parseUShort(),r=16&t;return{lookupType:e,lookupFlag:t,subtables:this.parseList(oe.pointer(a[e])),markFilteringSet:r?this.parseUShort():void 0}})))||[]},oe.prototype.parseFeatureVariationsList=function(){return this.parsePointer32(function(){var e=this.parseUShort(),t=this.parseUShort();return w.argument(1===e&&t<1,"GPOS/GSUB feature variations table unknown."),this.parseRecordList32({conditionSetOffset:oe.offset32,featureTableSubstitutionOffset:oe.offset32})})||[]};var ie={getByte:ee,getCard8:ee,getUShort:te,getCard16:te,getShort:function(e,t){return e.getInt16(t,!1)},getULong:re,getFixed:ae,getTag:function(e,t){for(var r="",a=t;a<t+4;a+=1)r+=String.fromCharCode(e.getInt8(a));return r},getOffset:function(e,t,r){for(var a=0,n=0;n<r;n+=1)a<<=8,a+=e.getUint8(t+n);return a},getBytes:function(e,t,r){for(var a=[],n=t;n<r;n+=1)a.push(e.getUint8(n));return a},bytesToString:function(e){for(var t="",r=0;r<e.length;r+=1)t+=String.fromCharCode(e[r]);return t},Parser:oe};var le={parse:function(e,t){var r={};r.version=ie.getUShort(e,t),w.argument(0===r.version,"cmap table version should be 0."),r.numTables=ie.getUShort(e,t+2);for(var a=-1,n=r.numTables-1;0<=n;n-=1){var o=ie.getUShort(e,t+4+8*n),s=ie.getUShort(e,t+4+8*n+2);if(3===o&&(0===s||1===s||10===s)||0===o&&(0===s||1===s||2===s||3===s||4===s)){a=ie.getULong(e,t+4+8*n+4);break}}if(-1===a)throw new Error("No valid cmap sub-tables found.");var i=new ie.Parser(e,t+a);if(r.format=i.parseUShort(),12===r.format)!function(e,t){var r;t.parseUShort(),e.length=t.parseULong(),e.language=t.parseULong(),e.groupCount=r=t.parseULong(),e.glyphIndexMap={};for(var a=0;a<r;a+=1)for(var n=t.parseULong(),o=t.parseULong(),s=t.parseULong(),i=n;i<=o;i+=1)e.glyphIndexMap[i]=s,s++}(r,i);else{if(4!==r.format)throw new Error("Only format 4 and 12 cmap tables are supported (found format "+r.format+").");!function(e,t,r,a,n){var o;e.length=t.parseUShort(),e.language=t.parseUShort(),e.segCount=o=t.parseUShort()>>1,t.skip("uShort",3),e.glyphIndexMap={};for(var s=new ie.Parser(r,a+n+14),i=new ie.Parser(r,a+n+16+2*o),l=new ie.Parser(r,a+n+16+4*o),u=new ie.Parser(r,a+n+16+6*o),p=a+n+16+8*o,c=0;c<o-1;c+=1)for(var h=void 0,f=s.parseUShort(),d=i.parseUShort(),v=l.parseShort(),g=u.parseUShort(),m=d;m<=f;m+=1)0!==g?(p=u.offset+u.relativeOffset-2,p+=g,p+=2*(m-d),0!==(h=ie.getUShort(r,p))&&(h=h+v&65535)):h=m+v&65535,e.glyphIndexMap[m]=h}(r,i,e,t,a)}return r},make:function(e){var t,r=!0;for(t=e.length-1;0<t;t-=1)if(65535<e.get(t).unicode){console.log("Adding CMAP format 12 (needed!)"),r=!1;break}var a=[{name:"version",type:"USHORT",value:0},{name:"numTables",type:"USHORT",value:r?1:2},{name:"platformID",type:"USHORT",value:3},{name:"encodingID",type:"USHORT",value:1},{name:"offset",type:"ULONG",value:r?12:20}];r||(a=a.concat([{name:"cmap12PlatformID",type:"USHORT",value:3},{name:"cmap12EncodingID",type:"USHORT",value:10},{name:"cmap12Offset",type:"ULONG",value:0}])),a=a.concat([{name:"format",type:"USHORT",value:4},{name:"cmap4Length",type:"USHORT",value:0},{name:"language",type:"USHORT",value:0},{name:"segCountX2",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);var n,o,s,i=new $.Table("cmap",a);for(i.segments=[],t=0;t<e.length;t+=1){for(var l=e.get(t),u=0;u<l.unicodes.length;u+=1)n=i,o=l.unicodes[u],s=t,n.segments.push({end:o,start:o,delta:-(o-s),offset:0,glyphIndex:s});i.segments=i.segments.sort(function(e,t){return e.start-t.start})}i.segments.push({end:65535,start:65535,delta:1,offset:0});var p=i.segments.length,c=0,h=[],f=[],d=[],v=[],g=[],m=[];for(t=0;t<p;t+=1){var y=i.segments[t];y.end<=65535&&y.start<=65535?(h=h.concat({name:"end_"+t,type:"USHORT",value:y.end}),f=f.concat({name:"start_"+t,type:"USHORT",value:y.start}),d=d.concat({name:"idDelta_"+t,type:"SHORT",value:y.delta}),v=v.concat({name:"idRangeOffset_"+t,type:"USHORT",value:y.offset}),void 0!==y.glyphId&&(g=g.concat({name:"glyph_"+t,type:"USHORT",value:y.glyphId}))):c+=1,r||void 0===y.glyphIndex||(m=(m=(m=m.concat({name:"cmap12Start_"+t,type:"ULONG",value:y.start})).concat({name:"cmap12End_"+t,type:"ULONG",value:y.end})).concat({name:"cmap12Glyph_"+t,type:"ULONG",value:y.glyphIndex}))}if(i.segCountX2=2*(p-c),i.searchRange=2*Math.pow(2,Math.floor(Math.log(p-c)/Math.log(2))),i.entrySelector=Math.log(i.searchRange/2)/Math.log(2),i.rangeShift=i.segCountX2-i.searchRange,i.fields=i.fields.concat(h),i.fields.push({name:"reservedPad",type:"USHORT",value:0}),i.fields=i.fields.concat(f),i.fields=i.fields.concat(d),i.fields=i.fields.concat(v),i.fields=i.fields.concat(g),i.cmap4Length=14+2*h.length+2+2*f.length+2*d.length+2*v.length+2*g.length,!r){var b=16+4*m.length;i.cmap12Offset=20+i.cmap4Length,i.fields=i.fields.concat([{name:"cmap12Format",type:"USHORT",value:12},{name:"cmap12Reserved",type:"USHORT",value:0},{name:"cmap12Length",type:"ULONG",value:b},{name:"cmap12Language",type:"ULONG",value:0},{name:"cmap12nGroups",type:"ULONG",value:m.length/3}]),i.fields=i.fields.concat(m)}return i}},ue=[".notdef","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","endash","dagger","daggerdbl","periodcentered","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","questiondown","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","ring","cedilla","hungarumlaut","ogonek","caron","emdash","AE","ordfeminine","Lslash","Oslash","OE","ordmasculine","ae","dotlessi","lslash","oslash","oe","germandbls","onesuperior","logicalnot","mu","trademark","Eth","onehalf","plusminus","Thorn","onequarter","divide","brokenbar","degree","thorn","threequarters","twosuperior","registered","minus","eth","multiply","threesuperior","copyright","Aacute","Acircumflex","Adieresis","Agrave","Aring","Atilde","Ccedilla","Eacute","Ecircumflex","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Ntilde","Oacute","Ocircumflex","Odieresis","Ograve","Otilde","Scaron","Uacute","Ucircumflex","Udieresis","Ugrave","Yacute","Ydieresis","Zcaron","aacute","acircumflex","adieresis","agrave","aring","atilde","ccedilla","eacute","ecircumflex","edieresis","egrave","iacute","icircumflex","idieresis","igrave","ntilde","oacute","ocircumflex","odieresis","ograve","otilde","scaron","uacute","ucircumflex","udieresis","ugrave","yacute","ydieresis","zcaron","exclamsmall","Hungarumlautsmall","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","266 ff","onedotenleader","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","commasuperior","threequartersemdash","periodsuperior","questionsmall","asuperior","bsuperior","centsuperior","dsuperior","esuperior","isuperior","lsuperior","msuperior","nsuperior","osuperior","rsuperior","ssuperior","tsuperior","ff","ffi","ffl","parenleftinferior","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","exclamdownsmall","centoldstyle","Lslashsmall","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","Dotaccentsmall","Macronsmall","figuredash","hypheninferior","Ogoneksmall","Ringsmall","Cedillasmall","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","zerosuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall","001.000","001.001","001.002","001.003","Black","Bold","Book","Light","Medium","Regular","Roman","Semibold"],pe=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","","endash","dagger","daggerdbl","periodcentered","","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","","questiondown","","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","","ring","cedilla","","hungarumlaut","ogonek","caron","emdash","","","","","","","","","","","","","","","","","AE","","ordfeminine","","","","","Lslash","Oslash","OE","ordmasculine","","","","","","ae","","","","dotlessi","","","lslash","oslash","oe","germandbls"],ce=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclamsmall","Hungarumlautsmall","","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","comma","hyphen","period","fraction","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","colon","semicolon","commasuperior","threequartersemdash","periodsuperior","questionsmall","","asuperior","bsuperior","centsuperior","dsuperior","esuperior","","","isuperior","","","lsuperior","msuperior","nsuperior","osuperior","","","rsuperior","ssuperior","tsuperior","","ff","fi","fl","ffi","ffl","parenleftinferior","","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdownsmall","centoldstyle","Lslashsmall","","","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","","Dotaccentsmall","","","Macronsmall","","","figuredash","hypheninferior","","","Ogoneksmall","Ringsmall","Cedillasmall","","","","onequarter","onehalf","threequarters","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","","","zerosuperior","onesuperior","twosuperior","threesuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall"],he=[".notdef",".null","nonmarkingreturn","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quotesingle","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","grave","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","Adieresis","Aring","Ccedilla","Eacute","Ntilde","Odieresis","Udieresis","aacute","agrave","acircumflex","adieresis","atilde","aring","ccedilla","eacute","egrave","ecircumflex","edieresis","iacute","igrave","icircumflex","idieresis","ntilde","oacute","ograve","ocircumflex","odieresis","otilde","uacute","ugrave","ucircumflex","udieresis","dagger","degree","cent","sterling","section","bullet","paragraph","germandbls","registered","copyright","trademark","acute","dieresis","notequal","AE","Oslash","infinity","plusminus","lessequal","greaterequal","yen","mu","partialdiff","summation","product","pi","integral","ordfeminine","ordmasculine","Omega","ae","oslash","questiondown","exclamdown","logicalnot","radical","florin","approxequal","Delta","guillemotleft","guillemotright","ellipsis","nonbreakingspace","Agrave","Atilde","Otilde","OE","oe","endash","emdash","quotedblleft","quotedblright","quoteleft","quoteright","divide","lozenge","ydieresis","Ydieresis","fraction","currency","guilsinglleft","guilsinglright","fi","fl","daggerdbl","periodcentered","quotesinglbase","quotedblbase","perthousand","Acircumflex","Ecircumflex","Aacute","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Oacute","Ocircumflex","apple","Ograve","Uacute","Ucircumflex","Ugrave","dotlessi","circumflex","tilde","macron","breve","dotaccent","ring","cedilla","hungarumlaut","ogonek","caron","Lslash","lslash","Scaron","scaron","Zcaron","zcaron","brokenbar","Eth","eth","Yacute","yacute","Thorn","thorn","minus","multiply","onesuperior","twosuperior","threesuperior","onehalf","onequarter","threequarters","franc","Gbreve","gbreve","Idotaccent","Scedilla","scedilla","Cacute","cacute","Ccaron","ccaron","dcroat"];function fe(e){this.font=e}function de(e){this.cmap=e}function ve(e,t){this.encoding=e,this.charset=t}function ge(e){switch(e.version){case 1:this.names=he.slice();break;case 2:this.names=new Array(e.numberOfGlyphs);for(var t=0;t<e.numberOfGlyphs;t++)e.glyphNameIndex[t]<he.length?this.names[t]=he[e.glyphNameIndex[t]]:this.names[t]=e.names[e.glyphNameIndex[t]-he.length];break;case 2.5:this.names=new Array(e.numberOfGlyphs);for(var r=0;r<e.numberOfGlyphs;r++)this.names[r]=he[r+e.glyphNameIndex[r]];break;case 3:default:this.names=[]}}fe.prototype.charToGlyphIndex=function(e){var t=e.codePointAt(0),r=this.font.glyphs;if(r)for(var a=0;a<r.length;a+=1)for(var n=r.get(a),o=0;o<n.unicodes.length;o+=1)if(n.unicodes[o]===t)return a;return null},de.prototype.charToGlyphIndex=function(e){return this.cmap.glyphIndexMap[e.codePointAt(0)]||0},ve.prototype.charToGlyphIndex=function(e){var t=e.codePointAt(0),r=this.encoding[t];return this.charset.indexOf(r)},ge.prototype.nameToGlyphIndex=function(e){return this.names.indexOf(e)},ge.prototype.glyphIndexToName=function(e){return this.names[e]};var me={line:function(e,t,r,a,n){e.beginPath(),e.moveTo(t,r),e.lineTo(a,n),e.stroke()}};function ye(e){this.bindConstructorValues(e)}function be(t,e,r){Object.defineProperty(t,e,{get:function(){return t.path,t[r]},set:function(e){t[r]=e},enumerable:!0,configurable:!0})}function Se(e,t){if(this.font=e,this.glyphs={},Array.isArray(t))for(var r=0;r<t.length;r++)this.glyphs[r]=t[r];this.length=t&&t.length||0}ye.prototype.bindConstructorValues=function(e){var t,r;this.index=e.index||0,this.name=e.name||null,this.unicode=e.unicode||void 0,this.unicodes=e.unicodes||void 0!==e.unicode?[e.unicode]:[],e.xMin&&(this.xMin=e.xMin),e.yMin&&(this.yMin=e.yMin),e.xMax&&(this.xMax=e.xMax),e.yMax&&(this.yMax=e.yMax),e.advanceWidth&&(this.advanceWidth=e.advanceWidth),Object.defineProperty(this,"path",(t=e.path,r=t||new M,{configurable:!0,get:function(){return"function"==typeof r&&(r=r()),r},set:function(e){r=e}}))},ye.prototype.addUnicode=function(e){0===this.unicodes.length&&(this.unicode=e),this.unicodes.push(e)},ye.prototype.getBoundingBox=function(){return this.path.getBoundingBox()},ye.prototype.getPath=function(e,t,r,a,n){var o,s;e=void 0!==e?e:0,t=void 0!==t?t:0,r=void 0!==r?r:72,a||(a={});var i=a.xScale,l=a.yScale;if(a.hinting&&n&&n.hinting&&(s=this.path&&n.hinting.exec(this,r)),s)o=n.hinting.getCommands(s),e=Math.round(e),t=Math.round(t),i=l=1;else{o=this.path.commands;var u=1/this.path.unitsPerEm*r;void 0===i&&(i=u),void 0===l&&(l=u)}for(var p=new M,c=0;c<o.length;c+=1){var h=o[c];"M"===h.type?p.moveTo(e+h.x*i,t+-h.y*l):"L"===h.type?p.lineTo(e+h.x*i,t+-h.y*l):"Q"===h.type?p.quadraticCurveTo(e+h.x1*i,t+-h.y1*l,e+h.x*i,t+-h.y*l):"C"===h.type?p.curveTo(e+h.x1*i,t+-h.y1*l,e+h.x2*i,t+-h.y2*l,e+h.x*i,t+-h.y*l):"Z"===h.type&&p.closePath()}return p},ye.prototype.getContours=function(){if(void 0===this.points)return[];for(var e=[],t=[],r=0;r<this.points.length;r+=1){var a=this.points[r];t.push(a),a.lastPointOfContour&&(e.push(t),t=[])}return w.argument(0===t.length,"There are still points left in the current contour."),e},ye.prototype.getMetrics=function(){for(var e=this.path.commands,t=[],r=[],a=0;a<e.length;a+=1){var n=e[a];"Z"!==n.type&&(t.push(n.x),r.push(n.y)),"Q"!==n.type&&"C"!==n.type||(t.push(n.x1),r.push(n.y1)),"C"===n.type&&(t.push(n.x2),r.push(n.y2))}var o={xMin:Math.min.apply(null,t),yMin:Math.min.apply(null,r),xMax:Math.max.apply(null,t),yMax:Math.max.apply(null,r),leftSideBearing:this.leftSideBearing};return isFinite(o.xMin)||(o.xMin=0),isFinite(o.xMax)||(o.xMax=this.advanceWidth),isFinite(o.yMin)||(o.yMin=0),isFinite(o.yMax)||(o.yMax=0),o.rightSideBearing=this.advanceWidth-o.leftSideBearing-(o.xMax-o.xMin),o},ye.prototype.draw=function(e,t,r,a,n){this.getPath(t,r,a,n).draw(e)},ye.prototype.drawPoints=function(s,e,t,r){function a(e,t,r,a){var n=2*Math.PI;s.beginPath();for(var o=0;o<e.length;o+=1)s.moveTo(t+e[o].x*a,r+e[o].y*a),s.arc(t+e[o].x*a,r+e[o].y*a,2,0,n,!1);s.closePath(),s.fill()}e=void 0!==e?e:0,t=void 0!==t?t:0,r=void 0!==r?r:24;for(var n=1/this.path.unitsPerEm*r,o=[],i=[],l=this.path,u=0;u<l.commands.length;u+=1){var p=l.commands[u];void 0!==p.x&&o.push({x:p.x,y:-p.y}),void 0!==p.x1&&i.push({x:p.x1,y:-p.y1}),void 0!==p.x2&&i.push({x:p.x2,y:-p.y2})}s.fillStyle="blue",a(o,e,t,n),s.fillStyle="red",a(i,e,t,n)},ye.prototype.drawMetrics=function(e,t,r,a){var n;t=void 0!==t?t:0,r=void 0!==r?r:0,a=void 0!==a?a:24,n=1/this.path.unitsPerEm*a,e.lineWidth=1,e.strokeStyle="black",me.line(e,t,-1e4,t,1e4),me.line(e,-1e4,r,1e4,r);var o=this.xMin||0,s=this.yMin||0,i=this.xMax||0,l=this.yMax||0,u=this.advanceWidth||0;e.strokeStyle="blue",me.line(e,t+o*n,-1e4,t+o*n,1e4),me.line(e,t+i*n,-1e4,t+i*n,1e4),me.line(e,-1e4,r+-s*n,1e4,r+-s*n),me.line(e,-1e4,r+-l*n,1e4,r+-l*n),e.strokeStyle="green",me.line(e,t+u*n,-1e4,t+u*n,1e4)},Se.prototype.get=function(e){return"function"==typeof this.glyphs[e]&&(this.glyphs[e]=this.glyphs[e]()),this.glyphs[e]},Se.prototype.push=function(e,t){this.glyphs[e]=t,this.length++};var xe={GlyphSet:Se,glyphLoader:function(e,t){return new ye({index:t,font:e})},ttfGlyphLoader:function(r,e,a,n,o,s){return function(){var t=new ye({index:e,font:r});return t.path=function(){a(t,n,o);var e=s(r.glyphs,t);return e.unitsPerEm=r.unitsPerEm,e},be(t,"xMin","_xMin"),be(t,"xMax","_xMax"),be(t,"yMin","_yMin"),be(t,"yMax","_yMax"),t}},cffGlyphLoader:function(r,e,a,n){return function(){var t=new ye({index:e,font:r});return t.path=function(){var e=a(r,t,n);return e.unitsPerEm=r.unitsPerEm,e},t}}};function Ue(e,t){if(e===t)return!0;if(Array.isArray(e)&&Array.isArray(t)){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r+=1)if(!Ue(e[r],t[r]))return!1;return!0}return!1}function Te(e){return e.length<1240?107:e.length<33900?1131:32768}function Oe(e,t,r){var a,n,o=[],s=[],i=ie.getCard16(e,t);if(0!==i){var l=ie.getByte(e,t+2);a=t+(i+1)*l+2;for(var u=t+3,p=0;p<i+1;p+=1)o.push(ie.getOffset(e,u,l)),u+=l;n=a+o[i]}else n=t+2;for(var c=0;c<o.length-1;c+=1){var h=ie.getBytes(e,a+o[c],a+o[c+1]);r&&(h=r(h)),s.push(h)}return{objects:s,startOffset:t,endOffset:n}}function Ee(e,t){if(28===t)return e.parseByte()<<8|e.parseByte();if(29===t)return e.parseByte()<<24|e.parseByte()<<16|e.parseByte()<<8|e.parseByte();if(30===t)return function(e){for(var t="",r=["0","1","2","3","4","5","6","7","8","9",".","E","E-",null,"-"];;){var a=e.parseByte(),n=a>>4,o=15&a;if(15===n)break;if(t+=r[n],15===o)break;t+=r[o]}return parseFloat(t)}(e);if(32<=t&&t<=246)return t-139;if(247<=t&&t<=250)return 256*(t-247)+e.parseByte()+108;if(251<=t&&t<=254)return 256*-(t-251)-e.parseByte()-108;throw new Error("Invalid b0 "+t)}function ke(e,t,r){t=void 0!==t?t:0;var a=new ie.Parser(e,t),n=[],o=[];for(r=void 0!==r?r:e.length;a.relativeOffset<r;){var s=a.parseByte();s<=21?(12===s&&(s=1200+a.parseByte()),n.push([s,o]),o=[]):o.push(Ee(a,s))}return function(e){for(var t={},r=0;r<e.length;r+=1){var a=e[r][0],n=e[r][1],o=void 0;if(o=1===n.length?n[0]:n,t.hasOwnProperty(a)&&!isNaN(t[a]))throw new Error("Object "+t+" already has key "+a);t[a]=o}return t}(n)}function Re(e,t){return t=t<=390?ue[t]:e[t-391]}function Le(e,t,r){for(var a,n={},o=0;o<t.length;o+=1){var s=t[o];if(Array.isArray(s.type)){var i=[];i.length=s.type.length;for(var l=0;l<s.type.length;l++)void 0===(a=void 0!==e[s.op]?e[s.op][l]:void 0)&&(a=void 0!==s.value&&void 0!==s.value[l]?s.value[l]:null),"SID"===s.type[l]&&(a=Re(r,a)),i[l]=a;n[s.name]=i}else void 0===(a=e[s.op])&&(a=void 0!==s.value?s.value:null),"SID"===s.type&&(a=Re(r,a)),n[s.name]=a}return n}var De=[{name:"version",op:0,type:"SID"},{name:"notice",op:1,type:"SID"},{name:"copyright",op:1200,type:"SID"},{name:"fullName",op:2,type:"SID"},{name:"familyName",op:3,type:"SID"},{name:"weight",op:4,type:"SID"},{name:"isFixedPitch",op:1201,type:"number",value:0},{name:"italicAngle",op:1202,type:"number",value:0},{name:"underlinePosition",op:1203,type:"number",value:-100},{name:"underlineThickness",op:1204,type:"number",value:50},{name:"paintType",op:1205,type:"number",value:0},{name:"charstringType",op:1206,type:"number",value:2},{name:"fontMatrix",op:1207,type:["real","real","real","real","real","real"],value:[.001,0,0,.001,0,0]},{name:"uniqueId",op:13,type:"number"},{name:"fontBBox",op:5,type:["number","number","number","number"],value:[0,0,0,0]},{name:"strokeWidth",op:1208,type:"number",value:0},{name:"xuid",op:14,type:[],value:null},{name:"charset",op:15,type:"offset",value:0},{name:"encoding",op:16,type:"offset",value:0},{name:"charStrings",op:17,type:"offset",value:0},{name:"private",op:18,type:["number","offset"],value:[0,0]},{name:"ros",op:1230,type:["SID","SID","number"]},{name:"cidFontVersion",op:1231,type:"number",value:0},{name:"cidFontRevision",op:1232,type:"number",value:0},{name:"cidFontType",op:1233,type:"number",value:0},{name:"cidCount",op:1234,type:"number",value:8720},{name:"uidBase",op:1235,type:"number"},{name:"fdArray",op:1236,type:"offset"},{name:"fdSelect",op:1237,type:"offset"},{name:"fontName",op:1238,type:"SID"}],we=[{name:"subrs",op:19,type:"offset",value:0},{name:"defaultWidthX",op:20,type:"number",value:0},{name:"nominalWidthX",op:21,type:"number",value:0}];function Ce(e,t,r,a){return Le(ke(e,t,r),we,a)}function Ge(e,t,r,a){for(var n,o,s=[],i=0;i<r.length;i+=1){var l=new DataView(new Uint8Array(r[i]).buffer),u=(o=a,Le(ke(n=l,0,n.byteLength),De,o));u._subrs=[],u._subrsBias=0;var p=u.private[0],c=u.private[1];if(0!==p&&0!==c){var h=Ce(e,c+t,p,a);if(u._defaultWidthX=h.defaultWidthX,u._nominalWidthX=h.nominalWidthX,0!==h.subrs){var f=Oe(e,c+h.subrs+t);u._subrs=f.objects,u._subrsBias=Te(u._subrs)}u._privateDict=h}s.push(u)}return s}function Ie(g,m,e){var y,b,S,x,U,T,t,O,E=new M,k=[],R=0,L=!1,D=!1,w=0,C=0;if(g.isCIDFont){var r=g.tables.cff.topDict._fdSelect[m.index],a=g.tables.cff.topDict._fdArray[r];U=a._subrs,T=a._subrsBias,t=a._defaultWidthX,O=a._nominalWidthX}else U=g.tables.cff.topDict._subrs,T=g.tables.cff.topDict._subrsBias,t=g.tables.cff.topDict._defaultWidthX,O=g.tables.cff.topDict._nominalWidthX;var G=t;function I(e,t){D&&E.closePath(),E.moveTo(e,t),D=!0}function B(){k.length%2!=0&&!L&&(G=k.shift()+O),R+=k.length>>1,k.length=0,L=!0}return function e(t){for(var r,a,n,o,s,i,l,u,p,c,h,f,d=0;d<t.length;){var v=t[d];switch(d+=1,v){case 1:case 3:B();break;case 4:1<k.length&&!L&&(G=k.shift()+O,L=!0),C+=k.pop(),I(w,C);break;case 5:for(;0<k.length;)w+=k.shift(),C+=k.shift(),E.lineTo(w,C);break;case 6:for(;0<k.length&&(w+=k.shift(),E.lineTo(w,C),0!==k.length);)C+=k.shift(),E.lineTo(w,C);break;case 7:for(;0<k.length&&(C+=k.shift(),E.lineTo(w,C),0!==k.length);)w+=k.shift(),E.lineTo(w,C);break;case 8:for(;0<k.length;)y=w+k.shift(),b=C+k.shift(),S=y+k.shift(),x=b+k.shift(),w=S+k.shift(),C=x+k.shift(),E.curveTo(y,b,S,x,w,C);break;case 10:s=k.pop()+T,(i=U[s])&&e(i);break;case 11:return;case 12:switch(v=t[d],d+=1,v){case 35:y=w+k.shift(),b=C+k.shift(),S=y+k.shift(),x=b+k.shift(),l=S+k.shift(),u=x+k.shift(),p=l+k.shift(),c=u+k.shift(),h=p+k.shift(),f=c+k.shift(),w=h+k.shift(),C=f+k.shift(),k.shift(),E.curveTo(y,b,S,x,l,u),E.curveTo(p,c,h,f,w,C);break;case 34:y=w+k.shift(),b=C,S=y+k.shift(),x=b+k.shift(),l=S+k.shift(),u=x,p=l+k.shift(),c=x,h=p+k.shift(),f=C,w=h+k.shift(),E.curveTo(y,b,S,x,l,u),E.curveTo(p,c,h,f,w,C);break;case 36:y=w+k.shift(),b=C+k.shift(),S=y+k.shift(),x=b+k.shift(),l=S+k.shift(),u=x,p=l+k.shift(),c=x,h=p+k.shift(),f=c+k.shift(),w=h+k.shift(),E.curveTo(y,b,S,x,l,u),E.curveTo(p,c,h,f,w,C);break;case 37:y=w+k.shift(),b=C+k.shift(),S=y+k.shift(),x=b+k.shift(),l=S+k.shift(),u=x+k.shift(),p=l+k.shift(),c=u+k.shift(),h=p+k.shift(),f=c+k.shift(),Math.abs(h-w)>Math.abs(f-C)?w=h+k.shift():C=f+k.shift(),E.curveTo(y,b,S,x,l,u),E.curveTo(p,c,h,f,w,C);break;default:console.log("Glyph "+m.index+": unknown operator 1200"+v),k.length=0}break;case 14:0<k.length&&!L&&(G=k.shift()+O,L=!0),D&&(E.closePath(),D=!1);break;case 18:B();break;case 19:case 20:B(),d+=R+7>>3;break;case 21:2<k.length&&!L&&(G=k.shift()+O,L=!0),C+=k.pop(),I(w+=k.pop(),C);break;case 22:1<k.length&&!L&&(G=k.shift()+O,L=!0),I(w+=k.pop(),C);break;case 23:B();break;case 24:for(;2<k.length;)y=w+k.shift(),b=C+k.shift(),S=y+k.shift(),x=b+k.shift(),w=S+k.shift(),C=x+k.shift(),E.curveTo(y,b,S,x,w,C);w+=k.shift(),C+=k.shift(),E.lineTo(w,C);break;case 25:for(;6<k.length;)w+=k.shift(),C+=k.shift(),E.lineTo(w,C);y=w+k.shift(),b=C+k.shift(),S=y+k.shift(),x=b+k.shift(),w=S+k.shift(),C=x+k.shift(),E.curveTo(y,b,S,x,w,C);break;case 26:for(k.length%2&&(w+=k.shift());0<k.length;)y=w,b=C+k.shift(),S=y+k.shift(),x=b+k.shift(),w=S,C=x+k.shift(),E.curveTo(y,b,S,x,w,C);break;case 27:for(k.length%2&&(C+=k.shift());0<k.length;)y=w+k.shift(),b=C,S=y+k.shift(),x=b+k.shift(),w=S+k.shift(),C=x,E.curveTo(y,b,S,x,w,C);break;case 28:r=t[d],a=t[d+1],k.push((r<<24|a<<16)>>16),d+=2;break;case 29:s=k.pop()+g.gsubrsBias,(i=g.gsubrs[s])&&e(i);break;case 30:for(;0<k.length&&(y=w,b=C+k.shift(),S=y+k.shift(),x=b+k.shift(),w=S+k.shift(),C=x+(1===k.length?k.shift():0),E.curveTo(y,b,S,x,w,C),0!==k.length);)y=w+k.shift(),b=C,S=y+k.shift(),x=b+k.shift(),C=x+k.shift(),w=S+(1===k.length?k.shift():0),E.curveTo(y,b,S,x,w,C);break;case 31:for(;0<k.length&&(y=w+k.shift(),b=C,S=y+k.shift(),x=b+k.shift(),C=x+k.shift(),w=S+(1===k.length?k.shift():0),E.curveTo(y,b,S,x,w,C),0!==k.length);)y=w,b=C+k.shift(),S=y+k.shift(),x=b+k.shift(),w=S+k.shift(),C=x+(1===k.length?k.shift():0),E.curveTo(y,b,S,x,w,C);break;default:v<32?console.log("Glyph "+m.index+": unknown operator "+v):v<247?k.push(v-139):v<251?(r=t[d],d+=1,k.push(256*(v-247)+r+108)):v<255?(r=t[d],d+=1,k.push(256*-(v-251)-r-108)):(r=t[d],a=t[d+1],n=t[d+2],o=t[d+3],d+=4,k.push((r<<24|a<<16|n<<8|o)/65536))}}}(e),m.advanceWidth=G,E}function Be(e,t){var r,a=ue.indexOf(e);return 0<=a&&(r=a),0<=(a=t.indexOf(e))?r=a+ue.length:(r=ue.length+t.length,t.push(e)),r}function Me(e,t,r){for(var a={},n=0;n<e.length;n+=1){var o=e[n],s=t[o.name];void 0===s||Ue(s,o.value)||("SID"===o.type&&(s=Be(s,r)),a[o.op]={name:o.name,type:o.type,value:s})}return a}function Ne(e,t){var r=new $.Record("Top DICT",[{name:"dict",type:"DICT",value:{}}]);return r.dict=Me(De,e,t),r}function Pe(e){var t=new $.Record("Top DICT INDEX",[{name:"topDicts",type:"INDEX",value:[]}]);return t.topDicts=[{name:"topDict_0",type:"TABLE",value:e}],t}function Ae(e){var t=[],r=e.path;t.push({name:"width",type:"NUMBER",value:e.advanceWidth});for(var a=0,n=0,o=0;o<r.commands.length;o+=1){var s=void 0,i=void 0,l=r.commands[o];if("Q"===l.type){l={type:"C",x:l.x,y:l.y,x1:1/3*a+2/3*l.x1,y1:1/3*n+2/3*l.y1,x2:1/3*l.x+2/3*l.x1,y2:1/3*l.y+2/3*l.y1}}if("M"===l.type)s=Math.round(l.x-a),i=Math.round(l.y-n),t.push({name:"dx",type:"NUMBER",value:s}),t.push({name:"dy",type:"NUMBER",value:i}),t.push({name:"rmoveto",type:"OP",value:21}),a=Math.round(l.x),n=Math.round(l.y);else if("L"===l.type)s=Math.round(l.x-a),i=Math.round(l.y-n),t.push({name:"dx",type:"NUMBER",value:s}),t.push({name:"dy",type:"NUMBER",value:i}),t.push({name:"rlineto",type:"OP",value:5}),a=Math.round(l.x),n=Math.round(l.y);else if("C"===l.type){var u=Math.round(l.x1-a),p=Math.round(l.y1-n),c=Math.round(l.x2-l.x1),h=Math.round(l.y2-l.y1);s=Math.round(l.x-l.x2),i=Math.round(l.y-l.y2),t.push({name:"dx1",type:"NUMBER",value:u}),t.push({name:"dy1",type:"NUMBER",value:p}),t.push({name:"dx2",type:"NUMBER",value:c}),t.push({name:"dy2",type:"NUMBER",value:h}),t.push({name:"dx",type:"NUMBER",value:s}),t.push({name:"dy",type:"NUMBER",value:i}),t.push({name:"rrcurveto",type:"OP",value:8}),a=Math.round(l.x),n=Math.round(l.y)}}return t.push({name:"endchar",type:"OP",value:14}),t}var Fe={parse:function(e,t,r){r.tables.cff={};var a,n,o,s=Oe(e,Oe(e,(a=e,n=t,(o={}).formatMajor=ie.getCard8(a,n),o.formatMinor=ie.getCard8(a,n+1),o.size=ie.getCard8(a,n+2),o.offsetSize=ie.getCard8(a,n+3),o.startOffset=n,o.endOffset=n+4,o).endOffset,ie.bytesToString).endOffset),i=Oe(e,s.endOffset,ie.bytesToString),l=Oe(e,i.endOffset);r.gsubrs=l.objects,r.gsubrsBias=Te(r.gsubrs);var u=Ge(e,t,s.objects,i.objects);if(1!==u.length)throw new Error("CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = "+u.length);var p=u[0];if((r.tables.cff.topDict=p)._privateDict&&(r.defaultWidthX=p._privateDict.defaultWidthX,r.nominalWidthX=p._privateDict.nominalWidthX),void 0!==p.ros[0]&&void 0!==p.ros[1]&&(r.isCIDFont=!0),r.isCIDFont){var c=p.fdArray,h=p.fdSelect;if(0===c||0===h)throw new Error("Font is marked as a CID font, but FDArray and/or FDSelect information is missing");var f=Ge(e,t,Oe(e,c+=t).objects,i.objects);p._fdArray=f,h+=t,p._fdSelect=function(e,t,r,a){var n,o=[],s=new ie.Parser(e,t),i=s.parseCard8();if(0===i)for(var l=0;l<r;l++){if(a<=(n=s.parseCard8()))throw new Error("CFF table CID Font FDSelect has bad FD index value "+n+" (FD count "+a+")");o.push(n)}else{if(3!==i)throw new Error("CFF Table CID Font FDSelect table has unsupported format "+i);var u,p=s.parseCard16(),c=s.parseCard16();if(0!==c)throw new Error("CFF Table CID Font FDSelect format 3 range has bad initial GID "+c);for(var h=0;h<p;h++){if(n=s.parseCard8(),u=s.parseCard16(),a<=n)throw new Error("CFF table CID Font FDSelect has bad FD index value "+n+" (FD count "+a+")");if(r<u)throw new Error("CFF Table CID Font FDSelect format 3 range has bad GID "+u);for(;c<u;c++)o.push(n);c=u}if(u!==r)throw new Error("CFF Table CID Font FDSelect format 3 range has bad final GID "+u)}return o}(e,h,r.numGlyphs,f.length)}var d=t+p.private[1],v=Ce(e,d,p.private[0],i.objects);if(r.defaultWidthX=v.defaultWidthX,r.nominalWidthX=v.nominalWidthX,0!==v.subrs){var g=Oe(e,d+v.subrs);r.subrs=g.objects,r.subrsBias=Te(r.subrs)}else r.subrs=[],r.subrsBias=0;var m=Oe(e,t+p.charStrings);r.nGlyphs=m.objects.length;var y=function(e,t,r,a){var n,o,s=new ie.Parser(e,t);r-=1;var i=[".notdef"],l=s.parseCard8();if(0===l)for(var u=0;u<r;u+=1)n=s.parseSID(),i.push(Re(a,n));else if(1===l)for(;i.length<=r;){n=s.parseSID(),o=s.parseCard8();for(var p=0;p<=o;p+=1)i.push(Re(a,n)),n+=1}else{if(2!==l)throw new Error("Unknown charset format "+l);for(;i.length<=r;){n=s.parseSID(),o=s.parseCard16();for(var c=0;c<=o;c+=1)i.push(Re(a,n)),n+=1}}return i}(e,t+p.charset,r.nGlyphs,i.objects);0===p.encoding?r.cffEncoding=new ve(pe,y):1===p.encoding?r.cffEncoding=new ve(ce,y):r.cffEncoding=function(e,t,r){var a,n={},o=new ie.Parser(e,t),s=o.parseCard8();if(0===s)for(var i=o.parseCard8(),l=0;l<i;l+=1)n[a=o.parseCard8()]=l;else{if(1!==s)throw new Error("Unknown encoding format "+s);var u=o.parseCard8();a=1;for(var p=0;p<u;p+=1)for(var c=o.parseCard8(),h=o.parseCard8(),f=c;f<=c+h;f+=1)n[f]=a,a+=1}return new ve(n,r)}(e,t+p.encoding,y),r.encoding=r.encoding||r.cffEncoding,r.glyphs=new xe.GlyphSet(r);for(var b=0;b<r.nGlyphs;b+=1){var S=m.objects[b];r.glyphs.push(b,xe.cffGlyphLoader(r,b,Ie,S))}},make:function(e,t){for(var r,a=new $.Table("CFF ",[{name:"header",type:"RECORD"},{name:"nameIndex",type:"RECORD"},{name:"topDictIndex",type:"RECORD"},{name:"stringIndex",type:"RECORD"},{name:"globalSubrIndex",type:"RECORD"},{name:"charsets",type:"RECORD"},{name:"charStringsIndex",type:"RECORD"},{name:"privateDict",type:"RECORD"}]),n=1/t.unitsPerEm,o={version:t.version,fullName:t.fullName,familyName:t.familyName,weight:t.weightName,fontBBox:t.fontBBox||[0,0,0,0],fontMatrix:[n,0,0,n,0,0],charset:999,encoding:0,charStrings:999,private:[0,999]},s=[],i=1;i<e.length;i+=1)r=e.get(i),s.push(r.name);var l=[];a.header=new $.Record("Header",[{name:"major",type:"Card8",value:1},{name:"minor",type:"Card8",value:0},{name:"hdrSize",type:"Card8",value:4},{name:"major",type:"Card8",value:1}]),a.nameIndex=function(e){var t=new $.Record("Name INDEX",[{name:"names",type:"INDEX",value:[]}]);t.names=[];for(var r=0;r<e.length;r+=1)t.names.push({name:"name_"+r,type:"NAME",value:e[r]});return t}([t.postScriptName]);var u,p,c,h=Ne(o,l);a.topDictIndex=Pe(h),a.globalSubrIndex=new $.Record("Global Subr INDEX",[{name:"subrs",type:"INDEX",value:[]}]),a.charsets=function(e,t){for(var r=new $.Record("Charsets",[{name:"format",type:"Card8",value:0}]),a=0;a<e.length;a+=1){var n=Be(e[a],t);r.fields.push({name:"glyph_"+a,type:"SID",value:n})}return r}(s,l),a.charStringsIndex=function(e){for(var t=new $.Record("CharStrings INDEX",[{name:"charStrings",type:"INDEX",value:[]}]),r=0;r<e.length;r+=1){var a=e.get(r),n=Ae(a);t.charStrings.push({name:a.name,type:"CHARSTRING",value:n})}return t}(e),a.privateDict=(u={},p=l,(c=new $.Record("Private DICT",[{name:"dict",type:"DICT",value:{}}])).dict=Me(we,u,p),c),a.stringIndex=function(e){var t=new $.Record("String INDEX",[{name:"strings",type:"INDEX",value:[]}]);t.strings=[];for(var r=0;r<e.length;r+=1)t.strings.push({name:"string_"+r,type:"STRING",value:e[r]});return t}(l);var f=a.header.sizeOf()+a.nameIndex.sizeOf()+a.topDictIndex.sizeOf()+a.stringIndex.sizeOf()+a.globalSubrIndex.sizeOf();return o.charset=f,o.encoding=0,o.charStrings=o.charset+a.charsets.sizeOf(),o.private[1]=o.charStrings+a.charStringsIndex.sizeOf(),h=Ne(o,l),a.topDictIndex=Pe(h),a}};var He={parse:function(e,t){var r={},a=new ie.Parser(e,t);return r.version=a.parseVersion(),r.fontRevision=Math.round(1e3*a.parseFixed())/1e3,r.checkSumAdjustment=a.parseULong(),r.magicNumber=a.parseULong(),w.argument(1594834165===r.magicNumber,"Font header has wrong magic number."),r.flags=a.parseUShort(),r.unitsPerEm=a.parseUShort(),r.created=a.parseLongDateTime(),r.modified=a.parseLongDateTime(),r.xMin=a.parseShort(),r.yMin=a.parseShort(),r.xMax=a.parseShort(),r.yMax=a.parseShort(),r.macStyle=a.parseUShort(),r.lowestRecPPEM=a.parseUShort(),r.fontDirectionHint=a.parseShort(),r.indexToLocFormat=a.parseShort(),r.glyphDataFormat=a.parseShort(),r},make:function(e){var t=Math.round((new Date).getTime()/1e3)+2082844800,r=t;return e.createdTimestamp&&(r=e.createdTimestamp+2082844800),new $.Table("head",[{name:"version",type:"FIXED",value:65536},{name:"fontRevision",type:"FIXED",value:65536},{name:"checkSumAdjustment",type:"ULONG",value:0},{name:"magicNumber",type:"ULONG",value:1594834165},{name:"flags",type:"USHORT",value:0},{name:"unitsPerEm",type:"USHORT",value:1e3},{name:"created",type:"LONGDATETIME",value:r},{name:"modified",type:"LONGDATETIME",value:t},{name:"xMin",type:"SHORT",value:0},{name:"yMin",type:"SHORT",value:0},{name:"xMax",type:"SHORT",value:0},{name:"yMax",type:"SHORT",value:0},{name:"macStyle",type:"USHORT",value:0},{name:"lowestRecPPEM",type:"USHORT",value:0},{name:"fontDirectionHint",type:"SHORT",value:2},{name:"indexToLocFormat",type:"SHORT",value:0},{name:"glyphDataFormat",type:"SHORT",value:0}],e)}};var ze={parse:function(e,t){var r={},a=new ie.Parser(e,t);return r.version=a.parseVersion(),r.ascender=a.parseShort(),r.descender=a.parseShort(),r.lineGap=a.parseShort(),r.advanceWidthMax=a.parseUShort(),r.minLeftSideBearing=a.parseShort(),r.minRightSideBearing=a.parseShort(),r.xMaxExtent=a.parseShort(),r.caretSlopeRise=a.parseShort(),r.caretSlopeRun=a.parseShort(),r.caretOffset=a.parseShort(),a.relativeOffset+=8,r.metricDataFormat=a.parseShort(),r.numberOfHMetrics=a.parseUShort(),r},make:function(e){return new $.Table("hhea",[{name:"version",type:"FIXED",value:65536},{name:"ascender",type:"FWORD",value:0},{name:"descender",type:"FWORD",value:0},{name:"lineGap",type:"FWORD",value:0},{name:"advanceWidthMax",type:"UFWORD",value:0},{name:"minLeftSideBearing",type:"FWORD",value:0},{name:"minRightSideBearing",type:"FWORD",value:0},{name:"xMaxExtent",type:"FWORD",value:0},{name:"caretSlopeRise",type:"SHORT",value:1},{name:"caretSlopeRun",type:"SHORT",value:0},{name:"caretOffset",type:"SHORT",value:0},{name:"reserved1",type:"SHORT",value:0},{name:"reserved2",type:"SHORT",value:0},{name:"reserved3",type:"SHORT",value:0},{name:"reserved4",type:"SHORT",value:0},{name:"metricDataFormat",type:"SHORT",value:0},{name:"numberOfHMetrics",type:"USHORT",value:0}],e)}};var We={parse:function(e,t,r,a,n){for(var o,s,i=new ie.Parser(e,t),l=0;l<a;l+=1){l<r&&(o=i.parseUShort(),s=i.parseShort());var u=n.get(l);u.advanceWidth=o,u.leftSideBearing=s}},make:function(e){for(var t=new $.Table("hmtx",[]),r=0;r<e.length;r+=1){var a=e.get(r),n=a.advanceWidth||0,o=a.leftSideBearing||0;t.fields.push({name:"advanceWidth_"+r,type:"USHORT",value:n}),t.fields.push({name:"leftSideBearing_"+r,type:"SHORT",value:o})}return t}};var qe={make:function(e){for(var t=new $.Table("ltag",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"numTags",type:"ULONG",value:e.length}]),r="",a=12+4*e.length,n=0;n<e.length;++n){var o=r.indexOf(e[n]);o<0&&(o=r.length,r+=e[n]),t.fields.push({name:"offset "+n,type:"USHORT",value:a+o}),t.fields.push({name:"length "+n,type:"USHORT",value:e[n].length})}return t.fields.push({name:"stringPool",type:"CHARARRAY",value:r}),t},parse:function(e,t){var r=new ie.Parser(e,t),a=r.parseULong();w.argument(1===a,"Unsupported ltag table version."),r.skip("uLong",1);for(var n=r.parseULong(),o=[],s=0;s<n;s++){for(var i="",l=t+r.parseUShort(),u=r.parseUShort(),p=l;p<l+u;++p)i+=String.fromCharCode(e.getInt8(p));o.push(i)}return o}};var Xe={parse:function(e,t){var r={},a=new ie.Parser(e,t);return r.version=a.parseVersion(),r.numGlyphs=a.parseUShort(),1===r.version&&(r.maxPoints=a.parseUShort(),r.maxContours=a.parseUShort(),r.maxCompositePoints=a.parseUShort(),r.maxCompositeContours=a.parseUShort(),r.maxZones=a.parseUShort(),r.maxTwilightPoints=a.parseUShort(),r.maxStorage=a.parseUShort(),r.maxFunctionDefs=a.parseUShort(),r.maxInstructionDefs=a.parseUShort(),r.maxStackElements=a.parseUShort(),r.maxSizeOfInstructions=a.parseUShort(),r.maxComponentElements=a.parseUShort(),r.maxComponentDepth=a.parseUShort()),r},make:function(e){return new $.Table("maxp",[{name:"version",type:"FIXED",value:20480},{name:"numGlyphs",type:"USHORT",value:e}])}},_e=["copyright","fontFamily","fontSubfamily","uniqueID","fullName","version","postScriptName","trademark","manufacturer","designer","description","manufacturerURL","designerURL","license","licenseURL","reserved","preferredFamily","preferredSubfamily","compatibleFullName","sampleText","postScriptFindFontName","wwsFamily","wwsSubfamily"],Ve={0:"en",1:"fr",2:"de",3:"it",4:"nl",5:"sv",6:"es",7:"da",8:"pt",9:"no",10:"he",11:"ja",12:"ar",13:"fi",14:"el",15:"is",16:"mt",17:"tr",18:"hr",19:"zh-Hant",20:"ur",21:"hi",22:"th",23:"ko",24:"lt",25:"pl",26:"hu",27:"es",28:"lv",29:"se",30:"fo",31:"fa",32:"ru",33:"zh",34:"nl-BE",35:"ga",36:"sq",37:"ro",38:"cz",39:"sk",40:"si",41:"yi",42:"sr",43:"mk",44:"bg",45:"uk",46:"be",47:"uz",48:"kk",49:"az-Cyrl",50:"az-Arab",51:"hy",52:"ka",53:"mo",54:"ky",55:"tg",56:"tk",57:"mn-CN",58:"mn",59:"ps",60:"ks",61:"ku",62:"sd",63:"bo",64:"ne",65:"sa",66:"mr",67:"bn",68:"as",69:"gu",70:"pa",71:"or",72:"ml",73:"kn",74:"ta",75:"te",76:"si",77:"my",78:"km",79:"lo",80:"vi",81:"id",82:"tl",83:"ms",84:"ms-Arab",85:"am",86:"ti",87:"om",88:"so",89:"sw",90:"rw",91:"rn",92:"ny",93:"mg",94:"eo",128:"cy",129:"eu",130:"ca",131:"la",132:"qu",133:"gn",134:"ay",135:"tt",136:"ug",137:"dz",138:"jv",139:"su",140:"gl",141:"af",142:"br",143:"iu",144:"gd",145:"gv",146:"ga",147:"to",148:"el-polyton",149:"kl",150:"az",151:"nn"},Ye={0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:5,11:1,12:4,13:0,14:6,15:0,16:0,17:0,18:0,19:2,20:4,21:9,22:21,23:3,24:29,25:29,26:29,27:29,28:29,29:0,30:0,31:4,32:7,33:25,34:0,35:0,36:0,37:0,38:29,39:29,40:0,41:5,42:7,43:7,44:7,45:7,46:7,47:7,48:7,49:7,50:4,51:24,52:23,53:7,54:7,55:7,56:7,57:27,58:7,59:4,60:4,61:4,62:4,63:26,64:9,65:9,66:9,67:13,68:13,69:11,70:10,71:12,72:17,73:16,74:14,75:15,76:18,77:19,78:20,79:22,80:30,81:0,82:0,83:0,84:4,85:28,86:28,87:28,88:0,89:0,90:0,91:0,92:0,93:0,94:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:7,136:4,137:26,138:0,139:0,140:0,141:0,142:0,143:28,144:0,145:0,146:0,147:0,148:6,149:0,150:0,151:0},je={1078:"af",1052:"sq",1156:"gsw",1118:"am",5121:"ar-DZ",15361:"ar-BH",3073:"ar",2049:"ar-IQ",11265:"ar-JO",13313:"ar-KW",12289:"ar-LB",4097:"ar-LY",6145:"ary",8193:"ar-OM",16385:"ar-QA",1025:"ar-SA",10241:"ar-SY",7169:"aeb",14337:"ar-AE",9217:"ar-YE",1067:"hy",1101:"as",2092:"az-Cyrl",1068:"az",1133:"ba",1069:"eu",1059:"be",2117:"bn",1093:"bn-IN",8218:"bs-Cyrl",5146:"bs",1150:"br",1026:"bg",1027:"ca",3076:"zh-HK",5124:"zh-MO",2052:"zh",4100:"zh-SG",1028:"zh-TW",1155:"co",1050:"hr",4122:"hr-BA",1029:"cs",1030:"da",1164:"prs",1125:"dv",2067:"nl-BE",1043:"nl",3081:"en-AU",10249:"en-BZ",4105:"en-CA",9225:"en-029",16393:"en-IN",6153:"en-IE",8201:"en-JM",17417:"en-MY",5129:"en-NZ",13321:"en-PH",18441:"en-SG",7177:"en-ZA",11273:"en-TT",2057:"en-GB",1033:"en",12297:"en-ZW",1061:"et",1080:"fo",1124:"fil",1035:"fi",2060:"fr-BE",3084:"fr-CA",1036:"fr",5132:"fr-LU",6156:"fr-MC",4108:"fr-CH",1122:"fy",1110:"gl",1079:"ka",3079:"de-AT",1031:"de",5127:"de-LI",4103:"de-LU",2055:"de-CH",1032:"el",1135:"kl",1095:"gu",1128:"ha",1037:"he",1081:"hi",1038:"hu",1039:"is",1136:"ig",1057:"id",1117:"iu",2141:"iu-Latn",2108:"ga",1076:"xh",1077:"zu",1040:"it",2064:"it-CH",1041:"ja",1099:"kn",1087:"kk",1107:"km",1158:"quc",1159:"rw",1089:"sw",1111:"kok",1042:"ko",1088:"ky",1108:"lo",1062:"lv",1063:"lt",2094:"dsb",1134:"lb",1071:"mk",2110:"ms-BN",1086:"ms",1100:"ml",1082:"mt",1153:"mi",1146:"arn",1102:"mr",1148:"moh",1104:"mn",2128:"mn-CN",1121:"ne",1044:"nb",2068:"nn",1154:"oc",1096:"or",1123:"ps",1045:"pl",1046:"pt",2070:"pt-PT",1094:"pa",1131:"qu-BO",2155:"qu-EC",3179:"qu",1048:"ro",1047:"rm",1049:"ru",9275:"smn",4155:"smj-NO",5179:"smj",3131:"se-FI",1083:"se",2107:"se-SE",8251:"sms",6203:"sma-NO",7227:"sms",1103:"sa",7194:"sr-Cyrl-BA",3098:"sr",6170:"sr-Latn-BA",2074:"sr-Latn",1132:"nso",1074:"tn",1115:"si",1051:"sk",1060:"sl",11274:"es-AR",16394:"es-BO",13322:"es-CL",9226:"es-CO",5130:"es-CR",7178:"es-DO",12298:"es-EC",17418:"es-SV",4106:"es-GT",18442:"es-HN",2058:"es-MX",19466:"es-NI",6154:"es-PA",15370:"es-PY",10250:"es-PE",20490:"es-PR",3082:"es",1034:"es",21514:"es-US",14346:"es-UY",8202:"es-VE",2077:"sv-FI",1053:"sv",1114:"syr",1064:"tg",2143:"tzm",1097:"ta",1092:"tt",1098:"te",1054:"th",1105:"bo",1055:"tr",1090:"tk",1152:"ug",1058:"uk",1070:"hsb",1056:"ur",2115:"uz-Cyrl",1091:"uz",1066:"vi",1106:"cy",1160:"wo",1157:"sah",1144:"ii",1130:"yo"};function Ze(e,t,r){switch(e){case 0:if(65535===t)return"und";if(r)return r[t];break;case 1:return Ve[t];case 3:return je[t]}}var Qe="utf-16",Ke={0:"macintosh",1:"x-mac-japanese",2:"x-mac-chinesetrad",3:"x-mac-korean",6:"x-mac-greek",7:"x-mac-cyrillic",9:"x-mac-devanagai",10:"x-mac-gurmukhi",11:"x-mac-gujarati",12:"x-mac-oriya",13:"x-mac-bengali",14:"x-mac-tamil",15:"x-mac-telugu",16:"x-mac-kannada",17:"x-mac-malayalam",18:"x-mac-sinhalese",19:"x-mac-burmese",20:"x-mac-khmer",21:"x-mac-thai",22:"x-mac-lao",23:"x-mac-georgian",24:"x-mac-armenian",25:"x-mac-chinesesimp",26:"x-mac-tibetan",27:"x-mac-mongolian",28:"x-mac-ethiopic",29:"x-mac-ce",30:"x-mac-vietnamese",31:"x-mac-extarabic"},Je={15:"x-mac-icelandic",17:"x-mac-turkish",18:"x-mac-croatian",24:"x-mac-ce",25:"x-mac-ce",26:"x-mac-ce",27:"x-mac-ce",28:"x-mac-ce",30:"x-mac-icelandic",37:"x-mac-romanian",38:"x-mac-ce",39:"x-mac-ce",40:"x-mac-ce",143:"x-mac-inuit",146:"x-mac-gaelic"};function $e(e,t,r){switch(e){case 0:return Qe;case 1:return Je[r]||Ke[t];case 3:if(1===t||10===t)return Qe}}function et(e){var t={};for(var r in e)t[e[r]]=parseInt(r);return t}function tt(e,t,r,a,n,o){return new $.Record("NameRecord",[{name:"platformID",type:"USHORT",value:e},{name:"encodingID",type:"USHORT",value:t},{name:"languageID",type:"USHORT",value:r},{name:"nameID",type:"USHORT",value:a},{name:"length",type:"USHORT",value:n},{name:"offset",type:"USHORT",value:o}])}function rt(e,t){var r=function(e,t){var r=e.length,a=t.length-r+1;e:for(var n=0;n<a;n++)for(;n<a;n++){for(var o=0;o<r;o++)if(t[n+o]!==e[o])continue e;return n}return-1}(e,t);if(r<0){r=t.length;for(var a=0,n=e.length;a<n;++a)t.push(e[a])}return r}var at={parse:function(e,t,r){for(var a={},n=new ie.Parser(e,t),o=n.parseUShort(),s=n.parseUShort(),i=n.offset+n.parseUShort(),l=0;l<s;l++){var u=n.parseUShort(),p=n.parseUShort(),c=n.parseUShort(),h=n.parseUShort(),f=_e[h]||h,d=n.parseUShort(),v=n.parseUShort(),g=Ze(u,c,r),m=$e(u,p,c);if(void 0!==m&&void 0!==g){var y=void 0;if(y=m===Qe?G.UTF16(e,i+v,d):G.MACSTRING(e,i+v,d,m)){var b=a[f];void 0===b&&(b=a[f]={}),b[g]=y}}}return 1===o&&n.parseUShort(),a},make:function(e,t){var r,a=[],n={},o=et(_e);for(var s in e){var i=o[s];if(void 0===i&&(i=s),r=parseInt(i),isNaN(r))throw new Error('Name table entry "'+s+'" does not exist, see nameTableNames for complete list.');n[r]=e[s],a.push(r)}for(var l=et(Ve),u=et(je),p=[],c=[],h=0;h<a.length;h++){var f=n[r=a[h]];for(var d in f){var v=f[d],g=1,m=l[d],y=Ye[m],b=$e(g,y,m),S=I.MACSTRING(v,b);void 0===S&&(g=0,(m=t.indexOf(d))<0&&(m=t.length,t.push(d)),y=4,S=I.UTF16(v));var x=rt(S,c);p.push(tt(g,y,m,r,S.length,x));var U=u[d];if(void 0!==U){var T=I.UTF16(v),O=rt(T,c);p.push(tt(3,1,U,r,T.length,O))}}}p.sort(function(e,t){return e.platformID-t.platformID||e.encodingID-t.encodingID||e.languageID-t.languageID||e.nameID-t.nameID});for(var E=new $.Table("name",[{name:"format",type:"USHORT",value:0},{name:"count",type:"USHORT",value:p.length},{name:"stringOffset",type:"USHORT",value:6+12*p.length}]),k=0;k<p.length;k++)E.fields.push({name:"record_"+k,type:"RECORD",value:p[k]});return E.fields.push({name:"strings",type:"LITERAL",value:c}),E}},nt=[{begin:0,end:127},{begin:128,end:255},{begin:256,end:383},{begin:384,end:591},{begin:592,end:687},{begin:688,end:767},{begin:768,end:879},{begin:880,end:1023},{begin:11392,end:11519},{begin:1024,end:1279},{begin:1328,end:1423},{begin:1424,end:1535},{begin:42240,end:42559},{begin:1536,end:1791},{begin:1984,end:2047},{begin:2304,end:2431},{begin:2432,end:2559},{begin:2560,end:2687},{begin:2688,end:2815},{begin:2816,end:2943},{begin:2944,end:3071},{begin:3072,end:3199},{begin:3200,end:3327},{begin:3328,end:3455},{begin:3584,end:3711},{begin:3712,end:3839},{begin:4256,end:4351},{begin:6912,end:7039},{begin:4352,end:4607},{begin:7680,end:7935},{begin:7936,end:8191},{begin:8192,end:8303},{begin:8304,end:8351},{begin:8352,end:8399},{begin:8400,end:8447},{begin:8448,end:8527},{begin:8528,end:8591},{begin:8592,end:8703},{begin:8704,end:8959},{begin:8960,end:9215},{begin:9216,end:9279},{begin:9280,end:9311},{begin:9312,end:9471},{begin:9472,end:9599},{begin:9600,end:9631},{begin:9632,end:9727},{begin:9728,end:9983},{begin:9984,end:10175},{begin:12288,end:12351},{begin:12352,end:12447},{begin:12448,end:12543},{begin:12544,end:12591},{begin:12592,end:12687},{begin:43072,end:43135},{begin:12800,end:13055},{begin:13056,end:13311},{begin:44032,end:55215},{begin:55296,end:57343},{begin:67840,end:67871},{begin:19968,end:40959},{begin:57344,end:63743},{begin:12736,end:12783},{begin:64256,end:64335},{begin:64336,end:65023},{begin:65056,end:65071},{begin:65040,end:65055},{begin:65104,end:65135},{begin:65136,end:65279},{begin:65280,end:65519},{begin:65520,end:65535},{begin:3840,end:4095},{begin:1792,end:1871},{begin:1920,end:1983},{begin:3456,end:3583},{begin:4096,end:4255},{begin:4608,end:4991},{begin:5024,end:5119},{begin:5120,end:5759},{begin:5760,end:5791},{begin:5792,end:5887},{begin:6016,end:6143},{begin:6144,end:6319},{begin:10240,end:10495},{begin:40960,end:42127},{begin:5888,end:5919},{begin:66304,end:66351},{begin:66352,end:66383},{begin:66560,end:66639},{begin:118784,end:119039},{begin:119808,end:120831},{begin:1044480,end:1048573},{begin:65024,end:65039},{begin:917504,end:917631},{begin:6400,end:6479},{begin:6480,end:6527},{begin:6528,end:6623},{begin:6656,end:6687},{begin:11264,end:11359},{begin:11568,end:11647},{begin:19904,end:19967},{begin:43008,end:43055},{begin:65536,end:65663},{begin:65856,end:65935},{begin:66432,end:66463},{begin:66464,end:66527},{begin:66640,end:66687},{begin:66688,end:66735},{begin:67584,end:67647},{begin:68096,end:68191},{begin:119552,end:119647},{begin:73728,end:74751},{begin:119648,end:119679},{begin:7040,end:7103},{begin:7168,end:7247},{begin:7248,end:7295},{begin:43136,end:43231},{begin:43264,end:43311},{begin:43312,end:43359},{begin:43520,end:43615},{begin:65936,end:65999},{begin:66e3,end:66047},{begin:66208,end:66271},{begin:127024,end:127135}];var ot={parse:function(e,t){var r={},a=new ie.Parser(e,t);r.version=a.parseUShort(),r.xAvgCharWidth=a.parseShort(),r.usWeightClass=a.parseUShort(),r.usWidthClass=a.parseUShort(),r.fsType=a.parseUShort(),r.ySubscriptXSize=a.parseShort(),r.ySubscriptYSize=a.parseShort(),r.ySubscriptXOffset=a.parseShort(),r.ySubscriptYOffset=a.parseShort(),r.ySuperscriptXSize=a.parseShort(),r.ySuperscriptYSize=a.parseShort(),r.ySuperscriptXOffset=a.parseShort(),r.ySuperscriptYOffset=a.parseShort(),r.yStrikeoutSize=a.parseShort(),r.yStrikeoutPosition=a.parseShort(),r.sFamilyClass=a.parseShort(),r.panose=[];for(var n=0;n<10;n++)r.panose[n]=a.parseByte();return r.ulUnicodeRange1=a.parseULong(),r.ulUnicodeRange2=a.parseULong(),r.ulUnicodeRange3=a.parseULong(),r.ulUnicodeRange4=a.parseULong(),r.achVendID=String.fromCharCode(a.parseByte(),a.parseByte(),a.parseByte(),a.parseByte()),r.fsSelection=a.parseUShort(),r.usFirstCharIndex=a.parseUShort(),r.usLastCharIndex=a.parseUShort(),r.sTypoAscender=a.parseShort(),r.sTypoDescender=a.parseShort(),r.sTypoLineGap=a.parseShort(),r.usWinAscent=a.parseUShort(),r.usWinDescent=a.parseUShort(),1<=r.version&&(r.ulCodePageRange1=a.parseULong(),r.ulCodePageRange2=a.parseULong()),2<=r.version&&(r.sxHeight=a.parseShort(),r.sCapHeight=a.parseShort(),r.usDefaultChar=a.parseUShort(),r.usBreakChar=a.parseUShort(),r.usMaxContent=a.parseUShort()),r},make:function(e){return new $.Table("OS/2",[{name:"version",type:"USHORT",value:3},{name:"xAvgCharWidth",type:"SHORT",value:0},{name:"usWeightClass",type:"USHORT",value:0},{name:"usWidthClass",type:"USHORT",value:0},{name:"fsType",type:"USHORT",value:0},{name:"ySubscriptXSize",type:"SHORT",value:650},{name:"ySubscriptYSize",type:"SHORT",value:699},{name:"ySubscriptXOffset",type:"SHORT",value:0},{name:"ySubscriptYOffset",type:"SHORT",value:140},{name:"ySuperscriptXSize",type:"SHORT",value:650},{name:"ySuperscriptYSize",type:"SHORT",value:699},{name:"ySuperscriptXOffset",type:"SHORT",value:0},{name:"ySuperscriptYOffset",type:"SHORT",value:479},{name:"yStrikeoutSize",type:"SHORT",value:49},{name:"yStrikeoutPosition",type:"SHORT",value:258},{name:"sFamilyClass",type:"SHORT",value:0},{name:"bFamilyType",type:"BYTE",value:0},{name:"bSerifStyle",type:"BYTE",value:0},{name:"bWeight",type:"BYTE",value:0},{name:"bProportion",type:"BYTE",value:0},{name:"bContrast",type:"BYTE",value:0},{name:"bStrokeVariation",type:"BYTE",value:0},{name:"bArmStyle",type:"BYTE",value:0},{name:"bLetterform",type:"BYTE",value:0},{name:"bMidline",type:"BYTE",value:0},{name:"bXHeight",type:"BYTE",value:0},{name:"ulUnicodeRange1",type:"ULONG",value:0},{name:"ulUnicodeRange2",type:"ULONG",value:0},{name:"ulUnicodeRange3",type:"ULONG",value:0},{name:"ulUnicodeRange4",type:"ULONG",value:0},{name:"achVendID",type:"CHARARRAY",value:"XXXX"},{name:"fsSelection",type:"USHORT",value:0},{name:"usFirstCharIndex",type:"USHORT",value:0},{name:"usLastCharIndex",type:"USHORT",value:0},{name:"sTypoAscender",type:"SHORT",value:0},{name:"sTypoDescender",type:"SHORT",value:0},{name:"sTypoLineGap",type:"SHORT",value:0},{name:"usWinAscent",type:"USHORT",value:0},{name:"usWinDescent",type:"USHORT",value:0},{name:"ulCodePageRange1",type:"ULONG",value:0},{name:"ulCodePageRange2",type:"ULONG",value:0},{name:"sxHeight",type:"SHORT",value:0},{name:"sCapHeight",type:"SHORT",value:0},{name:"usDefaultChar",type:"USHORT",value:0},{name:"usBreakChar",type:"USHORT",value:0},{name:"usMaxContext",type:"USHORT",value:0}],e)},unicodeRanges:nt,getUnicodeRange:function(e){for(var t=0;t<nt.length;t+=1){var r=nt[t];if(e>=r.begin&&e<r.end)return t}return-1}};var st={parse:function(e,t){var r={},a=new ie.Parser(e,t);switch(r.version=a.parseVersion(),r.italicAngle=a.parseFixed(),r.underlinePosition=a.parseShort(),r.underlineThickness=a.parseShort(),r.isFixedPitch=a.parseULong(),r.minMemType42=a.parseULong(),r.maxMemType42=a.parseULong(),r.minMemType1=a.parseULong(),r.maxMemType1=a.parseULong(),r.version){case 1:r.names=he.slice();break;case 2:r.numberOfGlyphs=a.parseUShort(),r.glyphNameIndex=new Array(r.numberOfGlyphs);for(var n=0;n<r.numberOfGlyphs;n++)r.glyphNameIndex[n]=a.parseUShort();r.names=[];for(var o=0;o<r.numberOfGlyphs;o++)if(r.glyphNameIndex[o]>=he.length){var s=a.parseChar();r.names.push(a.parseString(s))}break;case 2.5:r.numberOfGlyphs=a.parseUShort(),r.offset=new Array(r.numberOfGlyphs);for(var i=0;i<r.numberOfGlyphs;i++)r.offset[i]=a.parseChar()}return r},make:function(){return new $.Table("post",[{name:"version",type:"FIXED",value:196608},{name:"italicAngle",type:"FIXED",value:0},{name:"underlinePosition",type:"FWORD",value:0},{name:"underlineThickness",type:"FWORD",value:0},{name:"isFixedPitch",type:"ULONG",value:0},{name:"minMemType42",type:"ULONG",value:0},{name:"maxMemType42",type:"ULONG",value:0},{name:"minMemType1",type:"ULONG",value:0},{name:"maxMemType1",type:"ULONG",value:0}])}},it=new Array(9);it[1]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{substFormat:1,coverage:this.parsePointer(oe.coverage),deltaGlyphId:this.parseUShort()}:2===t?{substFormat:2,coverage:this.parsePointer(oe.coverage),substitute:this.parseOffset16List()}:void w.assert(!1,"0x"+e.toString(16)+": lookup type 1 format must be 1 or 2.")},it[2]=function(){var e=this.parseUShort();return w.argument(1===e,"GSUB Multiple Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(oe.coverage),sequences:this.parseListOfLists()}},it[3]=function(){var e=this.parseUShort();return w.argument(1===e,"GSUB Alternate Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(oe.coverage),alternateSets:this.parseListOfLists()}},it[4]=function(){var e=this.parseUShort();return w.argument(1===e,"GSUB ligature table identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(oe.coverage),ligatureSets:this.parseListOfLists(function(){return{ligGlyph:this.parseUShort(),components:this.parseUShortList(this.parseUShort()-1)}})}};var lt={sequenceIndex:oe.uShort,lookupListIndex:oe.uShort};it[5]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();if(1===t)return{substFormat:t,coverage:this.parsePointer(oe.coverage),ruleSets:this.parseListOfLists(function(){var e=this.parseUShort(),t=this.parseUShort();return{input:this.parseUShortList(e-1),lookupRecords:this.parseRecordList(t,lt)}})};if(2===t)return{substFormat:t,coverage:this.parsePointer(oe.coverage),classDef:this.parsePointer(oe.classDef),classSets:this.parseListOfLists(function(){var e=this.parseUShort(),t=this.parseUShort();return{classes:this.parseUShortList(e-1),lookupRecords:this.parseRecordList(t,lt)}})};if(3===t){var r=this.parseUShort(),a=this.parseUShort();return{substFormat:t,coverages:this.parseList(r,oe.pointer(oe.coverage)),lookupRecords:this.parseRecordList(a,lt)}}w.assert(!1,"0x"+e.toString(16)+": lookup type 5 format must be 1, 2 or 3.")},it[6]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{substFormat:1,coverage:this.parsePointer(oe.coverage),chainRuleSets:this.parseListOfLists(function(){return{backtrack:this.parseUShortList(),input:this.parseUShortList(this.parseShort()-1),lookahead:this.parseUShortList(),lookupRecords:this.parseRecordList(lt)}})}:2===t?{substFormat:2,coverage:this.parsePointer(oe.coverage),backtrackClassDef:this.parsePointer(oe.classDef),inputClassDef:this.parsePointer(oe.classDef),lookaheadClassDef:this.parsePointer(oe.classDef),chainClassSet:this.parseListOfLists(function(){return{backtrack:this.parseUShortList(),input:this.parseUShortList(this.parseShort()-1),lookahead:this.parseUShortList(),lookupRecords:this.parseRecordList(lt)}})}:3===t?{substFormat:3,backtrackCoverage:this.parseList(oe.pointer(oe.coverage)),inputCoverage:this.parseList(oe.pointer(oe.coverage)),lookaheadCoverage:this.parseList(oe.pointer(oe.coverage)),lookupRecords:this.parseRecordList(lt)}:void w.assert(!1,"0x"+e.toString(16)+": lookup type 6 format must be 1, 2 or 3.")},it[7]=function(){var e=this.parseUShort();w.argument(1===e,"GSUB Extension Substitution subtable identifier-format must be 1");var t=this.parseUShort(),r=new oe(this.data,this.offset+this.parseULong());return{substFormat:1,lookupType:t,extension:it[t].call(r)}},it[8]=function(){var e=this.parseUShort();return w.argument(1===e,"GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(oe.coverage),backtrackCoverage:this.parseList(oe.pointer(oe.coverage)),lookaheadCoverage:this.parseList(oe.pointer(oe.coverage)),substitutes:this.parseUShortList()}};var ut=new Array(9);ut[1]=function(e){return 1===e.substFormat?new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)},{name:"deltaGlyphID",type:"USHORT",value:e.deltaGlyphId}]):new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:2},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)}].concat($.ushortList("substitute",e.substitute)))},ut[3]=function(e){return w.assert(1===e.substFormat,"Lookup type 3 substFormat must be 1."),new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)}].concat($.tableList("altSet",e.alternateSets,function(e){return new $.Table("alternateSetTable",$.ushortList("alternate",e))})))},ut[4]=function(e){return w.assert(1===e.substFormat,"Lookup type 4 substFormat must be 1."),new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)}].concat($.tableList("ligSet",e.ligatureSets,function(e){return new $.Table("ligatureSetTable",$.tableList("ligature",e,function(e){return new $.Table("ligatureTable",[{name:"ligGlyph",type:"USHORT",value:e.ligGlyph}].concat($.ushortList("component",e.components,e.components.length+1)))}))})))};var pt={parse:function(e,t){var r=new oe(e,t=t||0),a=r.parseVersion(1);return w.argument(1===a||1.1===a,"Unsupported GSUB table version."),1===a?{version:a,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(it)}:{version:a,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(it),variations:r.parseFeatureVariationsList()}},make:function(e){return new $.Table("GSUB",[{name:"version",type:"ULONG",value:65536},{name:"scripts",type:"TABLE",value:new $.ScriptList(e.scripts)},{name:"features",type:"TABLE",value:new $.FeatureList(e.features)},{name:"lookups",type:"TABLE",value:new $.LookupList(e.lookups,ut)}])}};var ct={parse:function(e,t){var r=new ie.Parser(e,t),a=r.parseULong();w.argument(1===a,"Unsupported META table version."),r.parseULong(),r.parseULong();for(var n=r.parseULong(),o={},s=0;s<n;s++){var i=r.parseTag(),l=r.parseULong(),u=r.parseULong(),p=G.UTF8(e,t+l,u);o[i]=p}return o},make:function(e){var t=Object.keys(e).length,r="",a=16+12*t,n=new $.Table("meta",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"offset",type:"ULONG",value:a},{name:"numTags",type:"ULONG",value:t}]);for(var o in e){var s=r.length;r+=e[o],n.fields.push({name:"tag "+o,type:"TAG",value:o}),n.fields.push({name:"offset "+o,type:"ULONG",value:a+s}),n.fields.push({name:"length "+o,type:"ULONG",value:e[o].length})}return n.fields.push({name:"stringPool",type:"CHARARRAY",value:r}),n}};function ht(e){return Math.log(e)/Math.log(2)|0}function ft(e){for(;e.length%4!=0;)e.push(0);for(var t=0,r=0;r<e.length;r+=4)t+=(e[r]<<24)+(e[r+1]<<16)+(e[r+2]<<8)+e[r+3];return t%=Math.pow(2,32)}function dt(e,t,r,a){return new $.Record("Table Record",[{name:"tag",type:"TAG",value:void 0!==e?e:""},{name:"checkSum",type:"ULONG",value:void 0!==t?t:0},{name:"offset",type:"ULONG",value:void 0!==r?r:0},{name:"length",type:"ULONG",value:void 0!==a?a:0}])}function vt(e){var t=new $.Table("sfnt",[{name:"version",type:"TAG",value:"OTTO"},{name:"numTables",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);t.tables=e,t.numTables=e.length;var r=Math.pow(2,ht(t.numTables));t.searchRange=16*r,t.entrySelector=ht(r),t.rangeShift=16*t.numTables-t.searchRange;for(var a=[],n=[],o=t.sizeOf()+dt().sizeOf()*t.numTables;o%4!=0;)o+=1,n.push({name:"padding",type:"BYTE",value:0});for(var s=0;s<e.length;s+=1){var i=e[s];w.argument(4===i.tableName.length,"Table name"+i.tableName+" is invalid.");var l=i.sizeOf(),u=dt(i.tableName,ft(i.encode()),o,l);for(a.push({name:u.tag+" Table Record",type:"RECORD",value:u}),n.push({name:i.tableName+" table",type:"RECORD",value:i}),o+=l,w.argument(!isNaN(o),"Something went wrong calculating the offset.");o%4!=0;)o+=1,n.push({name:"padding",type:"BYTE",value:0})}return a.sort(function(e,t){return e.value.tag>t.value.tag?1:-1}),t.fields=t.fields.concat(a),t.fields=t.fields.concat(n),t}function gt(e,t,r){for(var a=0;a<t.length;a+=1){var n=e.charToGlyphIndex(t[a]);if(0<n)return e.glyphs.get(n).getMetrics()}return r}var mt={make:vt,fontToTable:function(e){for(var t,r=[],a=[],n=[],o=[],s=[],i=[],l=[],u=0,p=0,c=0,h=0,f=0,d=0;d<e.glyphs.length;d+=1){var v=e.glyphs.get(d),g=0|v.unicode;if(isNaN(v.advanceWidth))throw new Error("Glyph "+v.name+" ("+d+"): advanceWidth is not a number.");(g<t||void 0===t)&&0<g&&(t=g),u<g&&(u=g);var m=ot.getUnicodeRange(g);if(m<32)p|=1<<m;else if(m<64)c|=1<<m-32;else if(m<96)h|=1<<m-64;else{if(!(m<123))throw new Error("Unicode ranges bits > 123 are reserved for internal usage");f|=1<<m-96}if(".notdef"!==v.name){var y=v.getMetrics();r.push(y.xMin),a.push(y.yMin),n.push(y.xMax),o.push(y.yMax),i.push(y.leftSideBearing),l.push(y.rightSideBearing),s.push(v.advanceWidth)}}var b={xMin:Math.min.apply(null,r),yMin:Math.min.apply(null,a),xMax:Math.max.apply(null,n),yMax:Math.max.apply(null,o),advanceWidthMax:Math.max.apply(null,s),advanceWidthAvg:function(e){for(var t=0,r=0;r<e.length;r+=1)t+=e[r];return t/e.length}(s),minLeftSideBearing:Math.min.apply(null,i),maxLeftSideBearing:Math.max.apply(null,i),minRightSideBearing:Math.min.apply(null,l)};b.ascender=e.ascender,b.descender=e.descender;var S=He.make({flags:3,unitsPerEm:e.unitsPerEm,xMin:b.xMin,yMin:b.yMin,xMax:b.xMax,yMax:b.yMax,lowestRecPPEM:3,createdTimestamp:e.createdTimestamp}),x=ze.make({ascender:b.ascender,descender:b.descender,advanceWidthMax:b.advanceWidthMax,minLeftSideBearing:b.minLeftSideBearing,minRightSideBearing:b.minRightSideBearing,xMaxExtent:b.maxLeftSideBearing+(b.xMax-b.xMin),numberOfHMetrics:e.glyphs.length}),U=Xe.make(e.glyphs.length),T=ot.make({xAvgCharWidth:Math.round(b.advanceWidthAvg),usWeightClass:e.tables.os2.usWeightClass,usWidthClass:e.tables.os2.usWidthClass,usFirstCharIndex:t,usLastCharIndex:u,ulUnicodeRange1:p,ulUnicodeRange2:c,ulUnicodeRange3:h,ulUnicodeRange4:f,fsSelection:e.tables.os2.fsSelection,sTypoAscender:b.ascender,sTypoDescender:b.descender,sTypoLineGap:0,usWinAscent:b.yMax,usWinDescent:Math.abs(b.yMin),ulCodePageRange1:1,sxHeight:gt(e,"xyvw",{yMax:Math.round(b.ascender/2)}).yMax,sCapHeight:gt(e,"HIKLEFJMNTZBDPRAGOQSUVWXY",b).yMax,usDefaultChar:e.hasChar(" ")?32:0,usBreakChar:e.hasChar(" ")?32:0}),O=We.make(e.glyphs),E=le.make(e.glyphs),k=e.getEnglishName("fontFamily"),R=e.getEnglishName("fontSubfamily"),L=k+" "+R,D=e.getEnglishName("postScriptName");D||(D=k.replace(/\s/g,"")+"-"+R);var w={};for(var C in e.names)w[C]=e.names[C];w.uniqueID||(w.uniqueID={en:e.getEnglishName("manufacturer")+":"+L}),w.postScriptName||(w.postScriptName={en:D}),w.preferredFamily||(w.preferredFamily=e.names.fontFamily),w.preferredSubfamily||(w.preferredSubfamily=e.names.fontSubfamily);var G=[],I=at.make(w,G),B=0<G.length?qe.make(G):void 0,M=st.make(),N=Fe.make(e.glyphs,{version:e.getEnglishName("version"),fullName:L,familyName:k,weightName:R,postScriptName:D,unitsPerEm:e.unitsPerEm,fontBBox:[0,b.yMin,b.ascender,b.advanceWidthMax]}),P=e.metas&&0<Object.keys(e.metas).length?ct.make(e.metas):void 0,A=[S,x,U,T,I,E,M,N,O];B&&A.push(B),e.tables.gsub&&A.push(pt.make(e.tables.gsub)),P&&A.push(P);for(var F=vt(A),H=ft(F.encode()),z=F.fields,W=!1,q=0;q<z.length;q+=1)if("head table"===z[q].name){z[q].value.checkSumAdjustment=2981146554-H,W=!0;break}if(!W)throw new Error("Could not find head table with checkSum to adjust.");return F},computeCheckSum:ft};function yt(e,t){for(var r=0,a=e.length-1;r<=a;){var n=r+a>>>1,o=e[n].tag;if(o===t)return n;o<t?r=n+1:a=n-1}return-r-1}function bt(e,t){for(var r=0,a=e.length-1;r<=a;){var n=r+a>>>1,o=e[n];if(o===t)return n;o<t?r=n+1:a=n-1}return-r-1}function St(e,t){for(var r,a=0,n=e.length-1;a<=n;){var o=a+n>>>1,s=(r=e[o]).start;if(s===t)return r;s<t?a=o+1:n=o-1}if(0<a)return t>(r=e[a-1]).end?0:r}function xt(e,t){this.font=e,this.tableName=t}function Ut(e){xt.call(this,e,"gpos")}function Tt(e){xt.call(this,e,"gsub")}function Ot(e,t){var r=e.length;if(r!==t.length)return!1;for(var a=0;a<r;a++)if(e[a]!==t[a])return!1;return!0}function Et(e,t,r){for(var a=e.subtables,n=0;n<a.length;n++){var o=a[n];if(o.substFormat===t)return o}if(r)return a.push(r),r}function kt(e){for(var t=new ArrayBuffer(e.length),r=new Uint8Array(t),a=0;a<e.length;++a)r[a]=e[a];return t}function Rt(e,t){if(!e)throw t}function Lt(e,t,r,a,n){var o;return 0<(t&a)?(o=e.parseByte(),0==(t&n)&&(o=-o),o=r+o):o=0<(t&n)?r:r+e.parseShort(),o}function Dt(e,t,r){var a,n,o=new ie.Parser(t,r);if(e.numberOfContours=o.parseShort(),e._xMin=o.parseShort(),e._yMin=o.parseShort(),e._xMax=o.parseShort(),e._yMax=o.parseShort(),0<e.numberOfContours){for(var s=e.endPointIndices=[],i=0;i<e.numberOfContours;i+=1)s.push(o.parseUShort());e.instructionLength=o.parseUShort(),e.instructions=[];for(var l=0;l<e.instructionLength;l+=1)e.instructions.push(o.parseByte());var u=s[s.length-1]+1;a=[];for(var p=0;p<u;p+=1)if(n=o.parseByte(),a.push(n),0<(8&n))for(var c=o.parseByte(),h=0;h<c;h+=1)a.push(n),p+=1;if(w.argument(a.length===u,"Bad flags."),0<s.length){var f,d=[];if(0<u){for(var v=0;v<u;v+=1)n=a[v],(f={}).onCurve=!!(1&n),f.lastPointOfContour=0<=s.indexOf(v),d.push(f);for(var g=0,m=0;m<u;m+=1)n=a[m],(f=d[m]).x=Lt(o,n,g,2,16),g=f.x;for(var y=0,b=0;b<u;b+=1)n=a[b],(f=d[b]).y=Lt(o,n,y,4,32),y=f.y}e.points=d}else e.points=[]}else if(0===e.numberOfContours)e.points=[];else{e.isComposite=!0,e.points=[],e.components=[];for(var S=!0;S;){a=o.parseUShort();var x={glyphIndex:o.parseUShort(),xScale:1,scale01:0,scale10:0,yScale:1,dx:0,dy:0};0<(1&a)?0<(2&a)?(x.dx=o.parseShort(),x.dy=o.parseShort()):x.matchedPoints=[o.parseUShort(),o.parseUShort()]:0<(2&a)?(x.dx=o.parseChar(),x.dy=o.parseChar()):x.matchedPoints=[o.parseByte(),o.parseByte()],0<(8&a)?x.xScale=x.yScale=o.parseF2Dot14():0<(64&a)?(x.xScale=o.parseF2Dot14(),x.yScale=o.parseF2Dot14()):0<(128&a)&&(x.xScale=o.parseF2Dot14(),x.scale01=o.parseF2Dot14(),x.scale10=o.parseF2Dot14(),x.yScale=o.parseF2Dot14()),e.components.push(x),S=!!(32&a)}if(256&a){e.instructionLength=o.parseUShort(),e.instructions=[];for(var U=0;U<e.instructionLength;U+=1)e.instructions.push(o.parseByte())}}}function wt(e,t){for(var r=[],a=0;a<e.length;a+=1){var n=e[a],o={x:t.xScale*n.x+t.scale01*n.y+t.dx,y:t.scale10*n.x+t.yScale*n.y+t.dy,onCurve:n.onCurve,lastPointOfContour:n.lastPointOfContour};r.push(o)}return r}function Ct(e){var t=new M;if(!e)return t;for(var r=function(e){for(var t=[],r=[],a=0;a<e.length;a+=1){var n=e[a];r.push(n),n.lastPointOfContour&&(t.push(r),r=[])}return w.argument(0===r.length,"There are still points left in the current contour."),t}(e),a=0;a<r.length;++a){var n=r[a],o=null,s=n[n.length-1],i=n[0];if(s.onCurve)t.moveTo(s.x,s.y);else if(i.onCurve)t.moveTo(i.x,i.y);else{var l={x:.5*(s.x+i.x),y:.5*(s.y+i.y)};t.moveTo(l.x,l.y)}for(var u=0;u<n.length;++u)if(o=s,s=i,i=n[(u+1)%n.length],s.onCurve)t.lineTo(s.x,s.y);else{var p=i;o.onCurve||{x:.5*(s.x+o.x),y:.5*(s.y+o.y)},i.onCurve||(p={x:.5*(s.x+i.x),y:.5*(s.y+i.y)}),t.quadraticCurveTo(s.x,s.y,p.x,p.y)}t.closePath()}return t}function Gt(e,t){if(t.isComposite)for(var r=0;r<t.components.length;r+=1){var a=t.components[r],n=e.get(a.glyphIndex);if(n.getPath(),n.points){var o=void 0;if(void 0===a.matchedPoints)o=wt(n.points,a);else{if(a.matchedPoints[0]>t.points.length-1||a.matchedPoints[1]>n.points.length-1)throw Error("Matched points out of range in "+t.name);var s=t.points[a.matchedPoints[0]],i=n.points[a.matchedPoints[1]],l={xScale:a.xScale,scale01:a.scale01,scale10:a.scale10,yScale:a.yScale,dx:0,dy:0};i=wt([i],l)[0],l.dx=s.x-i.x,l.dy=s.y-i.y,o=wt(n.points,l)}t.points=t.points.concat(o)}}return Ct(t.points)}(Ut.prototype=xt.prototype={searchTag:yt,binSearch:bt,getTable:function(e){var t=this.font.tables[this.tableName];return!t&&e&&(t=this.font.tables[this.tableName]=this.createDefaultTable()),t},getScriptNames:function(){var e=this.getTable();return e?e.scripts.map(function(e){return e.tag}):[]},getDefaultScriptName:function(){var e=this.getTable();if(e){for(var t=!1,r=0;r<e.scripts.length;r++){var a=e.scripts[r].tag;if("DFLT"===a)return a;"latn"===a&&(t=!0)}return t?"latn":void 0}},getScriptTable:function(e,t){var r=this.getTable(t);if(r){e=e||"DFLT";var a=r.scripts,n=yt(r.scripts,e);if(0<=n)return a[n].script;if(t){var o={tag:e,script:{defaultLangSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]},langSysRecords:[]}};return a.splice(-1-n,0,o),o.script}}},getLangSysTable:function(e,t,r){var a=this.getScriptTable(e,r);if(a){if(!t||"dflt"===t||"DFLT"===t)return a.defaultLangSys;var n=yt(a.langSysRecords,t);if(0<=n)return a.langSysRecords[n].langSys;if(r){var o={tag:t,langSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]}};return a.langSysRecords.splice(-1-n,0,o),o.langSys}}},getFeatureTable:function(e,t,r,a){var n=this.getLangSysTable(e,t,a);if(n){for(var o,s=n.featureIndexes,i=this.font.tables[this.tableName].features,l=0;l<s.length;l++)if((o=i[s[l]]).tag===r)return o.feature;if(a){var u=i.length;return w.assert(0===u||r>=i[u-1].tag,"Features must be added in alphabetical order."),o={tag:r,feature:{params:0,lookupListIndexes:[]}},i.push(o),s.push(u),o.feature}}},getLookupTables:function(e,t,r,a,n){var o=this.getFeatureTable(e,t,r,n),s=[];if(o){for(var i,l=o.lookupListIndexes,u=this.font.tables[this.tableName].lookups,p=0;p<l.length;p++)(i=u[l[p]]).lookupType===a&&s.push(i);if(0===s.length&&n){i={lookupType:a,lookupFlag:0,subtables:[],markFilteringSet:void 0};var c=u.length;return u.push(i),l.push(c),[i]}}return s},getGlyphClass:function(e,t){switch(e.format){case 1:return e.startGlyph<=t&&t<e.startGlyph+e.classes.length?e.classes[t-e.startGlyph]:0;case 2:var r=St(e.ranges,t);return r?r.classId:0}},getCoverageIndex:function(e,t){switch(e.format){case 1:var r=bt(e.glyphs,t);return 0<=r?r:-1;case 2:var a=St(e.ranges,t);return a?a.index+t-a.start:-1}},expandCoverage:function(e){if(1===e.format)return e.glyphs;for(var t=[],r=e.ranges,a=0;a<r.length;a++)for(var n=r[a],o=n.start,s=n.end,i=o;i<=s;i++)t.push(i);return t}}).init=function(){var e=this.getDefaultScriptName();this.defaultKerningTables=this.getKerningTables(e)},Ut.prototype.getKerningValue=function(e,t,r){for(var a=0;a<e.length;a++)for(var n=e[a].subtables,o=0;o<n.length;o++){var s=n[o],i=this.getCoverageIndex(s.coverage,t);if(!(i<0))switch(s.posFormat){case 1:for(var l=s.pairSets[i],u=0;u<l.length;u++){var p=l[u];if(p.secondGlyph===r)return p.value1&&p.value1.xAdvance||0}break;case 2:var c=this.getGlyphClass(s.classDef1,t),h=this.getGlyphClass(s.classDef2,r),f=s.classRecords[c][h];return f.value1&&f.value1.xAdvance||0}}return 0},Ut.prototype.getKerningTables=function(e,t){if(this.font.tables.gpos)return this.getLookupTables(e,t,"kern",2)},(Tt.prototype=xt.prototype).createDefaultTable=function(){return{version:1,scripts:[{tag:"DFLT",script:{defaultLangSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]},langSysRecords:[]}}],features:[],lookups:[]}},Tt.prototype.getSingle=function(e,t,r){for(var a=[],n=this.getLookupTables(t,r,e,1),o=0;o<n.length;o++)for(var s=n[o].subtables,i=0;i<s.length;i++){var l=s[i],u=this.expandCoverage(l.coverage),p=void 0;if(1===l.substFormat){var c=l.deltaGlyphId;for(p=0;p<u.length;p++){var h=u[p];a.push({sub:h,by:h+c})}}else{var f=l.substitute;for(p=0;p<u.length;p++)a.push({sub:u[p],by:f[p]})}}return a},Tt.prototype.getAlternates=function(e,t,r){for(var a=[],n=this.getLookupTables(t,r,e,3),o=0;o<n.length;o++)for(var s=n[o].subtables,i=0;i<s.length;i++)for(var l=s[i],u=this.expandCoverage(l.coverage),p=l.alternateSets,c=0;c<u.length;c++)a.push({sub:u[c],by:p[c]});return a},Tt.prototype.getLigatures=function(e,t,r){for(var a=[],n=this.getLookupTables(t,r,e,4),o=0;o<n.length;o++)for(var s=n[o].subtables,i=0;i<s.length;i++)for(var l=s[i],u=this.expandCoverage(l.coverage),p=l.ligatureSets,c=0;c<u.length;c++)for(var h=u[c],f=p[c],d=0;d<f.length;d++){var v=f[d];a.push({sub:[h].concat(v.components),by:v.ligGlyph})}return a},Tt.prototype.addSingle=function(e,t,r,a){var n=Et(this.getLookupTables(r,a,e,1,!0)[0],2,{substFormat:2,coverage:{format:1,glyphs:[]},substitute:[]});w.assert(1===n.coverage.format,"Ligature: unable to modify coverage table format "+n.coverage.format);var o=t.sub,s=this.binSearch(n.coverage.glyphs,o);s<0&&(s=-1-s,n.coverage.glyphs.splice(s,0,o),n.substitute.splice(s,0,0)),n.substitute[s]=t.by},Tt.prototype.addAlternate=function(e,t,r,a){var n=Et(this.getLookupTables(r,a,e,3,!0)[0],1,{substFormat:1,coverage:{format:1,glyphs:[]},alternateSets:[]});w.assert(1===n.coverage.format,"Ligature: unable to modify coverage table format "+n.coverage.format);var o=t.sub,s=this.binSearch(n.coverage.glyphs,o);s<0&&(s=-1-s,n.coverage.glyphs.splice(s,0,o),n.alternateSets.splice(s,0,0)),n.alternateSets[s]=t.by},Tt.prototype.addLigature=function(e,t,r,a){var n=this.getLookupTables(r,a,e,4,!0)[0],o=n.subtables[0];o||(o={substFormat:1,coverage:{format:1,glyphs:[]},ligatureSets:[]},n.subtables[0]=o),w.assert(1===o.coverage.format,"Ligature: unable to modify coverage table format "+o.coverage.format);var s=t.sub[0],i=t.sub.slice(1),l={ligGlyph:t.by,components:i},u=this.binSearch(o.coverage.glyphs,s);if(0<=u){for(var p=o.ligatureSets[u],c=0;c<p.length;c++)if(Ot(p[c].components,i))return;p.push(l)}else u=-1-u,o.coverage.glyphs.splice(u,0,s),o.ligatureSets.splice(u,0,[l])},Tt.prototype.getFeature=function(e,t,r){if(/ss\d\d/.test(e))return this.getSingle(e,t,r);switch(e){case"aalt":case"salt":return this.getSingle(e,t,r).concat(this.getAlternates(e,t,r));case"dlig":case"liga":case"rlig":return this.getLigatures(e,t,r)}},Tt.prototype.add=function(e,t,r,a){if(/ss\d\d/.test(e))return this.addSingle(e,t,r,a);switch(e){case"aalt":case"salt":return"number"==typeof t.by?this.addSingle(e,t,r,a):this.addAlternate(e,t,r,a);case"dlig":case"liga":case"rlig":return this.addLigature(e,t,r,a)}};var It,Bt,Mt,Nt,Pt={getPath:Ct,parse:function(e,t,r,a){for(var n=new xe.GlyphSet(a),o=0;o<r.length-1;o+=1){var s=r[o];s!==r[o+1]?n.push(o,xe.ttfGlyphLoader(a,o,Dt,e,t+s,Gt)):n.push(o,xe.glyphLoader(a,o))}return n}};function At(e){this.font=e,this.getCommands=function(e){return Pt.getPath(e).commands},this._fpgmState=this._prepState=void 0,this._errorState=0}function Ft(e){return e}function Ht(e){return Math.sign(e)*Math.round(Math.abs(e))}function zt(e){return Math.sign(e)*Math.round(Math.abs(2*e))/2}function Wt(e){return Math.sign(e)*(Math.round(Math.abs(e)+.5)-.5)}function qt(e){return Math.sign(e)*Math.ceil(Math.abs(e))}function Xt(e){return Math.sign(e)*Math.floor(Math.abs(e))}var _t=function(e){var t=this.srPeriod,r=this.srPhase,a=1;return e<0&&(e=-e,a=-1),e+=this.srThreshold-r,e=Math.trunc(e/t)*t,(e+=r)<0?r*a:e*a},Vt={x:1,y:0,axis:"x",distance:function(e,t,r,a){return(r?e.xo:e.x)-(a?t.xo:t.x)},interpolate:function(e,t,r,a){var n,o,s,i,l,u,p;if(!a||a===this)return n=e.xo-t.xo,o=e.xo-r.xo,l=t.x-t.xo,u=r.x-r.xo,0===(p=(s=Math.abs(n))+(i=Math.abs(o)))?void(e.x=e.xo+(l+u)/2):void(e.x=e.xo+(l*i+u*s)/p);n=a.distance(e,t,!0,!0),o=a.distance(e,r,!0,!0),l=a.distance(t,t,!1,!0),u=a.distance(r,r,!1,!0),0!==(p=(s=Math.abs(n))+(i=Math.abs(o)))?Vt.setRelative(e,e,(l*i+u*s)/p,a,!0):Vt.setRelative(e,e,(l+u)/2,a,!0)},normalSlope:Number.NEGATIVE_INFINITY,setRelative:function(e,t,r,a,n){if(a&&a!==this){var o=n?t.xo:t.x,s=n?t.yo:t.y,i=o+r*a.x,l=s+r*a.y;e.x=i+(e.y-l)/a.normalSlope}else e.x=(n?t.xo:t.x)+r},slope:0,touch:function(e){e.xTouched=!0},touched:function(e){return e.xTouched},untouch:function(e){e.xTouched=!1}},Yt={x:0,y:1,axis:"y",distance:function(e,t,r,a){return(r?e.yo:e.y)-(a?t.yo:t.y)},interpolate:function(e,t,r,a){var n,o,s,i,l,u,p;if(!a||a===this)return n=e.yo-t.yo,o=e.yo-r.yo,l=t.y-t.yo,u=r.y-r.yo,0===(p=(s=Math.abs(n))+(i=Math.abs(o)))?void(e.y=e.yo+(l+u)/2):void(e.y=e.yo+(l*i+u*s)/p);n=a.distance(e,t,!0,!0),o=a.distance(e,r,!0,!0),l=a.distance(t,t,!1,!0),u=a.distance(r,r,!1,!0),0!==(p=(s=Math.abs(n))+(i=Math.abs(o)))?Yt.setRelative(e,e,(l*i+u*s)/p,a,!0):Yt.setRelative(e,e,(l+u)/2,a,!0)},normalSlope:0,setRelative:function(e,t,r,a,n){if(a&&a!==this){var o=n?t.xo:t.x,s=n?t.yo:t.y,i=o+r*a.x,l=s+r*a.y;e.y=l+a.normalSlope*(e.x-i)}else e.y=(n?t.yo:t.y)+r},slope:Number.POSITIVE_INFINITY,touch:function(e){e.yTouched=!0},touched:function(e){return e.yTouched},untouch:function(e){e.yTouched=!1}};function jt(e,t){this.x=e,this.y=t,this.axis=void 0,this.slope=t/e,this.normalSlope=-e/t,Object.freeze(this)}function Zt(e,t){var r=Math.sqrt(e*e+t*t);return t/=r,1===(e/=r)&&0===t?Vt:0===e&&1===t?Yt:new jt(e,t)}function Qt(e,t,r,a){this.x=this.xo=Math.round(64*e)/64,this.y=this.yo=Math.round(64*t)/64,this.lastPointOfContour=r,this.onCurve=a,this.prevPointOnContour=void 0,this.nextPointOnContour=void 0,this.xTouched=!1,this.yTouched=!1,Object.preventExtensions(this)}Object.freeze(Vt),Object.freeze(Yt),jt.prototype.distance=function(e,t,r,a){return this.x*Vt.distance(e,t,r,a)+this.y*Yt.distance(e,t,r,a)},jt.prototype.interpolate=function(e,t,r,a){var n,o,s,i,l,u,p;s=a.distance(e,t,!0,!0),i=a.distance(e,r,!0,!0),n=a.distance(t,t,!1,!0),o=a.distance(r,r,!1,!0),0!==(p=(l=Math.abs(s))+(u=Math.abs(i)))?this.setRelative(e,e,(n*u+o*l)/p,a,!0):this.setRelative(e,e,(n+o)/2,a,!0)},jt.prototype.setRelative=function(e,t,r,a,n){a=a||this;var o=n?t.xo:t.x,s=n?t.yo:t.y,i=o+r*a.x,l=s+r*a.y,u=a.normalSlope,p=this.slope,c=e.x,h=e.y;e.x=(p*c-u*i+l-h)/(p-u),e.y=p*(e.x-c)+h},jt.prototype.touch=function(e){e.xTouched=!0,e.yTouched=!0},Qt.prototype.nextTouched=function(e){for(var t=this.nextPointOnContour;!e.touched(t)&&t!==this;)t=t.nextPointOnContour;return t},Qt.prototype.prevTouched=function(e){for(var t=this.prevPointOnContour;!e.touched(t)&&t!==this;)t=t.prevPointOnContour;return t};var Kt=Object.freeze(new Qt(0,0)),Jt={cvCutIn:17/16,deltaBase:9,deltaShift:.125,loop:1,minDis:1,autoFlip:!0};function $t(e,t){switch(this.env=e,this.stack=[],this.prog=t,e){case"glyf":this.zp0=this.zp1=this.zp2=1,this.rp0=this.rp1=this.rp2=0;case"prep":this.fv=this.pv=this.dpv=Vt,this.round=Ht}}function er(e){for(var t=e.tZone=new Array(e.gZone.length),r=0;r<t.length;r++)t[r]=new Qt(0,0)}function tr(e,t){var r,a=e.prog,n=e.ip,o=1;do{if(88===(r=a[++n]))o++;else if(89===r)o--;else if(64===r)n+=a[n+1]+1;else if(65===r)n+=2*a[n+1]+1;else if(176<=r&&r<=183)n+=r-176+1;else if(184<=r&&r<=191)n+=2*(r-184+1);else if(t&&1===o&&27===r)break}while(0<o);e.ip=n}function rr(e,t){E.DEBUG&&console.log(t.step,"SVTCA["+e.axis+"]"),t.fv=t.pv=t.dpv=e}function ar(e,t){E.DEBUG&&console.log(t.step,"SPVTCA["+e.axis+"]"),t.pv=t.dpv=e}function nr(e,t){E.DEBUG&&console.log(t.step,"SFVTCA["+e.axis+"]"),t.fv=e}function or(e,t){var r,a,n=t.stack,o=n.pop(),s=n.pop(),i=t.z2[o],l=t.z1[s];E.DEBUG&&console.log("SPVTL["+e+"]",o,s),e?(r=i.y-l.y,a=l.x-i.x):(r=l.x-i.x,a=l.y-i.y),t.pv=t.dpv=Zt(r,a)}function sr(e,t){var r,a,n=t.stack,o=n.pop(),s=n.pop(),i=t.z2[o],l=t.z1[s];E.DEBUG&&console.log("SFVTL["+e+"]",o,s),e?(r=i.y-l.y,a=l.x-i.x):(r=l.x-i.x,a=l.y-i.y),t.fv=Zt(r,a)}function ir(e){E.DEBUG&&console.log(e.step,"POP[]"),e.stack.pop()}function lr(e,t){var r=t.stack.pop(),a=t.z0[r],n=t.fv,o=t.pv;E.DEBUG&&console.log(t.step,"MDAP["+e+"]",r);var s=o.distance(a,Kt);e&&(s=t.round(s)),n.setRelative(a,Kt,s,o),n.touch(a),t.rp0=t.rp1=r}function ur(e,t){var r,a,n,o=t.z2,s=o.length-2;E.DEBUG&&console.log(t.step,"IUP["+e.axis+"]");for(var i=0;i<s;i++)r=o[i],e.touched(r)||(a=r.prevTouched(e))!==r&&(a===(n=r.nextTouched(e))&&e.setRelative(r,r,e.distance(a,a,!1,!0),e,!0),e.interpolate(r,a,n,e))}function pr(e,t){for(var r=t.stack,a=e?t.rp1:t.rp2,n=(e?t.z0:t.z1)[a],o=t.fv,s=t.pv,i=t.loop,l=t.z2;i--;){var u=r.pop(),p=l[u],c=s.distance(n,n,!1,!0);o.setRelative(p,p,c,s),o.touch(p),E.DEBUG&&console.log(t.step,(1<t.loop?"loop "+(t.loop-i)+": ":"")+"SHP["+(e?"rp1":"rp2")+"]",u)}t.loop=1}function cr(e,t){var r=t.stack,a=e?t.rp1:t.rp2,n=(e?t.z0:t.z1)[a],o=t.fv,s=t.pv,i=r.pop(),l=t.z2[t.contours[i]],u=l;E.DEBUG&&console.log(t.step,"SHC["+e+"]",i);for(var p=s.distance(n,n,!1,!0);u!==n&&o.setRelative(u,u,p,s),(u=u.nextPointOnContour)!==l;);}function hr(e,t){var r,a,n=t.stack,o=e?t.rp1:t.rp2,s=(e?t.z0:t.z1)[o],i=t.fv,l=t.pv,u=n.pop();switch(E.DEBUG&&console.log(t.step,"SHZ["+e+"]",u),u){case 0:r=t.tZone;break;case 1:r=t.gZone;break;default:throw new Error("Invalid zone")}for(var p=l.distance(s,s,!1,!0),c=r.length-2,h=0;h<c;h++)a=r[h],i.setRelative(a,a,p,l)}function fr(e,t){var r=t.stack,a=r.pop()/64,n=r.pop(),o=t.z1[n],s=t.z0[t.rp0],i=t.fv,l=t.pv;i.setRelative(o,s,a,l),i.touch(o),E.DEBUG&&console.log(t.step,"MSIRP["+e+"]",a,n),t.rp1=t.rp0,t.rp2=n,e&&(t.rp0=n)}function dr(e,t){var r=t.stack,a=r.pop(),n=r.pop(),o=t.z0[n],s=t.fv,i=t.pv,l=t.cvt[a];E.DEBUG&&console.log(t.step,"MIAP["+e+"]",a,"(",l,")",n);var u=i.distance(o,Kt);e&&(Math.abs(u-l)<t.cvCutIn&&(u=l),u=t.round(u)),s.setRelative(o,Kt,u,i),0===t.zp0&&(o.xo=o.x,o.yo=o.y),s.touch(o),t.rp0=t.rp1=n}function vr(e,t){var r=t.stack,a=r.pop(),n=t.z2[a];E.DEBUG&&console.log(t.step,"GC["+e+"]",a),r.push(64*t.dpv.distance(n,Kt,e,!1))}function gr(e,t){var r=t.stack,a=r.pop(),n=r.pop(),o=t.z1[a],s=t.z0[n],i=t.dpv.distance(s,o,e,e);E.DEBUG&&console.log(t.step,"MD["+e+"]",a,n,"->",i),t.stack.push(Math.round(64*i))}function mr(e,t){var r=t.stack,a=r.pop(),n=t.fv,o=t.pv,s=t.ppem,i=t.deltaBase+16*(e-1),l=t.deltaShift,u=t.z0;E.DEBUG&&console.log(t.step,"DELTAP["+e+"]",a,r);for(var p=0;p<a;p++){var c=r.pop(),h=r.pop();if(i+((240&h)>>4)===s){var f=(15&h)-8;0<=f&&f++,E.DEBUG&&console.log(t.step,"DELTAPFIX",c,"by",f*l);var d=u[c];n.setRelative(d,d,f*l,o)}}}function yr(e,t){var r=t.stack,a=r.pop();E.DEBUG&&console.log(t.step,"ROUND[]"),r.push(64*t.round(a/64))}function br(e,t){var r=t.stack,a=r.pop(),n=t.ppem,o=t.deltaBase+16*(e-1),s=t.deltaShift;E.DEBUG&&console.log(t.step,"DELTAC["+e+"]",a,r);for(var i=0;i<a;i++){var l=r.pop(),u=r.pop();if(o+((240&u)>>4)===n){var p=(15&u)-8;0<=p&&p++;var c=p*s;E.DEBUG&&console.log(t.step,"DELTACFIX",l,"by",c),t.cvt[l]+=c}}}function Sr(e,t){var r,a,n=t.stack,o=n.pop(),s=n.pop(),i=t.z2[o],l=t.z1[s];E.DEBUG&&console.log(t.step,"SDPVTL["+e+"]",o,s),e?(r=i.y-l.y,a=l.x-i.x):(r=l.x-i.x,a=l.y-i.y),t.dpv=Zt(r,a)}function xr(e,t){var r=t.stack,a=t.prog,n=t.ip;E.DEBUG&&console.log(t.step,"PUSHB["+e+"]");for(var o=0;o<e;o++)r.push(a[++n]);t.ip=n}function Ur(e,t){var r=t.ip,a=t.prog,n=t.stack;E.DEBUG&&console.log(t.ip,"PUSHW["+e+"]");for(var o=0;o<e;o++){var s=a[++r]<<8|a[++r];32768&s&&(s=-(1+(65535^s))),n.push(s)}t.ip=r}function Tr(e,t,r,a,n,o){var s,i,l,u,p=o.stack,c=e&&p.pop(),h=p.pop(),f=o.rp0,d=o.z0[f],v=o.z1[h],g=o.minDis,m=o.fv,y=o.dpv;l=0<=(i=s=y.distance(v,d,!0,!0))?1:-1,i=Math.abs(i),e&&(u=o.cvt[c],a&&Math.abs(i-u)<o.cvCutIn&&(i=u)),r&&i<g&&(i=g),a&&(i=o.round(i)),m.setRelative(v,d,l*i,y),m.touch(v),E.DEBUG&&console.log(o.step,(e?"MIRP[":"MDRP[")+(t?"M":"m")+(r?">":"_")+(a?"R":"_")+(0===n?"Gr":1===n?"Bl":2===n?"Wh":"")+"]",e?c+"("+o.cvt[c]+","+u+")":"",h,"(d =",s,"->",l*i,")"),o.rp1=o.rp0,o.rp2=h,t&&(o.rp0=h)}At.prototype.exec=function(e,t){if("number"!=typeof t)throw new Error("Point size is not a number!");if(!(2<this._errorState)){var r=this.font,a=this._prepState;if(!a||a.ppem!==t){var n=this._fpgmState;if(!n){$t.prototype=Jt,(n=this._fpgmState=new $t("fpgm",r.tables.fpgm)).funcs=[],n.font=r,E.DEBUG&&(console.log("---EXEC FPGM---"),n.step=-1);try{Bt(n)}catch(e){return console.log("Hinting error in FPGM:"+e),void(this._errorState=3)}}$t.prototype=n,(a=this._prepState=new $t("prep",r.tables.prep)).ppem=t;var o=r.tables.cvt;if(o)for(var s=a.cvt=new Array(o.length),i=t/r.unitsPerEm,l=0;l<o.length;l++)s[l]=o[l]*i;else a.cvt=[];E.DEBUG&&(console.log("---EXEC PREP---"),a.step=-1);try{Bt(a)}catch(e){this._errorState<2&&console.log("Hinting error in PREP:"+e),this._errorState=2}}if(!(1<this._errorState))try{return Mt(e,a)}catch(e){return this._errorState<1&&(console.log("Hinting error:"+e),console.log("Note: further hinting errors are silenced")),void(this._errorState=1)}}},Mt=function(e,t){var r,a,n,o=t.ppem/t.font.unitsPerEm,s=o,i=e.components;if($t.prototype=t,i){var l=t.font;a=[],r=[];for(var u=0;u<i.length;u++){var p=i[u],c=l.glyphs.get(p.glyphIndex);n=new $t("glyf",c.instructions),E.DEBUG&&(console.log("---EXEC COMP "+u+"---"),n.step=-1),Nt(c,n,o,s);for(var h=Math.round(p.dx*o),f=Math.round(p.dy*s),d=n.gZone,v=n.contours,g=0;g<d.length;g++){var m=d[g];m.xTouched=m.yTouched=!1,m.xo=m.x=m.x+h,m.yo=m.y=m.y+f}var y=a.length;a.push.apply(a,d);for(var b=0;b<v.length;b++)r.push(v[b]+y)}e.instructions&&!n.inhibitGridFit&&((n=new $t("glyf",e.instructions)).gZone=n.z0=n.z1=n.z2=a,n.contours=r,a.push(new Qt(0,0),new Qt(Math.round(e.advanceWidth*o),0)),E.DEBUG&&(console.log("---EXEC COMPOSITE---"),n.step=-1),Bt(n),a.length-=2)}else n=new $t("glyf",e.instructions),E.DEBUG&&(console.log("---EXEC GLYPH---"),n.step=-1),Nt(e,n,o,s),a=n.gZone;return a},Nt=function(e,t,r,a){for(var n,o,s,i=e.points||[],l=i.length,u=t.gZone=t.z0=t.z1=t.z2=[],p=t.contours=[],c=0;c<l;c++)n=i[c],u[c]=new Qt(n.x*r,n.y*a,n.lastPointOfContour,n.onCurve);for(var h=0;h<l;h++)n=u[h],o||(o=n,p.push(h)),n.lastPointOfContour?((n.nextPointOnContour=o).prevPointOnContour=n,o=void 0):(s=u[h+1],(n.nextPointOnContour=s).prevPointOnContour=n);if(!t.inhibitGridFit){if(E.DEBUG){console.log("PROCESSING GLYPH",t.stack);for(var f=0;f<l;f++)console.log(f,u[f].x,u[f].y)}if(u.push(new Qt(0,0),new Qt(Math.round(e.advanceWidth*r),0)),Bt(t),u.length-=2,E.DEBUG){console.log("FINISHED GLYPH",t.stack);for(var d=0;d<l;d++)console.log(d,u[d].x,u[d].y)}}},Bt=function(e){var t=e.prog;if(t){var r,a=t.length;for(e.ip=0;e.ip<a;e.ip++){if(E.DEBUG&&e.step++,!(r=It[t[e.ip]]))throw new Error("unknown instruction: 0x"+Number(t[e.ip]).toString(16));r(e)}}},It=[rr.bind(void 0,Yt),rr.bind(void 0,Vt),ar.bind(void 0,Yt),ar.bind(void 0,Vt),nr.bind(void 0,Yt),nr.bind(void 0,Vt),or.bind(void 0,0),or.bind(void 0,1),sr.bind(void 0,0),sr.bind(void 0,1),function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"SPVFS[]",r,a),e.pv=e.dpv=Zt(a,r)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"SPVFS[]",r,a),e.fv=Zt(a,r)},function(e){var t=e.stack,r=e.pv;E.DEBUG&&console.log(e.step,"GPV[]"),t.push(16384*r.x),t.push(16384*r.y)},function(e){var t=e.stack,r=e.fv;E.DEBUG&&console.log(e.step,"GFV[]"),t.push(16384*r.x),t.push(16384*r.y)},function(e){e.fv=e.pv,E.DEBUG&&console.log(e.step,"SFVTPV[]")},function(e){var t=e.stack,r=t.pop(),a=t.pop(),n=t.pop(),o=t.pop(),s=t.pop(),i=e.z0,l=e.z1,u=i[r],p=i[a],c=l[n],h=l[o],f=e.z2[s];E.DEBUG&&console.log("ISECT[], ",r,a,n,o,s);var d=u.x,v=u.y,g=p.x,m=p.y,y=c.x,b=c.y,S=h.x,x=h.y,U=(d-g)*(b-x)-(v-m)*(y-S),T=d*m-v*g,O=y*x-b*S;f.x=(T*(y-S)-O*(d-g))/U,f.y=(T*(b-x)-O*(v-m))/U},function(e){e.rp0=e.stack.pop(),E.DEBUG&&console.log(e.step,"SRP0[]",e.rp0)},function(e){e.rp1=e.stack.pop(),E.DEBUG&&console.log(e.step,"SRP1[]",e.rp1)},function(e){e.rp2=e.stack.pop(),E.DEBUG&&console.log(e.step,"SRP2[]",e.rp2)},function(e){var t=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"SZP0[]",t),e.zp0=t){case 0:e.tZone||er(e),e.z0=e.tZone;break;case 1:e.z0=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"SZP1[]",t),e.zp1=t){case 0:e.tZone||er(e),e.z1=e.tZone;break;case 1:e.z1=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"SZP2[]",t),e.zp2=t){case 0:e.tZone||er(e),e.z2=e.tZone;break;case 1:e.z2=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"SZPS[]",t),e.zp0=e.zp1=e.zp2=t,t){case 0:e.tZone||er(e),e.z0=e.z1=e.z2=e.tZone;break;case 1:e.z0=e.z1=e.z2=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){e.loop=e.stack.pop(),E.DEBUG&&console.log(e.step,"SLOOP[]",e.loop)},function(e){E.DEBUG&&console.log(e.step,"RTG[]"),e.round=Ht},function(e){E.DEBUG&&console.log(e.step,"RTHG[]"),e.round=Wt},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"SMD[]",t),e.minDis=t/64},function(e){E.DEBUG&&console.log(e.step,"ELSE[]"),tr(e,!1)},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"JMPR[]",t),e.ip+=t-1},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"SCVTCI[]",t),e.cvCutIn=t/64},void 0,void 0,function(e){var t=e.stack;E.DEBUG&&console.log(e.step,"DUP[]"),t.push(t[t.length-1])},ir,function(e){E.DEBUG&&console.log(e.step,"CLEAR[]"),e.stack.length=0},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"SWAP[]"),t.push(r),t.push(a)},function(e){var t=e.stack;E.DEBUG&&console.log(e.step,"DEPTH[]"),t.push(t.length)},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"CINDEX[]",r),t.push(t[t.length-r])},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"MINDEX[]",r),t.push(t.splice(t.length-r,1)[0])},void 0,void 0,void 0,function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"LOOPCALL[]",r,a);var n=e.ip,o=e.prog;e.prog=e.funcs[r];for(var s=0;s<a;s++)Bt(e),E.DEBUG&&console.log(++e.step,s+1<a?"next loopcall":"done loopcall",s);e.ip=n,e.prog=o},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"CALL[]",t);var r=e.ip,a=e.prog;e.prog=e.funcs[t],Bt(e),e.ip=r,e.prog=a,E.DEBUG&&console.log(++e.step,"returning from",t)},function(e){if("fpgm"!==e.env)throw new Error("FDEF not allowed here");var t=e.stack,r=e.prog,a=e.ip,n=t.pop(),o=a;for(E.DEBUG&&console.log(e.step,"FDEF[]",n);45!==r[++a];);e.ip=a,e.funcs[n]=r.slice(o+1,a)},void 0,lr.bind(void 0,0),lr.bind(void 0,1),ur.bind(void 0,Yt),ur.bind(void 0,Vt),pr.bind(void 0,0),pr.bind(void 0,1),cr.bind(void 0,0),cr.bind(void 0,1),hr.bind(void 0,0),hr.bind(void 0,1),function(e){for(var t=e.stack,r=e.loop,a=e.fv,n=t.pop()/64,o=e.z2;r--;){var s=t.pop(),i=o[s];E.DEBUG&&console.log(e.step,(1<e.loop?"loop "+(e.loop-r)+": ":"")+"SHPIX[]",s,n),a.setRelative(i,i,n),a.touch(i)}e.loop=1},function(e){for(var t=e.stack,r=e.rp1,a=e.rp2,n=e.loop,o=e.z0[r],s=e.z1[a],i=e.fv,l=e.dpv,u=e.z2;n--;){var p=t.pop(),c=u[p];E.DEBUG&&console.log(e.step,(1<e.loop?"loop "+(e.loop-n)+": ":"")+"IP[]",p,r,"<->",a),i.interpolate(c,o,s,l),i.touch(c)}e.loop=1},fr.bind(void 0,0),fr.bind(void 0,1),function(e){for(var t=e.stack,r=e.rp0,a=e.z0[r],n=e.loop,o=e.fv,s=e.pv,i=e.z1;n--;){var l=t.pop(),u=i[l];E.DEBUG&&console.log(e.step,(1<e.loop?"loop "+(e.loop-n)+": ":"")+"ALIGNRP[]",l),o.setRelative(u,a,0,s),o.touch(u)}e.loop=1},function(e){E.DEBUG&&console.log(e.step,"RTDG[]"),e.round=zt},dr.bind(void 0,0),dr.bind(void 0,1),function(e){var t=e.prog,r=e.ip,a=e.stack,n=t[++r];E.DEBUG&&console.log(e.step,"NPUSHB[]",n);for(var o=0;o<n;o++)a.push(t[++r]);e.ip=r},function(e){var t=e.ip,r=e.prog,a=e.stack,n=r[++t];E.DEBUG&&console.log(e.step,"NPUSHW[]",n);for(var o=0;o<n;o++){var s=r[++t]<<8|r[++t];32768&s&&(s=-(1+(65535^s))),a.push(s)}e.ip=t},function(e){var t=e.stack,r=e.store;r||(r=e.store=[]);var a=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"WS",a,n),r[n]=a},function(e){var t=e.stack,r=e.store,a=t.pop();E.DEBUG&&console.log(e.step,"RS",a);var n=r&&r[a]||0;t.push(n)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"WCVTP",r,a),e.cvt[a]=r/64},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"RCVT",r),t.push(64*e.cvt[r])},vr.bind(void 0,0),vr.bind(void 0,1),void 0,gr.bind(void 0,0),gr.bind(void 0,1),function(e){E.DEBUG&&console.log(e.step,"MPPEM[]"),e.stack.push(e.ppem)},void 0,function(e){E.DEBUG&&console.log(e.step,"FLIPON[]"),e.autoFlip=!0},void 0,void 0,function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"LT[]",r,a),t.push(a<r?1:0)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"LTEQ[]",r,a),t.push(a<=r?1:0)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"GT[]",r,a),t.push(r<a?1:0)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"GTEQ[]",r,a),t.push(r<=a?1:0)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"EQ[]",r,a),t.push(r===a?1:0)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"NEQ[]",r,a),t.push(r!==a?1:0)},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"ODD[]",r),t.push(Math.trunc(r)%2?1:0)},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"EVEN[]",r),t.push(Math.trunc(r)%2?0:1)},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"IF[]",t),t||(tr(e,!0),E.DEBUG&&console.log(e.step,"EIF[]"))},function(e){E.DEBUG&&console.log(e.step,"EIF[]")},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"AND[]",r,a),t.push(r&&a?1:0)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"OR[]",r,a),t.push(r||a?1:0)},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"NOT[]",r),t.push(r?0:1)},mr.bind(void 0,1),function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"SDB[]",t),e.deltaBase=t},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"SDS[]",t),e.deltaShift=Math.pow(.5,t)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"ADD[]",r,a),t.push(a+r)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"SUB[]",r,a),t.push(a-r)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"DIV[]",r,a),t.push(64*a/r)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"MUL[]",r,a),t.push(a*r/64)},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"ABS[]",r),t.push(Math.abs(r))},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"NEG[]",r),t.push(-r)},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"FLOOR[]",r),t.push(64*Math.floor(r/64))},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"CEILING[]",r),t.push(64*Math.ceil(r/64))},yr.bind(void 0,0),yr.bind(void 0,1),yr.bind(void 0,2),yr.bind(void 0,3),void 0,void 0,void 0,void 0,function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"WCVTF[]",r,a),e.cvt[a]=r*e.ppem/e.font.unitsPerEm},mr.bind(void 0,2),mr.bind(void 0,3),br.bind(void 0,1),br.bind(void 0,2),br.bind(void 0,3),function(e){var t,r=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"SROUND[]",r),e.round=_t,192&r){case 0:t=.5;break;case 64:t=1;break;case 128:t=2;break;default:throw new Error("invalid SROUND value")}switch(e.srPeriod=t,48&r){case 0:e.srPhase=0;break;case 16:e.srPhase=.25*t;break;case 32:e.srPhase=.5*t;break;case 48:e.srPhase=.75*t;break;default:throw new Error("invalid SROUND value")}r&=15,e.srThreshold=0===r?0:(r/8-.5)*t},function(e){var t,r=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"S45ROUND[]",r),e.round=_t,192&r){case 0:t=Math.sqrt(2)/2;break;case 64:t=Math.sqrt(2);break;case 128:t=2*Math.sqrt(2);break;default:throw new Error("invalid S45ROUND value")}switch(e.srPeriod=t,48&r){case 0:e.srPhase=0;break;case 16:e.srPhase=.25*t;break;case 32:e.srPhase=.5*t;break;case 48:e.srPhase=.75*t;break;default:throw new Error("invalid S45ROUND value")}r&=15,e.srThreshold=0===r?0:(r/8-.5)*t},void 0,void 0,function(e){E.DEBUG&&console.log(e.step,"ROFF[]"),e.round=Ft},void 0,function(e){E.DEBUG&&console.log(e.step,"RUTG[]"),e.round=qt},function(e){E.DEBUG&&console.log(e.step,"RDTG[]"),e.round=Xt},ir,ir,void 0,void 0,void 0,void 0,void 0,function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"SCANCTRL[]",t)},Sr.bind(void 0,0),Sr.bind(void 0,1),function(e){var t=e.stack,r=t.pop(),a=0;E.DEBUG&&console.log(e.step,"GETINFO[]",r),1&r&&(a=35),32&r&&(a|=4096),t.push(a)},void 0,function(e){var t=e.stack,r=t.pop(),a=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"ROLL[]"),t.push(a),t.push(r),t.push(n)},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"MAX[]",r,a),t.push(Math.max(a,r))},function(e){var t=e.stack,r=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"MIN[]",r,a),t.push(Math.min(a,r))},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"SCANTYPE[]",t)},function(e){var t=e.stack.pop(),r=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"INSTCTRL[]",t,r),t){case 1:return void(e.inhibitGridFit=!!r);case 2:return void(e.ignoreCvt=!!r);default:throw new Error("invalid INSTCTRL[] selector")}},void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,xr.bind(void 0,1),xr.bind(void 0,2),xr.bind(void 0,3),xr.bind(void 0,4),xr.bind(void 0,5),xr.bind(void 0,6),xr.bind(void 0,7),xr.bind(void 0,8),Ur.bind(void 0,1),Ur.bind(void 0,2),Ur.bind(void 0,3),Ur.bind(void 0,4),Ur.bind(void 0,5),Ur.bind(void 0,6),Ur.bind(void 0,7),Ur.bind(void 0,8),Tr.bind(void 0,0,0,0,0,0),Tr.bind(void 0,0,0,0,0,1),Tr.bind(void 0,0,0,0,0,2),Tr.bind(void 0,0,0,0,0,3),Tr.bind(void 0,0,0,0,1,0),Tr.bind(void 0,0,0,0,1,1),Tr.bind(void 0,0,0,0,1,2),Tr.bind(void 0,0,0,0,1,3),Tr.bind(void 0,0,0,1,0,0),Tr.bind(void 0,0,0,1,0,1),Tr.bind(void 0,0,0,1,0,2),Tr.bind(void 0,0,0,1,0,3),Tr.bind(void 0,0,0,1,1,0),Tr.bind(void 0,0,0,1,1,1),Tr.bind(void 0,0,0,1,1,2),Tr.bind(void 0,0,0,1,1,3),Tr.bind(void 0,0,1,0,0,0),Tr.bind(void 0,0,1,0,0,1),Tr.bind(void 0,0,1,0,0,2),Tr.bind(void 0,0,1,0,0,3),Tr.bind(void 0,0,1,0,1,0),Tr.bind(void 0,0,1,0,1,1),Tr.bind(void 0,0,1,0,1,2),Tr.bind(void 0,0,1,0,1,3),Tr.bind(void 0,0,1,1,0,0),Tr.bind(void 0,0,1,1,0,1),Tr.bind(void 0,0,1,1,0,2),Tr.bind(void 0,0,1,1,0,3),Tr.bind(void 0,0,1,1,1,0),Tr.bind(void 0,0,1,1,1,1),Tr.bind(void 0,0,1,1,1,2),Tr.bind(void 0,0,1,1,1,3),Tr.bind(void 0,1,0,0,0,0),Tr.bind(void 0,1,0,0,0,1),Tr.bind(void 0,1,0,0,0,2),Tr.bind(void 0,1,0,0,0,3),Tr.bind(void 0,1,0,0,1,0),Tr.bind(void 0,1,0,0,1,1),Tr.bind(void 0,1,0,0,1,2),Tr.bind(void 0,1,0,0,1,3),Tr.bind(void 0,1,0,1,0,0),Tr.bind(void 0,1,0,1,0,1),Tr.bind(void 0,1,0,1,0,2),Tr.bind(void 0,1,0,1,0,3),Tr.bind(void 0,1,0,1,1,0),Tr.bind(void 0,1,0,1,1,1),Tr.bind(void 0,1,0,1,1,2),Tr.bind(void 0,1,0,1,1,3),Tr.bind(void 0,1,1,0,0,0),Tr.bind(void 0,1,1,0,0,1),Tr.bind(void 0,1,1,0,0,2),Tr.bind(void 0,1,1,0,0,3),Tr.bind(void 0,1,1,0,1,0),Tr.bind(void 0,1,1,0,1,1),Tr.bind(void 0,1,1,0,1,2),Tr.bind(void 0,1,1,0,1,3),Tr.bind(void 0,1,1,1,0,0),Tr.bind(void 0,1,1,1,0,1),Tr.bind(void 0,1,1,1,0,2),Tr.bind(void 0,1,1,1,0,3),Tr.bind(void 0,1,1,1,1,0),Tr.bind(void 0,1,1,1,1,1),Tr.bind(void 0,1,1,1,1,2),Tr.bind(void 0,1,1,1,1,3)];var Or=Array.from||function(e){return e.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]?|[^\uD800-\uDFFF]|./g)||[]};function Er(e){(e=e||{}).empty||(Rt(e.familyName,"When creating a new Font object, familyName is required."),Rt(e.styleName,"When creating a new Font object, styleName is required."),Rt(e.unitsPerEm,"When creating a new Font object, unitsPerEm is required."),Rt(e.ascender,"When creating a new Font object, ascender is required."),Rt(e.descender,"When creating a new Font object, descender is required."),Rt(e.descender<0,"Descender should be negative (e.g. -512)."),this.names={fontFamily:{en:e.familyName||" "},fontSubfamily:{en:e.styleName||" "},fullName:{en:e.fullName||e.familyName+" "+e.styleName},postScriptName:{en:e.postScriptName||(e.familyName+e.styleName).replace(/\s/g,"")},designer:{en:e.designer||" "},designerURL:{en:e.designerURL||" "},manufacturer:{en:e.manufacturer||" "},manufacturerURL:{en:e.manufacturerURL||" "},license:{en:e.license||" "},licenseURL:{en:e.licenseURL||" "},version:{en:e.version||"Version 0.1"},description:{en:e.description||" "},copyright:{en:e.copyright||" "},trademark:{en:e.trademark||" "}},this.unitsPerEm=e.unitsPerEm||1e3,this.ascender=e.ascender,this.descender=e.descender,this.createdTimestamp=e.createdTimestamp,this.tables={os2:{usWeightClass:e.weightClass||this.usWeightClasses.MEDIUM,usWidthClass:e.widthClass||this.usWidthClasses.MEDIUM,fsSelection:e.fsSelection||this.fsSelectionValues.REGULAR}}),this.supported=!0,this.glyphs=new xe.GlyphSet(this,e.glyphs||[]),this.encoding=new fe(this),this.position=new Ut(this),this.substitution=new Tt(this),this.tables=this.tables||{},Object.defineProperty(this,"hinting",{get:function(){return this._hinting?this._hinting:"truetype"===this.outlinesFormat?this._hinting=new At(this):void 0}})}function kr(e,t){var r=JSON.stringify(e),a=256;for(var n in t){var o=parseInt(n);if(o&&!(o<256)){if(JSON.stringify(t[n])===r)return o;a<=o&&(a=o+1)}}return t[a]=e,a}function Rr(e,t,r,a){for(var n=[{name:"nameID_"+e,type:"USHORT",value:kr(t.name,a)},{name:"flags_"+e,type:"USHORT",value:0}],o=0;o<r.length;++o){var s=r[o].tag;n.push({name:"axis_"+e+" "+s,type:"FIXED",value:t.coordinates[s]<<16})}return n}function Lr(e,t,r,a){var n={},o=new ie.Parser(e,t);n.name=a[o.parseUShort()]||{},o.skip("uShort",1),n.coordinates={};for(var s=0;s<r.length;++s)n.coordinates[r[s].tag]=o.parseFixed();return n}Er.prototype.hasChar=function(e){return null!==this.encoding.charToGlyphIndex(e)},Er.prototype.charToGlyphIndex=function(e){return this.encoding.charToGlyphIndex(e)},Er.prototype.charToGlyph=function(e){var t=this.charToGlyphIndex(e),r=this.glyphs.get(t);return r||(r=this.glyphs.get(0)),r},Er.prototype.stringToGlyphs=function(e,t){t=t||this.defaultRenderOptions;for(var r=Or(e),a=[],n=0;n<r.length;n+=1){var o=r[n];a.push(this.charToGlyphIndex(o))}var s=a.length;if(t.features){var i=t.script||this.substitution.getDefaultScriptName(),l=[];t.features.liga&&(l=l.concat(this.substitution.getFeature("liga",i,t.language))),t.features.rlig&&(l=l.concat(this.substitution.getFeature("rlig",i,t.language)));for(var u=0;u<s;u+=1)for(var p=0;p<l.length;p++){for(var c=l[p],h=c.sub,f=h.length,d=0;d<f&&h[d]===a[u+d];)d++;d===f&&(a.splice(u,f,c.by),s=s-f+1)}}for(var v=new Array(s),g=this.glyphs.get(0),m=0;m<s;m+=1)v[m]=this.glyphs.get(a[m])||g;return v},Er.prototype.nameToGlyphIndex=function(e){return this.glyphNames.nameToGlyphIndex(e)},Er.prototype.nameToGlyph=function(e){var t=this.nameToGlyphIndex(e),r=this.glyphs.get(t);return r||(r=this.glyphs.get(0)),r},Er.prototype.glyphIndexToName=function(e){return this.glyphNames.glyphIndexToName?this.glyphNames.glyphIndexToName(e):""},Er.prototype.getKerningValue=function(e,t){e=e.index||e,t=t.index||t;var r=this.position.defaultKerningTables;return r?this.position.getKerningValue(r,e,t):this.kerningPairs[e+","+t]||0},Er.prototype.defaultRenderOptions={kerning:!0,features:{liga:!0,rlig:!0}},Er.prototype.forEachGlyph=function(e,t,r,a,n,o){t=void 0!==t?t:0,r=void 0!==r?r:0,a=void 0!==a?a:72,n=n||this.defaultRenderOptions;var s,i=1/this.unitsPerEm*a,l=this.stringToGlyphs(e,n);if(n.kerning){var u=n.script||this.position.getDefaultScriptName();s=this.position.getKerningTables(u,n.language)}for(var p=0;p<l.length;p+=1){var c=l[p];if(o.call(this,c,t,r,a,n),c.advanceWidth&&(t+=c.advanceWidth*i),n.kerning&&p<l.length-1)t+=(s?this.position.getKerningValue(s,c.index,l[p+1].index):this.getKerningValue(c,l[p+1]))*i;n.letterSpacing?t+=n.letterSpacing*a:n.tracking&&(t+=n.tracking/1e3*a)}return t},Er.prototype.getPath=function(e,t,r,a,o){var s=new M;return this.forEachGlyph(e,t,r,a,o,function(e,t,r,a){var n=e.getPath(t,r,a,o,this);s.extend(n)}),s},Er.prototype.getPaths=function(e,t,r,a,o){var s=[];return this.forEachGlyph(e,t,r,a,o,function(e,t,r,a){var n=e.getPath(t,r,a,o,this);s.push(n)}),s},Er.prototype.getAdvanceWidth=function(e,t,r){return this.forEachGlyph(e,0,0,t,r,function(){})},Er.prototype.draw=function(e,t,r,a,n,o){this.getPath(t,r,a,n,o).draw(e)},Er.prototype.drawPoints=function(n,e,t,r,a,o){this.forEachGlyph(e,t,r,a,o,function(e,t,r,a){e.drawPoints(n,t,r,a)})},Er.prototype.drawMetrics=function(n,e,t,r,a,o){this.forEachGlyph(e,t,r,a,o,function(e,t,r,a){e.drawMetrics(n,t,r,a)})},Er.prototype.getEnglishName=function(e){var t=this.names[e];if(t)return t.en},Er.prototype.validate=function(){var r=this;function e(e){var t=r.getEnglishName(e);t&&t.trim().length}e("fontFamily"),e("weightName"),e("manufacturer"),e("copyright"),e("version"),this.unitsPerEm},Er.prototype.toTables=function(){return mt.fontToTable(this)},Er.prototype.toBuffer=function(){return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."),this.toArrayBuffer()},Er.prototype.toArrayBuffer=function(){for(var e=this.toTables().encode(),t=new ArrayBuffer(e.length),r=new Uint8Array(t),a=0;a<e.length;a++)r[a]=e[a];return t},Er.prototype.download=function(t){var e=this.getEnglishName("fontFamily"),r=this.getEnglishName("fontSubfamily");t=t||e.replace(/\s/g,"")+"-"+r+".otf";var n=this.toArrayBuffer();if("undefined"!=typeof window)window.requestFileSystem=window.requestFileSystem||window.webkitRequestFileSystem,window.requestFileSystem(window.TEMPORARY,n.byteLength,function(e){e.root.getFile(t,{create:!0},function(a){a.createWriter(function(e){var t=new DataView(n),r=new Blob([t],{type:"font/opentype"});e.write(r),e.addEventListener("writeend",function(){location.href=a.toURL()},!1)})})},function(e){throw new Error(e.name+": "+e.message)});else{var a=require("fs"),o=function(e){for(var t=new Buffer(e.byteLength),r=new Uint8Array(e),a=0;a<t.length;++a)t[a]=r[a];return t}(n);a.writeFileSync(t,o)}},Er.prototype.fsSelectionValues={ITALIC:1,UNDERSCORE:2,NEGATIVE:4,OUTLINED:8,STRIKEOUT:16,BOLD:32,REGULAR:64,USER_TYPO_METRICS:128,WWS:256,OBLIQUE:512},Er.prototype.usWidthClasses={ULTRA_CONDENSED:1,EXTRA_CONDENSED:2,CONDENSED:3,SEMI_CONDENSED:4,MEDIUM:5,SEMI_EXPANDED:6,EXPANDED:7,EXTRA_EXPANDED:8,ULTRA_EXPANDED:9},Er.prototype.usWeightClasses={THIN:100,EXTRA_LIGHT:200,LIGHT:300,NORMAL:400,MEDIUM:500,SEMI_BOLD:600,BOLD:700,EXTRA_BOLD:800,BLACK:900};var Dr={make:function(e,t){var r,a,n,o,s=new $.Table("fvar",[{name:"version",type:"ULONG",value:65536},{name:"offsetToData",type:"USHORT",value:0},{name:"countSizePairs",type:"USHORT",value:2},{name:"axisCount",type:"USHORT",value:e.axes.length},{name:"axisSize",type:"USHORT",value:20},{name:"instanceCount",type:"USHORT",value:e.instances.length},{name:"instanceSize",type:"USHORT",value:4+4*e.axes.length}]);s.offsetToData=s.sizeOf();for(var i=0;i<e.axes.length;i++)s.fields=s.fields.concat((r=i,a=e.axes[i],n=t,o=kr(a.name,n),[{name:"tag_"+r,type:"TAG",value:a.tag},{name:"minValue_"+r,type:"FIXED",value:a.minValue<<16},{name:"defaultValue_"+r,type:"FIXED",value:a.defaultValue<<16},{name:"maxValue_"+r,type:"FIXED",value:a.maxValue<<16},{name:"flags_"+r,type:"USHORT",value:0},{name:"nameID_"+r,type:"USHORT",value:o}]));for(var l=0;l<e.instances.length;l++)s.fields=s.fields.concat(Rr(l,e.instances[l],e.axes,t));return s},parse:function(e,t,r){var a=new ie.Parser(e,t),n=a.parseULong();w.argument(65536===n,"Unsupported fvar table version.");var o=a.parseOffset16();a.skip("uShort",1);for(var s,i,l,u,p,c=a.parseUShort(),h=a.parseUShort(),f=a.parseUShort(),d=a.parseUShort(),v=[],g=0;g<c;g++)v.push((s=e,i=t+o+g*h,l=r,p=u=void 0,u={},p=new ie.Parser(s,i),u.tag=p.parseTag(),u.minValue=p.parseFixed(),u.defaultValue=p.parseFixed(),u.maxValue=p.parseFixed(),p.skip("uShort",1),u.name=l[p.parseUShort()]||{},u));for(var m=[],y=t+o+c*h,b=0;b<f;b++)m.push(Lr(e,y+b*d,v,r));return{axes:v,instances:m}}},wr=new Array(10);wr[1]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{posFormat:1,coverage:this.parsePointer(oe.coverage),value:this.parseValueRecord()}:2===t?{posFormat:2,coverage:this.parsePointer(oe.coverage),values:this.parseValueRecordList()}:void w.assert(!1,"0x"+e.toString(16)+": GPOS lookup type 1 format must be 1 or 2.")},wr[2]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();w.assert(1===t||2===t,"0x"+e.toString(16)+": GPOS lookup type 2 format must be 1 or 2.");var r=this.parsePointer(oe.coverage),a=this.parseUShort(),n=this.parseUShort();if(1===t)return{posFormat:t,coverage:r,valueFormat1:a,valueFormat2:n,pairSets:this.parseList(oe.pointer(oe.list(function(){return{secondGlyph:this.parseUShort(),value1:this.parseValueRecord(a),value2:this.parseValueRecord(n)}})))};if(2===t){var o=this.parsePointer(oe.classDef),s=this.parsePointer(oe.classDef),i=this.parseUShort(),l=this.parseUShort();return{posFormat:t,coverage:r,valueFormat1:a,valueFormat2:n,classDef1:o,classDef2:s,class1Count:i,class2Count:l,classRecords:this.parseList(i,oe.list(l,function(){return{value1:this.parseValueRecord(a),value2:this.parseValueRecord(n)}}))}}},wr[3]=function(){return{error:"GPOS Lookup 3 not supported"}},wr[4]=function(){return{error:"GPOS Lookup 4 not supported"}},wr[5]=function(){return{error:"GPOS Lookup 5 not supported"}},wr[6]=function(){return{error:"GPOS Lookup 6 not supported"}},wr[7]=function(){return{error:"GPOS Lookup 7 not supported"}},wr[8]=function(){return{error:"GPOS Lookup 8 not supported"}},wr[9]=function(){return{error:"GPOS Lookup 9 not supported"}};var Cr=new Array(10);var Gr={parse:function(e,t){var r=new oe(e,t=t||0),a=r.parseVersion(1);return w.argument(1===a||1.1===a,"Unsupported GPOS table version "+a),1===a?{version:a,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(wr)}:{version:a,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(wr),variations:r.parseFeatureVariationsList()}},make:function(e){return new $.Table("GPOS",[{name:"version",type:"ULONG",value:65536},{name:"scripts",type:"TABLE",value:new $.ScriptList(e.scripts)},{name:"features",type:"TABLE",value:new $.FeatureList(e.features)},{name:"lookups",type:"TABLE",value:new $.LookupList(e.lookups,Cr)}])}};var Ir={parse:function(e,t){var r=new ie.Parser(e,t),a=r.parseUShort();if(0===a)return function(e){var t={};e.skip("uShort");var r=e.parseUShort();w.argument(0===r,"Unsupported kern sub-table version."),e.skip("uShort",2);var a=e.parseUShort();e.skip("uShort",3);for(var n=0;n<a;n+=1){var o=e.parseUShort(),s=e.parseUShort(),i=e.parseShort();t[o+","+s]=i}return t}(r);if(1===a)return function(e){var t={};e.skip("uShort"),1<e.parseULong()&&console.warn("Only the first kern subtable is supported."),e.skip("uLong");var r=255&e.parseUShort();if(e.skip("uShort"),0===r){var a=e.parseUShort();e.skip("uShort",3);for(var n=0;n<a;n+=1){var o=e.parseUShort(),s=e.parseUShort(),i=e.parseShort();t[o+","+s]=i}}return t}(r);throw new Error("Unsupported kern table version ("+a+").")}};var Br={parse:function(e,t,r,a){for(var n=new ie.Parser(e,t),o=a?n.parseUShort:n.parseULong,s=[],i=0;i<r+1;i+=1){var l=o.call(n);a&&(l*=2),s.push(l)}return s}};function Mr(e,r){require("fs").readFile(e,function(e,t){if(e)return r(e.message);r(null,kt(t))})}function Nr(e,t){var r=new XMLHttpRequest;r.open("get",e,!0),r.responseType="arraybuffer",r.onload=function(){return r.response?t(null,r.response):t("Font could not be loaded: "+r.statusText)},r.onerror=function(){t("Font could not be loaded")},r.send()}function Pr(e,t){for(var r=[],a=12,n=0;n<t;n+=1){var o=ie.getTag(e,a),s=ie.getULong(e,a+4),i=ie.getULong(e,a+8),l=ie.getULong(e,a+12);r.push({tag:o,checksum:s,offset:i,length:l,compression:!1}),a+=16}return r}function Ar(e,t){if("WOFF"===t.compression){var r=new Uint8Array(e.buffer,t.offset+2,t.compressedLength-2),a=new Uint8Array(t.length);if(n(r,a),a.byteLength!==t.length)throw new Error("Decompression error: "+t.tag+" decompressed length doesn't match recorded length");return{data:new DataView(a.buffer,0),offset:0}}return{data:e,offset:t.offset}}function Fr(e){var t,r,a,n,o,s,i,l,u,p,c,h,f,d,v=new Er({empty:!0}),g=new DataView(e,0),m=[],y=ie.getTag(g,0);if(y===String.fromCharCode(0,1,0,0)||"true"===y||"typ1"===y)v.outlinesFormat="truetype",m=Pr(g,a=ie.getUShort(g,4));else if("OTTO"===y)v.outlinesFormat="cff",m=Pr(g,a=ie.getUShort(g,4));else{if("wOFF"!==y)throw new Error("Unsupported OpenType signature "+y);var b=ie.getTag(g,4);if(b===String.fromCharCode(0,1,0,0))v.outlinesFormat="truetype";else{if("OTTO"!==b)throw new Error("Unsupported OpenType flavor "+y);v.outlinesFormat="cff"}m=function(e,t){for(var r=[],a=44,n=0;n<t;n+=1){var o=ie.getTag(e,a),s=ie.getULong(e,a+4),i=ie.getULong(e,a+8),l=ie.getULong(e,a+12),u=void 0;u=i<l&&"WOFF",r.push({tag:o,offset:s,compression:u,compressedLength:i,length:l}),a+=20}return r}(g,a=ie.getUShort(g,12))}for(var S=0;S<a;S+=1){var x=m[S],U=void 0;switch(x.tag){case"cmap":U=Ar(g,x),v.tables.cmap=le.parse(U.data,U.offset),v.encoding=new de(v.tables.cmap);break;case"cvt ":U=Ar(g,x),d=new ie.Parser(U.data,U.offset),v.tables.cvt=d.parseShortList(x.length/2);break;case"fvar":o=x;break;case"fpgm":U=Ar(g,x),d=new ie.Parser(U.data,U.offset),v.tables.fpgm=d.parseByteList(x.length);break;case"head":U=Ar(g,x),v.tables.head=He.parse(U.data,U.offset),v.unitsPerEm=v.tables.head.unitsPerEm,t=v.tables.head.indexToLocFormat;break;case"hhea":U=Ar(g,x),v.tables.hhea=ze.parse(U.data,U.offset),v.ascender=v.tables.hhea.ascender,v.descender=v.tables.hhea.descender,v.numberOfHMetrics=v.tables.hhea.numberOfHMetrics;break;case"hmtx":u=x;break;case"ltag":U=Ar(g,x),r=qe.parse(U.data,U.offset);break;case"maxp":U=Ar(g,x),v.tables.maxp=Xe.parse(U.data,U.offset),v.numGlyphs=v.tables.maxp.numGlyphs;break;case"name":h=x;break;case"OS/2":U=Ar(g,x),v.tables.os2=ot.parse(U.data,U.offset);break;case"post":U=Ar(g,x),v.tables.post=st.parse(U.data,U.offset),v.glyphNames=new ge(v.tables.post);break;case"prep":U=Ar(g,x),d=new ie.Parser(U.data,U.offset),v.tables.prep=d.parseByteList(x.length);break;case"glyf":s=x;break;case"loca":c=x;break;case"CFF ":n=x;break;case"kern":p=x;break;case"GPOS":i=x;break;case"GSUB":l=x;break;case"meta":f=x}}var T=Ar(g,h);if(v.tables.name=at.parse(T.data,T.offset,r),v.names=v.tables.name,s&&c){var O=0===t,E=Ar(g,c),k=Br.parse(E.data,E.offset,v.numGlyphs,O),R=Ar(g,s);v.glyphs=Pt.parse(R.data,R.offset,k,v)}else{if(!n)throw new Error("Font doesn't contain TrueType or CFF outlines.");var L=Ar(g,n);Fe.parse(L.data,L.offset,v)}var D=Ar(g,u);if(We.parse(D.data,D.offset,v.numberOfHMetrics,v.numGlyphs,v.glyphs),function(e){for(var t,r=e.tables.cmap.glyphIndexMap,a=Object.keys(r),n=0;n<a.length;n+=1){var o=a[n],s=r[o];(t=e.glyphs.get(s)).addUnicode(parseInt(o))}for(var i=0;i<e.glyphs.length;i+=1)t=e.glyphs.get(i),e.cffEncoding?e.isCIDFont?t.name="gid"+i:t.name=e.cffEncoding.charset[i]:e.glyphNames.names&&(t.name=e.glyphNames.glyphIndexToName(i))}(v),p){var w=Ar(g,p);v.kerningPairs=Ir.parse(w.data,w.offset)}else v.kerningPairs={};if(i){var C=Ar(g,i);v.tables.gpos=Gr.parse(C.data,C.offset),v.position.init()}if(l){var G=Ar(g,l);v.tables.gsub=pt.parse(G.data,G.offset)}if(o){var I=Ar(g,o);v.tables.fvar=Dr.parse(I.data,I.offset,v.names)}if(f){var B=Ar(g,f);v.tables.meta=ct.parse(B.data,B.offset),v.metas=v.tables.meta}return v}E.Font=Er,E.Glyph=ye,E.Path=M,E.BoundingBox=R,E._parse=ie,E.parse=Fr,E.load=function(e,a){("undefined"==typeof window?Mr:Nr)(e,function(e,t){if(e)return a(e);var r;try{r=Fr(t)}catch(e){return a(e,null)}return a(null,r)})},E.loadSync=function(e){return Fr(kt(require("fs").readFileSync(e)))},Object.defineProperty(E,"__esModule",{value:!0})});
//# sourceMappingURL=opentype.min.js.map
function set(target, property, value, receiver) { if (typeof Reflect !== "undefined" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }

function _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error('failed to set property'); } return value; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

// TODO: Go through this file and deal with the remaining eslint errors so that
// it can be enabled.

/* eslint no-mixed-operators: "off" */

/* eslint one-var: "off" */

/* eslint no-multi-assign: "off" */

/* eslint no-restricted-globals: "off" */

/* eslint no-return-assign: "off" */
var opentype = self.opentype;
var cmuGraphics;
var brython = self.brython;
var GIF = self.GIF;
var $B = self.__BRYTHON__;
var DEBUG_EVENTS = false; // Don't change the value of this error code without also updating
// the code in FeedbackViewer.js that reports this sort of error to Rollbar.

var INTERNAL_ERROR_ID = 0;
var isWebWorker = typeof importScripts === 'function';
var activeDrawing = undefined; // debug printing

var p = function p() {
  var _console;

  var args = [isWebWorker ? 'worker:' : 'main:'].concat(Array.from(arguments));

  (_console = console).log.apply(_console, _toConsumableArray(args)); // if (typeof cmuGraphics !== 'undefined') {
  //     var strs = args.map(utils.pretty);
  //     var line = strs.join(' ');
  //     cmuGraphics.printToTextArea(line + '\n');
  // }

};

var pyThrow = function pyThrow(msg) {
  p('Error:', msg);

  if (isWebWorker) {
    if (self.handleMessageLocal === undefined) {
      $B.$raise($B.$call($B.builtins.Exception)(msg));
    } else {
      self.handleMessageLocal({
        'type': 'onThrow',
        'detail': {
          'canvasId': 'userCanvas',
          'msg': msg
        }
      });
    }
  }

  throw new Error(msg);
};

var internalError = function internalError(msg) {
  debugger;
  pyThrow("CMUGraphicsInternalError: ".concat(msg));
}; // place student-visible math fn's at top level


function isClose(u, v) {
  return Math.abs(u - v) < Math.pow(10, -8);
} // eslint-disable-line no-unused-vars


function toDegrees(radians) {
  return radians * 180 / Math.PI;
}

function toRadians(degrees) {
  return degrees * Math.PI / 180;
}

function distance(x1, y1, x2, y2) {
  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
}

function mod(v, r) {
  var result = v % r;
  return result >= 0 ? result : result + r;
}

function fromPythonAngle(radians) {
  return mod(90 - toDegrees(radians), 360);
}

function toPythonAngle(degrees) {
  return mod(toRadians(90 - degrees), 2 * Math.PI);
}

function angleTo(x1, y1, x2, y2) {
  var dx = x2 - x1;
  var dy = y2 - y1;
  return fromPythonAngle(Math.atan2(-dy, dx)); // use -dy since up is down
}

function getPointInDir(x1, y1, degrees, d) {
  var A = toPythonAngle(degrees);
  return [x1 + d * Math.cos(A), y1 - d * Math.sin(A)];
}

function contains(s, t) {
  return s.indexOf(t) >= 0;
}

var utils =
/*#__PURE__*/
function () {
  "use strict";

  function utils() {
    _classCallCheck(this, utils);
  }

  _createClass(utils, null, [{
    key: "round2",
    value: function round2(value) {
      // Add a epsilon to value to compensate for any floating point weirdness
      // to make sure that something like 1.49999999 --> 1.50 instead of 1.49
      return Math.round((value + 0.0001) * 100) / 100;
    }
  }, {
    key: "deepCopy",
    value: function deepCopy(value) {
      return JSON.parse(JSON.stringify(value));
    }
  }, {
    key: "remove",
    value: function remove(array, value) {
      var i = array.indexOf(value);
      if (i !== -1) array.splice(i, 1);
    }
  }, {
    key: "make2dArray",
    value: function make2dArray(rows, cols) {
      var result = new Array(rows);

      for (var i = 0; i < rows; i++) {
        result[i] = new Array(cols);
      }

      return result;
    }
  }, {
    key: "ordinalName",
    value: function ordinalName(n) {
      var ordinalNames = ['zeroth', 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth'];
      if (n < ordinalNames.length) return ordinalNames[n];else return "".concat(n, "th");
    }
  }, {
    key: "pretty",
    value: function pretty(value) {
      var seen = new Set(); // for self-referential objects

      var f = function f(v) {
        if (v === undefined) return 'undefined';
        if (seen.has(v)) return '...';
        seen.add(v);
        if (Array.isArray(v)) return "[".concat(v.map(utils.pretty), "]");else if (utils.isNumber(v)) return utils.rounded(v, 2);
        var result = v.toString();
        if (result !== '[object Object]') return result;
        var results = [];

        for (var key in v) {
          results.push("".concat(key, ":").concat(utils.pretty(v[key])));
        }

        return "{".concat(results.join(','), "}");
      };

      return f(value);
    }
  }, {
    key: "isNumber",
    value: function isNumber(n) {
      return isFinite(n) && +n === n;
    }
  }, {
    key: "flatten",
    value: function flatten(list) {
      return list.reduce(function (a, b) {
        return a.concat(Array.isArray(b) ? utils.flatten(b) : b);
      }, []);
    }
  }, {
    key: "rounded",
    value: function rounded(n, precision) {
      if (precision === undefined) precision = 0;
      if (Array.isArray(n)) return n.map(function (v) {
        return utils.rounded(v, precision);
      });else if (!utils.isNumber(n)) return n;else if (n < 0) return -utils.rounded(-n, precision);
      return Math.round(n * Math.pow(10, precision)) / Math.pow(10, precision);
    }
  }, {
    key: "tupleString",
    value: function tupleString(a) {
      return "(".concat(a.join(', '), ")");
    }
  }, {
    key: "roundedTupleString",
    value: function roundedTupleString(a, precision) {
      return utils.tupleString(utils.rounded(a, precision));
    }
  }, {
    key: "zip",
    value: function zip(a, b) {
      var c = [];

      for (var i = 0; i < Math.min(a.length, b.length); i++) {
        c.push([a[i], b[i]]);
      }

      return c;
    }
  }, {
    key: "rotatePoint",
    value: function rotatePoint(pt, radians, cx, cy) {
      var _pt = _slicedToArray(pt, 2),
          x = _pt[0],
          y = _pt[1];

      var theta = radians;
      var cos = Math.cos(theta);
      var sin = Math.sin(theta);
      return [cx + ((x - cx) * cos - (y - cy) * sin), cy + ((x - cx) * sin + (y - cy) * cos)];
    }
  }, {
    key: "rotatePoints",
    value: function rotatePoints(pts, radians, cx, cy) {
      return pts.map(function (pt) {
        return utils.rotatePoint(pt, radians, cx, cy);
      });
    }
  }, {
    key: "getArcPoints",
    value: function getArcPoints(cx, cy, width, height, startAngle, sweepAngle, sizeForN) {
      // get points that approximate the oval
      var a = width / 2,
          b = height / 2;
      var pts = [];

      if (sizeForN === undefined) {
        sizeForN = (a + b) / 2;
      }

      if (startAngle === undefined) {
        startAngle = 0;
      }

      if (sweepAngle === undefined) {
        sweepAngle = 360;
      } else {
        pts.push([cx, cy]);
      } // n must be a multiple of 4 to keep centroid==center and bounds==box


      var n = Math.round(6 + 18 * sizeForN / 50);
      n = Math.ceil(n / 4) * 4;
      var denominator = sweepAngle === 360 ? n : n - 1;
      startAngle = toRadians(90 - startAngle);
      sweepAngle = toRadians(sweepAngle);

      for (var i = 0; i < n; i++) {
        var theta = startAngle - sweepAngle * i / denominator;
        var x = cx + a * Math.cos(theta);
        var y = cy - b * Math.sin(theta);
        pts.push([x, y]);
      }

      return pts;
    }
  }, {
    key: "getBoxDims",
    value: function getBoxDims(pts) {
      if (!pts || pts.length === 0) {
        internalError('getBoxDims: empty points list');
      }

      var xlo, ylo, xhi, yhi;
      xlo = xhi = pts[0][0]; // eslint-disable-line

      ylo = yhi = pts[0][1]; // eslint-disable-line

      pts.forEach(function (pt) {
        var _pt2 = _slicedToArray(pt, 2),
            x = _pt2[0],
            y = _pt2[1];

        if (x < xlo) xlo = x;else if (x > xhi) xhi = x;
        if (y < ylo) ylo = y;else if (y > yhi) yhi = y;
      });
      return {
        left: xlo,
        top: ylo,
        width: xhi - xlo,
        height: yhi - ylo
      };
    }
  }, {
    key: "getBoxPoints",
    value: function getBoxPoints(pts) {
      var box = utils.getBoxDims(pts);
      return [[box.left, box.top], [box.left + box.width, box.top], [box.left + box.width, box.top + box.height], [box.left, box.top + box.height]];
    }
  }, {
    key: "getLinePoints",
    value: function getLinePoints(x1, y1, x2, y2, lineWidth) {
      // 0. get angle of rotation clockwise past horizontal
      var cx = (x1 + x2) / 2,
          cy = (y1 + y2) / 2;
      var a = toRadians(angleTo(x1, y1, x2, y2) - 90); // -90 so we're off the horizontal
      // 1. unrotate to horizontal, with p3 on the left, p4 on the right

      var pts = [[x1, y1], [x2, y2]];
      pts = utils.rotatePoints(pts, -a, cx, cy);
      var x3 = pts[0][0],
          y3 = pts[0][1],
          x4 = pts[1][0],
          y4 = pts[1][1]; // y3 should be isClose to y4
      // 2. define bounding box around the unrotated-to-horizontal line

      var s = lineWidth / 2;
      pts = [[x3, y3 - s], [x4, y3 - s], [x4, y4 + s], [x3, y4 + s]]; // 3. rerotate box

      return utils.rotatePoints(pts, a, cx, cy);
    }
  }, {
    key: "getRegularPolygonPoints",
    value: function getRegularPolygonPoints(cx, cy, r, points, rotateAngle) {
      var pts = [[cx, cy - r]];
      var dtheta = 360 / points;

      for (var i = 1; i < points; i++) {
        var _getPointInDir = getPointInDir(cx, cy, i * dtheta, r),
            _getPointInDir2 = _slicedToArray(_getPointInDir, 2),
            x = _getPointInDir2[0],
            y = _getPointInDir2[1];

        pts.push([x, y]);
      }

      if (rotateAngle) pts = utils.rotatePoints(pts, toRadians(rotateAngle), cx, cy);
      return pts;
    }
  }, {
    key: "getDefaultRoundness",
    value: function getDefaultRoundness(points) {
      return points < 6 ? 38.196601125 : 57.735026919;
    }
  }, {
    key: "getStarPoints",
    value: function getStarPoints(cx, cy, r, points, roundness, rotateAngle) {
      if (typeof roundness !== 'number') {
        roundness = utils.getDefaultRoundness(points);
      }

      if (roundness < 5) roundness = 5;
      var innerR = r * roundness / 100;
      var pts = [[cx, cy - r]];
      var dtheta = 360 / points;

      for (var i = 0; i < points; i++) {
        if (i > 0) {
          var _getPointInDir3 = getPointInDir(cx, cy, i * dtheta, r),
              _getPointInDir4 = _slicedToArray(_getPointInDir3, 2),
              _x = _getPointInDir4[0],
              _y = _getPointInDir4[1];

          pts.push([_x, _y]);
        }

        var _getPointInDir5 = getPointInDir(cx, cy, i * dtheta + dtheta / 2, innerR),
            _getPointInDir6 = _slicedToArray(_getPointInDir5, 2),
            x = _getPointInDir6[0],
            y = _getPointInDir6[1];

        pts.push([x, y]);
      }

      if (rotateAngle) pts = utils.rotatePoints(pts, toRadians(rotateAngle), cx, cy);
      return pts;
    }
  }, {
    key: "getPolygonArea",
    value: function getPolygonArea(pts) {
      // from https://en.wikipedia.org/wiki/Centroid#Of_a_polygon
      var A = 0;

      for (var i = 0; i < pts.length; i++) {
        var j = (i + 1) % pts.length;
        A += pts[i][0] * pts[j][1] - pts[j][0] * pts[i][1];
      }

      return A / 2;
    }
  }, {
    key: "getPolygonCentroid",
    value: function getPolygonCentroid(pts) {
      // from https://en.wikipedia.org/wiki/Centroid#Of_a_polygon
      var A = utils.getPolygonArea(pts);

      if (A < 0.00001) {
        // If the area of the polygon is small enough, average the points instead
        // of returning a value that is heavily influenced by floating point error
        var sumX = 0;
        var sumY = 0;

        for (var i = 0; i < pts.length; i++) {
          sumX += pts[i][0];
          sumY += pts[i][1];
        }

        var result = [sumX / pts.length, sumY / pts.length];
        return result;
      }

      var cx = 0,
          cy = 0;

      for (var _i2 = 0; _i2 < pts.length; _i2++) {
        var j = (_i2 + 1) % pts.length;
        var term = pts[_i2][0] * pts[j][1] - pts[j][0] * pts[_i2][1];
        cx += (pts[_i2][0] + pts[j][0]) * term;
        cy += (pts[_i2][1] + pts[j][1]) * term;
      }

      return [cx / (6 * A), cy / (6 * A)];
    }
  }, {
    key: "makePolygonPath",
    value: function makePolygonPath(pts, ctx) {
      if (pts === undefined || pts.length === 0) {
        return;
      }

      var lastPt = pts[pts.length - 1];
      ctx.moveTo(lastPt[0], lastPt[1]);
      pts.forEach(function (pt) {
        return ctx.lineTo(pt[0], pt[1]);
      });
    }
  }, {
    key: "polygonContainsPoint",
    value: function polygonContainsPoint(pts, px, py) {
      if (px === undefined || py === undefined) {
        internalError('polygonContainsPoint expects three arguments');
      } // based on: https://github.com/mathigon/fermat.js/blob/master/src/geometry.js


      var n = pts.length;
      var inside = false;

      for (var i = 0; i < n; i++) {
        var q1 = pts[i];
        var q2 = pts[(i + 1) % n];
        var q1x = q1[0],
            q1y = q1[1],
            q2x = q2[0],
            q2y = q2[1];
        var x = q1y > py !== q2y > py;
        var y = px < (q2x - q1x) * (py - q1y) / (q2y - q1y) + q1x;
        if (x && y) inside = !inside;
      }

      return inside;
    }
  }, {
    key: "distance2",
    value: function distance2(x1, y1, x2, y2) {
      return Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2);
    }
  }, {
    key: "distanceToLineSegment2",
    value: function distanceToLineSegment2(x, y, x1, y1, x2, y2) {
      // return square of distance from (x,y) to ((x1,y1),(x2,y2))
      // inspired by https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment/24913403
      var l2 = utils.distance2(x1, y1, x2, y2);
      if (l2 === 0) return distance(x, y, x1, y1);
      var t = ((x - x1) * (x2 - x1) + (y - y1) * (y2 - y1)) / l2;
      t = Math.max(0, Math.min(1, t));
      return utils.distance2(x, y, x1 + t * (x2 - x1), y1 + t * (y2 - y1));
    }
  }, {
    key: "pointNearPolygonBorder",
    value: function pointNearPolygonBorder(pts, x, y, d) {
      // does not check if the polygon contains the point!
      var d2 = Math.pow(d, 2);
      var n = pts.length;

      for (var i = 0; i < n; i++) {
        var p1 = pts[i],
            p2 = pts[(i + 1) % n];
        var x1 = p1[0],
            y1 = p1[1],
            x2 = p2[0],
            y2 = p2[1];
        if (utils.distanceToLineSegment2(x, y, x1, y1, x2, y2) <= d2) return true;
      }

      return false;
    }
  }, {
    key: "segmentsIntersect",
    value: function segmentsIntersect(x1, y1, x2, y2, x3, y3, x4, y4) {
      var dxa = x2 - x1;
      var dya = y2 - y1;
      var dxb = x4 - x3;
      var dyb = y4 - y3;
      var s = (-dya * (x1 - x3) + dxa * (y1 - y3)) / (-dxb * dya + dxa * dyb);
      var t = (+dxb * (y1 - y3) - dyb * (x1 - x3)) / (-dxb * dya + dxa * dyb);
      return s >= 0 && s <= 1 && t >= 0 && t <= 1;
    }
  }, {
    key: "getChildShapes",
    value: function getChildShapes(shape) {
      var result = [];

      if (shape.isGroup) {
        shape._shapes.forEach(function (s) {
          return result = result.concat(utils.getChildShapes(s));
        });
      } else {
        result = [shape];
      }

      return result;
    }
  }, {
    key: "convertLabelValue",
    value: function convertLabelValue(value) {
      if (value === null) {
        return 'None';
      }

      if (value.__brython__ !== undefined || value.__class__ !== undefined || value instanceof Array) {
        return $B.$call($B.builtins.str)(value);
      }

      if (typeof value === 'function') {
        return '<function>';
      }

      return value;
    } // Use this function instead of Math.min.apply because apply overflows
    // the stack for ~100K or more arguments.

  }, {
    key: "min",
    value: function min(values) {
      var result = Infinity;
      values.forEach(function (v) {
        if (v < result) {
          result = v;
        }
      });
      return result;
    } // Use this function instead of Math.max.apply because apply overflows
    // the stack for ~100K or more arguments.

  }, {
    key: "max",
    value: function max(values) {
      var result = -Infinity;
      values.forEach(function (v) {
        if (v > result) {
          result = v;
        }
      });
      return result;
    }
  }, {
    key: "resetPrototype",
    value: function resetPrototype(value) {
      if (typeof value === 'object' && value && value.attrs && objConstructors[value.attrs.class]) {
        // objects like rgb's lose their class on serialization (update)
        // so add the class back here
        Object.setPrototypeOf(value, objConstructors[value.attrs.class].prototype);
      }

      if (value instanceof Gradient) {
        value.colors.forEach(function (color) {
          return utils.resetPrototype(color);
        });
      }

      return value;
    }
  }]);

  return utils;
}();

var shapeAttrs = {};
var shapeAttrDefaults = {};

var ShapeAttr = function ShapeAttr(name, typeCheckFn, defaultValue) {
  "use strict";

  _classCallCheck(this, ShapeAttr);

  this.name = name;
  this.typeCheckFn = typeCheckFn;
  this.default = defaultValue;
  shapeAttrs[name] = this;
  shapeAttrDefaults[name] = defaultValue;
};

function typeError(obj, attr, value, typeName) {
  var callSpec = typeof obj === 'string' ? "".concat(attr, " in ").concat(obj) : "".concat(obj.constructor.name, ".").concat(attr);
  var valueType = typeof value;

  if (value === undefined || value === null) {
    value = 'None';
    valueType = 'NoneType';
  }

  if (value.constructor && value.constructor.name) {
    valueType = value.constructor.name;
  }

  var err = "Type Error: ".concat(callSpec, " should be ").concat(typeName, " (but ").concat(value, " is of type ").concat(valueType, ")");
  pyThrow(err);
}

function checkJsType(obj, attr, value, jsType, constructorName) {
  if (jsType === 'number' && isNaN(value)) {
    typeError(obj, attr, value, jsType);
  }

  if (typeof value === jsType) {
    // eslint-disable-line
    return;
  }

  if (value === undefined || value == null) {
    typeError(obj, attr, value, jsType);
  }

  if (constructorName !== undefined && value.constructor.name === constructorName) {
    return;
  }

  typeError(obj, attr, value, jsType);
}

function checkBoolean(obj, attr, value) {
  checkJsType(obj, attr, value, 'boolean');
}

function checkArray(obj, attr, value) {
  if (!Array.isArray(value)) typeError(obj, attr, value, 'list');
}

function checkBooleanOrArray(obj, attr, value) {
  if (!Array.isArray(value)) checkBoolean(obj, attr, value);
}

function checkString(obj, attr, value) {
  checkJsType(obj, attr, value, 'string', 'String');
}

function checkNumber(obj, attr, value) {
  checkJsType(obj, attr, value, 'number', 'Number');
}

function checkInt(obj, attr, value) {
  if (!Number.isInteger(value)) typeError(obj, attr, value, 'integer');
}

function checkNonNegative(obj, attr, value) {
  checkNumber(obj, attr, value);
  if (value < 0) typeError(obj, attr, value, 'non-negative-number');
}

function checkNumPoints(obj, attr, value) {
  checkInt(obj, attr, value);
  if (value < 3) typeError(obj, attr, value, 'number-greater-than-2');
}

function checkPositive(obj, attr, value) {
  checkNumber(obj, attr, value);
  if (value <= 0) typeError(obj, attr, value, 'positive-number');
}

function checkRange(obj, attr, value, lo, hi) {
  // lo and hi are inclusive
  if (value < lo || value > hi) typeError(obj, attr, value, "number-in-range-".concat(lo, "-").concat(hi));
}

function checkValue() {// anything goes!
}

function checkIntInRange(obj, attr, value, lo, hi) {
  checkInt(obj, attr, value);
  checkRange(obj, attr, value, lo, hi);
}

function checkNumberInRange(obj, attr, value, lo, hi) {
  checkNumber(obj, attr, value);
  checkRange(obj, attr, value, lo, hi);
}

function checkNumberIn0To100(obj, attr, value) {
  checkNumberInRange(obj, attr, value, 0, 100);
}

function checkRoundness(obj, attr, value) {
  if (value === undefined || value === null) return; // undefined is a legal roundness

  checkNumberIn0To100(obj, attr, value);
}

function checkSweepAngle(obj, attr, value) {
  checkNumberInRange(obj, attr, value, 0, 360);
}

function checkShape(obj, attr, value) {
  //if (!(value instanceof Shape) && !(typeof value === 'object' && value !== null && value['type'] === 'pythonObject')) {
  if (!(value instanceof Shape)) {
    typeError(obj, attr, value, 'Shape');
  }
}

var RGB =
/*#__PURE__*/
function () {
  "use strict";

  function RGB(red, green, blue) {
    _classCallCheck(this, RGB);

    this.attrs = {
      class: this.constructor.name
    };
    this.red = red;
    this.green = green;
    this.blue = blue;
  }

  _createClass(RGB, [{
    key: "get",
    value: function get(attr) {
      return this.attrs[attr];
    }
  }, {
    key: "set",
    value: function set(attr, value) {
      checkIntInRange(this, attr, value, 0, 255);
      var attrs = this.attrs;
      attrs[attr] = value;
      attrs.strVal = "rgb(".concat(attrs.red, ", ").concat(attrs.green, ", ").concat(attrs.blue, ")");
    }
  }, {
    key: "darker",
    value: function darker() {
      var k = 0.85;
      var rnd = Math.round;
      return new RGB(rnd(k * this.red), rnd(k * this.green), rnd(k * this.blue));
    }
  }, {
    key: "lighter",
    value: function lighter() {
      var k = 0.85;
      var rnd = Math.round;
      return new RGB(rnd(255 - k * (255 - this.red)), rnd(255 - k * (255 - this.green)), rnd(255 - k * (255 - this.blue)));
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.attrs.strVal;
    }
  }, {
    key: "deepCopy",
    value: function deepCopy() {
      return new RGB(this.red, this.green, this.blue);
    }
  }, {
    key: "__eq__",
    value: function __eq__(other) {
      if (!(other instanceof RGB)) {
        return false;
      }

      return this.red === other.red && this.green === other.green && this.blue === other.blue;
    }
  }, {
    key: "red",
    get: function get() {
      return this.get('red');
    },
    set: function set(v) {
      return this.set('red', v);
    }
  }, {
    key: "green",
    get: function get() {
      return this.get('green');
    },
    set: function set(v) {
      return this.set('green', v);
    }
  }, {
    key: "blue",
    get: function get() {
      return this.get('blue');
    },
    set: function set(v) {
      return this.set('blue', v);
    }
  }]);

  return RGB;
}();

function rgb(red, green, blue) {
  checkArgCount(undefined, 'rgb', ['red', 'green', 'blue'], arguments);
  return new RGB(red, green, blue);
}

var CSS3_COLORS_TO_RGB = {
  aliceblue: new RGB(240, 248, 255),
  antiquewhite: new RGB(250, 235, 215),
  aqua: new RGB(0, 255, 255),
  aquamarine: new RGB(127, 255, 212),
  azure: new RGB(240, 255, 255),
  beige: new RGB(245, 245, 220),
  bisque: new RGB(255, 228, 196),
  black: new RGB(0, 0, 0),
  blanchedalmond: new RGB(255, 235, 205),
  blue: new RGB(0, 0, 255),
  blueviolet: new RGB(138, 43, 226),
  brown: new RGB(165, 42, 42),
  burlywood: new RGB(222, 184, 135),
  cadetblue: new RGB(95, 158, 160),
  chartreuse: new RGB(127, 255, 0),
  chocolate: new RGB(210, 105, 30),
  coral: new RGB(255, 127, 80),
  cornsilk: new RGB(255, 248, 220),
  cornflowerblue: new RGB(100, 149, 237),
  crimson: new RGB(220, 20, 60),
  cyan: new RGB(0, 255, 255),
  darkblue: new RGB(0, 0, 139),
  darkcyan: new RGB(0, 139, 139),
  darkgoldenrod: new RGB(184, 134, 11),
  darkgray: new RGB(169, 169, 169),
  darkgreen: new RGB(0, 100, 0),
  darkgrey: new RGB(169, 169, 169),
  darkkhaki: new RGB(189, 183, 107),
  darkmagenta: new RGB(139, 0, 139),
  darkolivegreen: new RGB(85, 107, 47),
  darkorange: new RGB(255, 140, 0),
  darkorchid: new RGB(153, 50, 204),
  darkred: new RGB(139, 0, 0),
  darksalmon: new RGB(233, 150, 122),
  darkseagreen: new RGB(143, 188, 143),
  darkslateblue: new RGB(72, 61, 139),
  darkslategray: new RGB(47, 79, 79),
  darkslategrey: new RGB(47, 79, 79),
  darkturquoise: new RGB(0, 206, 209),
  darkviolet: new RGB(148, 0, 211),
  deeppink: new RGB(255, 20, 147),
  deepskyblue: new RGB(0, 191, 255),
  dimgray: new RGB(105, 105, 105),
  dimgrey: new RGB(105, 105, 105),
  dodgerblue: new RGB(30, 144, 255),
  firebrick: new RGB(178, 34, 34),
  floralwhite: new RGB(255, 250, 240),
  forestgreen: new RGB(34, 139, 34),
  fuchsia: new RGB(255, 0, 255),
  gainsboro: new RGB(220, 220, 220),
  ghostwhite: new RGB(248, 248, 255),
  gold: new RGB(255, 215, 0),
  goldenrod: new RGB(218, 165, 32),
  gray: new RGB(128, 128, 128),
  green: new RGB(0, 128, 0),
  greenyellow: new RGB(173, 255, 47),
  grey: new RGB(128, 128, 128),
  honeydew: new RGB(240, 255, 240),
  hotpink: new RGB(255, 105, 180),
  indianred: new RGB(205, 92, 92),
  indigo: new RGB(75, 0, 130),
  ivory: new RGB(255, 255, 240),
  khaki: new RGB(240, 230, 140),
  lavender: new RGB(230, 230, 250),
  lavenderblush: new RGB(255, 240, 245),
  lawngreen: new RGB(124, 252, 0),
  lemonchiffon: new RGB(255, 250, 205),
  lightblue: new RGB(173, 216, 230),
  lightcoral: new RGB(240, 128, 128),
  lightcyan: new RGB(224, 255, 255),
  lightgoldenrodyellow: new RGB(250, 250, 210),
  lightgray: new RGB(211, 211, 211),
  lightgreen: new RGB(144, 238, 144),
  lightgrey: new RGB(211, 211, 211),
  lightpink: new RGB(255, 182, 193),
  lightsalmon: new RGB(255, 160, 122),
  lightseagreen: new RGB(32, 178, 170),
  lightskyblue: new RGB(135, 206, 250),
  lightslategray: new RGB(119, 136, 153),
  lightslategrey: new RGB(119, 136, 153),
  lightsteelblue: new RGB(176, 196, 222),
  lightyellow: new RGB(255, 255, 224),
  lime: new RGB(0, 255, 0),
  limegreen: new RGB(50, 205, 50),
  linen: new RGB(250, 240, 230),
  magenta: new RGB(255, 0, 255),
  maroon: new RGB(128, 0, 0),
  mediumaquamarine: new RGB(102, 205, 170),
  mediumblue: new RGB(0, 0, 205),
  mediumorchid: new RGB(186, 85, 211),
  mediumpurple: new RGB(147, 112, 216),
  mediumseagreen: new RGB(60, 179, 113),
  mediumslateblue: new RGB(123, 104, 238),
  mediumspringgreen: new RGB(0, 250, 154),
  mediumturquoise: new RGB(72, 209, 204),
  mediumvioletred: new RGB(199, 21, 133),
  midnightblue: new RGB(25, 25, 112),
  mintcream: new RGB(245, 255, 250),
  mistyrose: new RGB(255, 228, 225),
  moccasin: new RGB(255, 228, 181),
  navajowhite: new RGB(255, 222, 173),
  navy: new RGB(0, 0, 128),
  oldlace: new RGB(253, 245, 230),
  olive: new RGB(128, 128, 0),
  olivedrab: new RGB(107, 142, 35),
  orange: new RGB(255, 165, 0),
  orangered: new RGB(255, 69, 0),
  orchid: new RGB(218, 112, 214),
  palegoldenrod: new RGB(238, 232, 170),
  palegreen: new RGB(152, 251, 152),
  paleturquoise: new RGB(175, 238, 238),
  palevioletred: new RGB(216, 112, 147),
  papayawhip: new RGB(255, 239, 213),
  peachpuff: new RGB(255, 218, 185),
  peru: new RGB(205, 133, 63),
  pink: new RGB(255, 192, 203),
  plum: new RGB(221, 160, 221),
  powderblue: new RGB(176, 224, 230),
  purple: new RGB(128, 0, 128),
  red: new RGB(255, 0, 0),
  rosybrown: new RGB(188, 143, 143),
  royalblue: new RGB(65, 105, 225),
  saddlebrown: new RGB(139, 69, 19),
  salmon: new RGB(250, 128, 114),
  sandybrown: new RGB(244, 164, 96),
  seagreen: new RGB(46, 139, 87),
  seashell: new RGB(255, 245, 238),
  sienna: new RGB(160, 82, 45),
  silver: new RGB(192, 192, 192),
  skyblue: new RGB(135, 206, 235),
  slateblue: new RGB(106, 90, 205),
  slategray: new RGB(112, 128, 144),
  slategrey: new RGB(112, 128, 144),
  snow: new RGB(255, 250, 250),
  springgreen: new RGB(0, 255, 127),
  steelblue: new RGB(70, 130, 180),
  tan: new RGB(210, 180, 140),
  teal: new RGB(0, 128, 128),
  thistle: new RGB(216, 191, 216),
  tomato: new RGB(255, 99, 71),
  turquoise: new RGB(64, 224, 208),
  violet: new RGB(238, 130, 238),
  wheat: new RGB(245, 222, 179),
  white: new RGB(255, 255, 255),
  whitesmoke: new RGB(245, 245, 245),
  yellow: new RGB(255, 255, 0),
  yellowgreen: new RGB(154, 205, 50)
};
var gradientStarts = ['left-top', 'top', 'right-top', 'left', 'center', 'right', 'left-bottom', 'bottom', 'right-bottom'];

var Gradient =
/*#__PURE__*/
function () {
  "use strict";

  function Gradient(colors, start) {
    _classCallCheck(this, Gradient);

    checkArray(this, 'colors', colors);

    if (colors.length < 2) {
      pyThrow("Need to pass at least 2 colors to gradient(); you gave ".concat(colors.length));
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = colors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var color = _step.value;
        checkColor(this, 'color', color);

        if (color === null || color === undefined) {
          pyThrow("Type Error: None cannot be used inside gradient.colors");
        }

        if (color instanceof Gradient) {
          pyThrow("Type Error: ".concat(color, " cannot be used inside gradient.colors"));
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    checkJsType(this, 'start', start, 'string');

    if (!contains(gradientStarts, start)) {
      pyThrow("Illegal gradient start (".concat(start, ")"));
    }

    this.attrs = {
      class: this.constructor.name,
      colors: colors,
      start: start
    };
  }

  _createClass(Gradient, [{
    key: "toString",
    value: function toString() {
      return "gradient(".concat(this.colors.map(function (v) {
        return v instanceof RGB ? v.toString() : "'".concat(v, "'");
      }).join(', '), ", start='").concat(this.start, "')");
    }
  }, {
    key: "getRGBColors",
    value: function getRGBColors() {
      return this.colors.map(function (v) {
        return v instanceof RGB ? v : CSS3_COLORS_TO_RGB[v.toLowerCase()];
      });
    }
  }, {
    key: "toRGBList",
    value: function toRGBList() {
      if (this.start === 'center') return this.getRGBColors();
      return [this.getRGBColors(), this.getRGBColors().reverse()].sort();
    }
  }, {
    key: "__eq__",
    value: function __eq__(other) {
      if (!(other instanceof Gradient)) {
        return false;
      }

      if (this.colors.length !== other.colors.length) {
        return false;
      }

      if (this.start !== other.start) {
        return false;
      }

      for (var i = 0; i < this.colors.length; i++) {
        var c1 = this.colors[i];
        var c2 = other.colors[i];

        if (typeof c1 !== typeof c2) {
          return false;
        }

        if (c1 instanceof RGB) {
          if (!c1.__eq__(c2)) {
            return false;
          }
        } else if (c1 !== c2) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "__repr__",
    value: function __repr__() {
      return this.toString();
    }
  }, {
    key: "__str__",
    value: function __str__() {
      return this.toString();
    }
  }, {
    key: "deepCopy",
    value: function deepCopy() {
      return new Gradient(this.colors.slice(), this.start);
    }
  }, {
    key: "colors",
    get: function get() {
      return this.attrs.colors;
    }
  }, {
    key: "start",
    get: function get() {
      return this.attrs.start;
    }
  }]);

  return Gradient;
}();

function gradient(colors, start) {
  // eslint-disable-line no-unused-vars
  checkArgCount(undefined, 'gradient', ['colors', 'start'], arguments);
  return new Gradient(colors, start);
}

function checkColor(obj, attr, value) {
  if (value === undefined || value === null) return; // Python None is a legal color

  if (value instanceof RGB) return; // RGB objects are legal colors

  if (value instanceof Gradient) return; // same for Gradient objecs

  if (typeof value !== 'string') {
    typeError(obj, attr, value, 'color');
  }

  if (Object.keys(CSS3_COLORS_TO_RGB).some(function (color) {
    return color.toLowerCase() === value.toLowerCase();
  })) {
    return;
  }

  var objName = typeof obj === 'string' ? obj : obj.constructor.name;
  pyThrow("Type Error: ".concat(objName, " ").concat(attr, " should be ") + "a color, and ".concat(value, " is not a legal color name"));
}

var aligns = new Set(['left-top', 'top', 'right-top', 'left', 'center', 'right', 'left-bottom', 'bottom', 'right-bottom', 'top-left', 'top-right', 'bottom-left', 'bottom-right']);

function checkAlign(obj, attr, value) {
  if (value === undefined || value === null) return; // undefined is a legal align

  if (!aligns.has(value)) {
    pyThrow("Type Error: in ".concat(obj.constructor.name, " ").concat(attr, ", ").concat(value, " is not a legal align value"));
  }
}

function getAlignAttrs(align) {
  var xattr, yattr;
  if (align.includes('left')) xattr = 'left';else if (align.includes('right')) xattr = 'right';else xattr = 'centerX';
  if (align.includes('top')) yattr = 'top';else if (align.includes('bottom')) yattr = 'bottom';else yattr = 'centerY';
  return [xattr, yattr];
}

function checkArgCount(clsName, fnName, argNames, args) {
  if (argNames.length !== args.length) {
    var callSpec = clsName && fnName ? "".concat(clsName, ".").concat(fnName) : clsName || fnName;
    pyThrow("Arg Count Error: ".concat(callSpec, "() takes ").concat(argNames.length, " arguments (").concat(argNames, "), not ").concat(args.length));
  }
}

function checkWidthHeight(obj, attr, value) {
  if (obj instanceof Rect || obj instanceof Oval || obj instanceof PolygonInCircle) {
    return checkPositive(obj, attr, value);
  }

  return checkNonNegative(obj, attr, value);
}

function initShapeAttrs() {
  /* eslint-disable */
  new ShapeAttr('left', checkNumber, 0);
  new ShapeAttr('top', checkNumber, 0);
  new ShapeAttr('centerX', checkNumber, 0);
  new ShapeAttr('centerY', checkNumber, 0);
  new ShapeAttr('right', checkNumber, 0);
  new ShapeAttr('bottom', checkNumber, 0);
  new ShapeAttr('width', checkWidthHeight, 10);
  new ShapeAttr('height', checkWidthHeight, 10);
  new ShapeAttr('fill', checkColor, 'black');
  new ShapeAttr('border', checkColor, null);
  new ShapeAttr('borderWidth', checkNonNegative, 2);
  new ShapeAttr('dashes', checkBooleanOrArray, false);
  new ShapeAttr('opacity', checkNumberIn0To100, 100);
  new ShapeAttr('align', checkAlign, null);
  new ShapeAttr('rotateAngle', checkNumber, 0);
  new ShapeAttr('radius', checkNonNegative, 5);
  new ShapeAttr('points', checkNumPoints, 5);
  new ShapeAttr('roundness', checkRoundness, 'default');
  new ShapeAttr('x1', checkNumber, 0);
  new ShapeAttr('y1', checkNumber, 0);
  new ShapeAttr('x2', checkNumber, 10);
  new ShapeAttr('y2', checkNumber, 10);
  new ShapeAttr('arrowStart', checkBoolean, false);
  new ShapeAttr('arrowEnd', checkBoolean, false);
  new ShapeAttr('lineWidth', checkPositive, 2);
  new ShapeAttr('initialPoints', checkArray, []);
  new ShapeAttr('closed', checkBoolean, true);
  new ShapeAttr('startAngle', checkNumber, 0);
  new ShapeAttr('sweepAngle', checkSweepAngle, 360);
  new ShapeAttr('value', checkValue, '');
  new ShapeAttr('font', checkString, 'arial');
  new ShapeAttr('size', checkNonNegative, 12);
  new ShapeAttr('bold', checkBoolean, false);
  new ShapeAttr('italic', checkBoolean, false);
  new ShapeAttr('visible', checkBoolean, true);
  new ShapeAttr('url', checkString, null);
  new ShapeAttr('db', checkValue, '');
  /* eslint-enable */
}

initShapeAttrs();
var baseFontNames = ['Arial', 'Courier New'];

var fontNames = function () {
  var fn = [];
  baseFontNames.forEach(function (f) {
    fn.push(f);
    fn.push("".concat(f, " Bold"));
    fn.push("".concat(f, " Italic"));
    fn.push("".concat(f, " Bold Italic"));
  });
  return fn;
}();

var fontNamesToBeLoaded = fontNames;
var fontMap = {};
var allFontsLoaded = false;

function getFont(baseFontName, isBold, isItalic) {
  var ok = true;
  var result;
  baseFontName = baseFontName.toLowerCase();
  var fontName;

  if (contains(baseFontName, 'mono') || contains(baseFontName, 'courier')) {
    fontName = 'Courier New';
  } else if (contains(baseFontName, 'arial') || contains(baseFontName, 'sans')) {
    fontName = 'Arial';
  } else {
    ok = false;
  }

  if (ok) {
    if (isBold) fontName += ' Bold';
    if (isItalic) fontName += ' Italic';
    result = fontMap[fontName];

    if (result === undefined) {
      ok = false;
    }
  }

  if (!ok) {
    if (!allFontsLoaded) {
      pyThrow('Wait for fonts to load before using them');
    } else {
      if (isWebWorker && activeDrawing && !activeDrawing.fontWarningsPrinted[baseFontName]) {
        cmuGraphics.printToTextArea("Font not found: ".concat(baseFontName, "\n"));
        activeDrawing.fontWarningsPrinted[baseFontName] = true;
      }

      return getFont('sans', isBold, isItalic);
    }
  }

  return result;
}

function loadFontsHelper() {
  if (fontNamesToBeLoaded.length === 0) {
    allFontsLoaded = true;
  } else {
    var fontName = fontNamesToBeLoaded.pop();
    opentype.load("/fonts/".concat(fontName, ".ttf"), function (err, font) {
      if (err) {
        pyThrow("Error: could not load font ".concat(fontName));
      } else {
        fontMap[fontName] = font;
        loadFontsHelper();
      }
    });
  }
}

function loadFonts() {
  if (this.fontsLoading) {
    return;
  }

  this.fontsLoading = true;
  loadFontsHelper();
}

var Recording =
/*#__PURE__*/
function () {
  "use strict";

  function Recording(drawing) {
    _classCallCheck(this, Recording);

    this.drawing = drawing;
    this.recording = false;
    this.gif = undefined;
    this.warmupLength = 3 * 1000;
    this.recordingLength = 10 * 1000;
    this.frameLoopLength = 30;
    this.flushedWarmup = false;
  }

  _createClass(Recording, [{
    key: "startRecording",
    value: function startRecording(lengthSeconds) {
      if (this.recording) return;
      this.recording = true;
      this.gif = new GIF({
        workerScript: self.GIFWorkerScriptUrl,
        workers: 2,
        quality: 30,
        background: '#fff'
      });
      this.gif.on('finished', function (blob) {
        var defaultFilename = 'cs-academy-recording.gif';

        if (window.navigator.msSaveOrOpenBlob !== undefined) {
          window.navigator.msSaveOrOpenBlob(blob, defaultFilename);
          return;
        }

        var anchor = document.createElement('a');
        document.body.appendChild(anchor); // required in FF, optional for Chrome

        anchor.href = URL.createObjectURL(blob);
        anchor.download = defaultFilename;
        anchor.target = '_self'; // required in FF, optional for Chrome

        anchor.click();
      });
      this.recordingLength = lengthSeconds * 1000;
      this.warmupLength = 3 * 1000;
      this.flushedWarmup = false;
      this.record();
      this.dispatchBrythonEvent(new CustomEvent('brythonPause', {
        detail: {
          canvasId: this.drawing.canvasId
        }
      }));
    }
  }, {
    key: "record",
    value: function record() {
      var _this = this;

      this.warmupLength -= this.frameLoopLength;

      if (this.warmupLength <= 0) {
        this.recordingLength -= this.frameLoopLength;
      } // User aborted the recording


      var canvas = document.getElementById(this.drawing.canvasId);

      if (!canvas) {
        this.recording = false;
        this.gif.abort();
        return;
      }

      if (this.warmupLength < 0) {
        if (!this.flushedWarmup) {
          this.drawing.redrawAll(false);
          this.flushedWarmup = true;
          this.dispatchBrythonEvent(new CustomEvent('brythonUnpause', {
            detail: {
              canvasId: this.drawing.canvasId
            }
          }));
          document.getElementById(this.drawing.canvasId).focus();
        } //add a frame


        this.gif.addFrame(canvas, {
          delay: this.frameLoopLength,
          copy: true
        });
      } else {
        this.drawing.redrawAll(false);
      }

      if (this.recordingLength > 0) {
        setTimeout(function () {
          return _this.record();
        }, this.frameLoopLength);
      } else {
        // recording finished
        this.finishedRecording();
        this.gif.render();
        this.recording = false;
      }
    }
  }, {
    key: "shouldDraw",
    value: function shouldDraw() {
      if (this.recording && this.warmupLength > 0) {
        return true;
      }

      return false;
    }
  }, {
    key: "draw",
    value: function draw(ctx) {
      var timeLeft = Math.floor(this.warmupLength / 1000) + 1;
      var background = new Rect({
        noGroup: true,
        top: 0,
        left: 0,
        width: 400,
        height: 400,
        opacity: 60,
        fill: 'white'
      });
      background.draw(ctx);
      var recordingLabel = new Label({
        noGroup: true,
        centerX: 200,
        centerY: 100,
        value: 'Recording Starts In',
        fill: 'black',
        size: 24
      });
      recordingLabel.draw(ctx);
      var arcSweep = Math.round(360 * (this.warmupLength / 3000));

      if (arcSweep !== 0) {
        ctx.strokeStyle = 'green';
        ctx.beginPath();
        ctx.lineWidth = 10;
        ctx.arc(200, 200, 65, toRadians(0), toRadians(arcSweep));
        ctx.stroke();
      }

      ctx.fillStyle = 'white';
      ctx.beginPath();
      ctx.ellipse(200, 200, 60, 60, 0, 0, 2 * Math.PI);
      ctx.fill();
      var timeLabel = new Label({
        noGroup: true,
        centerX: 200,
        centerY: 200,
        value: timeLeft,
        fill: 'black',
        size: 96
      });
      timeLabel.draw(ctx);
    }
  }, {
    key: "finishedRecording",
    value: function finishedRecording() {
      this.dispatchEvent(new CustomEvent('finishedRecording', {}));
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {
      document.getElementById('application-target').dispatchEvent(event);
    }
  }, {
    key: "dispatchBrythonEvent",
    value: function dispatchBrythonEvent(event) {
      document.getElementById('brython-target').dispatchEvent(event);
    }
  }]);

  return Recording;
}();

var Drawing =
/*#__PURE__*/
function () {
  "use strict";

  function Drawing(canvasId) {
    _classCallCheck(this, Drawing);

    activeDrawing = this;
    this.tlg = isWebWorker ? $B.$getattr(self.makeTopLevelGroup(), '_shape').js : new Group();
    this.canvasId = canvasId;
    this.needsFullUpdate = true;
    this.deltas = [];
    this.inspector = new Inspector(this);
    this.recording = new Recording(this);
    this.inspectorEnabled = true;
    this.isMouseDown = false;
    this.background = undefined;
    this.appProperties = {
      maxShapeCount: 2000
    };
    this.fontWarningsPrinted = {};
    this.images = {};
    this.shapeCount = 0;
  }

  _createClass(Drawing, [{
    key: "update",
    value: function update() {
      if (this.needsFullUpdate) this.fullUpdate();else this.deltaUpdate();
    }
  }, {
    key: "setBackground",
    value: function setBackground(fill) {
      checkColor('App', 'background', fill);
      this.background = fill;
    }
  }, {
    key: "loadAllShapes",
    value: function loadAllShapes(shape) {
      var _this2 = this;

      if (shape === undefined) {
        shape = this.tlg;
        this.allShapes = [];
      }

      if (shape.isGroup) {
        shape._shapes.forEach(function (s) {
          return _this2.loadAllShapes(s);
        });
      } else {
        shape.zindex = this.allShapes.length;
        this.allShapes.push(shape);
      }

      return this.allShapes;
    }
  }, {
    key: "fullUpdate",
    value: function fullUpdate() {
      if (!isWebWorker) pyThrow('Must call fullUpdate in webWorker!'); // now load new allShapes list and update shape zindexes

      var allShapes = this.loadAllShapes(); // now get a list of shape attrs (which include the class name)

      var updateList = allShapes.map(function (s) {
        return s.attrs;
      });
      updateList.forEach(function (update) {
        if (update.value !== undefined) {
          update.value = utils.convertLabelValue(update.value);
        }
      });
      cmuGraphics.postMsg({
        cmd: 'fullUpdate',
        updateList: updateList,
        appProperties: this.appProperties,
        background: this.background
      });
      this.needsFullUpdate = false;
      this.deltas = [];
    }
  }, {
    key: "deltaUpdate",
    value: function deltaUpdate() {
      if (!this.deltas) return; // p('deltaUpdate', this.deltas);

      cmuGraphics.postMsg({
        cmd: 'deltaUpdate',
        deltas: this.deltas,
        appProperties: this.appProperties,
        background: this.background
      });
      this.deltas = [];
    }
  }, {
    key: "onFullUpdate",
    value: function onFullUpdate(msg) {
      if (isWebWorker) pyThrow('Cannot call onFullUpdate in webWorker!');
      this.background = utils.resetPrototype(msg.background);
      this.appProperties = msg.appProperties;
      var updateList = msg.updateList; // p('onFullUpdate', updateList);

      this.tlg.clear();
      updateList.forEach(function (shapeAttrs) {
        // eslint-disable-line
        var constructor = objConstructors[shapeAttrs.class]; // eslint-disable-line

        var shape = new constructor();
        shape.set(shapeAttrs);
      });
      this.inspector.clearCache();
      this.redrawAll(true);
    }
  }, {
    key: "onDeltaUpdate",
    value: function onDeltaUpdate(msg) {
      var _this3 = this;

      this.appProperties = msg.appProperties;
      var deltas = msg.deltas;
      utils.resetPrototype(msg.background);

      if (colorTest(this.background, msg.background) && (!deltas || deltas.length === 0)) {
        return;
      } // p('onDeltaUpdate: ', deltas, msg.background);


      this.background = msg.background; // After the canvas has been deactivated, the UI thread sometimes receives an
      // extra delta update frame from the worker thread. Ignore the deltas if we
      // have no shapes.

      if (this.tlg._shapes.length > 0) {
        deltas.forEach(function (delta) {
          var _delta = _slicedToArray(delta, 3),
              zindex = _delta[0],
              attr = _delta[1],
              value = _delta[2];

          _this3.tlg._shapes[zindex].setAttr(attr, value);
        });
      }

      this.inspector.clearCache();
      this.redrawAll(true);
    }
  }, {
    key: "redrawAll",
    value: function redrawAll(sendEvent) {
      if (isWebWorker) {
        pyThrow('Cannot call redrawAll in webWorker!');
      }

      var c = document.getElementById(this.canvasId);

      if (c === undefined || c === null) {
        return;
      }

      if (sendEvent) {
        cmuGraphics.dispatchEvent(new CustomEvent('frameworkRedrew', {
          detail: {
            id: this.canvasId
          }
        }));
      }

      var ctx = c.getContext('2d');
      ctx.clearRect(0, 0, 400, 400);

      if (this.background) {
        var shape = new Rect({
          noGroup: true,
          top: 0,
          left: 0,
          width: 400,
          height: 400,
          fill: this.background
        });
        shape.draw(ctx);
      } else if (this.recording.recording) {
        var _shape = new Rect({
          noGroup: true,
          top: 0,
          left: 0,
          width: 400,
          height: 400,
          fill: "white"
        });

        _shape.draw(ctx);
      }

      ctx.save();

      try {
        this.tlg.draw(ctx);
      } finally {
        ctx.restore();
      }

      ctx.save();

      try {
        if (this.shouldDrawInspector()) {
          this.inspector.draw(ctx);
        }
      } finally {
        ctx.restore();
      }

      ctx.save();

      try {
        if (this.recording.shouldDraw()) {
          this.recording.draw(ctx);
        }
      } finally {
        ctx.restore();
      }
    }
  }, {
    key: "startRecording",
    value: function startRecording(seconds) {
      this.recording.startRecording(seconds);
    }
  }, {
    key: "shouldDrawInspector",
    value: function shouldDrawInspector() {
      return this.inspectorEnabled && (this.appProperties.paused || this.appProperties.stopped || this.alwaysShowInspector || self.isCtrlKeyDown);
    }
  }]);

  return Drawing;
}();
/*
 Class hierarchy:

 Shape
 ├ Group
 ├ Label
 └ Polygon
    ├ Rect
    ├ Line
    ├ PolygonInCircle
    │ ├ RegularPolygon
    │ └ Star
    └ PolygonWithTransform
      ├ CMUImage
      └ Oval
        ├ Arc
        └ Circle
*/


var Shape =
/*#__PURE__*/
function () {
  "use strict";

  function Shape(attrs) {
    _classCallCheck(this, Shape);

    if (!activeDrawing) pyThrow('No activeDrawing for new Shape');

    if (isWebWorker) {
      this.group = this.oldGroup = undefined; // A list of shapes that this shape was in front of its current/previous group

      this.shapesToBeInFrontOf = [];
      this.isGroup = false; // zIndex is global across all groups

      this.zindex = -1;
    }

    this.attrs = {
      class: this.constructor.name
    };

    if (attrs !== undefined) {
      this.defaultAlign = attrs.defaultAlign || 'center';
      delete attrs.defaultAlign;
    }

    this.attrDefaults = shapeAttrDefaults;
    if (attrs) this.set(attrs); // Only add this new shape to the group if initialization happened without errors

    if ((!attrs || !attrs.noGroup) && activeDrawing.tlg !== undefined) {
      activeDrawing.tlg.add(this);
    }
  }

  _createClass(Shape, [{
    key: "setAttr",
    value: function setAttr(attr, value) {
      this.attrs[attr] = utils.resetPrototype(value);
      return value;
    }
  }, {
    key: "set",
    value: function set(attrs) {
      var _this4 = this;

      // set({attr0:val0, ..., attrN:valN})
      var result;
      Object.keys(attrs).forEach(function (attr) {
        var value = attrs[attr];
        var attrSpec = shapeAttrs[attr];

        if (attrSpec && isWebWorker) {
          attrSpec.typeCheckFn(_this4, attr, value);
        }

        result = _this4.setAttr(attr, value);

        if (isWebWorker && _this4.zindex !== -1) {
          if (attr === 'value') {
            value = utils.convertLabelValue(value);
          }

          activeDrawing.deltas.push([_this4.zindex, attr, value]);
        }
      });
      return result;
    }
  }, {
    key: "get",
    value: function get(attr) {
      if (Object.prototype.hasOwnProperty.call(this.attrs, attr)) {
        return this.attrs[attr];
      }

      return this.attrDefaults[attr];
    }
  }, {
    key: "addxy",
    value: function addxy(varName, d) {
      if (d === 0) return;
      if (varName === 'x') this.centerX += d;else this.centerY += d;
    }
  }, {
    key: "addx",
    value: function addx(dx) {
      this.addxy('x', dx);
    }
  }, {
    key: "addy",
    value: function addy(dy) {
      this.addxy('y', dy);
    }
  }, {
    key: "doAlign",
    value: function doAlign(x, y, v) {
      if (v === this.defaultAlign) {
        return;
      }

      var _getAlignAttrs = getAlignAttrs(v),
          _getAlignAttrs2 = _slicedToArray(_getAlignAttrs, 2),
          xattr = _getAlignAttrs2[0],
          yattr = _getAlignAttrs2[1];

      this[xattr] = x;
      this[yattr] = y;
    }
  }, {
    key: "getRotateAnchor",
    value: function getRotateAnchor() {
      return this.centroid;
    }
  }, {
    key: "rotate",
    value: function rotate(degrees, cx, cy) {
      if (arguments.length === 1) {
        var _this$getRotateAnchor = this.getRotateAnchor();

        var _this$getRotateAnchor2 = _slicedToArray(_this$getRotateAnchor, 2);

        cx = _this$getRotateAnchor2[0];
        cy = _this$getRotateAnchor2[1];
      }

      checkNumber(this, 'rotate.degrees', degrees);
      checkNumber(this, 'rotate.cx', cx);
      checkNumber(this, 'rotate.cy', cy);
      this.set({
        rotateAngle: this.rotateAngle + degrees
      });
      this.doRotate(degrees, cx, cy);
    }
  }, {
    key: "doRotate",
    value: function doRotate(degrees, cx, cy) {
      pyThrow("".concat(this, ": must override doRotate method!"));
    }
  }, {
    key: "toString",
    value: function toString() {
      return 'Shape()';
    }
  }, {
    key: "_toString",
    value: function _toString() {
      return this.toString();
    } // so Brython can properly access toString

  }, {
    key: "getFillOrStrokeStyle",
    value: function getFillOrStrokeStyle(fillOrBorder, ctx) {
      if (!fillOrBorder) return '';

      if (fillOrBorder instanceof Gradient) {
        var _gradient = fillOrBorder;
        var g = this.createBaseGradient(_gradient, ctx);
        var n = _gradient.colors.length;

        for (var i = 0; i < n; i++) {
          var color = _gradient.colors[i];

          if (typeof color === 'object') {
            color = color.attrs.strVal;
          }

          g.addColorStop(i / (n - 1), color);
        }

        return g;
      } // it's a named color or an rgb()


      return fillOrBorder.toString();
    }
  }, {
    key: "setDashes",
    value: function setDashes(ctx) {
      if (typeof this.dashes === 'boolean') {
        ctx.setLineDash(this.dashes ? [5, 5] : []);
      } else {
        ctx.setLineDash(this.dashes);
      }
    }
  }, {
    key: "toFront",
    value: function toFront() {
      if (this.group !== undefined) {
        this.group._toFront(this);
      }
    }
  }, {
    key: "toBack",
    value: function toBack() {
      if (this.group !== undefined) {
        this.group._toBack(this);
      }
    }
  }, {
    key: "drawDbPoint",
    value: function drawDbPoint(ctx, x, y, color) {
      ctx.save();
      ctx.fillStyle = color;
      var r = 3;
      ctx.beginPath();
      ctx.ellipse(x, y, r, r, 0, 0, 2 * Math.PI);
      ctx.closePath();
      ctx.fill();
      ctx.restore();
    }
  }, {
    key: "drawDbCenter",
    value: function drawDbCenter(ctx) {
      this.drawDbPoint(ctx, this.centerX, this.centerY, 'red');
    }
  }, {
    key: "drawDbCentroid",
    value: function drawDbCentroid(ctx) {
      if (this instanceof Polygon) {
        var centroid = utils.getPolygonCentroid(this.pointList);
        this.drawDbPoint(ctx, centroid[0], centroid[1], 'magenta');
      } else this.drawDbCenter(ctx);
    }
  }, {
    key: "drawDbBox",
    value: function drawDbBox(ctx) {
      ctx.save();
      ctx.beginPath();
      ctx.rect(this.left, this.top, this.width, this.height);
      ctx.closePath();
      ctx.lineWidth = 2;
      ctx.strokeStyle = 'red';
      ctx.setLineDash([2, 2]);
      ctx.stroke();
      ctx.restore();
    }
  }, {
    key: "drawDbPoints",
    value: function drawDbPoints(ctx) {
      var pts = this.getApproxPoints();
      ctx.save();
      var r = 4;
      ctx.fillStyle = 'magenta'; // dots at corners

      pts.forEach(function (pt) {
        var _pt3 = _slicedToArray(pt, 2),
            x = _pt3[0],
            y = _pt3[1];

        ctx.beginPath();
        ctx.ellipse(x, y, r, r, 0, 0, 2 * Math.PI);
        ctx.closePath();
        ctx.fill();
      }); // now connect the dots

      ctx.beginPath();
      utils.makePolygonPath(pts, ctx);
      ctx.closePath();
      ctx.lineWidth = 3;
      ctx.strokeStyle = 'magenta';
      ctx.setLineDash([7, 7]);
      ctx.stroke();
      ctx.restore();
    }
  }, {
    key: "draw",
    value: function draw(ctx) {
      ctx.save();
      var cx = this.centerX,
          cy = this.centerY;
      var bw = this.border ? this.borderWidth : 0;

      if (this.isGroup) {
        this._shapes.forEach(function (s) {
          return s.draw(ctx);
        });
      } else {
        ctx.globalAlpha = this.opacity / 100;

        if (this instanceof Label) {
          var _this$getApproxPoints = _slicedToArray(this.getApproxPoints()[6], 2),
              targetX = _this$getApproxPoints[0],
              targetY = _this$getApproxPoints[1]; // target start,bottom of text
          // Rotate around targetX, targetY


          if (this.rotateAngle !== 0) {
            ctx.translate(targetX, targetY);
            ctx.rotate(this.rotateAngle * Math.PI / 180);
            ctx.translate(-targetX, -targetY);
          }

          var font = getFont(this.font, this.bold, this.italic);
          var text = this.value.toString();
          var textPath = font.getPath(text, targetX - this.attrs.xAdjust, targetY, this.size);
          textPath.fill = this.getFillOrStrokeStyle(this.fill, ctx);

          if (bw) {
            textPath.stroke = this.getFillOrStrokeStyle(this.border, ctx);
            textPath.strokeWidth = bw;
          }

          textPath.draw(ctx);
        } else if (this instanceof Line) {
          if (this.fill) {
            ctx.beginPath();
            ctx.strokeStyle = this.getFillOrStrokeStyle(this.fill, ctx);
            this.setDashes(ctx);
            ctx.lineWidth = this.lineWidth;
            ctx.moveTo(this.x1, this.y1);
            ctx.lineTo(this.x2, this.y2);
            ctx.stroke();
            this.drawArrows(ctx);
          }
        } else {
          ctx.beginPath();
          this.makePath(ctx);
          if (this.closed) ctx.closePath();

          if (this.fill && this.pointList.length > 2) {
            ctx.fillStyle = this.getFillOrStrokeStyle(this.fill, ctx);
            ctx.fill();
          }

          if (bw) {
            // (*note) if there is a border, draw with 2x borderWidth,
            // but clipped to shape so only 1x inner border is drawn
            bw *= 2;
            ctx.clip();
            ctx.strokeStyle = this.getFillOrStrokeStyle(this.border, ctx);
            this.setDashes(ctx);

            if (this instanceof Arc) {
              ctx.lineJoin = 'round';
            }

            ctx.lineWidth = bw;
            ctx.stroke();
          }
        }

        if (this instanceof CMUImage) {
          this.drawImage(ctx);
        }

        ctx.restore(); // draw debugging info

        var db = this.db;

        if (db !== '' && typeof db === 'string') {
          if (db === 'all' || db.includes('points')) this.drawDbPoints(ctx);
          if (db === 'all' || db.includes('box')) this.drawDbBox(ctx);
          if (db === 'all' || db.includes('center')) this.drawDbCenter(ctx);
          if (db === 'all' || db.includes('centroid')) this.drawDbCentroid(ctx);
        }
      }
    }
  }, {
    key: "contains",
    value: function contains(x, y) {
      checkArgCount(this.constructor.name, 'contains', ['x', 'y'], arguments);
      checkNumber('contains(x, y)', 'x', x);
      checkNumber('contains(x, y)', 'y', y);
      return utils.polygonContainsPoint(this.getApproxPoints(), x, y);
    }
  }, {
    key: "hits",
    value: function hits(x, y) {
      checkArgCount(this.constructor.name, 'hits', ['x', 'y'], arguments);
      checkNumber('hits(x, y)', 'x', x);
      checkNumber('hits(x, y)', 'y', y);
      var pts = this.getApproxPoints();
      if (!utils.polygonContainsPoint(pts, x, y)) return false;
      if (this.fill) return true;
      var border = this.border;
      if (!border) return false; // ok, so we have a border, but no fill, so we 'hit' if we
      // are within a borderWidth of the border

      var bw = border ? this.borderWidth : 0;
      return utils.pointNearPolygonBorder(pts, x, y, bw);
    }
  }, {
    key: "edgesIntersect",
    value: function edgesIntersect(shape) {
      var pts1 = this.getApproxPoints();
      var pts2 = shape.getApproxPoints();
      var k;

      for (var i = 0; i < pts1.length; i++) {
        var _pts1$i = _slicedToArray(pts1[i], 2),
            x1 = _pts1$i[0],
            y1 = _pts1$i[1];

        k = (i + 1) % pts1.length;

        var _pts1$k = _slicedToArray(pts1[k], 2),
            x2 = _pts1$k[0],
            y2 = _pts1$k[1];

        for (var j = 0; j < pts2.length; j++) {
          var _pts2$j = _slicedToArray(pts2[j], 2),
              x3 = _pts2$j[0],
              y3 = _pts2$j[1];

          k = (j + 1) % pts2.length;

          var _pts2$k = _slicedToArray(pts2[k], 2),
              x4 = _pts2$k[0],
              y4 = _pts2$k[1];

          if (utils.segmentsIntersect(x1, y1, x2, y2, x3, y3, x4, y4)) {
            return true;
          }
        }
      }

      return false;
    }
  }, {
    key: "containsShape",
    value: function containsShape(targetShape) {
      var _this5 = this;

      checkArgCount(this.constructor.name, 'containsShape', ['targetShape'], arguments);
      checkShape('containsShape(targetShape)', 'targetShape', targetShape);

      if (targetShape instanceof Group) {
        return targetShape._shapes.every(function (shape) {
          return _this5.containsShape(shape);
        });
      } // This shapes fully contains the target shape if their
      // edges do not intersect, but (any point of / all points of)
      // the targetShape are inside this shape


      var x = targetShape.centerX,
          y = targetShape.centerY;
      return !this.edgesIntersect(targetShape) && this.contains(x, y);
    }
  }, {
    key: "getBounds",
    value: function getBounds() {
      return {
        left: this.left,
        top: this.top,
        width: this.width,
        height: this.height
      };
    }
  }, {
    key: "boundsIntersect",
    value: function boundsIntersect(targetShape, margin) {
      // Symmetric.  Fast pre-test for hitsShape.  If this is False, hitsShape
      // must be False.  If this is True, hitsShape *may* be True.
      if (margin === undefined) margin = 0;
      var b1 = this.getBounds();
      var b2 = targetShape.getBounds();
      return b1.left + margin <= b2.left + b2.width && b2.left + margin <= b1.left + b1.width && b1.top + margin <= b2.top + b2.height && b2.top + margin <= b1.top + b1.height;
    }
  }, {
    key: "hitsShape",
    value: function hitsShape(targetShape) {
      checkArgCount(this.constructor.name, 'hitsShape', ['targetShape'], arguments);
      checkShape('hitsShape(targetShape)', 'targetShape', targetShape); // Symmetric.  Two shapes hit each other if any of their
      // vertices hit the other or their edges intersect.

      var myShapes = utils.getChildShapes(this);
      var targetShapes = utils.getChildShapes(targetShape);

      for (var i = 0; i < myShapes.length; i++) {
        for (var j = 0; j < targetShapes.length; j++) {
          if (myShapes[i].edgesIntersect(targetShapes[j])) {
            return true;
          }
        }
      }

      for (var _i3 = 0; _i3 < myShapes.length; _i3++) {
        var _loop = function _loop(_j) {
          var shape1 = myShapes[_i3],
              shape2 = targetShapes[_j];

          if (shape1.getApproxPoints().some(function (pt) {
            return shape2.hits(pt[0], pt[1]);
          })) {
            return {
              v: true
            };
          }

          if (shape2.getApproxPoints().some(function (pt) {
            return shape1.hits(pt[0], pt[1]);
          })) {
            return {
              v: true
            };
          }

          if (myShapes[_i3].edgesIntersect(targetShapes[_j])) {
            return {
              v: true
            };
          }
        };

        for (var _j = 0; _j < targetShapes.length; _j++) {
          var _ret = _loop(_j);

          if (typeof _ret === "object") return _ret.v;
        }
      }

      return false;
    }
  }, {
    key: "align",
    get: function get() {
      pyThrow("You can't get or set the align property");
    },
    set: function set(v) {
      pyThrow("You can't get or set the align property");
    }
  }, {
    key: "doNotInspect",
    get: function get() {
      return this.attrs.doNotInspect;
    },
    set: function set(v) {
      return this.attrs.doNotInspect = v;
    }
  }, {
    key: "centerX",
    get: function get() {
      return this.attrs.centerX;
    },
    set: function set(v) {
      return this.attrs.centerX = v;
    }
  }, {
    key: "centerY",
    get: function get() {
      return this.attrs.centerY;
    },
    set: function set(v) {
      return this.attrs.centerY = v;
    }
  }, {
    key: "left",
    get: function get() {
      return this.centerX - this.width / 2;
    } // TODO: Why use addx for this property but no others?
    ,
    set: function set(v) {
      this.addx(v - this.left);
      return v;
    }
  }, {
    key: "top",
    get: function get() {
      return this.centerY - this.height / 2;
    },
    set: function set(v) {
      this.centerY = v + this.height / 2;
      return v;
    }
  }, {
    key: "right",
    get: function get() {
      return this.centerX + this.width / 2;
    },
    set: function set(v) {
      this.centerX = v - this.width / 2;
      return v;
    }
  }, {
    key: "bottom",
    get: function get() {
      return this.centerY + this.height / 2;
    },
    set: function set(v) {
      this.centerY = v - this.height / 2;
      return v;
    }
  }, {
    key: "centroidX",
    get: function get() {
      return this.centroid[0];
    },
    set: function set(v) {
      checkNumber(this, 'centroidX', v);
      this.addx(v - this.centroidX);
    }
  }, {
    key: "centroidY",
    get: function get() {
      return this.centroid[1];
    },
    set: function set(v) {
      checkNumber(this, 'centroidY', v);
      this.addy(v - this.centroidY);
    }
  }, {
    key: "width",
    get: function get() {
      return this.get('width');
    },
    set: function set(v) {
      checkPositive(this, 'width', v);
      this.scalexy('x', v / this.width);
      this.set({
        width: v
      });
    }
  }, {
    key: "height",
    get: function get() {
      return this.get('height');
    },
    set: function set(v) {
      checkPositive(this, 'height', v);
      this.scalexy('y', v / this.height);
      this.set({
        height: v
      });
    }
  }, {
    key: "fill",
    get: function get() {
      return this.get('fill');
    },
    set: function set(v) {
      return this.set({
        fill: v
      });
    }
  }, {
    key: "border",
    get: function get() {
      return this.get('border');
    },
    set: function set(v) {
      return this.set({
        border: v
      });
    }
  }, {
    key: "borderWidth",
    get: function get() {
      return this.get('borderWidth');
    },
    set: function set(v) {
      return this.set({
        borderWidth: v
      });
    }
  }, {
    key: "dashes",
    get: function get() {
      return this.get('dashes');
    },
    set: function set(v) {
      return this.set({
        dashes: v
      });
    }
  }, {
    key: "opacity",
    get: function get() {
      return this.get('opacity');
    },
    set: function set(v) {
      return this.set({
        opacity: v
      });
    }
  }, {
    key: "closed",
    get: function get() {
      return this.get('closed');
    },
    set: function set(v) {
      return this.set({
        closed: v
      });
    }
  }, {
    key: "db",
    get: function get() {
      return this.get('db');
    },
    set: function set(v) {
      return this.set({
        db: v
      });
    }
  }, {
    key: "visible",
    get: function get() {
      return this.get('visible');
    },
    set: function set(v) {
      if (v === this.visible) return;
      this.set({
        visible: v
      });

      if (v) {
        if (this.oldGroup) {
          this.oldGroup.insert(this);
        } else {
          activeDrawing.tlg.add(this);
        }
      } else {
        this.group.remove(this);
      }
    }
  }, {
    key: "area",
    get: function get() {
      pyThrow("".concat(this, ": must override area getter!"));
    }
  }, {
    key: "centroid",
    get: function get() {
      return [this.centerX, this.centerY];
    }
  }, {
    key: "rotateAngle",
    get: function get() {
      return this.get('rotateAngle');
    },
    set: function set(v) {
      this.rotate(v - this.rotateAngle);
    }
  }]);

  return Shape;
}();

var Group =
/*#__PURE__*/
function (_Shape) {
  "use strict";

  _inherits(Group, _Shape);

  function Group(attrs) {
    var _this6;

    _classCallCheck(this, Group);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Group).call(this, attrs));
    _this6.isGroup = true;
    _this6._shapes = [];
    return _this6;
  }

  _createClass(Group, [{
    key: "toString",
    value: function toString() {
      return 'Group()';
    }
  }, {
    key: "__iter__",
    value: function __iter__() {
      return $B.$iter(this.children);
    }
  }, {
    key: "insert",
    value: function insert(shape) {
      var _this7 = this;

      if (shape.group) {
        shape.group.remove(shape);
      } // By default, put this shape at the top of the group


      var newIndex = this._shapes.length; // But if it was in this group before, put it back in front of all the
      // shapes that it was in front of before.

      if (shape.oldGroup === this) {
        newIndex = 0;
        shape.shapesToBeInFrontOf.forEach(function (s2) {
          var s2Index = _this7._shapes.indexOf(s2);

          if (s2Index >= 0) {
            newIndex = Math.max(newIndex, s2Index + 1);
          }
        });
      }

      this._shapes.splice(newIndex, 0, shape);

      shape.group = this;
      shape.zindex = -1;
      shape.oldGroup = undefined;
      shape.shapesToBeInFrontOf = [];
      activeDrawing.needsFullUpdate = true;
    }
  }, {
    key: "add",
    value: function add() {
      for (var i = 0; i < arguments.length; i++) {
        checkShape('Group.add(shape)', 'shape', i < 0 || arguments.length <= i ? undefined : arguments[i]);

        if (isWebWorker) {
          activeDrawing.shapeCount += 1;

          if (activeDrawing.shapeCount > activeDrawing.appProperties.maxShapeCount) {
            pyThrow('Too many shapes: Your code created more than ' + activeDrawing.appProperties.maxShapeCount + ' shapes. If you would like to increase this limit even though it may cause' + ' your code to run slowly, call app.setMaxShapeCount(n).');
          }
        }

        this.insert(i < 0 || arguments.length <= i ? undefined : arguments[i]);
      }
    }
  }, {
    key: "_toFront",
    value: function _toFront(shape) {
      this.remove(shape);
      shape.oldGroup = undefined;
      this.add(shape);
    }
  }, {
    key: "_toBack",
    value: function _toBack(shape) {
      this.remove(shape);
      shape.shapesToBeInFrontOf = [];
      this.add(shape);
    }
  }, {
    key: "remove",
    value: function remove(shape) {
      checkShape('Group.remove(shape)', 'shape', shape);

      if (isWebWorker) {
        activeDrawing.shapeCount -= 1;
      }

      var currentIndex = this._shapes.indexOf(shape);

      shape.shapesToBeInFrontOf = shape.shapesToBeInFrontOf.concat(this._shapes.slice(0, currentIndex));

      for (var i = currentIndex + 1; i < this._shapes.length; i++) {
        this._shapes[i].shapesToBeInFrontOf.push(shape);
      }

      utils.remove(this._shapes, shape);
      shape.oldGroup = this;
      shape.group = undefined;
      shape.zindex = -1;
      activeDrawing.needsFullUpdate = true;

      var f = function f(shape) {
        if (shape.isGroup) {
          shape._shapes.forEach(function (s) {
            return f(s);
          });
        } else {
          shape.zindex = -1;
        }
      };

      f(shape);
    }
  }, {
    key: "clear",
    value: function clear() {
      var shapes = this._shapes;
      this._shapes = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = shapes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var shape = _step2.value;
          this.remove(shape);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: "hits",
    value: function hits(x, y) {
      return this.hitTest(x, y) !== null;
    }
  }, {
    key: "hitTest",
    value: function hitTest(x, y) {
      for (var i = this._shapes.length - 1; i >= 0; i--) {
        var shape = this._shapes[i];

        if (shape.hits(x, y)) {
          return shape.brythonShape;
        }
      }

      return null;
    }
  }, {
    key: "contains",
    value: function contains(x, y) {
      return this._shapes.some(function (shape) {
        return shape.contains(x, y);
      });
    }
  }, {
    key: "containsShape",
    value: function containsShape(target) {
      return this._shapes.some(function (shape) {
        return shape.containsShape(target);
      });
    }
  }, {
    key: "addx",
    value: function addx(dx) {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this._shapes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var shape = _step3.value;
          shape.left += dx;
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  }, {
    key: "addy",
    value: function addy(dy) {
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = this._shapes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var shape = _step4.value;
          shape.top += dy;
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }
  }, {
    key: "scalexy",
    value: function scalexy(varName, k, scaleAnchor) {
      if (k === 1) return;
      checkPositive(this, "scale".concat(varName), k);

      if (scaleAnchor === undefined) {
        scaleAnchor = this.centroid;
      }

      this._shapes.forEach(function (s) {
        return s.scalexy(varName, k, scaleAnchor);
      });
    }
  }, {
    key: "doRotate",
    value: function doRotate(degrees, cx, cy) {
      this._shapes.forEach(function (s) {
        return s.rotate(degrees, cx, cy);
      });
    }
  }, {
    key: "getPTA",
    // pass-through attrs (PTA's)
    value: function getPTA(attr) {
      if (this._shapes.length === 0) return shapeAttrDefaults[attr];
      return this._shapes[0][attr];
    }
  }, {
    key: "setPTA",
    value: function setPTA(attr, v) {
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = this._shapes[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var shape = _step5.value;
          shape[attr] = v;
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return v;
    }
  }, {
    key: "children",
    get: function get() {
      // actually brythonChildren
      return $B.$list(this._shapes.map(function (s) {
        return s.brythonShape;
      }));
    }
  }, {
    key: "left",
    get: function get() {
      if (this._shapes.length === 0) {
        return 0;
      }

      return utils.min(this._shapes.map(function (s) {
        return s.left;
      }));
    },
    set: function set(v) {
      this.addx(v - this.left);
    }
  }, {
    key: "right",
    get: function get() {
      if (this._shapes.length === 0) {
        return 0;
      }

      return utils.max(this._shapes.map(function (s) {
        return s.right;
      }));
    },
    set: function set(v) {
      this.addx(v - this.right);
    }
  }, {
    key: "centerX",
    get: function get() {
      return (this.left + this.right) / 2;
    },
    set: function set(v) {
      this.addx(v - this.centerX);
    }
  }, {
    key: "top",
    get: function get() {
      if (this._shapes.length === 0) {
        return 0;
      }

      return utils.min(this._shapes.map(function (s) {
        return s.top;
      }));
    },
    set: function set(v) {
      this.addy(v - this.top);
    }
  }, {
    key: "bottom",
    get: function get() {
      if (this._shapes.length === 0) {
        return 0;
      }

      return utils.max(this._shapes.map(function (s) {
        return s.bottom;
      }));
    },
    set: function set(v) {
      this.addy(v - this.bottom);
    }
  }, {
    key: "centerY",
    get: function get() {
      return (this.top + this.bottom) / 2;
    },
    set: function set(v) {
      this.addy(v - this.centerY);
    }
  }, {
    key: "width",
    get: function get() {
      return this.right - this.left;
    },
    set: function set(v) {
      checkPositive(this, 'width', v);
      this.scalexy('x', v / this.width);
    }
  }, {
    key: "height",
    get: function get() {
      return this.bottom - this.top;
    },
    set: function set(v) {
      checkPositive(this, 'height', v);
      this.scalexy('y', v / this.height);
    }
  }, {
    key: "area",
    get: function get() {
      var result = 0;

      this._shapes.forEach(function (s) {
        return result += s.area;
      });

      return result;
    }
  }, {
    key: "centroid",
    get: function get() {
      var x = 0,
          y = 0,
          A = 0;

      this._shapes.forEach(function (s) {
        var c = s.centroid,
            a = s.area;
        var cx = c[0],
            cy = c[1];
        x += a * cx;
        y += a * cy;
        A += a;
      });

      return [x / A, y / A];
    }
  }, {
    key: "fill",
    get: function get() {
      return this.getPTA('fill');
    },
    set: function set(v) {
      return this.setPTA('fill', v);
    }
  }, {
    key: "border",
    get: function get() {
      return this.getPTA('border');
    },
    set: function set(v) {
      return this.setPTA('border', v);
    }
  }, {
    key: "borderWidth",
    get: function get() {
      return this.getPTA('borderWidth');
    },
    set: function set(v) {
      return this.setPTA('borderWidth', v);
    }
  }, {
    key: "dashes",
    get: function get() {
      return this.getPTA('dashes');
    },
    set: function set(v) {
      return this.setPTA('dashes', v);
    }
  }, {
    key: "opacity",
    get: function get() {
      return this.getPTA('opacity');
    },
    set: function set(v) {
      return this.setPTA('opacity', v);
    }
  }, {
    key: "radius",
    get: function get() {
      return this.getPTA('radius');
    },
    set: function set(v) {
      return this.setPTA('radius', v);
    }
  }, {
    key: "points",
    get: function get() {
      return this.getPTA('points');
    },
    set: function set(v) {
      return this.setPTA('points', v);
    }
  }, {
    key: "roundness",
    get: function get() {
      return this.getPTA('roundness');
    },
    set: function set(v) {
      return this.setPTA('roundness', v);
    }
  }, {
    key: "x1",
    get: function get() {
      return this.getPTA('x1');
    },
    set: function set(v) {
      return this.setPTA('x1', v);
    }
  }, {
    key: "y1",
    get: function get() {
      return this.getPTA('y1');
    },
    set: function set(v) {
      return this.setPTA('y1', v);
    }
  }, {
    key: "x2",
    get: function get() {
      return this.getPTA('x2');
    },
    set: function set(v) {
      return this.setPTA('x2', v);
    }
  }, {
    key: "y2",
    get: function get() {
      return this.getPTA('y2');
    },
    set: function set(v) {
      return this.setPTA('y2', v);
    }
  }, {
    key: "lineWidth",
    get: function get() {
      return this.getPTA('lineWidth');
    },
    set: function set(v) {
      return this.setPTA('lineWidth', v);
    }
  }, {
    key: "closed",
    get: function get() {
      return this.getPTA('closed');
    },
    set: function set(v) {
      return this.setPTA('closed', v);
    }
  }, {
    key: "startAngle",
    get: function get() {
      return this.getPTA('startAngle');
    },
    set: function set(v) {
      return this.setPTA('startAngle', v);
    }
  }, {
    key: "sweepAngle",
    get: function get() {
      return this.getPTA('sweepAngle');
    },
    set: function set(v) {
      return this.setPTA('sweepAngle', v);
    }
  }, {
    key: "value",
    get: function get() {
      return this.getPTA('value');
    },
    set: function set(v) {
      return this.setPTA('value', v);
    }
  }, {
    key: "font",
    get: function get() {
      return this.getPTA('font');
    },
    set: function set(v) {
      return this.setPTA('font', v);
    }
  }, {
    key: "size",
    get: function get() {
      return this.getPTA('size');
    },
    set: function set(v) {
      return this.setPTA('size', v);
    }
  }, {
    key: "bold",
    get: function get() {
      return this.getPTA('bold');
    },
    set: function set(v) {
      return this.setPTA('bold', v);
    }
  }, {
    key: "italic",
    get: function get() {
      return this.getPTA('italic');
    },
    set: function set(v) {
      return this.setPTA('italic', v);
    }
  }]);

  return Group;
}(Shape);

var Polygon =
/*#__PURE__*/
function (_Shape2) {
  "use strict";

  _inherits(Polygon, _Shape2);

  function Polygon(attrs) {
    var _this8;

    _classCallCheck(this, Polygon);

    if (attrs && attrs.initialPoints) {
      if (attrs.initialPoints.length % 2 !== 0) {
        pyThrow('Must have an even number of x,y values in initialPoints list');
      }

      for (var i = 0; i < attrs.initialPoints.length; i += 2) {
        var x = attrs.initialPoints[i],
            y = attrs.initialPoints[i + 1];
        checkNumber('Polygon', 'initialPoints (x value)', x);
        checkNumber('Polygon', 'initialPoints (y value)', y);
      }
    }

    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(Polygon).call(this, attrs));
    _this8._cachedCentroid = _this8._cachedArea = undefined;

    if (attrs && attrs.initialPoints) {
      var pts = attrs.initialPoints;
      var pointList = [];

      for (var _i4 = 0; _i4 < pts.length; _i4 += 2) {
        var _x2 = pts[_i4],
            _y2 = pts[_i4 + 1];
        pointList.push([_x2, _y2]);
      }

      _this8.pointList = pointList;
    }

    return _this8;
  }

  _createClass(Polygon, [{
    key: "setDims",
    value: function setDims() {
      this._cachedCentroid = this._cachedArea = undefined;
      var attrs = this.attrs;

      if (attrs.pointList.length === 0) {
        this.set({
          centerX: 0,
          centerY: 0,
          width: 0,
          height: 0
        });
        return;
      }

      var boxDims = utils.getBoxDims(attrs.pointList);
      this.set({
        centerX: boxDims.left + boxDims.width / 2,
        centerY: boxDims.top + boxDims.height / 2,
        width: boxDims.width,
        height: boxDims.height
      });
    }
  }, {
    key: "addxy",
    value: function addxy(varName, d) {
      if (d === 0) return;
      var varIndex = varName === 'x' ? 0 : 1;
      checkNumber(this, "add".concat(varName), d);
      var pointList = this.attrs.pointList;

      for (var i = 0; i < pointList.length; i++) {
        pointList[i][varIndex] += d;
      }

      this.pointList = pointList; // alert to change
    }
  }, {
    key: "scalexy",
    value: function scalexy(varName, k, scaleAnchor) {
      if (k === 1) return;
      var varIndex = varName === 'x' ? 0 : 1;
      checkPositive(this, "scale".concat(varName), k);
      var pointList = this.attrs.pointList;
      var cxy = (scaleAnchor || this.getScaleAnchor())[varIndex];

      for (var i = 0; i < pointList.length; i++) {
        var dxy = pointList[i][varIndex] - cxy;
        pointList[i][varIndex] = cxy + k * dxy;
      }

      this.pointList = pointList; // alert to change
    }
  }, {
    key: "getScaleAnchor",
    value: function getScaleAnchor() {
      return [this.centerX, this.centerY];
    }
  }, {
    key: "doRotate",
    value: function doRotate(degrees, cx, cy) {
      this.pointList = utils.rotatePoints(this.pointList, toRadians(degrees), cx, cy);
    }
  }, {
    key: "addPoint",
    value: function addPoint(x, y) {
      checkNumber('addPoint', 'x', x);
      checkNumber('addPoint', 'y', y);
      this.pointList.push([x, y]);
      this.pointList = this.pointList; // alert to change
    }
  }, {
    key: "getApproxPoints",
    value: function getApproxPoints() {
      return this.pointList; // this is a polygon, so "approx" is exact (and rotated!)
    }
  }, {
    key: "makePath",
    value: function makePath(ctx) {
      return utils.makePolygonPath(this.pointList, ctx);
    }
  }, {
    key: "toString",
    value: function toString() {
      var args = utils.flatten(this.pointList);
      return "Polygon".concat(utils.roundedTupleString(args, 2));
    }
  }, {
    key: "createBaseGradient",
    value: function createBaseGradient(fillOrBorder, ctx) {
      var gradient = fillOrBorder;
      var start = gradient.start;
      var rotateAnchor = this.getRotateAnchor();
      var unrotatedPoints = this.pointList;

      if (this.rotateAngle !== 0) {
        unrotatedPoints = utils.rotatePoints(this.pointList, toRadians(-this.rotateAngle), rotateAnchor[0], rotateAnchor[1]);
      }

      var dims = utils.getBoxDims(unrotatedPoints);

      if (start === 'center') {
        var r;

        if (this instanceof Oval) {
          r = Math.max(dims.width, dims.height) / 2;
        } else {
          r = distance(dims.left + dims.width / 2, dims.top + dims.height / 2, dims.left, dims.top);
        }

        if (this instanceof Star) {
          r *= 0.8;
        }

        return ctx.createRadialGradient(rotateAnchor[0], rotateAnchor[1], 0, rotateAnchor[0], rotateAnchor[1], r);
      }

      var left = dims.left,
          top = dims.top;
      var right = left + dims.width;
      var bottom = top + dims.height;
      var centerX = left + dims.width / 2;
      var centerY = top + dims.height / 2;
      var x0, y0, x1, y1; // eslint-disable-line

      if (start === 'left-top') {
        x0 = left;
        x1 = right;
        y0 = top;
        y1 = bottom;
      } else if (start === 'left') {
        x0 = left;
        x1 = right;
        y0 = y1 = centerY;
      } else if (start === 'left-bottom') {
        x0 = left;
        x1 = right;
        y0 = bottom;
        y1 = top;
      } else if (start === 'top') {
        x0 = x1 = centerX;
        y0 = top;
        y1 = bottom;
      } else if (start === 'bottom') {
        x0 = x1 = centerX;
        y0 = bottom;
        y1 = top;
      } else if (start === 'right-top') {
        x0 = right;
        x1 = left;
        y0 = top;
        y1 = bottom;
      } else if (start === 'right') {
        x0 = right;
        x1 = left;
        y0 = y1 = centerY;
      } else if (start === 'right-bottom') {
        x0 = right;
        x1 = left;
        y0 = bottom;
        y1 = top;
      } else {
        pyThrow("Illegal gradient start (".concat(start, ")"));
      }

      if (this.rotateAngle !== 0) {
        var _utils$rotatePoints = utils.rotatePoints([[x0, y0], [x1, y1]], toRadians(this.rotateAngle), rotateAnchor[0], rotateAnchor[1]);

        var _utils$rotatePoints2 = _slicedToArray(_utils$rotatePoints, 2);

        var _utils$rotatePoints2$ = _slicedToArray(_utils$rotatePoints2[0], 2);

        x0 = _utils$rotatePoints2$[0];
        y0 = _utils$rotatePoints2$[1];

        var _utils$rotatePoints2$2 = _slicedToArray(_utils$rotatePoints2[1], 2);

        x1 = _utils$rotatePoints2$2[0];
        y1 = _utils$rotatePoints2$2[1];
      }

      return ctx.createLinearGradient(x0, y0, x1, y1);
    }
  }, {
    key: "pointList",
    get: function get() {
      return this.get('pointList');
    },
    set: function set(pl) {
      this.set({
        pointList: pl
      });
      this.setDims();
    }
  }, {
    key: "area",
    get: function get() {
      if (!isWebWorker || this._cachedArea === undefined) {
        this._cachedArea = Math.abs(utils.getPolygonArea(this.pointList));
      }

      return this._cachedArea;
    }
  }, {
    key: "centroid",
    get: function get() {
      if (!isWebWorker || this._cachedCentroid === undefined) {
        this._cachedCentroid = utils.getPolygonCentroid(this.pointList);
      }

      return this._cachedCentroid;
    }
  }, {
    key: "centerX",
    get: function get() {
      return this.get('centerX');
    },
    set: function set(v) {
      this.addx(v - this.centerX); // centerX will get set by setDims(), but we overwrite the value
      // with what the user gave so that there are no rounding errors.

      this.set({
        centerX: v
      });
    }
  }, {
    key: "centerY",
    get: function get() {
      return this.get('centerY');
    },
    set: function set(v) {
      this.addy(v - this.centerY); // centerY will get set by setDims(), but we overwrite the value
      // with what the user gave so that there are no rounding errors.

      this.set({
        centerY: v
      });
    }
  }, {
    key: "left",
    get: function get() {
      return utils.min(this.pointList.map(function (point) {
        return point[0];
      }));
    },
    set: function set(v) {
      this.addx(v - this.left);
      return v;
    }
  }, {
    key: "top",
    get: function get() {
      return utils.min(this.pointList.map(function (point) {
        return point[1];
      }));
    },
    set: function set(v) {
      this.addy(v - this.top);
      return v;
    }
  }, {
    key: "right",
    get: function get() {
      return utils.max(this.pointList.map(function (point) {
        return point[0];
      }));
    },
    set: function set(v) {
      this.addx(v - this.right);
      return v;
    }
  }, {
    key: "bottom",
    get: function get() {
      return utils.max(this.pointList.map(function (point) {
        return point[1];
      }));
    },
    set: function set(v) {
      this.addy(v - this.bottom);
      return v;
    }
  }]);

  return Polygon;
}(Shape);

var PolygonWithTransform =
/*#__PURE__*/
function (_Polygon) {
  "use strict";

  _inherits(PolygonWithTransform, _Polygon);

  function PolygonWithTransform() {
    _classCallCheck(this, PolygonWithTransform);

    return _possibleConstructorReturn(this, _getPrototypeOf(PolygonWithTransform).apply(this, arguments));
  }

  _createClass(PolygonWithTransform, [{
    key: "multMat",
    value: function multMat(trans) {
      var newTrans = [[0, 0], [0, 0]];

      for (var i = 0; i < newTrans.length; i++) {
        for (var j = 0; j < newTrans.length; j++) {
          for (var k = 0; k < newTrans.length; k++) {
            newTrans[i][j] += this.transformMatrix[k][j] * trans[i][k];
          }
        }
      }

      this.transformMatrix = newTrans;
    }
  }, {
    key: "doRotate",
    value: function doRotate(degrees, cx, cy) {
      _get(_getPrototypeOf(PolygonWithTransform.prototype), "doRotate", this).call(this, degrees, cx, cy);

      var radians = -toRadians(degrees);
      var rotateTrans = [[Math.cos(radians), Math.sin(radians)], [-Math.sin(radians), Math.cos(radians)]];
      this.multMat(rotateTrans);
    }
  }, {
    key: "scalexy",
    value: function scalexy(varName, k, scaleAnchor) {
      _get(_getPrototypeOf(PolygonWithTransform.prototype), "scalexy", this).call(this, varName, k, scaleAnchor);

      if (k === 1) return;
      var i = varName === 'x' ? 0 : 1;
      var trans = [[1, 0], [0, 1]];
      trans[i][i] = k;
      this.multMat(trans);
    }
  }, {
    key: "transformMatrix",
    get: function get() {
      return this.get('transformMatrix');
    },
    set: function set(v) {
      return this.set({
        transformMatrix: v
      });
    }
  }]);

  return PolygonWithTransform;
}(Polygon);

var Oval =
/*#__PURE__*/
function (_PolygonWithTransform) {
  "use strict";

  _inherits(Oval, _PolygonWithTransform);

  function Oval(attrs) {
    _classCallCheck(this, Oval);

    if (isWebWorker) {
      attrs.initialPoints = utils.flatten(utils.getArcPoints(attrs.centerX, attrs.centerY, attrs.width, attrs.height, attrs.startAngle, attrs.sweepAngle));
      attrs.transformMatrix = [[attrs.width / 2, 0], [0, attrs.height / 2]];
      attrs.translation = [attrs.centerX, attrs.centerY];

      if (attrs.startAngle === undefined) {
        attrs.startAngle = 0;
      }

      if (attrs.sweepAngle === undefined) {
        attrs.sweepAngle = 360;
      }

      attrs.bezierPoints = Oval.getBezierPoints(attrs.startAngle, attrs.sweepAngle);
    }

    return _possibleConstructorReturn(this, _getPrototypeOf(Oval).call(this, attrs));
  }

  _createClass(Oval, [{
    key: "makePath",
    value: function makePath(ctx) {
      var _this9 = this;

      ctx.save();
      ctx.translate(this.translation[0], this.translation[1]);
      var bp = this.bezierPoints.map(function (p) {
        return [_this9.transformMatrix[0][0] * p[0] + _this9.transformMatrix[0][1] * p[1], _this9.transformMatrix[1][0] * p[0] + _this9.transformMatrix[1][1] * p[1]];
      });

      if (this instanceof Arc) {
        ctx.moveTo(0, 0);
        ctx.lineTo(bp[0][0], bp[0][1]);
      } else {
        ctx.moveTo(bp[0][0], bp[0][1]);
      }

      for (var i = 0; i < bp.length / 4; i++) {
        var i2 = i * 4;
        ctx.bezierCurveTo(bp[i2 + 1][0], bp[i2 + 1][1], bp[i2 + 2][0], bp[i2 + 2][1], bp[i2 + 3][0], bp[i2 + 3][1]);
      }

      ctx.closePath();
      ctx.restore();
    }
  }, {
    key: "addxy",
    value: function addxy(varName, d) {
      _get(_getPrototypeOf(Oval.prototype), "addxy", this).call(this, varName, d);

      if (d === 0) return;
      var varIndex = varName === 'x' ? 0 : 1;
      this.translation[varIndex] += d;
      this.translation = this.translation;
    }
  }, {
    key: "scalexy",
    value: function scalexy(varName, k, scaleAnchor) {
      _get(_getPrototypeOf(Oval.prototype), "scalexy", this).call(this, varName, k, scaleAnchor);

      if (k === 1) return;
      var i = varName === 'x' ? 0 : 1;
      var cxy = (scaleAnchor || this.getScaleAnchor())[i];
      this.translation[i] = cxy + (this.translation[i] - cxy) * k;
      this.translation = this.translation;
    }
  }, {
    key: "doRotate",
    value: function doRotate(degrees, cx, cy) {
      _get(_getPrototypeOf(Oval.prototype), "doRotate", this).call(this, degrees, cx, cy);

      var radians = -toRadians(degrees);
      this.translation = utils.rotatePoint(this.translation, -radians, cx, cy);
    }
  }, {
    key: "toString",
    value: function toString() {
      var args = [this.centerX, this.centerY, this.width, this.height];
      return "Oval".concat(utils.roundedTupleString(args, 2));
    }
  }, {
    key: "bezierPoints",
    get: function get() {
      return this.get('bezierPoints');
    },
    set: function set(v) {
      return this.set({
        bezierPoints: v
      });
    }
  }, {
    key: "translation",
    get: function get() {
      return this.get('translation');
    },
    set: function set(v) {
      return this.set({
        translation: v
      });
    }
  }], [{
    key: "getBezierPoints",
    value: function getBezierPoints(startAngle, sweepAngle) {
      var offset = toRadians(startAngle);
      var remaining = sweepAngle;
      var bp = [];

      while (remaining > 0) {
        bp = bp.concat(Oval.getBezierFragment(toRadians(Math.min(90, remaining)), offset));
        offset += Math.PI / 2;
        remaining -= 90;
      }

      return bp;
    }
  }, {
    key: "getBezierFragment",
    value: function getBezierFragment(sweepAngle, offsetAngle) {
      // Return a cubic Bezier curve that approximates up to 90 degrees of a circle.
      // https://www.tinaja.com/glib/bezcirc2.pdf
      var result = [[0, 0], [0, 0], [0, 0], [0, 0]];
      result[3][0] = Math.cos(sweepAngle / 2);
      result[3][1] = Math.sin(sweepAngle / 2);
      result[0][0] = result[3][0];
      result[0][1] = -result[3][1];
      result[2][0] = (4 - result[3][0]) / 3;
      result[2][1] = (1 - result[3][0]) * (3 - result[3][0]) / (3 * result[3][1]);
      result[1][0] = result[2][0];
      result[1][1] = -result[2][1];
      result = utils.rotatePoints(result, sweepAngle / 2 + offsetAngle - Math.PI / 2, 0, 0);
      return result;
    }
  }]);

  return Oval;
}(PolygonWithTransform);

var Arc =
/*#__PURE__*/
function (_Oval) {
  "use strict";

  _inherits(Arc, _Oval);

  function Arc(attrs) {
    var _this10;

    _classCallCheck(this, Arc);

    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(Arc).call(this, attrs));

    if (isWebWorker) {
      _this10.ovalWidth = attrs.width;
      _this10.ovalHeight = attrs.height;
    }

    return _this10;
  }

  _createClass(Arc, [{
    key: "doRotate",
    value: function doRotate(degrees, cx, cy) {
      _get(_getPrototypeOf(Arc.prototype), "doRotate", this).call(this, degrees, cx, cy);
    }
  }, {
    key: "scalexy",
    value: function scalexy(varName, k, scaleAnchor) {
      _get(_getPrototypeOf(Arc.prototype), "scalexy", this).call(this, varName, k, scaleAnchor);

      if (k === 1 || this.ovalWidth === null || this.ovalHeight === null) {
        return;
      }

      if (this.rotateAngle !== 0) {
        this.ovalWidth = null;
        this.ovalHeight = null;
        return;
      }

      if (varName === 'x') {
        this.ovalWidth *= k;
      } else if (varName === 'y') {
        this.ovalHeight *= k;
      }
    }
  }, {
    key: "regeneratePoints",
    value: function regeneratePoints() {
      var _this11 = this;

      this.pointList = utils.getArcPoints(0, 0, 2, 2, this.startAngle, this.sweepAngle, (this.width + this.height) / 2);
      this.pointList.forEach(function (pt) {
        var newPt = [_this11.transformMatrix[0][0] * pt[0] + _this11.transformMatrix[0][1] * pt[1], _this11.transformMatrix[1][0] * pt[0] + _this11.transformMatrix[1][1] * pt[1]];
        pt[0] = newPt[0] + _this11.translation[0];
        pt[1] = newPt[1] + _this11.translation[1];
      });
      this.pointList = this.pointList;
      this.bezierPoints = Oval.getBezierPoints(this.startAngle, this.sweepAngle);
    }
  }, {
    key: "getRotateAnchor",
    value: function getRotateAnchor() {
      return [this.pointList[0][0], this.pointList[0][1]];
    }
  }, {
    key: "ovalWidth",
    get: function get() {
      return this.get('ovalWidth');
    },
    set: function set(v) {
      return this.set({
        ovalWidth: v
      });
    }
  }, {
    key: "ovalHeight",
    get: function get() {
      return this.get('ovalHeight');
    },
    set: function set(v) {
      return this.set({
        ovalHeight: v
      });
    }
  }, {
    key: "startAngle",
    get: function get() {
      return this.get('startAngle');
    },
    set: function set(v) {
      this.set({
        startAngle: v
      });
      this.regeneratePoints();
      return v;
    }
  }, {
    key: "sweepAngle",
    get: function get() {
      return this.get('sweepAngle');
    },
    set: function set(v) {
      this.set({
        sweepAngle: v
      });
      this.regeneratePoints();
      return v;
    }
  }, {
    key: "centerX",
    get: function get() {
      return utils.round2(this.pointList[0][0]);
    },
    set: function set(v) {
      this.addx(v - this.centerX);
    }
  }, {
    key: "centerY",
    get: function get() {
      return utils.round2(this.pointList[0][1]);
    },
    set: function set(v) {
      this.addy(v - this.centerY);
    }
  }]);

  return Arc;
}(Oval);

var Circle =
/*#__PURE__*/
function (_Oval2) {
  "use strict";

  _inherits(Circle, _Oval2);

  function Circle(attrs) {
    var _this12;

    _classCallCheck(this, Circle);

    if (isWebWorker) {
      attrs.width = attrs.height = 2 * attrs.radius;
    }

    _this12 = _possibleConstructorReturn(this, _getPrototypeOf(Circle).call(this, attrs));

    if (isWebWorker) {
      // use exact radius until user explicitly sets width or height
      _this12._exactRadius = attrs.radius;
    }

    return _this12;
  }

  _createClass(Circle, [{
    key: "toString",
    value: function toString() {
      var args = [this.centerX, this.centerY, this.radius];
      return "Circle".concat(utils.roundedTupleString(args, 2));
    }
  }, {
    key: "radius",
    get: function get() {
      if (this._exactRadius !== undefined) {
        return this._exactRadius;
      }

      return (this.get('width') + this.get('height')) / 4;
    },
    set: function set(v) {
      _set(_getPrototypeOf(Circle.prototype), "width", _set(_getPrototypeOf(Circle.prototype), "height", 2 * v, this, true), this, true);

      this._exactRadius = v;
      return v;
    }
  }, {
    key: "_exactRadius",
    get: function get() {
      return this.get('_exactRadius');
    },
    set: function set(v) {
      this.set({
        _exactRadius: v
      });
    }
  }, {
    key: "width",
    get: function get() {
      return _get(_getPrototypeOf(Circle.prototype), "width", this);
    },
    set: function set(v) {
      this._exactRadius = undefined;
      return _set(_getPrototypeOf(Circle.prototype), "width", v, this, true);
    }
  }, {
    key: "height",
    get: function get() {
      return _get(_getPrototypeOf(Circle.prototype), "height", this);
    },
    set: function set(v) {
      this._exactRadius = undefined;
      return _set(_getPrototypeOf(Circle.prototype), "height", v, this, true);
    }
  }]);

  return Circle;
}(Oval);

var Line =
/*#__PURE__*/
function (_Polygon2) {
  "use strict";

  _inherits(Line, _Polygon2);

  function Line(attrs) {
    _classCallCheck(this, Line);

    if (isWebWorker) {
      checkNumber('Line', 'x1', attrs.x1);
      checkNumber('Line', 'x2', attrs.x2);
      checkNumber('Line', 'y1', attrs.y1);
      checkNumber('Line', 'y2', attrs.y2);
      attrs.initialPoints = utils.flatten(utils.getLinePoints(attrs.x1, attrs.y1, attrs.x2, attrs.y2, 2));
      delete attrs.x1;
      delete attrs.y1;
      delete attrs.x2;
      delete attrs.y2;
    }

    return _possibleConstructorReturn(this, _getPrototypeOf(Line).call(this, attrs));
  }

  _createClass(Line, [{
    key: "getXY",
    value: function getXY(i0, i1, j) {
      var p = this.pointList;
      return (p[i0][j] + p[i1][j]) / 2;
    }
  }, {
    key: "setXY",
    value: function setXY(i0, i1, j, v, name) {
      checkNumber(this, name, v);
      var p = this.pointList;
      var oldv = (p[i0][j] + p[i1][j]) / 2;
      var dv = v - oldv;
      p[i0][j] += dv;
      p[i1][j] += dv;
      this.pointList = this.pointList; // alert to change

      return v;
    }
  }, {
    key: "get",
    value: function get(attr) {
      if (attr === 'x1') return this.x1;else if (attr === 'y1') return this.y1;else if (attr === 'x2') return this.x2;else if (attr === 'y2') return this.y2;else return _get(_getPrototypeOf(Line.prototype), "get", this).call(this, attr);
    }
  }, {
    key: "drawArrows",
    value: function drawArrows(ctx) {
      var _this13 = this;

      if (!this.arrowEnd && !this.arrowStart) {
        return;
      }

      var dx = this.x2 - this.x1;
      var dy = this.y2 - this.y1;
      var dist = Math.sqrt(dy * dy + dx * dx);

      if (dist < 0.01) {
        return;
      }

      dx /= dist;
      dy /= dist;
      var normalDx = -dy;
      var normalDy = dx;
      var arrowLength = Math.min(50, 10 * Math.sqrt(this.lineWidth));
      var arrowWidth = arrowLength / 3;

      var drawArrow = function drawArrow(x, y, dir) {
        ctx.beginPath();
        ctx.fillStyle = _this13.getFillOrStrokeStyle(_this13.fill, ctx);
        ctx.strokeStyle = _this13.getFillOrStrokeStyle(_this13.fill, ctx);
        ctx.setLineDash([]);
        ctx.moveTo(x, y);
        ctx.lineTo(x + dir * arrowLength * dx - arrowWidth * normalDx, y + dir * arrowLength * dy - arrowWidth * normalDy);
        ctx.lineTo(x + dir * arrowLength * dx + arrowWidth * normalDx, y + dir * arrowLength * dy + arrowWidth * normalDy);
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
      };

      if (this.arrowEnd) {
        drawArrow(this.x2, this.y2, -1);
      }

      if (this.arrowStart) {
        drawArrow(this.x1, this.y1, 1);
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      var args = [this.x1, this.y1, this.x2, this.y2];
      return "Line".concat(utils.roundedTupleString(args, 2));
    }
  }, {
    key: "x1",
    get: function get() {
      return this.getXY(0, 3, 0);
    } // x1,y1 at points 0 and 3, 0=x
    ,
    set: function set(v) {
      return this.setXY(0, 3, 0, v, 'x1');
    } // x1,y1 at points 0 and 3, 0=x

  }, {
    key: "y1",
    get: function get() {
      return this.getXY(0, 3, 1);
    } // x1,y1 at points 0 and 3, 1=y
    ,
    set: function set(v) {
      return this.setXY(0, 3, 1, v, 'y1');
    } // x1,y1 at points 0 and 3, 1=y

  }, {
    key: "x2",
    get: function get() {
      return this.getXY(1, 2, 0);
    } // x2,y2 at points 1 and 2, 0=x
    ,
    set: function set(v) {
      return this.setXY(1, 2, 0, v, 'x2');
    } // x2,y2 at points 1 and 2, 0=x

  }, {
    key: "y2",
    get: function get() {
      return this.getXY(1, 2, 1);
    } // x2,y2 at points 1 and 2, 1=y
    ,
    set: function set(v) {
      return this.setXY(1, 2, 1, v, 'y2');
    } // x2,y2 at points 1 and 2, 1=y

  }, {
    key: "arrowStart",
    get: function get() {
      return this.get('arrowStart');
    },
    set: function set(v) {
      return this.set({
        arrowStart: v
      });
    }
  }, {
    key: "arrowEnd",
    get: function get() {
      return this.get('arrowEnd');
    },
    set: function set(v) {
      return this.set({
        arrowEnd: v
      });
    }
  }, {
    key: "lineWidth",
    get: function get() {
      var pts = this.pointList;
      return distance(pts[0][0], pts[0][1], pts[3][0], pts[3][1]);
    },
    set: function set(v) {
      this.pointList = utils.getLinePoints(this.x1, this.y1, this.x2, this.y2, v);
      return this.set({
        lineWidth: v
      });
    }
  }, {
    key: "borderWidth",
    get: function get() {
      return 0;
    },
    set: function set(v) {
      pyThrow("Cannot set Line's borderWidth");
    }
  }, {
    key: "border",
    get: function get() {
      return null;
    },
    set: function set(v) {
      pyThrow("Cannot set Line's border");
    }
  }, {
    key: "area",
    get: function get() {
      return this.lineWidth * distance(this.x1, this.y1, this.x2, this.y2);
    }
  }]);

  return Line;
}(Polygon);

var Rect =
/*#__PURE__*/
function (_Polygon3) {
  "use strict";

  _inherits(Rect, _Polygon3);

  function Rect(attrs) {
    _classCallCheck(this, Rect);

    if (attrs !== undefined) {
      var right = attrs.left + attrs.width;
      var bottom = attrs.top + attrs.height;
      attrs.defaultAlign = 'left-top';
      attrs.initialPoints = [attrs.left, attrs.top, right, attrs.top, right, bottom, attrs.left, bottom];
    }

    return _possibleConstructorReturn(this, _getPrototypeOf(Rect).call(this, attrs));
  }

  _createClass(Rect, [{
    key: "getScaleAnchor",
    value: function getScaleAnchor() {
      return [this.left, this.top];
    }
  }, {
    key: "toString",
    value: function toString() {
      var args = [this.left, this.top, this.width, this.height];
      return "Rect".concat(utils.roundedTupleString(args, 2));
    }
  }]);

  return Rect;
}(Polygon);

var getGuid = function getGuid() {
  var S4 = function S4() {
    return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
  };

  return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();
};

var getSyncData = function getSyncData(guid) {
  var result;
  var xhr = new XMLHttpRequest();
  xhr.open('GET', "".concat(self.cmuGraphics.backendUrl, "/api/v0/web-worker/?id=").concat(guid), false);

  xhr.onload = function () {
    if (xhr.status === 200) {
      result = JSON.parse(xhr.responseText);
    } else {
      window.Rollbar.error('Failure for /sync-communication', xhr.status);
    }
  };

  xhr.onerror = function (e) {
    window.Rollbar.error('xhr failed in getSyncData()', e);
  }; // block on GET to backend


  try {
    xhr.send(null);
  } catch (e) {
    window.Rollbar.error('weird error in getSyncData()', e);
  }

  return result;
};

var sendSyncData = function sendSyncData(guid, data) {
  var xhr = new XMLHttpRequest();
  xhr.open('POST', "".concat(self.cmuGraphics.backendUrl, "/api/v0/web-worker/"), true);
  xhr.setRequestHeader('Content-Type', 'application/json');

  xhr.onload = function () {
    if (xhr.status !== 200) {
      window.Rollbar.error('fail post sync data', xhr.status);
    }
  };

  xhr.onerror = function (e) {
    window.Rollbar.error('fail post sync data', e);
  };

  xhr.send(JSON.stringify({
    data: data,
    id: guid
  }));
};

var CMUImage =
/*#__PURE__*/
function (_PolygonWithTransform2) {
  "use strict";

  _inherits(CMUImage, _PolygonWithTransform2);

  function CMUImage(attrs) {
    var _this14;

    _classCallCheck(this, CMUImage);

    if (attrs !== undefined) {
      var guid = getGuid(); // post message to ui asking for info about url

      cmuGraphics.postMsg({
        cmd: 'loadImage',
        url: attrs.url,
        serverId: guid
      });
      var imageData = getSyncData(guid);

      if (!imageData || imageData.width === undefined || imageData.height === undefined) {
        pyThrow('Failed to load image data');
      }

      var height = imageData.height,
          width = imageData.width;
      var right = attrs.left + width;
      var bottom = attrs.top + height;
      attrs.defaultAlign = 'left-top';
      attrs.initialPoints = [attrs.left, attrs.top, right, attrs.top, right, bottom, attrs.left, bottom];
      attrs.transformMatrix = [[width, 0], [0, height]];
    }

    _this14 = _possibleConstructorReturn(this, _getPrototypeOf(CMUImage).call(this, attrs));
    _this14.attrDefaults = Object.assign({}, _this14.attrDefaults, {
      fill: null
    });
    return _this14;
  }

  _createClass(CMUImage, [{
    key: "getScaleAnchor",
    value: function getScaleAnchor() {
      return [this.left, this.top];
    }
  }, {
    key: "drawImage",
    value: function drawImage(ctx) {
      var mat = this.transformMatrix;
      ctx.translate(this.pointList[0][0], this.pointList[0][1]);
      ctx.transform(mat[0][0], mat[1][0], mat[0][1], mat[1][1], 0, 0);
      ctx.drawImage(activeDrawing.images[this.url], 0, 0, 1, 1);
    }
  }, {
    key: "toString",
    value: function toString() {
      var args = [this.left, this.top, this.width, this.height];
      return "Image".concat(utils.roundedTupleString(args, 2));
    }
  }, {
    key: "url",
    get: function get() {
      return this.get('url');
    },
    set: function set(v) {
      return this.set({
        url: v
      });
    }
  }]);

  return CMUImage;
}(PolygonWithTransform);

var PolygonInCircle =
/*#__PURE__*/
function (_Polygon4) {
  "use strict";

  _inherits(PolygonInCircle, _Polygon4);

  function PolygonInCircle() {
    _classCallCheck(this, PolygonInCircle);

    return _possibleConstructorReturn(this, _getPrototypeOf(PolygonInCircle).apply(this, arguments));
  }

  _createClass(PolygonInCircle, [{
    key: "radius",
    get: function get() {
      return this.get('radius');
    },
    set: function set(v) {
      this.set({
        radius: v
      });
      this.updatePointList();
      return v;
    }
  }, {
    key: "points",
    get: function get() {
      return this.get('points');
    },
    set: function set(v) {
      this.set({
        points: v
      });
      this.updatePointList();
      return v;
    }
  }, {
    key: "centerX",
    get: function get() {
      return utils.round2(this.centroid[0]);
    },
    set: function set(v) {
      this.addx(v - this.centerX);
    }
  }, {
    key: "centerY",
    get: function get() {
      return utils.round2(this.centroid[1]);
    },
    set: function set(v) {
      this.addy(v - this.centerY);
    }
  }]);

  return PolygonInCircle;
}(Polygon);

var RegularPolygon =
/*#__PURE__*/
function (_PolygonInCircle) {
  "use strict";

  _inherits(RegularPolygon, _PolygonInCircle);

  function RegularPolygon(attrs) {
    _classCallCheck(this, RegularPolygon);

    if (isWebWorker) {
      attrs.initialPoints = utils.flatten(utils.getRegularPolygonPoints(attrs.centerX, attrs.centerY, attrs.radius, attrs.points, 0));
    }

    return _possibleConstructorReturn(this, _getPrototypeOf(RegularPolygon).call(this, attrs));
  }

  _createClass(RegularPolygon, [{
    key: "updatePointList",
    value: function updatePointList() {
      this.pointList = utils.getRegularPolygonPoints(this.centerX, this.centerY, this.radius, this.points, this.rotateAngle);
    }
  }, {
    key: "toString",
    value: function toString() {
      var args = [this.centerX, this.centerY, this.radius, this.points];
      return "RegularPolygon".concat(utils.roundedTupleString(args, 2));
    }
  }]);

  return RegularPolygon;
}(PolygonInCircle);

var Star =
/*#__PURE__*/
function (_PolygonInCircle2) {
  "use strict";

  _inherits(Star, _PolygonInCircle2);

  function Star(attrs) {
    _classCallCheck(this, Star);

    if (isWebWorker) {
      attrs.initialPoints = utils.flatten(utils.getStarPoints(attrs.centerX, attrs.centerY, attrs.radius, attrs.points, undefined, 0));
    }

    return _possibleConstructorReturn(this, _getPrototypeOf(Star).call(this, attrs));
  }

  _createClass(Star, [{
    key: "updatePointList",
    value: function updatePointList() {
      this.pointList = utils.getStarPoints(this.centerX, this.centerY, this.radius, this.points, this.roundness, this.rotateAngle);
    }
  }, {
    key: "toString",
    value: function toString() {
      var args = [this.centerX, this.centerY, this.radius, this.points];
      return "Star".concat(utils.roundedTupleString(args, 2));
    }
  }, {
    key: "roundness",
    get: function get() {
      var result = this.get('roundness');

      if (result === 'default') {
        return utils.getDefaultRoundness(this.points);
      }

      return result;
    },
    set: function set(v) {
      this.set({
        roundness: v
      });
      this.updatePointList();
      return v;
    }
  }]);

  return Star;
}(PolygonInCircle);

var Label =
/*#__PURE__*/
function (_Shape3) {
  "use strict";

  _inherits(Label, _Shape3);

  function Label(attrs) {
    var _this15;

    _classCallCheck(this, Label);

    _this15 = _possibleConstructorReturn(this, _getPrototypeOf(Label).call(this, attrs));

    if (attrs !== undefined) {
      _this15.setDims();
    }

    return _this15;
  }

  _createClass(Label, [{
    key: "getApproxPoints",
    value: function getApproxPoints() {
      return this.attrs.approxPoints;
    }
  }, {
    key: "doRotate",
    value: function doRotate(degrees, cx, cy) {
      var newCenter = utils.rotatePoint([this.centerX, this.centerY], toRadians(degrees), cx, cy);
      this.set({
        centerX: newCenter[0],
        centerY: newCenter[1]
      });
      this.setDims();
    }
  }, {
    key: "setDims",
    value: function setDims() {
      var font = getFont(this.font, this.bold, this.italic);
      var cx = this.attrs.centerX,
          cy = this.attrs.centerY,
          stringValue = utils.convertLabelValue(this.value).toString();
      var textPath = font.getPath(stringValue, 0, 0, this.size);
      var textBox = textPath.getBoundingBox();
      var unrotatedWidth = textBox.x2 - textBox.x1;
      var hasOuterSpaces = stringValue.length > 0 && (stringValue[0] == ' ' || stringValue[stringValue.length - 1] == ' ');

      if (hasOuterSpaces) {
        unrotatedWidth = Math.max(unrotatedWidth, font.getAdvanceWidth(stringValue, this.size));
      }

      var unrotatedHeight = -textBox.y1; // ignore text below the baseline

      var x0 = cx - unrotatedWidth / 2,
          y0 = cy - unrotatedHeight / 2;
      var x1 = cx + unrotatedWidth / 2,
          y1 = cy + unrotatedHeight / 2;
      var pts = [[x0, y0], [(x0 + x1) / 2, y0], [x1, y0], [x1, (y0 + y1) / 2], [x1, y1], [(x0 + x1) / 2, y1], [x0, y1], [x0, (y0 + y1) / 2]];
      var a = this.rotateAngle;
      if (a) pts = utils.rotatePoints(pts, toRadians(a), this.centerX, this.centerY);
      this.set({
        approxPoints: pts,
        xAdjust: hasOuterSpaces ? 0 : textBox.x1
      });
      var box = utils.getBoxDims(pts);
      this.set({
        width: box.width,
        height: box.height
      });
    }
  }, {
    key: "createBaseGradient",
    value: function createBaseGradient(gradient, ctx) {
      // The approxPoints of a Label are positioned correctly (this.rotateAngle has
      // already been applied to them). However, when we draw the text, we
      // rotate the canvas around the start,bottom point of the text. So, we have to make a
      // gradient that is positioned such that it will be in the correct place after
      // being rotated around start,bottom by this.rotateAngle.
      var start = gradient.start;

      var _this$getApproxPoints2 = _slicedToArray(this.getApproxPoints()[6], 2),
          targetX = _this$getApproxPoints2[0],
          targetY = _this$getApproxPoints2[1]; // target start,bottom of text


      if (start === 'center') {
        var cx = this.centerX;
        var cy = this.centerY;
        var r = distance(cx, cy, this.right, this.top);

        var _utils$rotatePoints3 = utils.rotatePoints([[cx, cy]], toRadians(-this.rotateAngle), targetX, targetY);

        var _utils$rotatePoints4 = _slicedToArray(_utils$rotatePoints3, 1);

        var _utils$rotatePoints4$ = _slicedToArray(_utils$rotatePoints4[0], 2);

        cx = _utils$rotatePoints4$[0];
        cy = _utils$rotatePoints4$[1];
        return ctx.createRadialGradient(cx, cy, 0, cx, cy, r);
      }

      var startToPointIndex = {
        'left-top': 0,
        top: 1,
        'right-top': 2,
        right: 3,
        'right-bottom': 4,
        bottom: 5,
        'left-bottom': 6,
        left: 7
      };

      if (startToPointIndex[start] === undefined) {
        pyThrow("Illegal gradient start (".concat(start, ")"));
      }

      var _this$getApproxPoints3 = _slicedToArray(this.getApproxPoints()[startToPointIndex[start]], 2),
          x0 = _this$getApproxPoints3[0],
          y0 = _this$getApproxPoints3[1];

      var endIndex = (startToPointIndex[start] + 4) % 8;

      var _this$getApproxPoints4 = _slicedToArray(this.getApproxPoints()[endIndex], 2),
          x1 = _this$getApproxPoints4[0],
          y1 = _this$getApproxPoints4[1];

      if (this.rotateAngle !== 0) {
        var _utils$rotatePoints5 = utils.rotatePoints([[x0, y0], [x1, y1]], toRadians(-this.rotateAngle), targetX, targetY);

        var _utils$rotatePoints6 = _slicedToArray(_utils$rotatePoints5, 2);

        var _utils$rotatePoints6$ = _slicedToArray(_utils$rotatePoints6[0], 2);

        x0 = _utils$rotatePoints6$[0];
        y0 = _utils$rotatePoints6$[1];

        var _utils$rotatePoints6$2 = _slicedToArray(_utils$rotatePoints6[1], 2);

        x1 = _utils$rotatePoints6$2[0];
        y1 = _utils$rotatePoints6$2[1];
      }

      return ctx.createLinearGradient(x0, y0, x1, y1);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "Label(".concat(this.value, ",").concat(this.centerX, ",").concat(this.centerY, ")");
    }
  }, {
    key: "area",
    get: function get() {
      return this.width * this.height;
    }
  }, {
    key: "width",
    get: function get() {
      return this.get('width');
    },
    set: function set(v) {
      pyThrow("Cannot set Label's width");
    }
  }, {
    key: "height",
    get: function get() {
      return this.get('height');
    },
    set: function set(v) {
      pyThrow("Cannot set Label's height");
    }
  }, {
    key: "centerX",
    get: function get() {
      return this.get('centerX');
    },
    set: function set(v) {
      this.set({
        centerX: v
      });
      this.setDims();
      return v;
    }
  }, {
    key: "centerY",
    get: function get() {
      return this.get('centerY');
    },
    set: function set(v) {
      this.set({
        centerY: v
      });
      this.setDims();
      return v;
    }
  }, {
    key: "value",
    get: function get() {
      return this.get('value');
    },
    set: function set(v) {
      this.set({
        value: v
      });
      this.setDims();
      return v;
    }
  }, {
    key: "font",
    get: function get() {
      return this.get('font');
    },
    set: function set(v) {
      this.set({
        font: v
      });
      this.setDims();
      return v;
    }
  }, {
    key: "size",
    get: function get() {
      return this.get('size');
    },
    set: function set(v) {
      this.set({
        size: v
      });
      this.setDims();
      return v;
    }
  }, {
    key: "bold",
    get: function get() {
      return this.get('bold');
    },
    set: function set(v) {
      this.set({
        bold: v
      });
      this.setDims();
      return v;
    }
  }, {
    key: "italic",
    get: function get() {
      return this.get('italic');
    },
    set: function set(v) {
      this.set({
        italic: v
      });
      this.setDims();
      return v;
    }
  }]);

  return Label;
}(Shape);

var objConstructors = {
  Arc: Arc,
  Circle: Circle,
  Gradient: Gradient,
  Group: Group,
  CMUImage: CMUImage,
  Label: Label,
  Line: Line,
  Oval: Oval,
  Polygon: Polygon,
  Rect: Rect,
  RegularPolygon: RegularPolygon,
  RGB: RGB,
  Star: Star
};

var _CmuGraphics =
/*#__PURE__*/
function () {
  "use strict";

  function _CmuGraphics(poster) {
    _classCallCheck(this, _CmuGraphics);

    this.drawings = {}; // canvas ID --> Drawing

    this.savedDrawings = {}; // "user"/"soln" --> Drawing

    this.setPoster(poster);
  }

  _createClass(_CmuGraphics, [{
    key: "setPoster",
    value: function setPoster(poster) {
      var _this16 = this;

      if (poster === undefined) pyThrow('Undefined poster in new _CmuGraphics');
      this.poster = poster;
      poster.addEventListener('message', function (e) {
        return _this16.onMsg(e.data);
      });
    }
  }, {
    key: "postMsg",
    value: function postMsg(msg) {
      this.poster.postMessage(Object.assign({}, msg, {
        canvasId: activeDrawing && activeDrawing.canvasId
      }));
    }
  }, {
    key: "activateDrawing",
    value: function activateDrawing(canvasId) {
      if (this.drawings[canvasId]) {
        return activeDrawing = this.drawings[canvasId];
      }

      return activeDrawing = this.drawings[canvasId] = new Drawing(canvasId);
    }
  }, {
    key: "onMsg",
    value: function onMsg() {
      pyThrow('You need to override onMsg!');
    }
  }]);

  return _CmuGraphics;
}();

function getCurrentFilename() {
  var error = new Error();
  var regex = new RegExp(/http.+cmu-graphics.*\.js/);
  return regex.exec(error.stack.trim())[0];
}

var CmuGraphicsView =
/*#__PURE__*/
function (_CmuGraphics2) {
  "use strict";

  _inherits(CmuGraphicsView, _CmuGraphics2);

  function CmuGraphicsView(options) {
    var _this17;

    _classCallCheck(this, CmuGraphicsView);

    if (isWebWorker) pyThrow('Cannot create CmuGraphicsView in webworker!');
    var worker = new Worker(getCurrentFilename());
    _this17 = _possibleConstructorReturn(this, _getPrototypeOf(CmuGraphicsView).call(this, worker));
    var receiver = document.getElementById('brython-target');
    _this17.EVENT_TO_HANDLER = {
      autograde: _this17.sendEventToWorker,
      autogradeDisplayError: _this17.sendEventToWorker,
      brythonDeactivateCanvas: _this17.onDeactivateCanvas,
      brythonFaster: _this17.sendEventToWorker,
      brythonPause: _this17.sendEventToWorker,
      brythonRunCode: _this17.sendEventToWorker,
      brythonShellInput: _this17.onShellInput,
      brythonSlower: _this17.sendEventToWorker,
      brythonStep: _this17.sendEventToWorker,
      brythonStop: _this17.onStopButton,
      brythonTextInput: _this17.onTextInput,
      brythonUnpause: _this17.sendEventToWorker,
      recordGif: _this17.onRecordGif,
      compileCode: _this17.sendEventToWorker
    };

    var fn = _this17.onEvent.bind(_assertThisInitialized(_this17));

    Object.keys(_this17.EVENT_TO_HANDLER).forEach(function (eventName) {
      receiver.addEventListener(eventName, function (e) {
        return fn(e);
      });
    });
    _this17.canvasListeners = {};
    document.addEventListener('keydown', _this17.onDocumentKey);
    document.addEventListener('keyup', _this17.onDocumentKey);
    _this17.options = options;
    _this17.backendUrl = options.backendUrl;

    _this17.postMsg({
      options: _this17.options,
      type: 'init'
    });

    return _this17;
  }

  _createClass(CmuGraphicsView, [{
    key: "onDocumentKey",
    value: function onDocumentKey(event) {
      var key = event.key;

      if (key !== undefined && key.length > 1) {
        key = key.toLowerCase();

        if (key === 'control') {
          self.isCtrlKeyDown = event.type === 'keydown';

          if (activeDrawing !== undefined) {
            activeDrawing.redrawAll(false);
          }
        }
      }
    }
  }, {
    key: "onEvent",
    value: function onEvent(event) {
      var _this18 = this;

      if (DEBUG_EVENTS) {
        p('onEvent', event.type, event.detail);
      }

      loadFonts();

      if (!allFontsLoaded && (event.type === 'brythonRunCode' || event.type === 'autograde' || event.type === 'recordGif')) {
        setTimeout(function () {
          return _this18.onEvent(event);
        }, 100);
        return;
      } // Focus the canvas if we are about to run some code that has key listeners


      if (event.type === 'brythonRunCode' && event.detail.snippets && event.detail.snippets.length > 0 && event.detail.snippets[0].code) {
        var code = event.detail.snippets[0].code;

        if (code.indexOf('onKey') >= 0) {
          var canvas = document.getElementById(event.detail.canvasId);

          if (canvas !== null && canvas !== undefined) {
            canvas.focus();
          }
        }
      }

      this.activateDrawing(event.detail.canvasId);
      this.ensureEventListeners(event.detail.canvasId);

      if (event.type === 'brythonRunCode') {
        if (event.detail.inspectorEnabled !== undefined) {
          activeDrawing.inspectorEnabled = event.detail.inspectorEnabled;
        }

        activeDrawing.alwaysShowInspector = event.detail.alwaysShowInspector;
        activeDrawing.inspector.reset();
      }

      this.EVENT_TO_HANDLER[event.type].apply(this, [event]);
    }
  }, {
    key: "onDeactivateCanvas",
    value: function onDeactivateCanvas(event) {
      var canvasId = event.detail.canvasId;
      delete this.drawings[canvasId];

      if (this.canvasListeners[canvasId] !== undefined) {
        var canvas = document.getElementById(canvasId);
        var listeners = this.canvasListeners[canvasId];

        if (canvas !== null && canvas !== undefined) {
          canvas.removeEventListener('mousemove', listeners.onMouse);
          canvas.removeEventListener('mousedown', listeners.onMouse);
          canvas.removeEventListener('mouseout', listeners.onMouse);
          canvas.removeEventListener('keydown', listeners.onKey);
          canvas.removeEventListener('keyup', listeners.onKey);
        }

        document.removeEventListener('mouseup', listeners.onMouse);
      }

      delete this.canvasListeners[canvasId];
    }
  }, {
    key: "onStopButton",
    value: function onStopButton(event) {
      var _this19 = this;

      this.sendEventToWorker(event);
      this.isWaitingForStop = true;
      setTimeout(function () {
        if (_this19.isWaitingForStop) {
          _this19.terminateWorker();

          _this19.isWaitingForStop = false;
        }
      }, 1000);
    }
  }, {
    key: "onTextInput",
    value: function onTextInput(event) {
      var canvas = document.getElementById(activeDrawing.canvasId);

      if (canvas) {
        setTimeout(function () {
          return canvas.focus();
        }, 0);
      }

      sendSyncData(event.detail.serverId, event.detail.text);
    }
  }, {
    key: "sendEventToWorker",
    value: function sendEventToWorker(event) {
      this.postMsg({
        type: event.type,
        detail: event.detail
      });
    }
  }, {
    key: "onShellInput",
    value: function onShellInput(event) {
      this.printToTextArea("--> ".concat(event.detail.input, "\n"));
      this.sendEventToWorker(event);
    }
  }, {
    key: "onRecordGif",
    value: function onRecordGif() {
      activeDrawing.startRecording(10);
    }
  }, {
    key: "ensureEventListeners",
    value: function ensureEventListeners(canvasId) {
      var _this20 = this;

      if (this.canvasListeners[canvasId] !== undefined) {
        return;
      }

      this.canvasListeners[canvasId] = {};

      this.canvasListeners[canvasId].onMouse = function (event) {
        var canvas = document.getElementById(canvasId);

        if (canvas === null || canvas === undefined) {
          return;
        }

        _this20.activateDrawing(canvasId);

        var type = event.type;
        var rect = canvas.getBoundingClientRect();
        var x = Math.max(0, Math.min(399, Math.round(event.clientX - rect.left)));
        var y = Math.max(0, Math.min(399, Math.round(event.clientY - rect.top)));

        if (type === 'mouseout') {
          activeDrawing.inspector.reset();
          activeDrawing.redrawAll(false);
          return;
        } else if (type === 'mousedown') {
          type = 'onMousePress';
          activeDrawing.isMouseDown = true;
        } else if (type === 'mousemove') {
          if (activeDrawing.isMouseDown) {
            type = 'onMouseDrag';
          } else {
            type = 'onMouseMove';
          }
        } else if (type === 'mouseup') {
          type = 'onMouseRelease';

          if (!activeDrawing.isMouseDown) {
            return;
          }

          activeDrawing.isMouseDown = false;
        }

        if (type === 'onMouseMove' || type === 'onMouseDrag') {
          activeDrawing.inspector.setMousePosition(x, y);

          if (activeDrawing.shouldDrawInspector()) {
            activeDrawing.redrawAll(false);
          }
        }

        _this20.postMsg({
          type: 'onMouse',
          detail: {
            subtype: type,
            canvasId: canvasId,
            x: x,
            y: y
          }
        });
      };

      var ignoredKeys = new Set(['shift', 'control', 'meta', 'alt', 'capslock', 'dead']);

      this.canvasListeners[canvasId].onKey = function (event) {
        var key = event.key,
            type = event.type;

        _this20.activateDrawing(canvasId);

        if (key.length > 1) {
          key = key.toLowerCase();

          if (ignoredKeys.has(key)) {
            return;
          }

          if (key.startsWith('arrow')) {
            key = key.substring(5); // up, down,...
          }
        }

        if (type === 'keydown' && key === ' ' && event.shiftKey) {
          _this20.onEvent(new CustomEvent(activeDrawing.appProperties.paused ? 'brythonUnpause' : 'brythonPause', {
            detail: {
              canvasId: canvasId
            }
          }));

          event.preventDefault();
          return;
        }

        if (key === ' ') {
          key = 'space';
        }

        if (type === 'keydown') {
          type = 'onKeyPress';
        } else if (type === 'keyup') {
          type = 'onKeyRelease';
        } // Prevent arrow keys and space bar from scrolling the page
        // Prevent tab key from changing focus


        if (key === 'tab' || key === 'up' || key === 'down' || key === 'right' || key === 'left' || key === 'space') {
          event.preventDefault();
        }

        if (!event.repeat) {
          _this20.postMsg({
            type: 'onKey',
            detail: {
              subtype: type,
              key: key,
              canvasId: canvasId
            }
          });
        }
      };

      var canvas = document.getElementById(canvasId);

      if (canvas === null || canvas === undefined) {
        return;
      }

      canvas.addEventListener('mousemove', this.canvasListeners[canvasId].onMouse);
      canvas.addEventListener('mousedown', this.canvasListeners[canvasId].onMouse);
      canvas.addEventListener('mouseout', this.canvasListeners[canvasId].onMouse);
      document.addEventListener('mouseup', this.canvasListeners[canvasId].onMouse);
      canvas.addEventListener('keydown', this.canvasListeners[canvasId].onKey);
      canvas.addEventListener('keyup', this.canvasListeners[canvasId].onKey);
    }
  }, {
    key: "terminateWorker",
    value: function terminateWorker() {
      this.poster.terminate();
      this.setPoster(new Worker(getCurrentFilename()));
      this.postMsg({
        options: this.options,
        type: 'init'
      });
    }
  }, {
    key: "onMsg",
    value: function onMsg(msg) {
      if (DEBUG_EVENTS) {
        p('onMsg', msg);
      }

      if (msg.canvasId !== undefined) {
        this.activateDrawing(msg.canvasId);
      }

      if (msg.cmd === 'printToTextArea') this.printToTextArea(msg.line);else if (msg.cmd === 'fullUpdate') activeDrawing.onFullUpdate(msg);else if (msg.cmd === 'deltaUpdate') activeDrawing.onDeltaUpdate(msg);else if (msg.cmd === 'sendEventToIDE') {
        if (msg.type === 'rollbarError') {
          window.Rollbar.error(msg.detail.message, msg.detail);
        } else if (msg.type === 'onStopButtonComplete') {
          this.isWaitingForStop = false;
        } else {
          this.dispatchEvent(new CustomEvent(msg.type, {
            detail: Object.assign({}, msg.detail, {
              id: msg.canvasId
            })
          }));
        }
      } else if (msg.cmd === 'loadImage') {
        var htmlImage = document.createElement('img');
        htmlImage.src = msg.url;
        htmlImage.addEventListener('load', function () {
          sendSyncData(msg.serverId, {
            url: msg.url,
            width: htmlImage.naturalWidth,
            height: htmlImage.naturalHeight
          });
        });
        htmlImage.addEventListener('error', function () {
          var xhr = new XMLHttpRequest();
          sendSyncData(msg.serverId, {});
        });
        activeDrawing.images[msg.url] = htmlImage;
      } else {
        pyThrow("Unknown message ".concat(msg.cmd));
      }
    }
  }, {
    key: "printToTextArea",
    value: function printToTextArea(line) {
      if (this.isWaitingForStop) {
        // If the user code may be running an infinite loop that involves printing
        // to the console, the browser may not terminate the web worker if we
        // do too much work in this function, so do nothing.
        return;
      }

      this.dispatchEvent(new CustomEvent('frameworkPrintLine', {
        detail: {
          id: activeDrawing.canvasId,
          line: line
        }
      }));
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {
      document.getElementById('application-target').dispatchEvent(event);
    }
  }]);

  return CmuGraphicsView;
}(_CmuGraphics);

var BACKGROUND_POINTS = [[0, 0], [400, 0], [0, 400], [400, 400]];
var BACKGROUND_DUMMY = {};

var Inspector =
/*#__PURE__*/
function () {
  "use strict";

  function Inspector(drawing) {
    _classCallCheck(this, Inspector);

    this.drawing = drawing;
    this.keyPoints = undefined;
    this.keyPointToShapes = undefined;
    this.bestX = this.bestY = this.mouseX = this.mouseY = undefined;
  }

  _createClass(Inspector, [{
    key: "getKeyPoints",
    value: function getKeyPoints(shape) {
      var x0 = shape.left,
          y0 = shape.top,
          x1 = shape.right,
          y1 = shape.bottom;
      var points = [[x0, y0], [x0, y1], [x1, y0], [x1, y1]];

      if (shape instanceof Arc) {
        points = [];
        points.push([shape.pointList[0][0], shape.pointList[0][1]]);
        points.push([shape.pointList[1][0], shape.pointList[1][1]]);
        var numPoints = shape.pointList.length;
        points.push([shape.pointList[numPoints - 1][0], shape.pointList[numPoints - 1][1]]);
      } else if (shape.rotateAngle % 360 !== 0 && (shape instanceof Oval || shape instanceof Rect) || shape instanceof Circle || shape instanceof Oval || shape instanceof Star || shape instanceof RegularPolygon || shape instanceof Label) {
        points = [[shape.centerX, shape.centerY]];
      } else if (shape instanceof Line) {
        points = [[shape.x1, shape.y1], [shape.x2, shape.y2]];
      } else if (shape instanceof Polygon) {
        points = [];

        for (var i = 0; i < shape.pointList.length; i++) {
          points.push([shape.pointList[i][0], shape.pointList[i][1]]);
        }
      }

      return points.map(function (pt) {
        return [Math.round(pt[0]), Math.round(pt[1])];
      });
    }
  }, {
    key: "getKeyPointKey",
    value: function getKeyPointKey(point) {
      return "".concat(point[0], "-").concat(point[1]);
    }
  }, {
    key: "ensureKeyPointToShapesMap",
    value: function ensureKeyPointToShapesMap() {
      var _this21 = this;

      if (this.keyPointToShapes !== undefined) {
        return;
      }

      this.keyPointToShapes = {};
      this.keyPoints = [];

      var addKeyPoint = function addKeyPoint(shape) {
        return function (keyPoint) {
          var key = _this21.getKeyPointKey(keyPoint);

          if (_this21.keyPointToShapes[key] === undefined) {
            _this21.keyPointToShapes[key] = [];

            _this21.keyPoints.push(keyPoint);
          }

          _this21.keyPointToShapes[key].push(shape);
        };
      };

      var processShape = function processShape(shape) {
        if (shape.isGroup) {
          shape._shapes.forEach(processShape);

          return;
        }

        if (shape.doNotInspect) {
          return;
        }

        _this21.getKeyPoints(shape).forEach(addKeyPoint(shape));
      };

      processShape(this.drawing.tlg);

      if (this.drawing.background) {
        BACKGROUND_POINTS.forEach(addKeyPoint(BACKGROUND_DUMMY));
      }
    }
  }, {
    key: "getKeyPointExtraShapeInfo",
    value: function getKeyPointExtraShapeInfo(kx, ky) {
      var _this22 = this;

      var key = this.getKeyPointKey([kx, ky]);
      var attrVals = {};

      var msgsAdd = function msgsAdd(attr, value) {
        if (attrVals[attr] === undefined) {
          attrVals[attr] = new Set();
        }

        if (utils.isNumber(value)) {
          value = utils.round2(value);
        } else if (value === true) {
          value = 'True';
        } else if (value === false) {
          value = 'False';
        }

        attrVals[attr].add(value);
      };

      if (this.keyPointToShapes[key] === undefined) {
        return '';
      }

      var gradientToString = function gradientToString(color) {
        var result = '';
        color.colors.forEach(function (value) {
          if (typeof value === 'string' || value instanceof String) {
            result += value;
            result += ', ';
          } else {
            result += value.attrs.strVal;
            result += ', ';
          }
        });
        return result.slice(0, -2);
      };

      this.keyPointToShapes[key].forEach(function (shape) {
        if (shape === BACKGROUND_DUMMY) {
          if (_this22.drawing.background instanceof Gradient) {
            msgsAdd('background', gradientToString(_this22.drawing.background));
          } else {
            msgsAdd('background', _this22.drawing.background);
          }

          return;
        }

        ['fill', 'border'].forEach(function (attr) {
          var color = shape[attr];

          if (color !== null) {
            if (color instanceof Gradient) {
              msgsAdd('gradient', gradientToString(color));
            } else {
              msgsAdd('color', color);
            }
          } else if (attr === 'fill' && !(shape instanceof CMUImage)) {
            msgsAdd('color', 'None');
          }
        });

        var checkAttrDefaults = function checkAttrDefaults(attrDefaults) {
          attrDefaults.forEach(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                attr = _ref2[0],
                defaultVal = _ref2[1];

            try {
              var val = shape[attr];

              if (val != null && val !== defaultVal) {
                msgsAdd(attr, val);
              }
            } catch (e) {}
          });
        };

        checkAttrDefaults([['opacity', 100], ['lineWidth', 2], ['radius', null], ['dashes', false]]);

        if (shape instanceof Label) {
          checkAttrDefaults([['font', 'Arial'], ['size', 12], ['style', 'normal'], ['bold', false], ['italic', false]]);
        }

        if (shape instanceof Line) {
          checkAttrDefaults([['arrowStart', false], ['arrowEnd', false]]);
        }

        if (!(shape instanceof Label) && !(shape instanceof Line)) {
          checkAttrDefaults([['borderWidth', 2]]);
        }

        if (shape instanceof Star) {
          checkAttrDefaults([['roundness', utils.getDefaultRoundness(shape.points)]]);
        }

        if (shape instanceof Star || shape instanceof RegularPolygon) {
          checkAttrDefaults([['points', null]]);
        }

        if (shape.rotateAngle % 360 !== 0) {
          msgsAdd('rotateAngle', shape.rotateAngle);
        }

        if (shape instanceof Arc) {
          checkAttrDefaults([['sweepAngle', null], ['startAngle', null]]);

          if (shape.ovalWidth !== null && shape.ovalHeight !== null) {
            msgsAdd('oval size', "(".concat(utils.round2(shape.ovalWidth), ", ").concat(utils.round2(shape.ovalHeight), ")"));
          }
        }

        if (shape instanceof Oval && !(shape instanceof Circle) && !(shape instanceof Arc) || shape.rotateAngle % 360 !== 0 && shape instanceof Rect) {
          var pts = shape.getApproxPoints();
          var unrotatedPoints = utils.rotatePoints(pts, toRadians(-shape.rotateAngle), shape.centerX, shape.centerY);
          var bounds = utils.getBoxDims(unrotatedPoints);
          msgsAdd('size', "(".concat(utils.round2(bounds.width), ", ").concat(utils.round2(bounds.height), ")"));
        }
      });
      var msgs = [this.getPointStr(kx, ky)];
      Object.keys(attrVals).forEach(function (attr) {
        attrVals[attr].forEach(function (val) {
          msgs.push("".concat(attr, ": ").concat(val));
        });
      });
      return msgs.join('\n');
    }
  }, {
    key: "getPointStr",
    value: function getPointStr(x, y) {
      return "(".concat(x, ", ").concat(y, ")");
    }
  }, {
    key: "nearestKeyPoint",
    value: function nearestKeyPoint(x, y) {
      var bestD = 100000000,
          bestX,
          bestY;
      this.keyPoints.forEach(function (pt) {
        var d = Math.pow(pt[0] - x, 2) + Math.pow(pt[1] - y, 2);

        if (d < bestD) {
          bestD = d;

          var _pt4 = _slicedToArray(pt, 2);

          bestX = _pt4[0];
          bestY = _pt4[1];
        }
      });
      return [bestX, bestY];
    }
  }, {
    key: "reset",
    value: function reset() {
      this.mouseX = this.mouseY = undefined;
      this.clearCache();
    }
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.keyPoints = this.keyPointToShapes = undefined;
      this.bestX = this.bestY = undefined;
    }
  }, {
    key: "setMousePosition",
    value: function setMousePosition(x, y) {
      this.mouseX = x;
      this.mouseY = y;
      this.bestX = this.bestY = undefined;
    }
  }, {
    key: "computeBestPoint",
    value: function computeBestPoint() {
      if (this.mouseX === undefined || this.mouseY === undefined) {
        return;
      }

      this.ensureKeyPointToShapesMap();

      var _this$nearestKeyPoint = this.nearestKeyPoint(this.mouseX, this.mouseY),
          _this$nearestKeyPoint2 = _slicedToArray(_this$nearestKeyPoint, 2),
          bestX = _this$nearestKeyPoint2[0],
          bestY = _this$nearestKeyPoint2[1];

      if (bestX === undefined || distance(this.mouseX, this.mouseY, bestX, bestY) > 300) {
        this.bestX = this.bestY = undefined;
      } else {
        this.bestX = bestX;
        this.bestY = bestY;
      }
    }
  }, {
    key: "draw",
    value: function draw(ctx) {
      var _this23 = this;

      this.computeBestPoint();

      if (this.bestX === undefined || this.bestY === undefined) {
        return;
      }

      this.keyPoints.forEach(function (pt) {
        ctx.strokeStyle = 'black';
        ctx.fillStyle = 'gold';
        ctx.beginPath();
        ctx.ellipse(pt[0], pt[1], 2, 2, 0, 0, 2 * Math.PI);
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
      });
      ctx.fillStyle = 'red';
      [5, 4, 3, 2, 1].forEach(function (r) {
        ctx.fillStyle = r % 2 === 1 ? 'red' : 'black';
        ctx.beginPath();
        ctx.ellipse(_this23.bestX, _this23.bestY, r, r, 0, 0, 2 * Math.PI);
        ctx.closePath();
        ctx.fill();
      });
      ctx.font = '12px Arial';
      var pointLabelText = this.getPointStr(this.bestX, this.bestY);
      var metrics = ctx.measureText(pointLabelText);
      var w = metrics.width;
      var h = 12;
      var margin = 10;
      var pointLabelCenterX = Math.min(400 - margin - w / 2, Math.max(margin + w / 2, this.bestX - 10));
      var pointLabelCenterY = Math.min(400 - margin - h / 2, Math.max(margin + h / 2, this.bestY - 10));
      ctx.globalAlpha = 0.5;
      ctx.fillStyle = 'white';
      ctx.fillRect(pointLabelCenterX - w / 2 - 2, pointLabelCenterY - h / 2 - 2, w + 4, h + 4);
      ctx.globalAlpha = 1;
      ctx.fillStyle = 'black';
      ctx.textAlign = 'center';
      ctx.fillText(pointLabelText, pointLabelCenterX, pointLabelCenterY + h / 2 - 2);
      var minTop = 10;

      if (pointLabelCenterX > 300 && pointLabelCenterY < 50) {
        minTop = pointLabelCenterY + margin;
      }

      var info = this.getKeyPointExtraShapeInfo(this.bestX, this.bestY);
      var infoLines = info.split(/\n/mg);
      ctx.fillStyle = 'white';
      ctx.globalAlpha = 0.5;
      var infoWidth = 0;
      infoLines.forEach(function (line) {
        infoWidth = Math.max(infoWidth, ctx.measureText(line).width);
      });
      var lineHeight = 12;
      var infoHeight = lineHeight * infoLines.length;
      ctx.fillRect(400 - 2 * margin - infoWidth, minTop, infoWidth + 2 * margin, infoHeight + margin);
      ctx.globalAlpha = 1;
      ctx.fillStyle = 'black';
      ctx.textAlign = 'center';
      var verticalOffset = 0;
      infoLines.forEach(function (line) {
        ctx.fillText(line, 400 - margin - infoWidth / 2, minTop + lineHeight + verticalOffset);
        verticalOffset += lineHeight;
      });
    }
  }]);

  return Inspector;
}();

function initCmuGraphics(options) {
  if (isWebWorker) pyThrow('Cannot call initCmuGraphics in webworker!');
  cmuGraphics = new CmuGraphicsView(options);
  window.animationFrameworkIsReady = true;
}

if (!isWebWorker) {
  window.initCmuGraphics = initCmuGraphics;
}

var CmuGraphicsWorker =
/*#__PURE__*/
function (_CmuGraphics3) {
  "use strict";

  _inherits(CmuGraphicsWorker, _CmuGraphics3);

  function CmuGraphicsWorker() {
    _classCallCheck(this, CmuGraphicsWorker);

    if (!isWebWorker) {
      pyThrow('Must create CmuGraphicsWorker in webworker!');
    }

    return _possibleConstructorReturn(this, _getPrototypeOf(CmuGraphicsWorker).call(this, self));
  }

  _createClass(CmuGraphicsWorker, [{
    key: "onMsg",
    value: function onMsg(msg) {
      var _this24 = this;

      if (DEBUG_EVENTS) {
        p('onMsg', msg);
      }

      if (!allFontsLoaded && (msg.type === 'brythonRunCode' || msg.type === 'autograde')) {
        loadFonts();
        setTimeout(function () {
          return _this24.onMsg(msg);
        }, 100);
        return;
      }

      if (msg.type === 'onFontLoaded') {
        fontMap[msg.fontName] = msg.font;
        return;
      }

      this.activateDrawing(msg.detail.canvasId);

      if (msg.type !== 'autogradeDisplayError' && this.ag !== undefined) {
        this.ag.stopped = true;
      }

      if (msg.type === 'brythonRunCode') {
        if (msg.detail.resetGlobals) {
          activeDrawing.tlg.clear();
        }
      }

      if (self.handleMessage === undefined) {
        p('Missing message', msg, 'because brython is not yet loaded');
      } else {
        if (msg.type === 'autogradeDisplayError') {
          if (this.ag !== undefined) {
            this.ag.autogradeDisplayError(msg.detail.index);
          }
        } else {
          self.handleMessage(msg);
        }
      }

      if (self.handleMessageLocal !== undefined) {
        self.handleMessageLocal(msg);
        return;
      }

      activeDrawing.update();
    }
  }, {
    key: "printToTextArea",
    value: function printToTextArea(line) {
      this.postMsg({
        cmd: 'printToTextArea',
        line: line
      });
    }
  }]);

  return CmuGraphicsWorker;
}(_CmuGraphics);

function initCmuGraphicsWebWorker(options) {
  // eslint-disable-next-line no-native-reassign
  window = 'non-undefined window object so opentype does not think we are in node.js';
  cmuGraphics = new CmuGraphicsWorker();
  cmuGraphics.backendUrl = options.backendUrl;
  cmuGraphics.localFramework = options.localFramework ? true : false;
  brython({
    debug: 1
  });

  self.jsNew = function (className, args) {
    return new objConstructors[className](args);
  };

  self.jsObject = function (attrValList) {
    // convert attrValList of [ attr0, val0, attr1, val1, ...] into object
    var result = {};

    for (var i = 0; i < attrValList.length; i += 2) {
      var attr = attrValList[i];
      var val = attrValList[i + 1];
      result[attr] = val;
    }

    return result;
  };

  self.jsApply = function (jsObj, method, args) {
    args = Array.from(args); // 1. replace brython shapes with JS shapes as appropriate

    for (var i = 0; i < args.length; i++) {
      if (args[i].__class__ !== undefined && $B.$getattr(args[i], '_shape', undefined) !== undefined) {
        args[i] = $B.$getattr(args[i], '_shape').js;
      }
    } // 2. make the call


    var result = jsObj[method].apply(jsObj, _toConsumableArray(args)); // 3. replace JS shapes with Brython shapes as appropriate and return

    if (result instanceof Shape) {
      if (result.brythonShape === undefined) {
        internalError('Need to wrap new JS shape in Brython shape');
      }

      result = result.brythonShape;
    }

    if (result === null || result === undefined) {
      result = $B.builtins.None;
    }

    return result;
  };

  self.jsGet = function (jsObj, attr) {
    if (!(attr in jsObj) || jsObj[attr] === undefined) {
      pyThrow("No such attribute: ".concat(attr));
    }

    var result = jsObj[attr];

    if (typeof result === 'function') {
      result = function result() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return self.jsApply(jsObj, attr, args);
      };
    } else if (result instanceof Gradient || result instanceof RGB) {
      // We need to make a copy of these objects because Brython modifies them
      // in place when they are returned here, and adds values to them
      // that make it so that they cannot be posted from the webworker to the view.
      // utils.deepCopy() doesn't work here because it doesn't retain the
      // object's prototype.
      return result.deepCopy();
    } else if (result !== null && result.__class__ === undefined && result.__brython__ === undefined) {
      // If the return value is not a Brython object, make a copy of it
      result = utils.deepCopy(result);
    }

    return result;
  };

  self.saveDrawing = function (name) {
    cmuGraphics.savedDrawings[name] = activeDrawing;
    return activeDrawing.tlg._shapes.length > 0;
  };

  self.clearDrawing = function () {
    if (activeDrawing !== undefined) {
      delete cmuGraphics.drawings[activeDrawing.canvasId];
      cmuGraphics.activateDrawing(activeDrawing.canvasId);
    }
  };

  self.bulkJsSet = function (argsList) {
    argsList.forEach(function (args) {
      if (args.length === 3) {
        self.jsSet(args[0], args[1], args[2]);
      } else {
        self.doUpdate();
      }
    });
  }; // Processing the args list sent from Python will
  // convert all jsObjects to real objects and create
  // them if they don't exist


  self.bulkJsCreate = function (argsList) {};

  self.jsGetPositionsAttrs = function (shape) {
    var positionAttrs = ['centerX', 'centerY', 'left', 'top', 'right', 'bottom', 'centroid', 'width', 'height', 'x1', 'x2', 'y1', 'y2', 'rotateAngle'];
    var output = {};
    output['type'] = 'pythonDict';

    for (var i = 0; i < positionAttrs.length; i++) {
      if (shape[positionAttrs[i]] !== undefined) {
        output[positionAttrs[i]] = shape[positionAttrs[i]];
      }
    }

    if (shape.getApproxPoints !== undefined) {
      output['pointList'] = shape.getApproxPoints();
    }

    return output;
  };

  self.jsSet = function (jsObj, attr, val) {
    if (shapeAttrs[attr]) {
      shapeAttrs[attr].typeCheckFn(jsObj, attr, val);
    }

    try {
      jsObj[attr] = val;
    } catch (e) {
      console.error(e);
      throw e;
    }

    return val;
  };

  self.jsSetBackground = function (val) {
    activeDrawing.setBackground(val);
  };

  self.jsGetBackground = function () {
    return activeDrawing.background;
  };

  self.jsGetAppGroup = function () {
    return activeDrawing.tlg.brythonShape;
  };

  self.jsGetJsAppGroup = function () {
    return activeDrawing.tlg;
  };

  self.jsGetAppProperty = function (propName) {
    return activeDrawing.appProperties[propName];
  };

  self.jsSetAppProperty = function (propName, value) {
    if (propName === 'maxShapeCount') {
      checkNumber('app.setMaxShapeCount(n)', 'n', value);
    }

    activeDrawing.appProperties[propName] = value;
  };

  self.jsGetTextInput = function (promptText) {
    self.doUpdate();
    var guid = getGuid();
    self.sendJSEvent('frameworkGetTextInput', {
      promptText: promptText,
      serverId: guid
    });
    var result = getSyncData(guid);

    if (result === undefined || result === null) {
      pyThrow('Failed to get text input');
    }

    return result;
  };

  self.activateDrawing = function (canvasId) {
    cmuGraphics.activateDrawing(canvasId);
  };

  self.jsInitShape = function (clsName, argNames, args, kwargs) {
    if (clsName === 'Image') {
      clsName = 'CMUImage';
    }

    checkArgCount(clsName, undefined, argNames, args);
    Object.keys(kwargs).forEach(function (attr) {
      if (shapeAttrs[attr] === undefined) {
        pyThrow("\"".concat(attr, "\" is not a valid shape constructor argument"));
      }
    });

    if (kwargs.align !== undefined && clsName === 'Polygon') {
      pyThrow('"align" is not a valid Polygon constructor argument');
    }

    var constructorArgs = {};

    for (var i = 0; i < argNames.length; i++) {
      constructorArgs[argNames[i]] = args[i];
    }

    var shape = self.jsNew(clsName, constructorArgs);

    try {
      var align = kwargs.align;
      delete kwargs.align;
      Object.keys(kwargs).forEach(function (attr) {
        self.jsSet(shape, attr, kwargs[attr]);
      }); // Set the align value as the last property in case any of the other properties
      // change the size of the shape.

      if (align !== undefined) {
        checkString(shape, 'align', align);
        var xPoint = constructorArgs.centerX === undefined ? constructorArgs.left : constructorArgs.centerX;
        var yPoint = constructorArgs.centerY === undefined ? constructorArgs.top : constructorArgs.centerY;
        shape.doAlign(xPoint, yPoint, align);
      }
    } catch (e) {
      // Don't draw the shape if its initialization failed.
      activeDrawing.tlg.remove(shape);
      throw e;
    }

    return shape;
  };

  self.printToTextArea = function (line) {
    cmuGraphics.printToTextArea(line);
  };

  self.doUpdate = function () {
    activeDrawing.update();
  };

  self.sendJSEvent = function (type, detail) {
    cmuGraphics.postMsg({
      cmd: 'sendEventToIDE',
      type: type,
      detail: detail
    });
  };

  if (cmuGraphics.localFramework) {
    // Connect to Web Socket
    self.ws = new WebSocket("ws://localhost:9001/");
    self.event_ws = new WebSocket("ws://localhost:9002/");

    self.create_UUID = function () {
      var dt = new Date().getTime();
      var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (dt + Math.random() * 16) % 16 | 0;
        dt = Math.floor(dt / 16);
        return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
      });
      return uuid;
    };

    self.referencedObjects = {};

    self.idFromReferencedObject = function (o) {
      var id = Object.keys(self.referencedObjects).find(function (key) {
        return self.referencedObjects[key] === o;
      });

      if (id === undefined) {
        id = self.create_UUID();
        self.referencedObjects[id] = o;
      }

      return id;
    };

    self.referencedObjectFromJsObject = function (jsObject) {
      var referencedObject = self.referencedObjects[jsObject.id];

      if (referencedObject === undefined) {
        var c = self[jsObject.constructorInfo[0]];
        referencedObject = c.apply(null, self.cleanArgs(jsObject.constructorInfo[1]));
        self.referencedObjects[jsObject.id] = referencedObject;
      }

      return referencedObject;
    };

    self.handleMessageLocal = function (msg) {
      self.event_ws.send(JSON.stringify({
        'type': 'handleMessage',
        'msg': msg
      }));
    };

    self.jsSetInterval = function (fn, delay) {
      return self.setInterval(function () {
        return self.handleMessageLocal({
          'type': 'onInterval',
          'detail': {
            'canvasId': 'userCanvas',
            'fn': fn
          }
        });
      }, delay);
    };

    self.jsClearInterval = function (i) {
      self.clearInterval(i);
    };

    self.cleanReturnValue = function (v) {
      if (v === null || v === undefined) {
        return {
          'type': 'null'
        };
      } else if (typeof v === 'number' || typeof v === 'boolean' || typeof v === 'string' || typeof v === 'object' && v['type'] === 'pythonObject') {
        return v;
      } else if (v instanceof Array) {
        var newArr = [];

        for (var i = 0; i < v.length; i++) {
          newArr.push(self.cleanReturnValue(v[i]));
        }

        return newArr;
      } else if (typeof v === 'object' && v['type'] === 'pythonDict') {
        var cleanObject = {};
        Object.keys(v).forEach(function (key) {
          if (key !== 'type') {
            cleanObject[key] = self.cleanReturnValue(v[key]);
          }
        });
        return cleanObject;
      } else if (typeof v === 'function') {
        var id = self.idFromReferencedObject(v);
        return {
          'type': 'functionCallback',
          'id': id
        };
      } else {
        var _id = self.idFromReferencedObject(v);

        return {
          'type': 'jsObject',
          'id': _id
        };
      }
    };

    self.cleanArgs = function (v) {
      if (v instanceof Array) {
        var newArgs = [];

        for (var i = 0; i < v.length; i++) {
          newArgs.push(self.cleanArgs(v[i]));
        }

        return newArgs;
      } else if (typeof v === 'object' && v !== null && v.type === 'jsObject') {
        return self.referencedObjectFromJsObject(v);
      } else if (typeof v === 'object' && v !== null) {
        var keys = Object.keys(v);
        var newObject = {};

        for (var _i5 = 0; _i5 < keys.length; _i5++) {
          var key = keys[_i5];
          newObject[key] = self.cleanArgs(v[key]);
        }

        return newObject;
      } else {
        return v;
      }
    };

    self.ws.onmessage = function (e) {
      // e.data contains received string.
      // console.log("onmessage: " + e.data);
      var msgData = JSON.parse(e.data);

      if (msgData.type === 'functionCall') {
        if (msgData.setUpdates !== undefined) {
          self.bulkJsSet.apply(null, self.cleanArgs(msgData.setUpdates));
        }

        var f = msgData.name ? self[msgData.name] : self.referencedObjects[msgData.id];
        var cleanArgs = self.cleanArgs(msgData.args);
        var returnValue = f.apply(null, cleanArgs);
        self.ws.send(JSON.stringify({
          type: 'functionReturn',
          returnValue: JSON.stringify(self.cleanReturnValue(returnValue)),
          returnId: msgData.returnId
        }));
      } else if (msgData.type === 'update') {
        self.doUpdate();
      } else if (msgData.type === 'bulkJsSet') {
        self.bulkJsSet.apply(null, self.cleanArgs(msgData.args));
      } else if (msgData.type === 'timerSet') {
        self.setTimeout(function () {
          return self.handleMessageLocal({
            'type': 'onInterval',
            'detail': {
              'canvasId': 'userCanvas',
              'fn': msgData.fn,
              'interval': msgData.interval
            }
          });
        }, msgData.delay);
      }
    };
  } // eslint-disable-next-line no-eval


  eval.call(undefined, self.__BRYTHON__.python_to_js('import cmu_graphics_bry'));
}

if (isWebWorker) {
  self.addEventListener('message', function (e) {
    if (e.data.type === 'init') {
      initCmuGraphicsWebWorker(e.data.options);
    }
  });
}

function reflectGradientStart(start) {
  var toggle = function toggle(s, a, b) {
    if (contains(s, a) && contains(s, b)) throw new Error('Illegal start format: ' + s);
    return contains(s, a) ? s.replace(a, b) : s.replace(b, a);
  };

  return toggle(toggle(start, 'top', 'bottom'), 'left', 'right');
}

function toColorObject(v) {
  if (!v) return 'None';

  if (typeof v === 'string' || v instanceof String) {
    return CSS3_COLORS_TO_RGB[v.toLowerCase()] || v;
  }

  if (v instanceof RGB || v instanceof Gradient) {
    return v;
  }

  throw new Error("toColorObject: unknown color type: ".concat(typeof v));
}

function RGBAlmostEqual(v1, v2) {
  var epsilon = 2;
  var colorPairs = [[v1.red, v2.red], [v1.green, v2.green], [v1.blue, v2.blue]];
  return colorPairs.every(function (pair) {
    return Math.abs(pair[0] - pair[1]) <= epsilon;
  });
}

function RGBListAlmostEqual(v1, v2) {
  if (v1.length !== v2.length) return false;

  for (var i = 0; i < v1.length; i++) {
    if (v1[i].constructor !== v2[i].constructor) return false;

    if (v1[i] instanceof RGB) {
      if (!RGBAlmostEqual(v1[i], v2[i])) return false;
    } else if (v1[i] instanceof Array) {
      if (!RGBListAlmostEqual(v1[i], v2[i])) return false;
    } else {
      throw new Error("RGBListAlmostEqual: invalid type: ".concat(v1[i]));
    }
  }

  return true;
}

function colorTest(v1, v2) {
  v1 = toColorObject(v1);
  v2 = toColorObject(v2);

  if (v1.constructor !== v2.constructor) {
    return 0;
  }

  if (v1 instanceof RGB) {
    return RGBAlmostEqual(v1, v2) ? 1 : 0;
  }

  if (v1 instanceof Gradient) {
    if (v1.start !== v2.start && v1.start !== reflectGradientStart(v2.start)) return 0;
    return RGBListAlmostEqual(v1.toRGBList(), v2.toRGBList()) ? 1 : 0;
  }

  return v1 === v2 ? 1 : 0;
}
